
USB_MP3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001699c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000954  08016b30  08016b30  00026b30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017484  08017484  00030238  2**0
                  CONTENTS
  4 .ARM          00000008  08017484  08017484  00027484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801748c  0801748c  00030238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801748c  0801748c  0002748c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017490  08017490  00027490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08017494  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030238  2**0
                  CONTENTS
 10 .bss          00002548  20000238  20000238  00030238  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002780  20002780  00030238  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
 13 .debug_info   000243dd  00000000  00000000  00030268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005914  00000000  00000000  00054645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001908  00000000  00000000  00059f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016d8  00000000  00000000  0005b868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028a16  00000000  00000000  0005cf40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026abd  00000000  00000000  00085956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d06bf  00000000  00000000  000ac413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017cad2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007768  00000000  00000000  0017cb24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08016b14 	.word	0x08016b14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	08016b14 	.word	0x08016b14

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <AUDIO_OUT_Init>:
 * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
 * @param  AudioFreq: Audio frequency used to play the audio stream.
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume,
                       uint32_t AudioFreq) {
 8000eac:	b590      	push	{r4, r7, lr}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	603a      	str	r2, [r7, #0]
 8000eb6:	80fb      	strh	r3, [r7, #6]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_OK;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	73fb      	strb	r3, [r7, #15]

  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
  AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	6839      	ldr	r1, [r7, #0]
 8000ec4:	481c      	ldr	r0, [pc, #112]	; (8000f38 <AUDIO_OUT_Init+0x8c>)
 8000ec6:	f000 f8f9 	bl	80010bc <AUDIO_OUT_ClockConfig>

  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S
  peripheral */
  hAudioOutI2s.Instance = I2S3;
 8000eca:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <AUDIO_OUT_Init+0x8c>)
 8000ecc:	4a1b      	ldr	r2, [pc, #108]	; (8000f3c <AUDIO_OUT_Init+0x90>)
 8000ece:	601a      	str	r2, [r3, #0]
  if (HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET) {
 8000ed0:	4819      	ldr	r0, [pc, #100]	; (8000f38 <AUDIO_OUT_Init+0x8c>)
 8000ed2:	f008 fbad 	bl	8009630 <HAL_I2S_GetState>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d103      	bne.n	8000ee4 <AUDIO_OUT_Init+0x38>
    /* Init the I2S MSP: this __weak function can be redefined by the
     * application*/
    AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 8000edc:	2100      	movs	r1, #0
 8000ede:	4816      	ldr	r0, [pc, #88]	; (8000f38 <AUDIO_OUT_Init+0x8c>)
 8000ee0:	f000 f946 	bl	8001170 <AUDIO_OUT_MspInit>

  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S
  peripheral */
  /* Configure the I2S peripheral */
  if (I2S3_Init(AudioFreq) != AUDIO_OK) {
 8000ee4:	6838      	ldr	r0, [r7, #0]
 8000ee6:	f000 fa0b 	bl	8001300 <I2S3_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <AUDIO_OUT_Init+0x48>
    ret = AUDIO_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == AUDIO_OK) {
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d10e      	bne.n	8000f18 <AUDIO_OUT_Init+0x6c>
    /* Retieve audio codec identifier */
    if (((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) ==
 8000efa:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <AUDIO_OUT_Init+0x94>)
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	2094      	movs	r0, #148	; 0x94
 8000f00:	4798      	blx	r3
 8000f02:	4603      	mov	r3, r0
 8000f04:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8000f08:	2be0      	cmp	r3, #224	; 0xe0
 8000f0a:	d103      	bne.n	8000f14 <AUDIO_OUT_Init+0x68>
        CS43L22_ID) {
      /* Initialize the audio driver structure */
      pAudioDrv = &cs43l22_drv;
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <AUDIO_OUT_Init+0x98>)
 8000f0e:	4a0c      	ldr	r2, [pc, #48]	; (8000f40 <AUDIO_OUT_Init+0x94>)
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	e001      	b.n	8000f18 <AUDIO_OUT_Init+0x6c>
    } else {
      ret = AUDIO_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	73fb      	strb	r3, [r7, #15]
    }
  }

  if (ret == AUDIO_OK) {
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d107      	bne.n	8000f2e <AUDIO_OUT_Init+0x82>
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <AUDIO_OUT_Init+0x98>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681c      	ldr	r4, [r3, #0]
 8000f24:	797a      	ldrb	r2, [r7, #5]
 8000f26:	88f9      	ldrh	r1, [r7, #6]
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	2094      	movs	r0, #148	; 0x94
 8000f2c:	47a0      	blx	r4
  }

  return ret;
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd90      	pop	{r4, r7, pc}
 8000f38:	20000258 	.word	0x20000258
 8000f3c:	40003c00 	.word	0x40003c00
 8000f40:	20000004 	.word	0x20000004
 8000f44:	20000254 	.word	0x20000254

08000f48 <AUDIO_OUT_Play>:
 * @brief  Starts playing audio stream from a data buffer for a determined size.
 * @param  pBuffer: Pointer to the buffer
 * @param  Size: Number of audio data BYTES.
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t AUDIO_OUT_Play(uint16_t *pBuffer, uint32_t Size) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if (pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0) {
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <AUDIO_OUT_Play+0x4c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	b292      	uxth	r2, r2
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	2094      	movs	r0, #148	; 0x94
 8000f60:	4798      	blx	r3
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <AUDIO_OUT_Play+0x24>
    return AUDIO_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e00f      	b.n	8000f8c <AUDIO_OUT_Play+0x44>
  } else {
    /* Update the Media layer and enable it for play */
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer,
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000f72:	d203      	bcs.n	8000f7c <AUDIO_OUT_Play+0x34>
                         DMA_MAX(Size / AUDIODATA_SIZE));
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	085b      	lsrs	r3, r3, #1
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer,
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	e001      	b.n	8000f80 <AUDIO_OUT_Play+0x38>
 8000f7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f80:	461a      	mov	r2, r3
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	4804      	ldr	r0, [pc, #16]	; (8000f98 <AUDIO_OUT_Play+0x50>)
 8000f86:	f007 ffd1 	bl	8008f2c <HAL_I2S_Transmit_DMA>

    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000f8a:	2300      	movs	r3, #0
  }
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000254 	.word	0x20000254
 8000f98:	20000258 	.word	0x20000258

08000f9c <AUDIO_OUT_Pause>:
 * WARNING: When calling BSP_AUDIO_OUT_Pause() function for pause, only the
 *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of
 * BSP_AUDIO_OUT_Play() function for resume could lead to unexpected behavior).
 * @retval  AUDIO_OK if correct communication, else wrong communication
 */
uint8_t AUDIO_OUT_Pause(void) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if (pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0) {
 8000fa0:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <AUDIO_OUT_Pause+0x24>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	691b      	ldr	r3, [r3, #16]
 8000fa6:	2094      	movs	r0, #148	; 0x94
 8000fa8:	4798      	blx	r3
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <AUDIO_OUT_Pause+0x18>
    return AUDIO_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e003      	b.n	8000fbc <AUDIO_OUT_Pause+0x20>
  } else {
    /* Call the Media layer pause function */
    HAL_I2S_DMAPause(&hAudioOutI2s);
 8000fb4:	4803      	ldr	r0, [pc, #12]	; (8000fc4 <AUDIO_OUT_Pause+0x28>)
 8000fb6:	f008 f861 	bl	800907c <HAL_I2S_DMAPause>

    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000fba:	2300      	movs	r3, #0
  }
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000254 	.word	0x20000254
 8000fc4:	20000258 	.word	0x20000258

08000fc8 <AUDIO_OUT_Resume>:
 * WARNING: When calling BSP_AUDIO_OUT_Pause() function for pause, only
 *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of
 * BSP_AUDIO_OUT_Play() function for resume could lead to unexpected behavior).
 * @retval  AUDIO_OK if correct communication, else wrong communication
 */
uint8_t AUDIO_OUT_Resume(void) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if (pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0) {
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <AUDIO_OUT_Resume+0x24>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	2094      	movs	r0, #148	; 0x94
 8000fd4:	4798      	blx	r3
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <AUDIO_OUT_Resume+0x18>
    return AUDIO_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e003      	b.n	8000fe8 <AUDIO_OUT_Resume+0x20>
  } else {
    /* Call the Media layer resume function */
    HAL_I2S_DMAResume(&hAudioOutI2s);
 8000fe0:	4803      	ldr	r0, [pc, #12]	; (8000ff0 <AUDIO_OUT_Resume+0x28>)
 8000fe2:	f008 f8ad 	bl	8009140 <HAL_I2S_DMAResume>

    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000fe6:	2300      	movs	r3, #0
  }
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000254 	.word	0x20000254
 8000ff0:	20000258 	.word	0x20000258

08000ff4 <AUDIO_OUT_Stop>:
 * @param  Option: could be one of the following parameters
 *           - CODEC_PDWN_HW: completely shut down the codec (physically).
 *                            Then need to reconfigure the Codec after power on.
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t AUDIO_OUT_Stop(uint32_t Option) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Call DMA Stop to disable DMA stream before stopping codec */
  HAL_I2S_DMAStop(&hAudioOutI2s);
 8000ffc:	480e      	ldr	r0, [pc, #56]	; (8001038 <AUDIO_OUT_Stop+0x44>)
 8000ffe:	f008 f933 	bl	8009268 <HAL_I2S_DMAStop>

  /* Call Audio Codec Stop function */
  if (pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0) {
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <AUDIO_OUT_Stop+0x48>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	6879      	ldr	r1, [r7, #4]
 800100a:	2094      	movs	r0, #148	; 0x94
 800100c:	4798      	blx	r3
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <AUDIO_OUT_Stop+0x24>
    return AUDIO_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e00b      	b.n	8001030 <AUDIO_OUT_Stop+0x3c>
  } else {
    if (Option == CODEC_PDWN_HW) {
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d107      	bne.n	800102e <AUDIO_OUT_Stop+0x3a>
      /* Wait at least 1ms */
      HAL_Delay(1);
 800101e:	2001      	movs	r0, #1
 8001020:	f002 fa14 	bl	800344c <HAL_Delay>

      /* Reset the pin */
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	2110      	movs	r1, #16
 8001028:	4805      	ldr	r0, [pc, #20]	; (8001040 <AUDIO_OUT_Stop+0x4c>)
 800102a:	f003 fa7d 	bl	8004528 <HAL_GPIO_WritePin>
    }

    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800102e:	2300      	movs	r3, #0
  }
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000258 	.word	0x20000258
 800103c:	20000254 	.word	0x20000254
 8001040:	40020c00 	.word	0x40020c00

08001044 <AUDIO_OUT_SetVolume>:
 * @brief  Controls the current audio volume level.
 * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for
 *         Mute and 100 for Max volume level).
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t AUDIO_OUT_SetVolume(uint8_t Volume) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if (pAudioDrv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0) {
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <AUDIO_OUT_SetVolume+0x2c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	6a1b      	ldr	r3, [r3, #32]
 8001054:	79fa      	ldrb	r2, [r7, #7]
 8001056:	4611      	mov	r1, r2
 8001058:	2094      	movs	r0, #148	; 0x94
 800105a:	4798      	blx	r3
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <AUDIO_OUT_SetVolume+0x22>
    return AUDIO_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <AUDIO_OUT_SetVolume+0x24>
  } else {
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8001066:	2300      	movs	r3, #0
  }
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000254 	.word	0x20000254

08001074 <HAL_I2S_TxCpltCallback>:

/**
 * @brief  Tx Transfer completed callbacks.
 * @param  hi2s: I2S handle
 */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if (hi2s->Instance == I2S3) {
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a04      	ldr	r2, [pc, #16]	; (8001094 <HAL_I2S_TxCpltCallback+0x20>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d101      	bne.n	800108a <HAL_I2S_TxCpltCallback+0x16>
    /* Call the user function which will manage directly transfer complete */
    AUDIO_OUT_TransferComplete_CallBack();
 8001086:	f002 f911 	bl	80032ac <AUDIO_OUT_TransferComplete_CallBack>
  }
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40003c00 	.word	0x40003c00

08001098 <HAL_I2S_TxHalfCpltCallback>:

/**
 * @brief  Tx Half Transfer completed callbacks.
 * @param  hi2s: I2S handle
 */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if (hi2s->Instance == I2S3) {
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <HAL_I2S_TxHalfCpltCallback+0x20>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d101      	bne.n	80010ae <HAL_I2S_TxHalfCpltCallback+0x16>
    /* Manage the remaining file size and new address offset: This function
       should be coded by user (its prototype is already declared in
       stm32f4_discovery_audio.h) */
    AUDIO_OUT_HalfTransfer_CallBack();
 80010aa:	f002 f913 	bl	80032d4 <AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40003c00 	.word	0x40003c00

080010bc <AUDIO_OUT_ClockConfig>:
 * BSP_AUDIO_OUT_SetFrequency() Being __weak it can be overwritten by the
 * application
 * @param  Params : pointer on additional configuration parameters, can be NULL.
 */
__weak void AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq,
                                  void *Params) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	; 0x28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 80010c8:	2300      	movs	r3, #0
 80010ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010ce:	23ff      	movs	r3, #255	; 0xff
 80010d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  for (index = 0; index < 8; index++) {
 80010d4:	2300      	movs	r3, #0
 80010d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010da:	e010      	b.n	80010fe <AUDIO_OUT_ClockConfig+0x42>
    if (I2SFreq[index] == AudioFreq) {
 80010dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010e0:	4a20      	ldr	r2, [pc, #128]	; (8001164 <AUDIO_OUT_ClockConfig+0xa8>)
 80010e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d103      	bne.n	80010f4 <AUDIO_OUT_ClockConfig+0x38>
      freqindex = index;
 80010ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  for (index = 0; index < 8; index++) {
 80010f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010f8:	3301      	adds	r3, #1
 80010fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001102:	2b07      	cmp	r3, #7
 8001104:	d9ea      	bls.n	80010dc <AUDIO_OUT_ClockConfig+0x20>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	4618      	mov	r0, r3
 800110c:	f009 fbe8 	bl	800a8e0 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0) {
 8001110:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001114:	f003 0307 	and.w	r3, r3, #7
 8001118:	2b00      	cmp	r3, #0
 800111a:	d113      	bne.n	8001144 <AUDIO_OUT_ClockConfig+0x88>
    /* I2S clock config
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800111c:	2301      	movs	r3, #1
 800111e:	617b      	str	r3, [r7, #20]
    // rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8001120:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001124:	4a10      	ldr	r2, [pc, #64]	; (8001168 <AUDIO_OUT_ClockConfig+0xac>)
 8001126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112a:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 800112c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001130:	4a0e      	ldr	r2, [pc, #56]	; (800116c <AUDIO_OUT_ClockConfig+0xb0>)
 8001132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001136:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4618      	mov	r0, r3
 800113e:	f009 faed 	bl	800a71c <HAL_RCCEx_PeriphCLKConfig>
    // rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 8001142:	e00b      	b.n	800115c <AUDIO_OUT_ClockConfig+0xa0>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001144:	2301      	movs	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8001148:	f44f 7381 	mov.w	r3, #258	; 0x102
 800114c:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 800114e:	2303      	movs	r3, #3
 8001150:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4618      	mov	r0, r3
 8001158:	f009 fae0 	bl	800a71c <HAL_RCCEx_PeriphCLKConfig>
}
 800115c:	bf00      	nop
 800115e:	3728      	adds	r7, #40	; 0x28
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	08016bd4 	.word	0x08016bd4
 8001168:	08016bf4 	.word	0x08016bf4
 800116c:	08016c14 	.word	0x08016c14

08001170 <AUDIO_OUT_MspInit>:
/**
 * @brief  AUDIO OUT I2S MSP Init.
 * @param  hi2s: might be required to set audio peripheral predivider if any.
 * @param  Params : pointer on additional configuration parameters, can be NULL.
 */
__weak void AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b08c      	sub	sp, #48	; 0x30
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sTx;
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable I2S3 clock */
  I2S3_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
 800117e:	4b56      	ldr	r3, [pc, #344]	; (80012d8 <AUDIO_OUT_MspInit+0x168>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	4a55      	ldr	r2, [pc, #340]	; (80012d8 <AUDIO_OUT_MspInit+0x168>)
 8001184:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001188:	6413      	str	r3, [r2, #64]	; 0x40
 800118a:	4b53      	ldr	r3, [pc, #332]	; (80012d8 <AUDIO_OUT_MspInit+0x168>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001192:	61bb      	str	r3, [r7, #24]
 8001194:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/
  /* Enable I2S GPIO clocks */
  I2S3_SCK_SD_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
 800119a:	4b4f      	ldr	r3, [pc, #316]	; (80012d8 <AUDIO_OUT_MspInit+0x168>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a4e      	ldr	r2, [pc, #312]	; (80012d8 <AUDIO_OUT_MspInit+0x168>)
 80011a0:	f043 0304 	orr.w	r3, r3, #4
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b4c      	ldr	r3, [pc, #304]	; (80012d8 <AUDIO_OUT_MspInit+0x168>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	697b      	ldr	r3, [r7, #20]
  I2S3_WS_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	4b48      	ldr	r3, [pc, #288]	; (80012d8 <AUDIO_OUT_MspInit+0x168>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a47      	ldr	r2, [pc, #284]	; (80012d8 <AUDIO_OUT_MspInit+0x168>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b45      	ldr	r3, [pc, #276]	; (80012d8 <AUDIO_OUT_MspInit+0x168>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]

  /* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
  GPIO_InitStruct.Pin = I2S3_SCK_PIN | I2S3_SD_PIN;
 80011ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80011dc:	2302      	movs	r3, #2
 80011de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = I2S3_SCK_SD_WS_AF;
 80011e0:	2306      	movs	r3, #6
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4619      	mov	r1, r3
 80011ea:	483c      	ldr	r0, [pc, #240]	; (80012dc <AUDIO_OUT_MspInit+0x16c>)
 80011ec:	f002 ff04 	bl	8003ff8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = I2S3_WS_PIN;
 80011f0:	2310      	movs	r3, #16
 80011f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct);
 80011f4:	f107 031c 	add.w	r3, r7, #28
 80011f8:	4619      	mov	r1, r3
 80011fa:	4839      	ldr	r0, [pc, #228]	; (80012e0 <AUDIO_OUT_MspInit+0x170>)
 80011fc:	f002 fefc 	bl	8003ff8 <HAL_GPIO_Init>

  /* I2S3 pins configuration: MCK pin */
  I2S3_MCK_CLK_ENABLE();
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	4b34      	ldr	r3, [pc, #208]	; (80012d8 <AUDIO_OUT_MspInit+0x168>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	4a33      	ldr	r2, [pc, #204]	; (80012d8 <AUDIO_OUT_MspInit+0x168>)
 800120a:	f043 0304 	orr.w	r3, r3, #4
 800120e:	6313      	str	r3, [r2, #48]	; 0x30
 8001210:	4b31      	ldr	r3, [pc, #196]	; (80012d8 <AUDIO_OUT_MspInit+0x168>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	f003 0304 	and.w	r3, r3, #4
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin = I2S3_MCK_PIN;
 800121c:	2380      	movs	r3, #128	; 0x80
 800121e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);
 8001220:	f107 031c 	add.w	r3, r7, #28
 8001224:	4619      	mov	r1, r3
 8001226:	482d      	ldr	r0, [pc, #180]	; (80012dc <AUDIO_OUT_MspInit+0x16c>)
 8001228:	f002 fee6 	bl	8003ff8 <HAL_GPIO_Init>

  /* Enable the I2S DMA clock */
  I2S3_DMAx_CLK_ENABLE();
 800122c:	2300      	movs	r3, #0
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	4b29      	ldr	r3, [pc, #164]	; (80012d8 <AUDIO_OUT_MspInit+0x168>)
 8001232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001234:	4a28      	ldr	r2, [pc, #160]	; (80012d8 <AUDIO_OUT_MspInit+0x168>)
 8001236:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800123a:	6313      	str	r3, [r2, #48]	; 0x30
 800123c:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <AUDIO_OUT_MspInit+0x168>)
 800123e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	68bb      	ldr	r3, [r7, #8]

  if (hi2s->Instance == I2S3) {
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a25      	ldr	r2, [pc, #148]	; (80012e4 <AUDIO_OUT_MspInit+0x174>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d136      	bne.n	80012c0 <AUDIO_OUT_MspInit+0x150>
    /* Configure the hdma_i2sTx handle parameters */
    hdma_i2sTx.Init.Channel = I2S3_DMAx_CHANNEL;
 8001252:	4b25      	ldr	r3, [pc, #148]	; (80012e8 <AUDIO_OUT_MspInit+0x178>)
 8001254:	2200      	movs	r2, #0
 8001256:	605a      	str	r2, [r3, #4]
    hdma_i2sTx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001258:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <AUDIO_OUT_MspInit+0x178>)
 800125a:	2240      	movs	r2, #64	; 0x40
 800125c:	609a      	str	r2, [r3, #8]
    hdma_i2sTx.Init.PeriphInc = DMA_PINC_DISABLE;
 800125e:	4b22      	ldr	r3, [pc, #136]	; (80012e8 <AUDIO_OUT_MspInit+0x178>)
 8001260:	2200      	movs	r2, #0
 8001262:	60da      	str	r2, [r3, #12]
    hdma_i2sTx.Init.MemInc = DMA_MINC_ENABLE;
 8001264:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <AUDIO_OUT_MspInit+0x178>)
 8001266:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800126a:	611a      	str	r2, [r3, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 800126c:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <AUDIO_OUT_MspInit+0x178>)
 800126e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001272:	615a      	str	r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment = I2S3_DMAx_MEM_DATA_SIZE;
 8001274:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <AUDIO_OUT_MspInit+0x178>)
 8001276:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800127a:	619a      	str	r2, [r3, #24]
    hdma_i2sTx.Init.Mode = DMA_NORMAL;
 800127c:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <AUDIO_OUT_MspInit+0x178>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]
    hdma_i2sTx.Init.Priority = DMA_PRIORITY_HIGH;
 8001282:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <AUDIO_OUT_MspInit+0x178>)
 8001284:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001288:	621a      	str	r2, [r3, #32]
    hdma_i2sTx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <AUDIO_OUT_MspInit+0x178>)
 800128c:	2204      	movs	r2, #4
 800128e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2sTx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001290:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <AUDIO_OUT_MspInit+0x178>)
 8001292:	2203      	movs	r2, #3
 8001294:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2sTx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001296:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <AUDIO_OUT_MspInit+0x178>)
 8001298:	2200      	movs	r2, #0
 800129a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2sTx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <AUDIO_OUT_MspInit+0x178>)
 800129e:	2200      	movs	r2, #0
 80012a0:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_i2sTx.Instance = I2S3_DMAx_STREAM;
 80012a2:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <AUDIO_OUT_MspInit+0x178>)
 80012a4:	4a11      	ldr	r2, [pc, #68]	; (80012ec <AUDIO_OUT_MspInit+0x17c>)
 80012a6:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a0f      	ldr	r2, [pc, #60]	; (80012e8 <AUDIO_OUT_MspInit+0x178>)
 80012ac:	639a      	str	r2, [r3, #56]	; 0x38
 80012ae:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <AUDIO_OUT_MspInit+0x178>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sTx);
 80012b4:	480c      	ldr	r0, [pc, #48]	; (80012e8 <AUDIO_OUT_MspInit+0x178>)
 80012b6:	f002 fadf 	bl	8003878 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sTx);
 80012ba:	480b      	ldr	r0, [pc, #44]	; (80012e8 <AUDIO_OUT_MspInit+0x178>)
 80012bc:	f002 fa2e 	bl	800371c <HAL_DMA_Init>
  }

  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80012c0:	2200      	movs	r2, #0
 80012c2:	210e      	movs	r1, #14
 80012c4:	202f      	movs	r0, #47	; 0x2f
 80012c6:	f002 f9e4 	bl	8003692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);
 80012ca:	202f      	movs	r0, #47	; 0x2f
 80012cc:	f002 f9fd 	bl	80036ca <HAL_NVIC_EnableIRQ>
}
 80012d0:	bf00      	nop
 80012d2:	3730      	adds	r7, #48	; 0x30
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020800 	.word	0x40020800
 80012e0:	40020000 	.word	0x40020000
 80012e4:	40003c00 	.word	0x40003c00
 80012e8:	200002a0 	.word	0x200002a0
 80012ec:	400260b8 	.word	0x400260b8

080012f0 <AUDIO_OUT_Error_CallBack>:
__weak void AUDIO_OUT_HalfTransfer_CallBack(void) {}

/**
 * @brief  Manages the DMA FIFO error event.
 */
__weak void AUDIO_OUT_Error_CallBack(void) {}
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <I2S3_Init>:

/**
 * @brief  Initializes the Audio Codec audio interface (I2S).
 * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral.
 */
static uint8_t I2S3_Init(uint32_t AudioFreq) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance = I2S3;
 8001308:	4b17      	ldr	r3, [pc, #92]	; (8001368 <I2S3_Init+0x68>)
 800130a:	4a18      	ldr	r2, [pc, #96]	; (800136c <I2S3_Init+0x6c>)
 800130c:	601a      	str	r2, [r3, #0]

  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 800130e:	4b16      	ldr	r3, [pc, #88]	; (8001368 <I2S3_Init+0x68>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	69da      	ldr	r2, [r3, #28]
 8001314:	4b14      	ldr	r3, [pc, #80]	; (8001368 <I2S3_Init+0x68>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800131c:	61da      	str	r2, [r3, #28]

  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq = AudioFreq;
 800131e:	4a12      	ldr	r2, [pc, #72]	; (8001368 <I2S3_Init+0x68>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6153      	str	r3, [r2, #20]
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 8001324:	4b10      	ldr	r3, [pc, #64]	; (8001368 <I2S3_Init+0x68>)
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL = I2S_CPOL_LOW;
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <I2S3_Init+0x68>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001330:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <I2S3_Init+0x68>)
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001336:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <I2S3_Init+0x68>)
 8001338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800133c:	611a      	str	r2, [r3, #16]
  hAudioOutI2s.Init.Mode = I2S_MODE_MASTER_TX;
 800133e:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <I2S3_Init+0x68>)
 8001340:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001344:	605a      	str	r2, [r3, #4]
  hAudioOutI2s.Init.Standard = I2S_STANDARD;
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <I2S3_Init+0x68>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S peripheral with the structure above */
  if (HAL_I2S_Init(&hAudioOutI2s) != HAL_OK) {
 800134c:	4806      	ldr	r0, [pc, #24]	; (8001368 <I2S3_Init+0x68>)
 800134e:	f007 fcad 	bl	8008cac <HAL_I2S_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <I2S3_Init+0x5c>
    return AUDIO_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e000      	b.n	800135e <I2S3_Init+0x5e>
  } else {
    return AUDIO_OK;
 800135c:	2300      	movs	r3, #0
  }
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000258 	.word	0x20000258
 800136c:	40003c00 	.word	0x40003c00

08001370 <HAL_I2S_ErrorCallback>:
/**
 * @brief  I2S error callbacks.
 * @param  hi2s: I2S handle
 */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function
     should be coded by user (its prototype is already declared in
     stm32f411e_discovery_audio.h) */
  if (hi2s->Instance == I2S3) {
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a04      	ldr	r2, [pc, #16]	; (8001390 <HAL_I2S_ErrorCallback+0x20>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d101      	bne.n	8001386 <HAL_I2S_ErrorCallback+0x16>
    AUDIO_OUT_Error_CallBack();
 8001382:	f7ff ffb5 	bl	80012f0 <AUDIO_OUT_Error_CallBack>
  }
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40003c00 	.word	0x40003c00

08001394 <I2Cx_Init>:
/******************************* I2C Routines *********************************/

/**
 * @brief  I2Cx Bus initialization.
 */
static void I2Cx_Init(void) {
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET) {
 8001398:	4814      	ldr	r0, [pc, #80]	; (80013ec <I2Cx_Init+0x58>)
 800139a:	f005 fe41 	bl	8007020 <HAL_I2C_GetState>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d121      	bne.n	80013e8 <I2Cx_Init+0x54>
    I2cHandle.Instance = AUDIO_I2Cx;
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <I2Cx_Init+0x58>)
 80013a6:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <I2Cx_Init+0x5c>)
 80013a8:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 = 0x43;
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <I2Cx_Init+0x58>)
 80013ac:	2243      	movs	r2, #67	; 0x43
 80013ae:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 80013b0:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <I2Cx_Init+0x58>)
 80013b2:	4a10      	ldr	r2, [pc, #64]	; (80013f4 <I2Cx_Init+0x60>)
 80013b4:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013b6:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <I2Cx_Init+0x58>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <I2Cx_Init+0x58>)
 80013be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013c2:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 80013c4:	4b09      	ldr	r3, [pc, #36]	; (80013ec <I2Cx_Init+0x58>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 80013ca:	4b08      	ldr	r3, [pc, #32]	; (80013ec <I2Cx_Init+0x58>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <I2Cx_Init+0x58>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 80013d6:	4b05      	ldr	r3, [pc, #20]	; (80013ec <I2Cx_Init+0x58>)
 80013d8:	2200      	movs	r2, #0
 80013da:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 80013dc:	4803      	ldr	r0, [pc, #12]	; (80013ec <I2Cx_Init+0x58>)
 80013de:	f000 f86b 	bl	80014b8 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 80013e2:	4802      	ldr	r0, [pc, #8]	; (80013ec <I2Cx_Init+0x58>)
 80013e4:	f004 fcdc 	bl	8005da0 <HAL_I2C_Init>
  }
}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000300 	.word	0x20000300
 80013f0:	40005400 	.word	0x40005400
 80013f4:	000186a0 	.word	0x000186a0

080013f8 <I2Cx_WriteData>:
 * @brief  Writes a value in a register of the device through BUS.
 * @param  Addr: Device address on BUS Bus.
 * @param  Reg: The target register address to write
 * @param  Value: The target register value to be written
 */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af04      	add	r7, sp, #16
 80013fe:	4603      	mov	r3, r0
 8001400:	80fb      	strh	r3, [r7, #6]
 8001402:	460b      	mov	r3, r1
 8001404:	717b      	strb	r3, [r7, #5]
 8001406:	4613      	mov	r3, r2
 8001408:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg,
 800140e:	797b      	ldrb	r3, [r7, #5]
 8001410:	b29a      	uxth	r2, r3
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <I2Cx_WriteData+0x48>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	88f9      	ldrh	r1, [r7, #6]
 8001418:	9302      	str	r3, [sp, #8]
 800141a:	2301      	movs	r3, #1
 800141c:	9301      	str	r3, [sp, #4]
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	2301      	movs	r3, #1
 8001424:	4807      	ldr	r0, [pc, #28]	; (8001444 <I2Cx_WriteData+0x4c>)
 8001426:	f004 ff2d 	bl	8006284 <HAL_I2C_Mem_Write>
 800142a:	4603      	mov	r3, r0
 800142c:	73fb      	strb	r3, [r7, #15]
                             I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);

  /* Check the communication status */
  if (status != HAL_OK) {
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <I2Cx_WriteData+0x40>
    /* Execute user timeout callback */
    I2Cx_Error();
 8001434:	f000 f834 	bl	80014a0 <I2Cx_Error>
  }
}
 8001438:	bf00      	nop
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000000 	.word	0x20000000
 8001444:	20000300 	.word	0x20000300

08001448 <I2Cx_ReadData>:
 * @brief  Reads a register of the device through BUS.
 * @param  Addr: Device address on BUS Bus.
 * @param  Reg: The target register address to write
 * @retval Data read at register address
 */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg) {
 8001448:	b580      	push	{r7, lr}
 800144a:	b088      	sub	sp, #32
 800144c:	af04      	add	r7, sp, #16
 800144e:	4603      	mov	r3, r0
 8001450:	460a      	mov	r2, r1
 8001452:	80fb      	strh	r3, [r7, #6]
 8001454:	4613      	mov	r3, r2
 8001456:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001458:	2300      	movs	r3, #0
 800145a:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	73bb      	strb	r3, [r7, #14]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value,
 8001460:	797b      	ldrb	r3, [r7, #5]
 8001462:	b29a      	uxth	r2, r3
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <I2Cx_ReadData+0x50>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	88f9      	ldrh	r1, [r7, #6]
 800146a:	9302      	str	r3, [sp, #8]
 800146c:	2301      	movs	r3, #1
 800146e:	9301      	str	r3, [sp, #4]
 8001470:	f107 030e 	add.w	r3, r7, #14
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	2301      	movs	r3, #1
 8001478:	4808      	ldr	r0, [pc, #32]	; (800149c <I2Cx_ReadData+0x54>)
 800147a:	f004 fffd 	bl	8006478 <HAL_I2C_Mem_Read>
 800147e:	4603      	mov	r3, r0
 8001480:	73fb      	strb	r3, [r7, #15]
                            1, I2cxTimeout);

  /* Check the communication status */
  if (status != HAL_OK) {
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <I2Cx_ReadData+0x44>
    /* Execute user timeout callback */
    I2Cx_Error();
 8001488:	f000 f80a 	bl	80014a0 <I2Cx_Error>
  }
  return value;
 800148c:	7bbb      	ldrb	r3, [r7, #14]
}
 800148e:	4618      	mov	r0, r3
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000000 	.word	0x20000000
 800149c:	20000300 	.word	0x20000300

080014a0 <I2Cx_Error>:

/**
 * @brief  I2Cx error treatment function.
 */
static void I2Cx_Error(void) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 80014a4:	4803      	ldr	r0, [pc, #12]	; (80014b4 <I2Cx_Error+0x14>)
 80014a6:	f004 fdbf 	bl	8006028 <HAL_I2C_DeInit>

  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 80014aa:	f7ff ff73 	bl	8001394 <I2Cx_Init>
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000300 	.word	0x20000300

080014b8 <I2Cx_MspInit>:

/**
 * @brief  I2Cx MSP Init.
 * @param  hi2c: I2C handle
 */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the I2C peripheral */
  AUDIO_I2Cx_CLOCK_ENABLE();
 80014c0:	2300      	movs	r3, #0
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	4b25      	ldr	r3, [pc, #148]	; (800155c <I2Cx_MspInit+0xa4>)
 80014c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c8:	4a24      	ldr	r2, [pc, #144]	; (800155c <I2Cx_MspInit+0xa4>)
 80014ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014ce:	6413      	str	r3, [r2, #64]	; 0x40
 80014d0:	4b22      	ldr	r3, [pc, #136]	; (800155c <I2Cx_MspInit+0xa4>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  AUDIO_I2Cx_GPIO_CLK_ENABLE();
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	4b1e      	ldr	r3, [pc, #120]	; (800155c <I2Cx_MspInit+0xa4>)
 80014e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e4:	4a1d      	ldr	r2, [pc, #116]	; (800155c <I2Cx_MspInit+0xa4>)
 80014e6:	f043 0302 	orr.w	r3, r3, #2
 80014ea:	6313      	str	r3, [r2, #48]	; 0x30
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <I2Cx_MspInit+0xa4>)
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = AUDIO_I2Cx_SDA_PIN | AUDIO_I2Cx_SCL_PIN;
 80014f8:	f44f 7310 	mov.w	r3, #576	; 0x240
 80014fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 80014fe:	2312      	movs	r3, #18
 8001500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001506:	2302      	movs	r3, #2
 8001508:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = AUDIO_I2Cx_AF;
 800150a:	2304      	movs	r3, #4
 800150c:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(AUDIO_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	4812      	ldr	r0, [pc, #72]	; (8001560 <I2Cx_MspInit+0xa8>)
 8001516:	f002 fd6f 	bl	8003ff8 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  AUDIO_I2Cx_FORCE_RESET();
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <I2Cx_MspInit+0xa4>)
 800151c:	6a1b      	ldr	r3, [r3, #32]
 800151e:	4a0f      	ldr	r2, [pc, #60]	; (800155c <I2Cx_MspInit+0xa4>)
 8001520:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001524:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  AUDIO_I2Cx_RELEASE_RESET();
 8001526:	4b0d      	ldr	r3, [pc, #52]	; (800155c <I2Cx_MspInit+0xa4>)
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	4a0c      	ldr	r2, [pc, #48]	; (800155c <I2Cx_MspInit+0xa4>)
 800152c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001530:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	210f      	movs	r1, #15
 8001536:	201f      	movs	r0, #31
 8001538:	f002 f8ab 	bl	8003692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_EV_IRQn);
 800153c:	201f      	movs	r0, #31
 800153e:	f002 f8c4 	bl	80036ca <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	210f      	movs	r1, #15
 8001546:	2020      	movs	r0, #32
 8001548:	f002 f8a3 	bl	8003692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_ER_IRQn);
 800154c:	2020      	movs	r0, #32
 800154e:	f002 f8bc 	bl	80036ca <HAL_NVIC_EnableIRQ>
}
 8001552:	bf00      	nop
 8001554:	3728      	adds	r7, #40	; 0x28
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40023800 	.word	0x40023800
 8001560:	40020400 	.word	0x40020400

08001564 <AUDIO_IO_Init>:
/********************************* LINK AUDIO *********************************/

/**
 * @brief  Initializes Audio low level.
 */
void AUDIO_IO_Init(void) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	603b      	str	r3, [r7, #0]
 800156e:	4b17      	ldr	r3, [pc, #92]	; (80015cc <AUDIO_IO_Init+0x68>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a16      	ldr	r2, [pc, #88]	; (80015cc <AUDIO_IO_Init+0x68>)
 8001574:	f043 0308 	orr.w	r3, r3, #8
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b14      	ldr	r3, [pc, #80]	; (80015cc <AUDIO_IO_Init+0x68>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	603b      	str	r3, [r7, #0]
 8001584:	683b      	ldr	r3, [r7, #0]

  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8001586:	2310      	movs	r3, #16
 8001588:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158a:	2301      	movs	r3, #1
 800158c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800158e:	2302      	movs	r3, #2
 8001590:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	4619      	mov	r1, r3
 800159a:	480d      	ldr	r0, [pc, #52]	; (80015d0 <AUDIO_IO_Init+0x6c>)
 800159c:	f002 fd2c 	bl	8003ff8 <HAL_GPIO_Init>

  I2Cx_Init();
 80015a0:	f7ff fef8 	bl	8001394 <I2Cx_Init>

  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 80015a4:	2200      	movs	r2, #0
 80015a6:	2110      	movs	r1, #16
 80015a8:	4809      	ldr	r0, [pc, #36]	; (80015d0 <AUDIO_IO_Init+0x6c>)
 80015aa:	f002 ffbd 	bl	8004528 <HAL_GPIO_WritePin>

  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5);
 80015ae:	2005      	movs	r0, #5
 80015b0:	f001 ff4c 	bl	800344c <HAL_Delay>

  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 80015b4:	2201      	movs	r2, #1
 80015b6:	2110      	movs	r1, #16
 80015b8:	4805      	ldr	r0, [pc, #20]	; (80015d0 <AUDIO_IO_Init+0x6c>)
 80015ba:	f002 ffb5 	bl	8004528 <HAL_GPIO_WritePin>

  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5);
 80015be:	2005      	movs	r0, #5
 80015c0:	f001 ff44 	bl	800344c <HAL_Delay>
}
 80015c4:	bf00      	nop
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020c00 	.word	0x40020c00

080015d4 <AUDIO_IO_DeInit>:

/**
 * @brief  DeInitializes Audio low level.
 */
void AUDIO_IO_DeInit(void) {}
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <AUDIO_IO_Write>:
 * @brief  Writes a single data.
 * @param  Addr: I2C address
 * @param  Reg: Reg address
 * @param  Value: Data to be written
 */
void AUDIO_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value) {
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	4603      	mov	r3, r0
 80015ea:	71fb      	strb	r3, [r7, #7]
 80015ec:	460b      	mov	r3, r1
 80015ee:	71bb      	strb	r3, [r7, #6]
 80015f0:	4613      	mov	r3, r2
 80015f2:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	797a      	ldrb	r2, [r7, #5]
 80015fa:	79b9      	ldrb	r1, [r7, #6]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fefb 	bl	80013f8 <I2Cx_WriteData>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <AUDIO_IO_Read>:
 * @brief  Reads a single data.
 * @param  Addr: I2C address
 * @param  Reg: Reg address
 * @retval Data to be read
 */
uint8_t AUDIO_IO_Read(uint8_t Addr, uint8_t Reg) {
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	4603      	mov	r3, r0
 8001612:	460a      	mov	r2, r1
 8001614:	71fb      	strb	r3, [r7, #7]
 8001616:	4613      	mov	r3, r2
 8001618:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	b29b      	uxth	r3, r3
 800161e:	79ba      	ldrb	r2, [r7, #6]
 8001620:	4611      	mov	r1, r2
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff ff10 	bl	8001448 <I2Cx_ReadData>
 8001628:	4603      	mov	r3, r0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <AUDIO_StorageParse>:
UINT br, bw;      // File read/write count

USBH_HandleTypeDef hUSBHost;
uint16_t NumObs = 0;

FRESULT AUDIO_StorageParse(void) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b0d6      	sub	sp, #344	; 0x158
 8001638:	af00      	add	r7, sp, #0
  FRESULT res = FR_OK;
 800163a:	2300      	movs	r3, #0
 800163c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  FILINFO fno;
  DIR dir;
  char *fn;

  res = f_opendir(&dir, USBHPath);
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	4945      	ldr	r1, [pc, #276]	; (8001758 <AUDIO_StorageParse+0x124>)
 8001644:	4618      	mov	r0, r3
 8001646:	f011 fdef 	bl	8013228 <f_opendir>
 800164a:	4603      	mov	r3, r0
 800164c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  FileList.ptr = 0;
 8001650:	4b42      	ldr	r3, [pc, #264]	; (800175c <AUDIO_StorageParse+0x128>)
 8001652:	2200      	movs	r2, #0
 8001654:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8

  if (res == FR_OK) {
 8001658:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 800165c:	2b00      	cmp	r3, #0
 800165e:	d16b      	bne.n	8001738 <AUDIO_StorageParse+0x104>
    while (Appli_state == APPLICATION_READY) {
 8001660:	e066      	b.n	8001730 <AUDIO_StorageParse+0xfc>
      res = f_readdir(&dir, &fno);
 8001662:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	4611      	mov	r1, r2
 800166a:	4618      	mov	r0, r3
 800166c:	f011 fe75 	bl	801335a <f_readdir>
 8001670:	4603      	mov	r3, r0
 8001672:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
      if (res != FR_OK || fno.fname[0] == 0) {
 8001676:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 800167a:	2b00      	cmp	r3, #0
 800167c:	d15c      	bne.n	8001738 <AUDIO_StorageParse+0x104>
 800167e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001682:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001686:	7d9b      	ldrb	r3, [r3, #22]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d055      	beq.n	8001738 <AUDIO_StorageParse+0x104>
        break;
      }
      if (fno.fname[0] == '.') {
 800168c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001690:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001694:	7d9b      	ldrb	r3, [r3, #22]
 8001696:	2b2e      	cmp	r3, #46	; 0x2e
 8001698:	d100      	bne.n	800169c <AUDIO_StorageParse+0x68>
        continue;
 800169a:	e049      	b.n	8001730 <AUDIO_StorageParse+0xfc>
      }

      fn = fno.fname;
 800169c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016a0:	3316      	adds	r3, #22
 80016a2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

      if (FileList.ptr < FILEMGR_LIST_DEPDTH) {
 80016a6:	4b2d      	ldr	r3, [pc, #180]	; (800175c <AUDIO_StorageParse+0x128>)
 80016a8:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 80016ac:	2b17      	cmp	r3, #23
 80016ae:	d83f      	bhi.n	8001730 <AUDIO_StorageParse+0xfc>
        if ((fno.fattrib & AM_DIR) == 0) {
 80016b0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80016b4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80016b8:	7a1b      	ldrb	r3, [r3, #8]
 80016ba:	f003 0310 	and.w	r3, r3, #16
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d136      	bne.n	8001730 <AUDIO_StorageParse+0xfc>
          if ((strstr(fn, "wav")) || (strstr(fn, "WAV"))) {
 80016c2:	4927      	ldr	r1, [pc, #156]	; (8001760 <AUDIO_StorageParse+0x12c>)
 80016c4:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 80016c8:	f013 f89b 	bl	8014802 <strstr>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d107      	bne.n	80016e2 <AUDIO_StorageParse+0xae>
 80016d2:	4924      	ldr	r1, [pc, #144]	; (8001764 <AUDIO_StorageParse+0x130>)
 80016d4:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 80016d8:	f013 f893 	bl	8014802 <strstr>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d026      	beq.n	8001730 <AUDIO_StorageParse+0xfc>
            strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn,
 80016e2:	4b1e      	ldr	r3, [pc, #120]	; (800175c <AUDIO_StorageParse+0x128>)
 80016e4:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 80016e8:	461a      	mov	r2, r3
 80016ea:	4613      	mov	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	4413      	add	r3, r2
 80016f4:	4a19      	ldr	r2, [pc, #100]	; (800175c <AUDIO_StorageParse+0x128>)
 80016f6:	4413      	add	r3, r2
 80016f8:	3301      	adds	r3, #1
 80016fa:	2228      	movs	r2, #40	; 0x28
 80016fc:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8001700:	4618      	mov	r0, r3
 8001702:	f013 f86b 	bl	80147dc <strncpy>
                    FILEMGR_FILE_NAME_SIZE);
            FileList.file[FileList.ptr].type = FILETYPE_FILE;
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <AUDIO_StorageParse+0x128>)
 8001708:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 800170c:	461a      	mov	r2, r3
 800170e:	4913      	ldr	r1, [pc, #76]	; (800175c <AUDIO_StorageParse+0x128>)
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	4413      	add	r3, r2
 800171a:	440b      	add	r3, r1
 800171c:	2201      	movs	r2, #1
 800171e:	701a      	strb	r2, [r3, #0]
            FileList.ptr++;
 8001720:	4b0e      	ldr	r3, [pc, #56]	; (800175c <AUDIO_StorageParse+0x128>)
 8001722:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8001726:	3301      	adds	r3, #1
 8001728:	b29a      	uxth	r2, r3
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <AUDIO_StorageParse+0x128>)
 800172c:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8
    while (Appli_state == APPLICATION_READY) {
 8001730:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <AUDIO_StorageParse+0x134>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b02      	cmp	r3, #2
 8001736:	d094      	beq.n	8001662 <AUDIO_StorageParse+0x2e>
          }
        }
      }
    }
  }
  NumObs = FileList.ptr;
 8001738:	4b08      	ldr	r3, [pc, #32]	; (800175c <AUDIO_StorageParse+0x128>)
 800173a:	f8b3 23d8 	ldrh.w	r2, [r3, #984]	; 0x3d8
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <AUDIO_StorageParse+0x138>)
 8001740:	801a      	strh	r2, [r3, #0]
  f_closedir(&dir);
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	4618      	mov	r0, r3
 8001746:	f011 fde2 	bl	801330e <f_closedir>
  return res;
 800174a:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
}
 800174e:	4618      	mov	r0, r3
 8001750:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20001c24 	.word	0x20001c24
 800175c:	200015e4 	.word	0x200015e4
 8001760:	08016b30 	.word	0x08016b30
 8001764:	08016b34 	.word	0x08016b34
 8001768:	20002468 	.word	0x20002468
 800176c:	20000356 	.word	0x20000356

08001770 <AUDIO_GetWavObjectNumber>:

uint16_t AUDIO_GetWavObjectNumber(void) {
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  if (AUDIO_StorageParse() == FR_OK) return NumObs;
 8001774:	f7ff ff5e 	bl	8001634 <AUDIO_StorageParse>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d102      	bne.n	8001784 <AUDIO_GetWavObjectNumber+0x14>
 800177e:	4b02      	ldr	r3, [pc, #8]	; (8001788 <AUDIO_GetWavObjectNumber+0x18>)
 8001780:	881b      	ldrh	r3, [r3, #0]
 8001782:	e7ff      	b.n	8001784 <AUDIO_GetWavObjectNumber+0x14>
}
 8001784:	4618      	mov	r0, r3
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000356 	.word	0x20000356

0800178c <Mount_USB>:

void Mount_USB(void) { fresult = f_mount(&USBHFatFS, USBHPath, 1); }
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
 8001790:	2201      	movs	r2, #1
 8001792:	4905      	ldr	r1, [pc, #20]	; (80017a8 <Mount_USB+0x1c>)
 8001794:	4805      	ldr	r0, [pc, #20]	; (80017ac <Mount_USB+0x20>)
 8001796:	f010 ff53 	bl	8012640 <f_mount>
 800179a:	4603      	mov	r3, r0
 800179c:	461a      	mov	r2, r3
 800179e:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <Mount_USB+0x24>)
 80017a0:	701a      	strb	r2, [r3, #0]
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20001c24 	.word	0x20001c24
 80017ac:	20001c28 	.word	0x20001c28
 80017b0:	20000354 	.word	0x20000354

080017b4 <cs43l22_Init>:
 *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
 * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice,
                      uint8_t Volume, uint32_t AudioFreq) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	4603      	mov	r3, r0
 80017be:	81fb      	strh	r3, [r7, #14]
 80017c0:	460b      	mov	r3, r1
 80017c2:	81bb      	strh	r3, [r7, #12]
 80017c4:	4613      	mov	r3, r2
 80017c6:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]

  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 80017cc:	f7ff feca 	bl	8001564 <AUDIO_IO_Init>

  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 80017d0:	89fb      	ldrh	r3, [r7, #14]
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2201      	movs	r2, #1
 80017d6:	2102      	movs	r1, #2
 80017d8:	4618      	mov	r0, r3
 80017da:	f000 fb01 	bl	8001de0 <CODEC_IO_Write>
 80017de:	4603      	mov	r3, r0
 80017e0:	461a      	mov	r2, r3
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	4413      	add	r3, r2
 80017e6:	617b      	str	r3, [r7, #20]

  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice) {
 80017e8:	89bb      	ldrh	r3, [r7, #12]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	2b03      	cmp	r3, #3
 80017ee:	d81b      	bhi.n	8001828 <cs43l22_Init+0x74>
 80017f0:	a201      	add	r2, pc, #4	; (adr r2, 80017f8 <cs43l22_Init+0x44>)
 80017f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f6:	bf00      	nop
 80017f8:	08001809 	.word	0x08001809
 80017fc:	08001811 	.word	0x08001811
 8001800:	08001819 	.word	0x08001819
 8001804:	08001821 	.word	0x08001821
    case OUTPUT_DEVICE_SPEAKER:
      OutputDev = 0xFA;
 8001808:	4b5b      	ldr	r3, [pc, #364]	; (8001978 <cs43l22_Init+0x1c4>)
 800180a:	22fa      	movs	r2, #250	; 0xfa
 800180c:	701a      	strb	r2, [r3, #0]
      break;
 800180e:	e00f      	b.n	8001830 <cs43l22_Init+0x7c>

    case OUTPUT_DEVICE_HEADPHONE:
      OutputDev = 0xAF;
 8001810:	4b59      	ldr	r3, [pc, #356]	; (8001978 <cs43l22_Init+0x1c4>)
 8001812:	22af      	movs	r2, #175	; 0xaf
 8001814:	701a      	strb	r2, [r3, #0]
      break;
 8001816:	e00b      	b.n	8001830 <cs43l22_Init+0x7c>

    case OUTPUT_DEVICE_BOTH:
      OutputDev = 0xAA;
 8001818:	4b57      	ldr	r3, [pc, #348]	; (8001978 <cs43l22_Init+0x1c4>)
 800181a:	22aa      	movs	r2, #170	; 0xaa
 800181c:	701a      	strb	r2, [r3, #0]
      break;
 800181e:	e007      	b.n	8001830 <cs43l22_Init+0x7c>

    case OUTPUT_DEVICE_AUTO:
      OutputDev = 0x05;
 8001820:	4b55      	ldr	r3, [pc, #340]	; (8001978 <cs43l22_Init+0x1c4>)
 8001822:	2205      	movs	r2, #5
 8001824:	701a      	strb	r2, [r3, #0]
      break;
 8001826:	e003      	b.n	8001830 <cs43l22_Init+0x7c>

    default:
      OutputDev = 0x05;
 8001828:	4b53      	ldr	r3, [pc, #332]	; (8001978 <cs43l22_Init+0x1c4>)
 800182a:	2205      	movs	r2, #5
 800182c:	701a      	strb	r2, [r3, #0]
      break;
 800182e:	bf00      	nop
  }

  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001830:	89fb      	ldrh	r3, [r7, #14]
 8001832:	b2db      	uxtb	r3, r3
 8001834:	4a50      	ldr	r2, [pc, #320]	; (8001978 <cs43l22_Init+0x1c4>)
 8001836:	7812      	ldrb	r2, [r2, #0]
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	2104      	movs	r1, #4
 800183c:	4618      	mov	r0, r3
 800183e:	f000 facf 	bl	8001de0 <CODEC_IO_Write>
 8001842:	4603      	mov	r3, r0
 8001844:	461a      	mov	r2, r3
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	4413      	add	r3, r2
 800184a:	617b      	str	r3, [r7, #20]

  /* Clock configuration: Auto detection */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 800184c:	89fb      	ldrh	r3, [r7, #14]
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2281      	movs	r2, #129	; 0x81
 8001852:	2105      	movs	r1, #5
 8001854:	4618      	mov	r0, r3
 8001856:	f000 fac3 	bl	8001de0 <CODEC_IO_Write>
 800185a:	4603      	mov	r3, r0
 800185c:	461a      	mov	r2, r3
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	4413      	add	r3, r2
 8001862:	617b      	str	r3, [r7, #20]

  /* Set the Slave Mode and the audio Standard */
  counter +=
      CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8001864:	89fb      	ldrh	r3, [r7, #14]
 8001866:	b2db      	uxtb	r3, r3
 8001868:	2204      	movs	r2, #4
 800186a:	2106      	movs	r1, #6
 800186c:	4618      	mov	r0, r3
 800186e:	f000 fab7 	bl	8001de0 <CODEC_IO_Write>
 8001872:	4603      	mov	r3, r0
 8001874:	461a      	mov	r2, r3
  counter +=
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	4413      	add	r3, r2
 800187a:	617b      	str	r3, [r7, #20]

  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 800187c:	7afa      	ldrb	r2, [r7, #11]
 800187e:	89fb      	ldrh	r3, [r7, #14]
 8001880:	4611      	mov	r1, r2
 8001882:	4618      	mov	r0, r3
 8001884:	f000 f964 	bl	8001b50 <cs43l22_SetVolume>
 8001888:	4602      	mov	r2, r0
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	4413      	add	r3, r2
 800188e:	617b      	str	r3, [r7, #20]

  /* If the Speaker is enabled, set the Mono mode and volume attenuation level
   */
  if (OutputDevice != OUTPUT_DEVICE_HEADPHONE) {
 8001890:	89bb      	ldrh	r3, [r7, #12]
 8001892:	2b02      	cmp	r3, #2
 8001894:	d023      	beq.n	80018de <cs43l22_Init+0x12a>
    /* Set the Speaker Mono mode */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8001896:	89fb      	ldrh	r3, [r7, #14]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2206      	movs	r2, #6
 800189c:	210f      	movs	r1, #15
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 fa9e 	bl	8001de0 <CODEC_IO_Write>
 80018a4:	4603      	mov	r3, r0
 80018a6:	461a      	mov	r2, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	4413      	add	r3, r2
 80018ac:	617b      	str	r3, [r7, #20]

    /* Set the Speaker attenuation level */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 80018ae:	89fb      	ldrh	r3, [r7, #14]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2200      	movs	r2, #0
 80018b4:	2124      	movs	r1, #36	; 0x24
 80018b6:	4618      	mov	r0, r3
 80018b8:	f000 fa92 	bl	8001de0 <CODEC_IO_Write>
 80018bc:	4603      	mov	r3, r0
 80018be:	461a      	mov	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	4413      	add	r3, r2
 80018c4:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 80018c6:	89fb      	ldrh	r3, [r7, #14]
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2200      	movs	r2, #0
 80018cc:	2125      	movs	r1, #37	; 0x25
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 fa86 	bl	8001de0 <CODEC_IO_Write>
 80018d4:	4603      	mov	r3, r0
 80018d6:	461a      	mov	r2, r3
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	4413      	add	r3, r2
 80018dc:	617b      	str	r3, [r7, #20]
  switching off the I2S peripheral MCLK clock (which is the operating clock for
  Codec). If this delay is not inserted, then the codec will not shut down
  properly and it results in high noise after shut down. */

  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 80018de:	89fb      	ldrh	r3, [r7, #14]
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2200      	movs	r2, #0
 80018e4:	210a      	movs	r1, #10
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 fa7a 	bl	8001de0 <CODEC_IO_Write>
 80018ec:	4603      	mov	r3, r0
 80018ee:	461a      	mov	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	4413      	add	r3, r2
 80018f4:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 80018f6:	89fb      	ldrh	r3, [r7, #14]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2204      	movs	r2, #4
 80018fc:	210e      	movs	r1, #14
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 fa6e 	bl	8001de0 <CODEC_IO_Write>
 8001904:	4603      	mov	r3, r0
 8001906:	461a      	mov	r2, r3
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	4413      	add	r3, r2
 800190c:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 800190e:	89fb      	ldrh	r3, [r7, #14]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2200      	movs	r2, #0
 8001914:	2127      	movs	r1, #39	; 0x27
 8001916:	4618      	mov	r0, r3
 8001918:	f000 fa62 	bl	8001de0 <CODEC_IO_Write>
 800191c:	4603      	mov	r3, r0
 800191e:	461a      	mov	r2, r3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	4413      	add	r3, r2
 8001924:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8001926:	89fb      	ldrh	r3, [r7, #14]
 8001928:	b2db      	uxtb	r3, r3
 800192a:	220f      	movs	r2, #15
 800192c:	211f      	movs	r1, #31
 800192e:	4618      	mov	r0, r3
 8001930:	f000 fa56 	bl	8001de0 <CODEC_IO_Write>
 8001934:	4603      	mov	r3, r0
 8001936:	461a      	mov	r2, r3
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	4413      	add	r3, r2
 800193c:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 800193e:	89fb      	ldrh	r3, [r7, #14]
 8001940:	b2db      	uxtb	r3, r3
 8001942:	220a      	movs	r2, #10
 8001944:	211a      	movs	r1, #26
 8001946:	4618      	mov	r0, r3
 8001948:	f000 fa4a 	bl	8001de0 <CODEC_IO_Write>
 800194c:	4603      	mov	r3, r0
 800194e:	461a      	mov	r2, r3
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	4413      	add	r3, r2
 8001954:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 8001956:	89fb      	ldrh	r3, [r7, #14]
 8001958:	b2db      	uxtb	r3, r3
 800195a:	220a      	movs	r2, #10
 800195c:	211b      	movs	r1, #27
 800195e:	4618      	mov	r0, r3
 8001960:	f000 fa3e 	bl	8001de0 <CODEC_IO_Write>
 8001964:	4603      	mov	r3, r0
 8001966:	461a      	mov	r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	4413      	add	r3, r2
 800196c:	617b      	str	r3, [r7, #20]

  /* Return communication control value */
  return counter;
 800196e:	697b      	ldr	r3, [r7, #20]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000358 	.word	0x20000358

0800197c <cs43l22_DeInit>:
/**
 * @brief  Deinitializes the audio codec.
 * @param  None
 * @retval  None
 */
void cs43l22_DeInit(void) {
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8001980:	f7ff fe28 	bl	80015d4 <AUDIO_IO_DeInit>
}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}

08001988 <cs43l22_ReadID>:
/**
 * @brief  Get the CS43L22 ID.
 * @param DeviceAddr: Device address on communication Bus.
 * @retval The CS43L22 ID
 */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8001992:	f7ff fde7 	bl	8001564 <AUDIO_IO_Init>

  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8001996:	88fb      	ldrh	r3, [r7, #6]
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2101      	movs	r1, #1
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fe34 	bl	800160a <AUDIO_IO_Read>
 80019a2:	4603      	mov	r3, r0
 80019a4:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
 80019a8:	f023 0307 	bic.w	r3, r3, #7
 80019ac:	73fb      	strb	r3, [r7, #15]

  return ((uint32_t)Value);
 80019ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <cs43l22_Play>:
 * @brief Start the audio Codec play feature.
 * @note For this codec no Play options are required.
 * @param DeviceAddr: Device address on communication Bus.
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	6039      	str	r1, [r7, #0]
 80019c2:	80fb      	strh	r3, [r7, #6]
 80019c4:	4613      	mov	r3, r2
 80019c6:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60fb      	str	r3, [r7, #12]

  if (Is_cs43l22_Stop == 1) {
 80019cc:	4b16      	ldr	r3, [pc, #88]	; (8001a28 <cs43l22_Play+0x70>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d123      	bne.n	8001a1c <cs43l22_Play+0x64>
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 80019d4:	88fb      	ldrh	r3, [r7, #6]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2206      	movs	r2, #6
 80019da:	210e      	movs	r1, #14
 80019dc:	4618      	mov	r0, r3
 80019de:	f000 f9ff 	bl	8001de0 <CODEC_IO_Write>
 80019e2:	4603      	mov	r3, r0
 80019e4:	461a      	mov	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	4413      	add	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]

    /* Enable Output device */
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80019ec:	88fb      	ldrh	r3, [r7, #6]
 80019ee:	2100      	movs	r1, #0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f000 f919 	bl	8001c28 <cs43l22_SetMute>
 80019f6:	4602      	mov	r2, r0
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4413      	add	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]

    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	229e      	movs	r2, #158	; 0x9e
 8001a04:	2102      	movs	r1, #2
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 f9ea 	bl	8001de0 <CODEC_IO_Write>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	461a      	mov	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4413      	add	r3, r2
 8001a14:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 8001a16:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <cs43l22_Play+0x70>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
  }

  /* Return communication control value */
  return counter;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000034 	.word	0x20000034

08001a2c <cs43l22_Pause>:
/**
 * @brief Pauses playing on the audio codec.
 * @param DeviceAddr: Device address on communication Bus.
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_Pause(uint16_t DeviceAddr) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]

  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001a3a:	88fb      	ldrh	r3, [r7, #6]
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f000 f8f2 	bl	8001c28 <cs43l22_SetMute>
 8001a44:	4602      	mov	r2, r0
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4413      	add	r3, r2
 8001a4a:	60fb      	str	r3, [r7, #12]

  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8001a4c:	88fb      	ldrh	r3, [r7, #6]
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2201      	movs	r2, #1
 8001a52:	2102      	movs	r1, #2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f000 f9c3 	bl	8001de0 <CODEC_IO_Write>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4413      	add	r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]

  return counter;
 8001a64:	68fb      	ldr	r3, [r7, #12]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <cs43l22_Resume>:
/**
 * @brief Resumes playing on the audio codec.
 * @param DeviceAddr: Device address on communication Bus.
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_Resume(uint16_t DeviceAddr) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001a82:	88fb      	ldrh	r3, [r7, #6]
 8001a84:	2100      	movs	r1, #0
 8001a86:	4618      	mov	r0, r3
 8001a88:	f000 f8ce 	bl	8001c28 <cs43l22_SetMute>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	4413      	add	r3, r2
 8001a92:	60fb      	str	r3, [r7, #12]

  for (index = 0x00; index < 0xFF; index++);
 8001a94:	2300      	movs	r3, #0
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	e002      	b.n	8001aa0 <cs43l22_Resume+0x30>
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	2bfe      	cmp	r3, #254	; 0xfe
 8001aa4:	d9f9      	bls.n	8001a9a <cs43l22_Resume+0x2a>

  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001aa6:	88fb      	ldrh	r3, [r7, #6]
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	4a0e      	ldr	r2, [pc, #56]	; (8001ae4 <cs43l22_Resume+0x74>)
 8001aac:	7812      	ldrb	r2, [r2, #0]
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	2104      	movs	r1, #4
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f000 f994 	bl	8001de0 <CODEC_IO_Write>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	461a      	mov	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4413      	add	r3, r2
 8001ac0:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);
 8001ac2:	88fb      	ldrh	r3, [r7, #6]
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	229e      	movs	r2, #158	; 0x9e
 8001ac8:	2102      	movs	r1, #2
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 f988 	bl	8001de0 <CODEC_IO_Write>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	60fb      	str	r3, [r7, #12]

  return counter;
 8001ada:	68fb      	ldr	r3, [r7, #12]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000358 	.word	0x20000358

08001ae8 <cs43l22_Stop>:
 *          - CODEC_PDWN_HW: Physically power down the codec. When resuming from
 * this mode, the codec is set to default configuration (user should
 * re-Initialize the codec in order to play again the audio stream).
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	6039      	str	r1, [r7, #0]
 8001af2:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]

  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001af8:	88fb      	ldrh	r3, [r7, #6]
 8001afa:	2101      	movs	r1, #1
 8001afc:	4618      	mov	r0, r3
 8001afe:	f000 f893 	bl	8001c28 <cs43l22_SetMute>
 8001b02:	4602      	mov	r2, r0
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4413      	add	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8001b0a:	88fb      	ldrh	r3, [r7, #6]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2204      	movs	r2, #4
 8001b10:	210e      	movs	r1, #14
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 f964 	bl	8001de0 <CODEC_IO_Write>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4413      	add	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]

  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 8001b22:	88fb      	ldrh	r3, [r7, #6]
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	229f      	movs	r2, #159	; 0x9f
 8001b28:	2102      	movs	r1, #2
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 f958 	bl	8001de0 <CODEC_IO_Write>
 8001b30:	4603      	mov	r3, r0
 8001b32:	461a      	mov	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4413      	add	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]

  Is_cs43l22_Stop = 1;
 8001b3a:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <cs43l22_Stop+0x64>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	701a      	strb	r2, [r3, #0]
  return counter;
 8001b40:	68fb      	ldr	r3, [r7, #12]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000034 	.word	0x20000034

08001b50 <cs43l22_SetVolume>:
 * @param Volume: a byte value from 0 to 255 (refer to codec registers
 *                description for more details).
 *
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	460a      	mov	r2, r1
 8001b5a:	80fb      	strh	r3, [r7, #6]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001b64:	797b      	ldrb	r3, [r7, #5]
 8001b66:	2b64      	cmp	r3, #100	; 0x64
 8001b68:	d80b      	bhi.n	8001b82 <cs43l22_SetVolume+0x32>
 8001b6a:	797a      	ldrb	r2, [r7, #5]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	021b      	lsls	r3, r3, #8
 8001b70:	1a9b      	subs	r3, r3, r2
 8001b72:	4a25      	ldr	r2, [pc, #148]	; (8001c08 <cs43l22_SetVolume+0xb8>)
 8001b74:	fb82 1203 	smull	r1, r2, r2, r3
 8001b78:	1152      	asrs	r2, r2, #5
 8001b7a:	17db      	asrs	r3, r3, #31
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	e000      	b.n	8001b84 <cs43l22_SetVolume+0x34>
 8001b82:	23ff      	movs	r3, #255	; 0xff
 8001b84:	72fb      	strb	r3, [r7, #11]

  if (convertedvol > 0xE6) {
 8001b86:	7afb      	ldrb	r3, [r7, #11]
 8001b88:	2be6      	cmp	r3, #230	; 0xe6
 8001b8a:	d91c      	bls.n	8001bc6 <cs43l22_SetVolume+0x76>
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL,
 8001b8c:	88fb      	ldrh	r3, [r7, #6]
 8001b8e:	b2d8      	uxtb	r0, r3
 8001b90:	7afb      	ldrb	r3, [r7, #11]
 8001b92:	3319      	adds	r3, #25
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	461a      	mov	r2, r3
 8001b98:	2120      	movs	r1, #32
 8001b9a:	f000 f921 	bl	8001de0 <CODEC_IO_Write>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	60fb      	str	r3, [r7, #12]
                              convertedvol - 0xE7);
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL,
 8001ba8:	88fb      	ldrh	r3, [r7, #6]
 8001baa:	b2d8      	uxtb	r0, r3
 8001bac:	7afb      	ldrb	r3, [r7, #11]
 8001bae:	3319      	adds	r3, #25
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	2121      	movs	r1, #33	; 0x21
 8001bb6:	f000 f913 	bl	8001de0 <CODEC_IO_Write>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	e01b      	b.n	8001bfe <cs43l22_SetVolume+0xae>
                              convertedvol - 0xE7);
  } else {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL,
 8001bc6:	88fb      	ldrh	r3, [r7, #6]
 8001bc8:	b2d8      	uxtb	r0, r3
 8001bca:	7afb      	ldrb	r3, [r7, #11]
 8001bcc:	3319      	adds	r3, #25
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	2120      	movs	r1, #32
 8001bd4:	f000 f904 	bl	8001de0 <CODEC_IO_Write>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	461a      	mov	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4413      	add	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]
                              convertedvol + 0x19);
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL,
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	b2d8      	uxtb	r0, r3
 8001be6:	7afb      	ldrb	r3, [r7, #11]
 8001be8:	3319      	adds	r3, #25
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	461a      	mov	r2, r3
 8001bee:	2121      	movs	r1, #33	; 0x21
 8001bf0:	f000 f8f6 	bl	8001de0 <CODEC_IO_Write>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
                              convertedvol + 0x19);
  }

  return counter;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	51eb851f 	.word	0x51eb851f

08001c0c <cs43l22_SetFrequency>:
 * @brief Sets new frequency.
 * @param DeviceAddr: Device address on communication Bus.
 * @param AudioFreq: Audio frequency used to play the audio stream.
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq) {
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	6039      	str	r1, [r7, #0]
 8001c16:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <cs43l22_SetMute>:
 * @param DeviceAddr: Device address on communication Bus.
 * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
 *             mute mode.
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	6039      	str	r1, [r7, #0]
 8001c32:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60fb      	str	r3, [r7, #12]

  /* Set the Mute mode */
  if (Cmd == AUDIO_MUTE_ON) {
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d124      	bne.n	8001c88 <cs43l22_SetMute+0x60>
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8001c3e:	88fb      	ldrh	r3, [r7, #6]
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	22ff      	movs	r2, #255	; 0xff
 8001c44:	2104      	movs	r1, #4
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 f8ca 	bl	8001de0 <CODEC_IO_Write>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	461a      	mov	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4413      	add	r3, r2
 8001c54:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 8001c56:	88fb      	ldrh	r3, [r7, #6]
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	2122      	movs	r1, #34	; 0x22
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 f8be 	bl	8001de0 <CODEC_IO_Write>
 8001c64:	4603      	mov	r3, r0
 8001c66:	461a      	mov	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 8001c6e:	88fb      	ldrh	r3, [r7, #6]
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2201      	movs	r2, #1
 8001c74:	2123      	movs	r1, #35	; 0x23
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 f8b2 	bl	8001de0 <CODEC_IO_Write>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	461a      	mov	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4413      	add	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	e025      	b.n	8001cd4 <cs43l22_SetMute+0xac>
  } else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 8001c88:	88fb      	ldrh	r3, [r7, #6]
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2122      	movs	r1, #34	; 0x22
 8001c90:	4618      	mov	r0, r3
 8001c92:	f000 f8a5 	bl	8001de0 <CODEC_IO_Write>
 8001c96:	4603      	mov	r3, r0
 8001c98:	461a      	mov	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 8001ca0:	88fb      	ldrh	r3, [r7, #6]
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2123      	movs	r1, #35	; 0x23
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f000 f899 	bl	8001de0 <CODEC_IO_Write>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001cb8:	88fb      	ldrh	r3, [r7, #6]
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	4a08      	ldr	r2, [pc, #32]	; (8001ce0 <cs43l22_SetMute+0xb8>)
 8001cbe:	7812      	ldrb	r2, [r2, #0]
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	2104      	movs	r1, #4
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f000 f88b 	bl	8001de0 <CODEC_IO_Write>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	461a      	mov	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000358 	.word	0x20000358

08001ce4 <cs43l22_SetOutputMode>:
 * @param DeviceAddr: Device address on communication Bus.
 * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
 *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	460a      	mov	r2, r1
 8001cee:	80fb      	strh	r3, [r7, #6]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60fb      	str	r3, [r7, #12]

  switch (Output) {
 8001cf8:	797b      	ldrb	r3, [r7, #5]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	2b03      	cmp	r3, #3
 8001cfe:	d84b      	bhi.n	8001d98 <cs43l22_SetOutputMode+0xb4>
 8001d00:	a201      	add	r2, pc, #4	; (adr r2, 8001d08 <cs43l22_SetOutputMode+0x24>)
 8001d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d06:	bf00      	nop
 8001d08:	08001d19 	.word	0x08001d19
 8001d0c:	08001d39 	.word	0x08001d39
 8001d10:	08001d59 	.word	0x08001d59
 8001d14:	08001d79 	.word	0x08001d79
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2,
 8001d18:	88fb      	ldrh	r3, [r7, #6]
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	22fa      	movs	r2, #250	; 0xfa
 8001d1e:	2104      	movs	r1, #4
 8001d20:	4618      	mov	r0, r3
 8001d22:	f000 f85d 	bl	8001de0 <CODEC_IO_Write>
 8001d26:	4603      	mov	r3, r0
 8001d28:	461a      	mov	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	60fb      	str	r3, [r7, #12]
                                0xFA); /* SPK always ON & HP always OFF */
      OutputDev = 0xFA;
 8001d30:	4b24      	ldr	r3, [pc, #144]	; (8001dc4 <cs43l22_SetOutputMode+0xe0>)
 8001d32:	22fa      	movs	r2, #250	; 0xfa
 8001d34:	701a      	strb	r2, [r3, #0]
      break;
 8001d36:	e03f      	b.n	8001db8 <cs43l22_SetOutputMode+0xd4>

    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2,
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	22af      	movs	r2, #175	; 0xaf
 8001d3e:	2104      	movs	r1, #4
 8001d40:	4618      	mov	r0, r3
 8001d42:	f000 f84d 	bl	8001de0 <CODEC_IO_Write>
 8001d46:	4603      	mov	r3, r0
 8001d48:	461a      	mov	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	60fb      	str	r3, [r7, #12]
                                0xAF); /* SPK always OFF & HP always ON */
      OutputDev = 0xAF;
 8001d50:	4b1c      	ldr	r3, [pc, #112]	; (8001dc4 <cs43l22_SetOutputMode+0xe0>)
 8001d52:	22af      	movs	r2, #175	; 0xaf
 8001d54:	701a      	strb	r2, [r3, #0]
      break;
 8001d56:	e02f      	b.n	8001db8 <cs43l22_SetOutputMode+0xd4>

    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2,
 8001d58:	88fb      	ldrh	r3, [r7, #6]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	22aa      	movs	r2, #170	; 0xaa
 8001d5e:	2104      	movs	r1, #4
 8001d60:	4618      	mov	r0, r3
 8001d62:	f000 f83d 	bl	8001de0 <CODEC_IO_Write>
 8001d66:	4603      	mov	r3, r0
 8001d68:	461a      	mov	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]
                                0xAA); /* SPK always ON & HP always ON */
      OutputDev = 0xAA;
 8001d70:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <cs43l22_SetOutputMode+0xe0>)
 8001d72:	22aa      	movs	r2, #170	; 0xaa
 8001d74:	701a      	strb	r2, [r3, #0]
      break;
 8001d76:	e01f      	b.n	8001db8 <cs43l22_SetOutputMode+0xd4>

    case OUTPUT_DEVICE_AUTO:
      counter +=
          CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2,
 8001d78:	88fb      	ldrh	r3, [r7, #6]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2205      	movs	r2, #5
 8001d7e:	2104      	movs	r1, #4
 8001d80:	4618      	mov	r0, r3
 8001d82:	f000 f82d 	bl	8001de0 <CODEC_IO_Write>
 8001d86:	4603      	mov	r3, r0
 8001d88:	461a      	mov	r2, r3
      counter +=
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	60fb      	str	r3, [r7, #12]
                         0x05); /* Detect the HP or the SPK automatically */
      OutputDev = 0x05;
 8001d90:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <cs43l22_SetOutputMode+0xe0>)
 8001d92:	2205      	movs	r2, #5
 8001d94:	701a      	strb	r2, [r3, #0]
      break;
 8001d96:	e00f      	b.n	8001db8 <cs43l22_SetOutputMode+0xd4>

    default:
      counter +=
          CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2,
 8001d98:	88fb      	ldrh	r3, [r7, #6]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2205      	movs	r2, #5
 8001d9e:	2104      	movs	r1, #4
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 f81d 	bl	8001de0 <CODEC_IO_Write>
 8001da6:	4603      	mov	r3, r0
 8001da8:	461a      	mov	r2, r3
      counter +=
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	4413      	add	r3, r2
 8001dae:	60fb      	str	r3, [r7, #12]
                         0x05); /* Detect the HP or the SPK automatically */
      OutputDev = 0x05;
 8001db0:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <cs43l22_SetOutputMode+0xe0>)
 8001db2:	2205      	movs	r2, #5
 8001db4:	701a      	strb	r2, [r3, #0]
      break;
 8001db6:	bf00      	nop
  }
  return counter;
 8001db8:	68fb      	ldr	r3, [r7, #12]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000358 	.word	0x20000358

08001dc8 <cs43l22_Reset>:
/**
 * @brief Resets cs43l22 registers.
 * @param DeviceAddr: Device address on communication Bus.
 * @retval 0 if correct communication, else wrong communication
 */
uint32_t cs43l22_Reset(uint16_t DeviceAddr) { return 0; }
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	80fb      	strh	r3, [r7, #6]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <CODEC_IO_Write>:
 * @param  Addr: I2C address
 * @param  Reg: Reg address
 * @param  Value: Data to be written
 * @retval None
 */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value) {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]
 8001dea:	460b      	mov	r3, r1
 8001dec:	71bb      	strb	r3, [r7, #6]
 8001dee:	4613      	mov	r3, r2
 8001df0:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]

  AUDIO_IO_Write(Addr, Reg, Value);
 8001df6:	797a      	ldrb	r2, [r7, #5]
 8001df8:	79b9      	ldrb	r1, [r7, #6]
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff fbf0 	bl	80015e2 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value) ? 0 : 1;
#endif /* VERIFY_WRITTENDATA */

  return result;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	b2db      	uxtb	r3, r3
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <lcd16x2_i2c_sendCommand>:
// static uint8_t LCD_I2C_SLAVE_ADDRESS=27;
#define LCD_I2C_SLAVE_ADDRESS_0 0x4E
#define LCD_I2C_SLAVE_ADDRESS_1 0x27

/* Private functions */
static void lcd16x2_i2c_sendCommand(uint8_t command) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af02      	add	r7, sp, #8
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command << 4));
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	011b      	lsls	r3, r3, #4
 8001e1e:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	f023 030f 	bic.w	r3, r3, #15
 8001e26:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] = {
 8001e28:	7bbb      	ldrb	r3, [r7, #14]
 8001e2a:	f043 030c 	orr.w	r3, r3, #12
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	723b      	strb	r3, [r7, #8]
 8001e32:	7bbb      	ldrb	r3, [r7, #14]
 8001e34:	f043 0308 	orr.w	r3, r3, #8
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	727b      	strb	r3, [r7, #9]
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
 8001e3e:	f043 030c 	orr.w	r3, r3, #12
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	72bb      	strb	r3, [r7, #10]
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	f043 0308 	orr.w	r3, r3, #8
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4,
 8001e50:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <lcd16x2_i2c_sendCommand+0x60>)
 8001e52:	6818      	ldr	r0, [r3, #0]
 8001e54:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <lcd16x2_i2c_sendCommand+0x64>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	b299      	uxth	r1, r3
 8001e5a:	f107 0208 	add.w	r2, r7, #8
 8001e5e:	23c8      	movs	r3, #200	; 0xc8
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	2304      	movs	r3, #4
 8001e64:	f004 f910 	bl	8006088 <HAL_I2C_Master_Transmit>
                          200);
}
 8001e68:	bf00      	nop
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	2000035c 	.word	0x2000035c
 8001e74:	20000360 	.word	0x20000360

08001e78 <lcd16x2_i2c_sendData>:

static void lcd16x2_i2c_sendData(uint8_t data) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af02      	add	r7, sp, #8
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data << 4));
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	011b      	lsls	r3, r3, #4
 8001e86:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	f023 030f 	bic.w	r3, r3, #15
 8001e8e:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] = {
 8001e90:	7bbb      	ldrb	r3, [r7, #14]
 8001e92:	f043 030d 	orr.w	r3, r3, #13
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	723b      	strb	r3, [r7, #8]
 8001e9a:	7bbb      	ldrb	r3, [r7, #14]
 8001e9c:	f043 0309 	orr.w	r3, r3, #9
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	727b      	strb	r3, [r7, #9]
 8001ea4:	7bfb      	ldrb	r3, [r7, #15]
 8001ea6:	f043 030d 	orr.w	r3, r3, #13
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	72bb      	strb	r3, [r7, #10]
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
 8001eb0:	f043 0309 	orr.w	r3, r3, #9
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4,
 8001eb8:	4b07      	ldr	r3, [pc, #28]	; (8001ed8 <lcd16x2_i2c_sendData+0x60>)
 8001eba:	6818      	ldr	r0, [r3, #0]
 8001ebc:	4b07      	ldr	r3, [pc, #28]	; (8001edc <lcd16x2_i2c_sendData+0x64>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	b299      	uxth	r1, r3
 8001ec2:	f107 0208 	add.w	r2, r7, #8
 8001ec6:	23c8      	movs	r3, #200	; 0xc8
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	2304      	movs	r3, #4
 8001ecc:	f004 f8dc 	bl	8006088 <HAL_I2C_Master_Transmit>
                          200);
}
 8001ed0:	bf00      	nop
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	2000035c 	.word	0x2000035c
 8001edc:	20000360 	.word	0x20000360

08001ee0 <lcd16x2_i2c_init>:

/**
 * @brief Initialise LCD16x2
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd16x2_i2c_init(I2C_HandleTypeDef* pI2cHandle) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 8001ee8:	2032      	movs	r0, #50	; 0x32
 8001eea:	f001 faaf 	bl	800344c <HAL_Delay>
  lcd16x2_i2cHandle = pI2cHandle;
 8001eee:	4a30      	ldr	r2, [pc, #192]	; (8001fb0 <lcd16x2_i2c_init+0xd0>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6013      	str	r3, [r2, #0]
  if (HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5,
 8001ef4:	4b2e      	ldr	r3, [pc, #184]	; (8001fb0 <lcd16x2_i2c_init+0xd0>)
 8001ef6:	6818      	ldr	r0, [r3, #0]
 8001ef8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001efc:	2205      	movs	r2, #5
 8001efe:	214e      	movs	r1, #78	; 0x4e
 8001f00:	f004 fce0 	bl	80068c4 <HAL_I2C_IsDeviceReady>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d010      	beq.n	8001f2c <lcd16x2_i2c_init+0x4c>
                            500) != HAL_OK) {
    if (HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5,
 8001f0a:	4b29      	ldr	r3, [pc, #164]	; (8001fb0 <lcd16x2_i2c_init+0xd0>)
 8001f0c:	6818      	ldr	r0, [r3, #0]
 8001f0e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001f12:	2205      	movs	r2, #5
 8001f14:	2127      	movs	r1, #39	; 0x27
 8001f16:	f004 fcd5 	bl	80068c4 <HAL_I2C_IsDeviceReady>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <lcd16x2_i2c_init+0x44>
                              500) != HAL_OK) {
      return false;
 8001f20:	2300      	movs	r3, #0
 8001f22:	e040      	b.n	8001fa6 <lcd16x2_i2c_init+0xc6>
    } else {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 8001f24:	4b23      	ldr	r3, [pc, #140]	; (8001fb4 <lcd16x2_i2c_init+0xd4>)
 8001f26:	2227      	movs	r2, #39	; 0x27
 8001f28:	701a      	strb	r2, [r3, #0]
 8001f2a:	e002      	b.n	8001f32 <lcd16x2_i2c_init+0x52>
    }
  } else {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 8001f2c:	4b21      	ldr	r3, [pc, #132]	; (8001fb4 <lcd16x2_i2c_init+0xd4>)
 8001f2e:	224e      	movs	r2, #78	; 0x4e
 8001f30:	701a      	strb	r2, [r3, #0]
  }
  // Initialise LCD for 4-bit operation
  // 1. Wait at least 15ms
  HAL_Delay(45);
 8001f32:	202d      	movs	r0, #45	; 0x2d
 8001f34:	f001 fa8a 	bl	800344c <HAL_Delay>
  // 2. Attentions sequence
  lcd16x2_i2c_sendCommand(0x30);
 8001f38:	2030      	movs	r0, #48	; 0x30
 8001f3a:	f7ff ff69 	bl	8001e10 <lcd16x2_i2c_sendCommand>
  HAL_Delay(5);
 8001f3e:	2005      	movs	r0, #5
 8001f40:	f001 fa84 	bl	800344c <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 8001f44:	2030      	movs	r0, #48	; 0x30
 8001f46:	f7ff ff63 	bl	8001e10 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	f001 fa7e 	bl	800344c <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 8001f50:	2030      	movs	r0, #48	; 0x30
 8001f52:	f7ff ff5d 	bl	8001e10 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 8001f56:	2008      	movs	r0, #8
 8001f58:	f001 fa78 	bl	800344c <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x20);
 8001f5c:	2020      	movs	r0, #32
 8001f5e:	f7ff ff57 	bl	8001e10 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 8001f62:	2008      	movs	r0, #8
 8001f64:	f001 fa72 	bl	800344c <HAL_Delay>

  lcd16x2_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8001f68:	2028      	movs	r0, #40	; 0x28
 8001f6a:	f7ff ff51 	bl	8001e10 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8001f6e:	2001      	movs	r0, #1
 8001f70:	f001 fa6c 	bl	800344c <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL);
 8001f74:	2008      	movs	r0, #8
 8001f76:	f7ff ff4b 	bl	8001e10 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8001f7a:	2001      	movs	r0, #1
 8001f7c:	f001 fa66 	bl	800344c <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 8001f80:	2001      	movs	r0, #1
 8001f82:	f7ff ff45 	bl	8001e10 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 8001f86:	2003      	movs	r0, #3
 8001f88:	f001 fa60 	bl	800344c <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 8001f8c:	2006      	movs	r0, #6
 8001f8e:	f7ff ff3f 	bl	8001e10 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8001f92:	2001      	movs	r0, #1
 8001f94:	f001 fa5a 	bl	800344c <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 8001f98:	200c      	movs	r0, #12
 8001f9a:	f7ff ff39 	bl	8001e10 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 8001f9e:	2003      	movs	r0, #3
 8001fa0:	f001 fa54 	bl	800344c <HAL_Delay>

  return true;
 8001fa4:	2301      	movs	r3, #1
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	2000035c 	.word	0x2000035c
 8001fb4:	20000360 	.word	0x20000360

08001fb8 <lcd16x2_i2c_setCursor>:
/**
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_i2c_setCursor(uint8_t row, uint8_t col) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	460a      	mov	r2, r1
 8001fc2:	71fb      	strb	r3, [r7, #7]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col) & 0x0F;
 8001fc8:	79bb      	ldrb	r3, [r7, #6]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	73fb      	strb	r3, [r7, #15]
  if (row == 0) {
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d108      	bne.n	8001fe8 <lcd16x2_i2c_setCursor+0x30>
    maskData |= (0x80);
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
 8001fd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fdc:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff ff15 	bl	8001e10 <lcd16x2_i2c_sendCommand>
  } else {
    maskData |= (0xc0);
    lcd16x2_i2c_sendCommand(maskData);
  }
}
 8001fe6:	e007      	b.n	8001ff8 <lcd16x2_i2c_setCursor+0x40>
    maskData |= (0xc0);
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
 8001fea:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001fee:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff ff0c 	bl	8001e10 <lcd16x2_i2c_sendCommand>
}
 8001ff8:	bf00      	nop
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <lcd16x2_i2c_2ndLine>:
 */
void lcd16x2_i2c_1stLine(void) { lcd16x2_i2c_setCursor(0, 0); }
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_i2c_2ndLine(void) { lcd16x2_i2c_setCursor(1, 0); }
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
 8002004:	2100      	movs	r1, #0
 8002006:	2001      	movs	r0, #1
 8002008:	f7ff ffd6 	bl	8001fb8 <lcd16x2_i2c_setCursor>
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}

08002010 <lcd16x2_i2c_clear>:
}

/**
 * @brief Display clear
 */
void lcd16x2_i2c_clear(void) {
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 8002014:	2001      	movs	r0, #1
 8002016:	f7ff fefb 	bl	8001e10 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 800201a:	2003      	movs	r0, #3
 800201c:	f001 fa16 	bl	800344c <HAL_Delay>
}
 8002020:	bf00      	nop
 8002022:	bd80      	pop	{r7, pc}

08002024 <lcd16x2_i2c_printf>:
}

/**
 * @brief Print to display
 */
void lcd16x2_i2c_printf(const char* str, ...) {
 8002024:	b40f      	push	{r0, r1, r2, r3}
 8002026:	b590      	push	{r4, r7, lr}
 8002028:	b089      	sub	sp, #36	; 0x24
 800202a:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 800202c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002030:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8002032:	f107 0308 	add.w	r3, r7, #8
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800203a:	4618      	mov	r0, r3
 800203c:	f012 fc0e 	bl	801485c <vsiprintf>
  va_end(args);
  for (uint8_t i = 0; i < strlen(stringArray) && i < 16; i++) {
 8002040:	2300      	movs	r3, #0
 8002042:	77fb      	strb	r3, [r7, #31]
 8002044:	e00a      	b.n	800205c <lcd16x2_i2c_printf+0x38>
    lcd16x2_i2c_sendData((uint8_t)stringArray[i]);
 8002046:	7ffb      	ldrb	r3, [r7, #31]
 8002048:	3320      	adds	r3, #32
 800204a:	443b      	add	r3, r7
 800204c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff ff11 	bl	8001e78 <lcd16x2_i2c_sendData>
  for (uint8_t i = 0; i < strlen(stringArray) && i < 16; i++) {
 8002056:	7ffb      	ldrb	r3, [r7, #31]
 8002058:	3301      	adds	r3, #1
 800205a:	77fb      	strb	r3, [r7, #31]
 800205c:	7ffc      	ldrb	r4, [r7, #31]
 800205e:	f107 0308 	add.w	r3, r7, #8
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe f8b4 	bl	80001d0 <strlen>
 8002068:	4603      	mov	r3, r0
 800206a:	429c      	cmp	r4, r3
 800206c:	d202      	bcs.n	8002074 <lcd16x2_i2c_printf+0x50>
 800206e:	7ffb      	ldrb	r3, [r7, #31]
 8002070:	2b0f      	cmp	r3, #15
 8002072:	d9e8      	bls.n	8002046 <lcd16x2_i2c_printf+0x22>
  }
}
 8002074:	bf00      	nop
 8002076:	3724      	adds	r7, #36	; 0x24
 8002078:	46bd      	mov	sp, r7
 800207a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800207e:	b004      	add	sp, #16
 8002080:	4770      	bx	lr
	...

08002084 <HAL_UARTEx_RxEventCallback>:
/* USER CODE BEGIN 0 */
extern ApplicationTypeDef Appli_state;
extern AUDIO_PLAYBACK_StateTypeDef AudioState;

uint32_t uwVolume_tmp = 0;
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	807b      	strh	r3, [r7, #2]
  int isValid_ble = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]
  if (huart == &huart3) {
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a3c      	ldr	r2, [pc, #240]	; (8002188 <HAL_UARTEx_RxEventCallback+0x104>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d161      	bne.n	8002160 <HAL_UARTEx_RxEventCallback+0xdc>
    HAL_UART_Transmit_DMA(huart, receiveData, Size);
 800209c:	887b      	ldrh	r3, [r7, #2]
 800209e:	461a      	mov	r2, r3
 80020a0:	493a      	ldr	r1, [pc, #232]	; (800218c <HAL_UARTEx_RxEventCallback+0x108>)
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f008 fcf4 	bl	800aa90 <HAL_UART_Transmit_DMA>

    if (receiveData[0] == 0xAA) {
 80020a8:	4b38      	ldr	r3, [pc, #224]	; (800218c <HAL_UARTEx_RxEventCallback+0x108>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2baa      	cmp	r3, #170	; 0xaa
 80020ae:	d14a      	bne.n	8002146 <HAL_UARTEx_RxEventCallback+0xc2>
      if (receiveData[1] == Size) {
 80020b0:	4b36      	ldr	r3, [pc, #216]	; (800218c <HAL_UARTEx_RxEventCallback+0x108>)
 80020b2:	785b      	ldrb	r3, [r3, #1]
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	887a      	ldrh	r2, [r7, #2]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d144      	bne.n	8002146 <HAL_UARTEx_RxEventCallback+0xc2>
        uint8_t sum = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	73fb      	strb	r3, [r7, #15]
        // for (int i = 0; i < Size - 1; ++i) {
        // sum += receiveData[i];
        //}

        if (sum == receiveData[Size - 1]) {
 80020c0:	887b      	ldrh	r3, [r7, #2]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	4a31      	ldr	r2, [pc, #196]	; (800218c <HAL_UARTEx_RxEventCallback+0x108>)
 80020c6:	5cd3      	ldrb	r3, [r2, r3]
 80020c8:	7bfa      	ldrb	r2, [r7, #15]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d13b      	bne.n	8002146 <HAL_UARTEx_RxEventCallback+0xc2>
          for (int i = 2; i < Size - 1; ++i) {
 80020ce:	2302      	movs	r3, #2
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	e033      	b.n	800213c <HAL_UARTEx_RxEventCallback+0xb8>
        	  isValid_ble = 1;
 80020d4:	2301      	movs	r3, #1
 80020d6:	617b      	str	r3, [r7, #20]
            switch (receiveData[i]) {
 80020d8:	4a2c      	ldr	r2, [pc, #176]	; (800218c <HAL_UARTEx_RxEventCallback+0x108>)
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4413      	add	r3, r2
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b05      	cmp	r3, #5
 80020e2:	d827      	bhi.n	8002134 <HAL_UARTEx_RxEventCallback+0xb0>
 80020e4:	a201      	add	r2, pc, #4	; (adr r2, 80020ec <HAL_UARTEx_RxEventCallback+0x68>)
 80020e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ea:	bf00      	nop
 80020ec:	08002105 	.word	0x08002105
 80020f0:	0800210d 	.word	0x0800210d
 80020f4:	08002115 	.word	0x08002115
 80020f8:	0800211d 	.word	0x0800211d
 80020fc:	08002125 	.word	0x08002125
 8002100:	0800212d 	.word	0x0800212d
              case Audio_next:  // 0x00
                AudioState = AUDIO_STATE_NEXT;
 8002104:	4b22      	ldr	r3, [pc, #136]	; (8002190 <HAL_UARTEx_RxEventCallback+0x10c>)
 8002106:	2205      	movs	r2, #5
 8002108:	701a      	strb	r2, [r3, #0]
                break;
 800210a:	e014      	b.n	8002136 <HAL_UARTEx_RxEventCallback+0xb2>
              case Audio_previous:  // 0x01
                AudioState = AUDIO_STATE_PREVIOUS;
 800210c:	4b20      	ldr	r3, [pc, #128]	; (8002190 <HAL_UARTEx_RxEventCallback+0x10c>)
 800210e:	2206      	movs	r2, #6
 8002110:	701a      	strb	r2, [r3, #0]
                break;
 8002112:	e010      	b.n	8002136 <HAL_UARTEx_RxEventCallback+0xb2>
              case Audio_volumnUp:  // 0x02
                AudioState = AUDIO_STATE_VOLUME_UP;
 8002114:	4b1e      	ldr	r3, [pc, #120]	; (8002190 <HAL_UARTEx_RxEventCallback+0x10c>)
 8002116:	220c      	movs	r2, #12
 8002118:	701a      	strb	r2, [r3, #0]
                break;
 800211a:	e00c      	b.n	8002136 <HAL_UARTEx_RxEventCallback+0xb2>
              case Audio_volumnDown:  // 0x03
                AudioState = AUDIO_STATE_VOLUME_DOWN;
 800211c:	4b1c      	ldr	r3, [pc, #112]	; (8002190 <HAL_UARTEx_RxEventCallback+0x10c>)
 800211e:	220d      	movs	r2, #13
 8002120:	701a      	strb	r2, [r3, #0]
                break;
 8002122:	e008      	b.n	8002136 <HAL_UARTEx_RxEventCallback+0xb2>
              case Audio_pause:  // 0x04
                AudioState = AUDIO_STATE_PAUSE;
 8002124:	4b1a      	ldr	r3, [pc, #104]	; (8002190 <HAL_UARTEx_RxEventCallback+0x10c>)
 8002126:	220a      	movs	r2, #10
 8002128:	701a      	strb	r2, [r3, #0]
                break;
 800212a:	e004      	b.n	8002136 <HAL_UARTEx_RxEventCallback+0xb2>
              case Audio_rePlay:  // 0x05
                AudioState = AUDIO_STATE_RESUME;
 800212c:	4b18      	ldr	r3, [pc, #96]	; (8002190 <HAL_UARTEx_RxEventCallback+0x10c>)
 800212e:	220b      	movs	r2, #11
 8002130:	701a      	strb	r2, [r3, #0]
                break;
 8002132:	e000      	b.n	8002136 <HAL_UARTEx_RxEventCallback+0xb2>
              default:
                break;
 8002134:	bf00      	nop
          for (int i = 2; i < Size - 1; ++i) {
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	3301      	adds	r3, #1
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	887b      	ldrh	r3, [r7, #2]
 800213e:	3b01      	subs	r3, #1
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	429a      	cmp	r2, r3
 8002144:	dbc6      	blt.n	80020d4 <HAL_UARTEx_RxEventCallback+0x50>
            }
          }
        }
      }
    }
    HAL_UARTEx_ReceiveToIdle_DMA(huart, receiveData, sizeof(receiveData));
 8002146:	2214      	movs	r2, #20
 8002148:	4910      	ldr	r1, [pc, #64]	; (800218c <HAL_UARTEx_RxEventCallback+0x108>)
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f008 fd1e 	bl	800ab8c <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8002150:	4b10      	ldr	r3, [pc, #64]	; (8002194 <HAL_UARTEx_RxEventCallback+0x110>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	4b0f      	ldr	r3, [pc, #60]	; (8002194 <HAL_UARTEx_RxEventCallback+0x110>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0208 	bic.w	r2, r2, #8
 800215e:	601a      	str	r2, [r3, #0]
  }
  if (isValid_ble == 0) {
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d106      	bne.n	8002174 <HAL_UARTEx_RxEventCallback+0xf0>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8002166:	2201      	movs	r2, #1
 8002168:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800216c:	480a      	ldr	r0, [pc, #40]	; (8002198 <HAL_UARTEx_RxEventCallback+0x114>)
 800216e:	f002 f9db 	bl	8004528 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
  }
}
 8002172:	e005      	b.n	8002180 <HAL_UARTEx_RxEventCallback+0xfc>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8002174:	2200      	movs	r2, #0
 8002176:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800217a:	4807      	ldr	r0, [pc, #28]	; (8002198 <HAL_UARTEx_RxEventCallback+0x114>)
 800217c:	f002 f9d4 	bl	8004528 <HAL_GPIO_WritePin>
}
 8002180:	bf00      	nop
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	200004b4 	.word	0x200004b4
 800218c:	200005b8 	.word	0x200005b8
 8002190:	200015e0 	.word	0x200015e0
 8002194:	200004f8 	.word	0x200004f8
 8002198:	40020c00 	.word	0x40020c00

0800219c <HAL_GPIO_EXTI_Callback>:

int IsFinished = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_0) {
 80021a6:	88fb      	ldrh	r3, [r7, #6]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d107      	bne.n	80021bc <HAL_GPIO_EXTI_Callback+0x20>
    switch (AudioState) {
 80021ac:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <HAL_GPIO_EXTI_Callback+0x34>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b03      	cmp	r3, #3
 80021b2:	d105      	bne.n	80021c0 <HAL_GPIO_EXTI_Callback+0x24>
      case AUDIO_STATE_PLAY:
        AudioState = AUDIO_STATE_NEXT;
 80021b4:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <HAL_GPIO_EXTI_Callback+0x34>)
 80021b6:	2205      	movs	r2, #5
 80021b8:	701a      	strb	r2, [r3, #0]
        break;
 80021ba:	e002      	b.n	80021c2 <HAL_GPIO_EXTI_Callback+0x26>
      default:
        break;
    }
  }
 80021bc:	bf00      	nop
 80021be:	e000      	b.n	80021c2 <HAL_GPIO_EXTI_Callback+0x26>
        break;
 80021c0:	bf00      	nop
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	200015e0 	.word	0x200015e0
 80021d4:	00000000 	.word	0x00000000

080021d8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 80021dc:	f001 f8c4 	bl	8003368 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021e0:	f000 f8e4 	bl	80023ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021e4:	f000 fa30 	bl	8002648 <MX_GPIO_Init>
  MX_DMA_Init();
 80021e8:	f000 f9fe 	bl	80025e8 <MX_DMA_Init>
  MX_I2C1_Init();
 80021ec:	f000 f948 	bl	8002480 <MX_I2C1_Init>
  MX_I2S3_Init();
 80021f0:	f000 f9a2 	bl	8002538 <MX_I2S3_Init>
  MX_FATFS_Init();
 80021f4:	f00a fdfe 	bl	800cdf4 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 80021f8:	f011 fa0e 	bl	8013618 <MX_USB_HOST_Init>
  MX_I2C3_Init();
 80021fc:	f000 f96e 	bl	80024dc <MX_I2C3_Init>
  MX_USART3_UART_Init();
 8002200:	f000 f9c8 	bl	8002594 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  if (lcd16x2_i2c_init(&hi2c3)) {
 8002204:	485a      	ldr	r0, [pc, #360]	; (8002370 <main+0x198>)
 8002206:	f7ff fe6b 	bl	8001ee0 <lcd16x2_i2c_init>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d012      	beq.n	8002236 <main+0x5e>
    lcd16x2_i2c_clear();
 8002210:	f7ff fefe 	bl	8002010 <lcd16x2_i2c_clear>
    lcd16x2_i2c_printf("START %.2f", 6.20);
 8002214:	a354      	add	r3, pc, #336	; (adr r3, 8002368 <main+0x190>)
 8002216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221a:	4856      	ldr	r0, [pc, #344]	; (8002374 <main+0x19c>)
 800221c:	f7ff ff02 	bl	8002024 <lcd16x2_i2c_printf>
    lcd16x2_i2c_2ndLine();
 8002220:	f7ff feee 	bl	8002000 <lcd16x2_i2c_2ndLine>
    lcd16x2_i2c_printf("NCKU Team-14");
 8002224:	4854      	ldr	r0, [pc, #336]	; (8002378 <main+0x1a0>)
 8002226:	f7ff fefd 	bl	8002024 <lcd16x2_i2c_printf>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800222a:	2201      	movs	r2, #1
 800222c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002230:	4852      	ldr	r0, [pc, #328]	; (800237c <main+0x1a4>)
 8002232:	f002 f979 	bl	8004528 <HAL_GPIO_WritePin>
  }
  HAL_UARTEx_RxEventCallback(&huart3, sizeof(receiveData));
 8002236:	2114      	movs	r1, #20
 8002238:	4851      	ldr	r0, [pc, #324]	; (8002380 <main+0x1a8>)
 800223a:	f7ff ff23 	bl	8002084 <HAL_UARTEx_RxEventCallback>
  uwVolume_tmp = get_uwVolume();
 800223e:	f001 f85d 	bl	80032fc <get_uwVolume>
 8002242:	4603      	mov	r3, r0
 8002244:	4a4f      	ldr	r2, [pc, #316]	; (8002384 <main+0x1ac>)
 8002246:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8002248:	f011 fa0c 	bl	8013664 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if (Appli_state == APPLICATION_READY) {
 800224c:	4b4e      	ldr	r3, [pc, #312]	; (8002388 <main+0x1b0>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b02      	cmp	r3, #2
 8002252:	d1f9      	bne.n	8002248 <main+0x70>
      Mount_USB();
 8002254:	f7ff fa9a 	bl	800178c <Mount_USB>
      AUDIO_PLAYER_Start(0);
 8002258:	2000      	movs	r0, #0
 800225a:	f000 fead 	bl	8002fb8 <AUDIO_PLAYER_Start>
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800225e:	2201      	movs	r2, #1
 8002260:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002264:	4845      	ldr	r0, [pc, #276]	; (800237c <main+0x1a4>)
 8002266:	f002 f95f 	bl	8004528 <HAL_GPIO_WritePin>
      while (!IsFinished) {
 800226a:	e076      	b.n	800235a <main+0x182>
        AUDIO_PLAYER_Process(TRUE);
 800226c:	2001      	movs	r0, #1
 800226e:	f000 ff03 	bl	8003078 <AUDIO_PLAYER_Process>

        if (AudioState == AUDIO_STATE_STOP) {
 8002272:	4b46      	ldr	r3, [pc, #280]	; (800238c <main+0x1b4>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b09      	cmp	r3, #9
 8002278:	d11a      	bne.n	80022b0 <main+0xd8>
          lcd16x2_i2c_clear();
 800227a:	f7ff fec9 	bl	8002010 <lcd16x2_i2c_clear>
          lcd16x2_i2c_printf("END");
 800227e:	4844      	ldr	r0, [pc, #272]	; (8002390 <main+0x1b8>)
 8002280:	f7ff fed0 	bl	8002024 <lcd16x2_i2c_printf>
          IsFinished = 1;
 8002284:	4b43      	ldr	r3, [pc, #268]	; (8002394 <main+0x1bc>)
 8002286:	2201      	movs	r2, #1
 8002288:	601a      	str	r2, [r3, #0]
          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800228a:	2200      	movs	r2, #0
 800228c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002290:	483a      	ldr	r0, [pc, #232]	; (800237c <main+0x1a4>)
 8002292:	f002 f949 	bl	8004528 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8002296:	2200      	movs	r2, #0
 8002298:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800229c:	4837      	ldr	r0, [pc, #220]	; (800237c <main+0x1a4>)
 800229e:	f002 f943 	bl	8004528 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80022a2:	2200      	movs	r2, #0
 80022a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022a8:	4834      	ldr	r0, [pc, #208]	; (800237c <main+0x1a4>)
 80022aa:	f002 f93d 	bl	8004528 <HAL_GPIO_WritePin>
 80022ae:	e054      	b.n	800235a <main+0x182>
        } else if (AudioState == AUDIO_STATE_VOLUME_UP) {
 80022b0:	4b36      	ldr	r3, [pc, #216]	; (800238c <main+0x1b4>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b0c      	cmp	r3, #12
 80022b6:	d115      	bne.n	80022e4 <main+0x10c>
          uwVolume_tmp += 10;
 80022b8:	4b32      	ldr	r3, [pc, #200]	; (8002384 <main+0x1ac>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	330a      	adds	r3, #10
 80022be:	4a31      	ldr	r2, [pc, #196]	; (8002384 <main+0x1ac>)
 80022c0:	6013      	str	r3, [r2, #0]
          lcd16x2_i2c_clear();
 80022c2:	f7ff fea5 	bl	8002010 <lcd16x2_i2c_clear>
          lcd16x2_i2c_printf("VOLUME_UP");
 80022c6:	4834      	ldr	r0, [pc, #208]	; (8002398 <main+0x1c0>)
 80022c8:	f7ff feac 	bl	8002024 <lcd16x2_i2c_printf>
          lcd16x2_i2c_2ndLine();
 80022cc:	f7ff fe98 	bl	8002000 <lcd16x2_i2c_2ndLine>
          lcd16x2_i2c_printf("v: %u", uwVolume_tmp);
 80022d0:	4b2c      	ldr	r3, [pc, #176]	; (8002384 <main+0x1ac>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4619      	mov	r1, r3
 80022d6:	4831      	ldr	r0, [pc, #196]	; (800239c <main+0x1c4>)
 80022d8:	f7ff fea4 	bl	8002024 <lcd16x2_i2c_printf>
          HAL_Delay(200);
 80022dc:	20c8      	movs	r0, #200	; 0xc8
 80022de:	f001 f8b5 	bl	800344c <HAL_Delay>
 80022e2:	e03a      	b.n	800235a <main+0x182>
        } else if (AudioState == AUDIO_STATE_VOLUME_DOWN) {
 80022e4:	4b29      	ldr	r3, [pc, #164]	; (800238c <main+0x1b4>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b0d      	cmp	r3, #13
 80022ea:	d115      	bne.n	8002318 <main+0x140>
          uwVolume_tmp -= 10;
 80022ec:	4b25      	ldr	r3, [pc, #148]	; (8002384 <main+0x1ac>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	3b0a      	subs	r3, #10
 80022f2:	4a24      	ldr	r2, [pc, #144]	; (8002384 <main+0x1ac>)
 80022f4:	6013      	str	r3, [r2, #0]
          lcd16x2_i2c_clear();
 80022f6:	f7ff fe8b 	bl	8002010 <lcd16x2_i2c_clear>
          lcd16x2_i2c_printf("VOLUME_DOWN");
 80022fa:	4829      	ldr	r0, [pc, #164]	; (80023a0 <main+0x1c8>)
 80022fc:	f7ff fe92 	bl	8002024 <lcd16x2_i2c_printf>
          lcd16x2_i2c_2ndLine();
 8002300:	f7ff fe7e 	bl	8002000 <lcd16x2_i2c_2ndLine>
          lcd16x2_i2c_printf("v: %u", uwVolume_tmp);
 8002304:	4b1f      	ldr	r3, [pc, #124]	; (8002384 <main+0x1ac>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4619      	mov	r1, r3
 800230a:	4824      	ldr	r0, [pc, #144]	; (800239c <main+0x1c4>)
 800230c:	f7ff fe8a 	bl	8002024 <lcd16x2_i2c_printf>
          HAL_Delay(200);
 8002310:	20c8      	movs	r0, #200	; 0xc8
 8002312:	f001 f89b 	bl	800344c <HAL_Delay>
 8002316:	e020      	b.n	800235a <main+0x182>
        } else if (AudioState == AUDIO_STATE_RESUME) {
 8002318:	4b1c      	ldr	r3, [pc, #112]	; (800238c <main+0x1b4>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b0b      	cmp	r3, #11
 800231e:	d110      	bne.n	8002342 <main+0x16a>
          lcd16x2_i2c_clear();
 8002320:	f7ff fe76 	bl	8002010 <lcd16x2_i2c_clear>
          lcd16x2_i2c_printf("RESUME");
 8002324:	481f      	ldr	r0, [pc, #124]	; (80023a4 <main+0x1cc>)
 8002326:	f7ff fe7d 	bl	8002024 <lcd16x2_i2c_printf>
          lcd16x2_i2c_2ndLine();
 800232a:	f7ff fe69 	bl	8002000 <lcd16x2_i2c_2ndLine>
          lcd16x2_i2c_printf("v: %u", uwVolume_tmp);
 800232e:	4b15      	ldr	r3, [pc, #84]	; (8002384 <main+0x1ac>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4619      	mov	r1, r3
 8002334:	4819      	ldr	r0, [pc, #100]	; (800239c <main+0x1c4>)
 8002336:	f7ff fe75 	bl	8002024 <lcd16x2_i2c_printf>
          HAL_Delay(200);
 800233a:	20c8      	movs	r0, #200	; 0xc8
 800233c:	f001 f886 	bl	800344c <HAL_Delay>
 8002340:	e00b      	b.n	800235a <main+0x182>
        } else if (AudioState == AUDIO_STATE_PAUSE) {
 8002342:	4b12      	ldr	r3, [pc, #72]	; (800238c <main+0x1b4>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	2b0a      	cmp	r3, #10
 8002348:	d107      	bne.n	800235a <main+0x182>
          lcd16x2_i2c_clear();
 800234a:	f7ff fe61 	bl	8002010 <lcd16x2_i2c_clear>
          lcd16x2_i2c_printf("PAUSE");
 800234e:	4816      	ldr	r0, [pc, #88]	; (80023a8 <main+0x1d0>)
 8002350:	f7ff fe68 	bl	8002024 <lcd16x2_i2c_printf>
          HAL_Delay(200);
 8002354:	20c8      	movs	r0, #200	; 0xc8
 8002356:	f001 f879 	bl	800344c <HAL_Delay>
      while (!IsFinished) {
 800235a:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <main+0x1bc>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d084      	beq.n	800226c <main+0x94>
    MX_USB_HOST_Process();
 8002362:	e771      	b.n	8002248 <main+0x70>
 8002364:	f3af 8000 	nop.w
 8002368:	cccccccd 	.word	0xcccccccd
 800236c:	4018cccc 	.word	0x4018cccc
 8002370:	200003b8 	.word	0x200003b8
 8002374:	08016b38 	.word	0x08016b38
 8002378:	08016b44 	.word	0x08016b44
 800237c:	40020c00 	.word	0x40020c00
 8002380:	200004b4 	.word	0x200004b4
 8002384:	200005cc 	.word	0x200005cc
 8002388:	20002468 	.word	0x20002468
 800238c:	200015e0 	.word	0x200015e0
 8002390:	08016b54 	.word	0x08016b54
 8002394:	200005d0 	.word	0x200005d0
 8002398:	08016b58 	.word	0x08016b58
 800239c:	08016b64 	.word	0x08016b64
 80023a0:	08016b6c 	.word	0x08016b6c
 80023a4:	08016b78 	.word	0x08016b78
 80023a8:	08016b80 	.word	0x08016b80

080023ac <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b094      	sub	sp, #80	; 0x50
 80023b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023b2:	f107 0320 	add.w	r3, r7, #32
 80023b6:	2230      	movs	r2, #48	; 0x30
 80023b8:	2100      	movs	r1, #0
 80023ba:	4618      	mov	r0, r3
 80023bc:	f011 fcac 	bl	8013d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023c0:	f107 030c 	add.w	r3, r7, #12
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	60da      	str	r2, [r3, #12]
 80023ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023d0:	2300      	movs	r3, #0
 80023d2:	60bb      	str	r3, [r7, #8]
 80023d4:	4b28      	ldr	r3, [pc, #160]	; (8002478 <SystemClock_Config+0xcc>)
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	4a27      	ldr	r2, [pc, #156]	; (8002478 <SystemClock_Config+0xcc>)
 80023da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023de:	6413      	str	r3, [r2, #64]	; 0x40
 80023e0:	4b25      	ldr	r3, [pc, #148]	; (8002478 <SystemClock_Config+0xcc>)
 80023e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023ec:	2300      	movs	r3, #0
 80023ee:	607b      	str	r3, [r7, #4]
 80023f0:	4b22      	ldr	r3, [pc, #136]	; (800247c <SystemClock_Config+0xd0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a21      	ldr	r2, [pc, #132]	; (800247c <SystemClock_Config+0xd0>)
 80023f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023fa:	6013      	str	r3, [r2, #0]
 80023fc:	4b1f      	ldr	r3, [pc, #124]	; (800247c <SystemClock_Config+0xd0>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002404:	607b      	str	r3, [r7, #4]
 8002406:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002408:	2301      	movs	r3, #1
 800240a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800240c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002412:	2302      	movs	r3, #2
 8002414:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002416:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800241a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800241c:	2308      	movs	r3, #8
 800241e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002420:	23c0      	movs	r3, #192	; 0xc0
 8002422:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002424:	2302      	movs	r3, #2
 8002426:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002428:	2304      	movs	r3, #4
 800242a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800242c:	f107 0320 	add.w	r3, r7, #32
 8002430:	4618      	mov	r0, r3
 8002432:	f007 fcdb 	bl	8009dec <HAL_RCC_OscConfig>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <SystemClock_Config+0x94>
    Error_Handler();
 800243c:	f000 f99e 	bl	800277c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8002440:	230f      	movs	r3, #15
 8002442:	60fb      	str	r3, [r7, #12]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002444:	2302      	movs	r3, #2
 8002446:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800244c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002450:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002456:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8002458:	f107 030c 	add.w	r3, r7, #12
 800245c:	2103      	movs	r1, #3
 800245e:	4618      	mov	r0, r3
 8002460:	f007 ff3c 	bl	800a2dc <HAL_RCC_ClockConfig>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <SystemClock_Config+0xc2>
    Error_Handler();
 800246a:	f000 f987 	bl	800277c <Error_Handler>
  }
}
 800246e:	bf00      	nop
 8002470:	3750      	adds	r7, #80	; 0x50
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40023800 	.word	0x40023800
 800247c:	40007000 	.word	0x40007000

08002480 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002484:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <MX_I2C1_Init+0x50>)
 8002486:	4a13      	ldr	r2, [pc, #76]	; (80024d4 <MX_I2C1_Init+0x54>)
 8002488:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800248a:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <MX_I2C1_Init+0x50>)
 800248c:	4a12      	ldr	r2, [pc, #72]	; (80024d8 <MX_I2C1_Init+0x58>)
 800248e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002490:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <MX_I2C1_Init+0x50>)
 8002492:	2200      	movs	r2, #0
 8002494:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002496:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <MX_I2C1_Init+0x50>)
 8002498:	2200      	movs	r2, #0
 800249a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800249c:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <MX_I2C1_Init+0x50>)
 800249e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024a4:	4b0a      	ldr	r3, [pc, #40]	; (80024d0 <MX_I2C1_Init+0x50>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80024aa:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <MX_I2C1_Init+0x50>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024b0:	4b07      	ldr	r3, [pc, #28]	; (80024d0 <MX_I2C1_Init+0x50>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024b6:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <MX_I2C1_Init+0x50>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80024bc:	4804      	ldr	r0, [pc, #16]	; (80024d0 <MX_I2C1_Init+0x50>)
 80024be:	f003 fc6f 	bl	8005da0 <HAL_I2C_Init>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_I2C1_Init+0x4c>
    Error_Handler();
 80024c8:	f000 f958 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 80024cc:	bf00      	nop
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20000364 	.word	0x20000364
 80024d4:	40005400 	.word	0x40005400
 80024d8:	000186a0 	.word	0x000186a0

080024dc <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80024e0:	4b12      	ldr	r3, [pc, #72]	; (800252c <MX_I2C3_Init+0x50>)
 80024e2:	4a13      	ldr	r2, [pc, #76]	; (8002530 <MX_I2C3_Init+0x54>)
 80024e4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80024e6:	4b11      	ldr	r3, [pc, #68]	; (800252c <MX_I2C3_Init+0x50>)
 80024e8:	4a12      	ldr	r2, [pc, #72]	; (8002534 <MX_I2C3_Init+0x58>)
 80024ea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024ec:	4b0f      	ldr	r3, [pc, #60]	; (800252c <MX_I2C3_Init+0x50>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80024f2:	4b0e      	ldr	r3, [pc, #56]	; (800252c <MX_I2C3_Init+0x50>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024f8:	4b0c      	ldr	r3, [pc, #48]	; (800252c <MX_I2C3_Init+0x50>)
 80024fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024fe:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002500:	4b0a      	ldr	r3, [pc, #40]	; (800252c <MX_I2C3_Init+0x50>)
 8002502:	2200      	movs	r2, #0
 8002504:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <MX_I2C3_Init+0x50>)
 8002508:	2200      	movs	r2, #0
 800250a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800250c:	4b07      	ldr	r3, [pc, #28]	; (800252c <MX_I2C3_Init+0x50>)
 800250e:	2200      	movs	r2, #0
 8002510:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002512:	4b06      	ldr	r3, [pc, #24]	; (800252c <MX_I2C3_Init+0x50>)
 8002514:	2200      	movs	r2, #0
 8002516:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 8002518:	4804      	ldr	r0, [pc, #16]	; (800252c <MX_I2C3_Init+0x50>)
 800251a:	f003 fc41 	bl	8005da0 <HAL_I2C_Init>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_I2C3_Init+0x4c>
    Error_Handler();
 8002524:	f000 f92a 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */
}
 8002528:	bf00      	nop
 800252a:	bd80      	pop	{r7, pc}
 800252c:	200003b8 	.word	0x200003b8
 8002530:	40005c00 	.word	0x40005c00
 8002534:	000186a0 	.word	0x000186a0

08002538 <MX_I2S3_Init>:
/**
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void) {
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800253c:	4b13      	ldr	r3, [pc, #76]	; (800258c <MX_I2S3_Init+0x54>)
 800253e:	4a14      	ldr	r2, [pc, #80]	; (8002590 <MX_I2S3_Init+0x58>)
 8002540:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8002542:	4b12      	ldr	r3, [pc, #72]	; (800258c <MX_I2S3_Init+0x54>)
 8002544:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002548:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800254a:	4b10      	ldr	r3, [pc, #64]	; (800258c <MX_I2S3_Init+0x54>)
 800254c:	2200      	movs	r2, #0
 800254e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002550:	4b0e      	ldr	r3, [pc, #56]	; (800258c <MX_I2S3_Init+0x54>)
 8002552:	2200      	movs	r2, #0
 8002554:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8002556:	4b0d      	ldr	r3, [pc, #52]	; (800258c <MX_I2S3_Init+0x54>)
 8002558:	f44f 7200 	mov.w	r2, #512	; 0x200
 800255c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 800255e:	4b0b      	ldr	r3, [pc, #44]	; (800258c <MX_I2S3_Init+0x54>)
 8002560:	f64a 4244 	movw	r2, #44100	; 0xac44
 8002564:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8002566:	4b09      	ldr	r3, [pc, #36]	; (800258c <MX_I2S3_Init+0x54>)
 8002568:	2200      	movs	r2, #0
 800256a:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800256c:	4b07      	ldr	r3, [pc, #28]	; (800258c <MX_I2S3_Init+0x54>)
 800256e:	2200      	movs	r2, #0
 8002570:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8002572:	4b06      	ldr	r3, [pc, #24]	; (800258c <MX_I2S3_Init+0x54>)
 8002574:	2200      	movs	r2, #0
 8002576:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 8002578:	4804      	ldr	r0, [pc, #16]	; (800258c <MX_I2S3_Init+0x54>)
 800257a:	f006 fb97 	bl	8008cac <HAL_I2S_Init>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <MX_I2S3_Init+0x50>
    Error_Handler();
 8002584:	f000 f8fa 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */
}
 8002588:	bf00      	nop
 800258a:	bd80      	pop	{r7, pc}
 800258c:	2000040c 	.word	0x2000040c
 8002590:	40003c00 	.word	0x40003c00

08002594 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002598:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <MX_USART3_UART_Init+0x4c>)
 800259a:	4a12      	ldr	r2, [pc, #72]	; (80025e4 <MX_USART3_UART_Init+0x50>)
 800259c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800259e:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <MX_USART3_UART_Init+0x4c>)
 80025a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80025a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80025a6:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <MX_USART3_UART_Init+0x4c>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80025ac:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <MX_USART3_UART_Init+0x4c>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80025b2:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <MX_USART3_UART_Init+0x4c>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80025b8:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <MX_USART3_UART_Init+0x4c>)
 80025ba:	220c      	movs	r2, #12
 80025bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025be:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <MX_USART3_UART_Init+0x4c>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80025c4:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <MX_USART3_UART_Init+0x4c>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK) {
 80025ca:	4805      	ldr	r0, [pc, #20]	; (80025e0 <MX_USART3_UART_Init+0x4c>)
 80025cc:	f008 fa12 	bl	800a9f4 <HAL_UART_Init>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_USART3_UART_Init+0x46>
    Error_Handler();
 80025d6:	f000 f8d1 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	200004b4 	.word	0x200004b4
 80025e4:	40004800 	.word	0x40004800

080025e8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	607b      	str	r3, [r7, #4]
 80025f2:	4b14      	ldr	r3, [pc, #80]	; (8002644 <MX_DMA_Init+0x5c>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	4a13      	ldr	r2, [pc, #76]	; (8002644 <MX_DMA_Init+0x5c>)
 80025f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025fc:	6313      	str	r3, [r2, #48]	; 0x30
 80025fe:	4b11      	ldr	r3, [pc, #68]	; (8002644 <MX_DMA_Init+0x5c>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002606:	607b      	str	r3, [r7, #4]
 8002608:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800260a:	2200      	movs	r2, #0
 800260c:	2100      	movs	r1, #0
 800260e:	200c      	movs	r0, #12
 8002610:	f001 f83f 	bl	8003692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002614:	200c      	movs	r0, #12
 8002616:	f001 f858 	bl	80036ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800261a:	2200      	movs	r2, #0
 800261c:	2100      	movs	r1, #0
 800261e:	200e      	movs	r0, #14
 8002620:	f001 f837 	bl	8003692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002624:	200e      	movs	r0, #14
 8002626:	f001 f850 	bl	80036ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800262a:	2200      	movs	r2, #0
 800262c:	2100      	movs	r1, #0
 800262e:	2010      	movs	r0, #16
 8002630:	f001 f82f 	bl	8003692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002634:	2010      	movs	r0, #16
 8002636:	f001 f848 	bl	80036ca <HAL_NVIC_EnableIRQ>
}
 800263a:	bf00      	nop
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40023800 	.word	0x40023800

08002648 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002648:	b580      	push	{r7, lr}
 800264a:	b08a      	sub	sp, #40	; 0x28
 800264c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264e:	f107 0314 	add.w	r3, r7, #20
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	605a      	str	r2, [r3, #4]
 8002658:	609a      	str	r2, [r3, #8]
 800265a:	60da      	str	r2, [r3, #12]
 800265c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	613b      	str	r3, [r7, #16]
 8002662:	4b42      	ldr	r3, [pc, #264]	; (800276c <MX_GPIO_Init+0x124>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	4a41      	ldr	r2, [pc, #260]	; (800276c <MX_GPIO_Init+0x124>)
 8002668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800266c:	6313      	str	r3, [r2, #48]	; 0x30
 800266e:	4b3f      	ldr	r3, [pc, #252]	; (800276c <MX_GPIO_Init+0x124>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002676:	613b      	str	r3, [r7, #16]
 8002678:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	4b3b      	ldr	r3, [pc, #236]	; (800276c <MX_GPIO_Init+0x124>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	4a3a      	ldr	r2, [pc, #232]	; (800276c <MX_GPIO_Init+0x124>)
 8002684:	f043 0304 	orr.w	r3, r3, #4
 8002688:	6313      	str	r3, [r2, #48]	; 0x30
 800268a:	4b38      	ldr	r3, [pc, #224]	; (800276c <MX_GPIO_Init+0x124>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	60bb      	str	r3, [r7, #8]
 800269a:	4b34      	ldr	r3, [pc, #208]	; (800276c <MX_GPIO_Init+0x124>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	4a33      	ldr	r2, [pc, #204]	; (800276c <MX_GPIO_Init+0x124>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	6313      	str	r3, [r2, #48]	; 0x30
 80026a6:	4b31      	ldr	r3, [pc, #196]	; (800276c <MX_GPIO_Init+0x124>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	607b      	str	r3, [r7, #4]
 80026b6:	4b2d      	ldr	r3, [pc, #180]	; (800276c <MX_GPIO_Init+0x124>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	4a2c      	ldr	r2, [pc, #176]	; (800276c <MX_GPIO_Init+0x124>)
 80026bc:	f043 0302 	orr.w	r3, r3, #2
 80026c0:	6313      	str	r3, [r2, #48]	; 0x30
 80026c2:	4b2a      	ldr	r3, [pc, #168]	; (800276c <MX_GPIO_Init+0x124>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	607b      	str	r3, [r7, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	603b      	str	r3, [r7, #0]
 80026d2:	4b26      	ldr	r3, [pc, #152]	; (800276c <MX_GPIO_Init+0x124>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	4a25      	ldr	r2, [pc, #148]	; (800276c <MX_GPIO_Init+0x124>)
 80026d8:	f043 0308 	orr.w	r3, r3, #8
 80026dc:	6313      	str	r3, [r2, #48]	; 0x30
 80026de:	4b23      	ldr	r3, [pc, #140]	; (800276c <MX_GPIO_Init+0x124>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80026ea:	2200      	movs	r2, #0
 80026ec:	2101      	movs	r1, #1
 80026ee:	4820      	ldr	r0, [pc, #128]	; (8002770 <MX_GPIO_Init+0x128>)
 80026f0:	f001 ff1a 	bl	8004528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD,
 80026f4:	2200      	movs	r2, #0
 80026f6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80026fa:	481e      	ldr	r0, [pc, #120]	; (8002774 <MX_GPIO_Init+0x12c>)
 80026fc:	f001 ff14 	bl	8004528 <HAL_GPIO_WritePin>
                    GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15,
                    GPIO_PIN_RESET);

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002700:	2301      	movs	r3, #1
 8002702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002704:	2301      	movs	r3, #1
 8002706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002708:	2300      	movs	r3, #0
 800270a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270c:	2300      	movs	r3, #0
 800270e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002710:	f107 0314 	add.w	r3, r7, #20
 8002714:	4619      	mov	r1, r3
 8002716:	4816      	ldr	r0, [pc, #88]	; (8002770 <MX_GPIO_Init+0x128>)
 8002718:	f001 fc6e 	bl	8003ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800271c:	2301      	movs	r3, #1
 800271e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002720:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002726:	2302      	movs	r3, #2
 8002728:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272a:	f107 0314 	add.w	r3, r7, #20
 800272e:	4619      	mov	r1, r3
 8002730:	4811      	ldr	r0, [pc, #68]	; (8002778 <MX_GPIO_Init+0x130>)
 8002732:	f001 fc61 	bl	8003ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8002736:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800273a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800273c:	2301      	movs	r3, #1
 800273e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002740:	2300      	movs	r3, #0
 8002742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002744:	2300      	movs	r3, #0
 8002746:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002748:	f107 0314 	add.w	r3, r7, #20
 800274c:	4619      	mov	r1, r3
 800274e:	4809      	ldr	r0, [pc, #36]	; (8002774 <MX_GPIO_Init+0x12c>)
 8002750:	f001 fc52 	bl	8003ff8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002754:	2200      	movs	r2, #0
 8002756:	2100      	movs	r1, #0
 8002758:	2006      	movs	r0, #6
 800275a:	f000 ff9a 	bl	8003692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800275e:	2006      	movs	r0, #6
 8002760:	f000 ffb3 	bl	80036ca <HAL_NVIC_EnableIRQ>
}
 8002764:	bf00      	nop
 8002766:	3728      	adds	r7, #40	; 0x28
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40023800 	.word	0x40023800
 8002770:	40020800 	.word	0x40020800
 8002774:	40020c00 	.word	0x40020c00
 8002778:	40020000 	.word	0x40020000

0800277c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002780:	b672      	cpsid	i
}
 8002782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state
   */
  __disable_irq();
  while (1) {
 8002784:	e7fe      	b.n	8002784 <Error_Handler+0x8>
	...

08002788 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	607b      	str	r3, [r7, #4]
 8002792:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <HAL_MspInit+0x4c>)
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	4a0f      	ldr	r2, [pc, #60]	; (80027d4 <HAL_MspInit+0x4c>)
 8002798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800279c:	6453      	str	r3, [r2, #68]	; 0x44
 800279e:	4b0d      	ldr	r3, [pc, #52]	; (80027d4 <HAL_MspInit+0x4c>)
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a6:	607b      	str	r3, [r7, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	603b      	str	r3, [r7, #0]
 80027ae:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <HAL_MspInit+0x4c>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	4a08      	ldr	r2, [pc, #32]	; (80027d4 <HAL_MspInit+0x4c>)
 80027b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b8:	6413      	str	r3, [r2, #64]	; 0x40
 80027ba:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <HAL_MspInit+0x4c>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c2:	603b      	str	r3, [r7, #0]
 80027c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40023800 	.word	0x40023800

080027d8 <HAL_I2C_MspInit>:
 * @brief I2C MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c) {
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08c      	sub	sp, #48	; 0x30
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e0:	f107 031c 	add.w	r3, r7, #28
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	605a      	str	r2, [r3, #4]
 80027ea:	609a      	str	r2, [r3, #8]
 80027ec:	60da      	str	r2, [r3, #12]
 80027ee:	611a      	str	r2, [r3, #16]
  if (hi2c->Instance == I2C1) {
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a4a      	ldr	r2, [pc, #296]	; (8002920 <HAL_I2C_MspInit+0x148>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d12d      	bne.n	8002856 <HAL_I2C_MspInit+0x7e>
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	61bb      	str	r3, [r7, #24]
 80027fe:	4b49      	ldr	r3, [pc, #292]	; (8002924 <HAL_I2C_MspInit+0x14c>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	4a48      	ldr	r2, [pc, #288]	; (8002924 <HAL_I2C_MspInit+0x14c>)
 8002804:	f043 0302 	orr.w	r3, r3, #2
 8002808:	6313      	str	r3, [r2, #48]	; 0x30
 800280a:	4b46      	ldr	r3, [pc, #280]	; (8002924 <HAL_I2C_MspInit+0x14c>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	61bb      	str	r3, [r7, #24]
 8002814:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_9;
 8002816:	f44f 7310 	mov.w	r3, #576	; 0x240
 800281a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800281c:	2312      	movs	r3, #18
 800281e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002820:	2301      	movs	r3, #1
 8002822:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002824:	2303      	movs	r3, #3
 8002826:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002828:	2304      	movs	r3, #4
 800282a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800282c:	f107 031c 	add.w	r3, r7, #28
 8002830:	4619      	mov	r1, r3
 8002832:	483d      	ldr	r0, [pc, #244]	; (8002928 <HAL_I2C_MspInit+0x150>)
 8002834:	f001 fbe0 	bl	8003ff8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]
 800283c:	4b39      	ldr	r3, [pc, #228]	; (8002924 <HAL_I2C_MspInit+0x14c>)
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	4a38      	ldr	r2, [pc, #224]	; (8002924 <HAL_I2C_MspInit+0x14c>)
 8002842:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002846:	6413      	str	r3, [r2, #64]	; 0x40
 8002848:	4b36      	ldr	r3, [pc, #216]	; (8002924 <HAL_I2C_MspInit+0x14c>)
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002850:	617b      	str	r3, [r7, #20]
 8002852:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002854:	e060      	b.n	8002918 <HAL_I2C_MspInit+0x140>
  } else if (hi2c->Instance == I2C3) {
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a34      	ldr	r2, [pc, #208]	; (800292c <HAL_I2C_MspInit+0x154>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d15b      	bne.n	8002918 <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002860:	2300      	movs	r3, #0
 8002862:	613b      	str	r3, [r7, #16]
 8002864:	4b2f      	ldr	r3, [pc, #188]	; (8002924 <HAL_I2C_MspInit+0x14c>)
 8002866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002868:	4a2e      	ldr	r2, [pc, #184]	; (8002924 <HAL_I2C_MspInit+0x14c>)
 800286a:	f043 0304 	orr.w	r3, r3, #4
 800286e:	6313      	str	r3, [r2, #48]	; 0x30
 8002870:	4b2c      	ldr	r3, [pc, #176]	; (8002924 <HAL_I2C_MspInit+0x14c>)
 8002872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800287c:	2300      	movs	r3, #0
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	4b28      	ldr	r3, [pc, #160]	; (8002924 <HAL_I2C_MspInit+0x14c>)
 8002882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002884:	4a27      	ldr	r2, [pc, #156]	; (8002924 <HAL_I2C_MspInit+0x14c>)
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	6313      	str	r3, [r2, #48]	; 0x30
 800288c:	4b25      	ldr	r3, [pc, #148]	; (8002924 <HAL_I2C_MspInit+0x14c>)
 800288e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002898:	f44f 7300 	mov.w	r3, #512	; 0x200
 800289c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800289e:	2312      	movs	r3, #18
 80028a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028a2:	2301      	movs	r3, #1
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a6:	2303      	movs	r3, #3
 80028a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80028aa:	2304      	movs	r3, #4
 80028ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ae:	f107 031c 	add.w	r3, r7, #28
 80028b2:	4619      	mov	r1, r3
 80028b4:	481e      	ldr	r0, [pc, #120]	; (8002930 <HAL_I2C_MspInit+0x158>)
 80028b6:	f001 fb9f 	bl	8003ff8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80028ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028c0:	2312      	movs	r3, #18
 80028c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028c4:	2301      	movs	r3, #1
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c8:	2303      	movs	r3, #3
 80028ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80028cc:	2304      	movs	r3, #4
 80028ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d0:	f107 031c 	add.w	r3, r7, #28
 80028d4:	4619      	mov	r1, r3
 80028d6:	4817      	ldr	r0, [pc, #92]	; (8002934 <HAL_I2C_MspInit+0x15c>)
 80028d8:	f001 fb8e 	bl	8003ff8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80028dc:	2300      	movs	r3, #0
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	4b10      	ldr	r3, [pc, #64]	; (8002924 <HAL_I2C_MspInit+0x14c>)
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	4a0f      	ldr	r2, [pc, #60]	; (8002924 <HAL_I2C_MspInit+0x14c>)
 80028e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028ea:	6413      	str	r3, [r2, #64]	; 0x40
 80028ec:	4b0d      	ldr	r3, [pc, #52]	; (8002924 <HAL_I2C_MspInit+0x14c>)
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80028f8:	2200      	movs	r2, #0
 80028fa:	2100      	movs	r1, #0
 80028fc:	2048      	movs	r0, #72	; 0x48
 80028fe:	f000 fec8 	bl	8003692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8002902:	2048      	movs	r0, #72	; 0x48
 8002904:	f000 fee1 	bl	80036ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8002908:	2200      	movs	r2, #0
 800290a:	2100      	movs	r1, #0
 800290c:	2049      	movs	r0, #73	; 0x49
 800290e:	f000 fec0 	bl	8003692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8002912:	2049      	movs	r0, #73	; 0x49
 8002914:	f000 fed9 	bl	80036ca <HAL_NVIC_EnableIRQ>
}
 8002918:	bf00      	nop
 800291a:	3730      	adds	r7, #48	; 0x30
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40005400 	.word	0x40005400
 8002924:	40023800 	.word	0x40023800
 8002928:	40020400 	.word	0x40020400
 800292c:	40005c00 	.word	0x40005c00
 8002930:	40020800 	.word	0x40020800
 8002934:	40020000 	.word	0x40020000

08002938 <HAL_I2C_MspDeInit>:
 * @brief I2C MSP De-Initialization
 * This function freeze the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c) {
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == I2C1) {
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a18      	ldr	r2, [pc, #96]	; (80029a8 <HAL_I2C_MspDeInit+0x70>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d10f      	bne.n	800296a <HAL_I2C_MspDeInit+0x32>
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800294a:	4b18      	ldr	r3, [pc, #96]	; (80029ac <HAL_I2C_MspDeInit+0x74>)
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	4a17      	ldr	r2, [pc, #92]	; (80029ac <HAL_I2C_MspDeInit+0x74>)
 8002950:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002954:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8002956:	2140      	movs	r1, #64	; 0x40
 8002958:	4815      	ldr	r0, [pc, #84]	; (80029b0 <HAL_I2C_MspDeInit+0x78>)
 800295a:	f001 fce9 	bl	8004330 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 800295e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002962:	4813      	ldr	r0, [pc, #76]	; (80029b0 <HAL_I2C_MspDeInit+0x78>)
 8002964:	f001 fce4 	bl	8004330 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
    /* USER CODE BEGIN I2C3_MspDeInit 1 */

    /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8002968:	e01a      	b.n	80029a0 <HAL_I2C_MspDeInit+0x68>
  } else if (hi2c->Instance == I2C3) {
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a11      	ldr	r2, [pc, #68]	; (80029b4 <HAL_I2C_MspDeInit+0x7c>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d115      	bne.n	80029a0 <HAL_I2C_MspDeInit+0x68>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002974:	4b0d      	ldr	r3, [pc, #52]	; (80029ac <HAL_I2C_MspDeInit+0x74>)
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	4a0c      	ldr	r2, [pc, #48]	; (80029ac <HAL_I2C_MspDeInit+0x74>)
 800297a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800297e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8002980:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002984:	480c      	ldr	r0, [pc, #48]	; (80029b8 <HAL_I2C_MspDeInit+0x80>)
 8002986:	f001 fcd3 	bl	8004330 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 800298a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800298e:	480b      	ldr	r0, [pc, #44]	; (80029bc <HAL_I2C_MspDeInit+0x84>)
 8002990:	f001 fcce 	bl	8004330 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8002994:	2048      	movs	r0, #72	; 0x48
 8002996:	f000 fea6 	bl	80036e6 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 800299a:	2049      	movs	r0, #73	; 0x49
 800299c:	f000 fea3 	bl	80036e6 <HAL_NVIC_DisableIRQ>
}
 80029a0:	bf00      	nop
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40005400 	.word	0x40005400
 80029ac:	40023800 	.word	0x40023800
 80029b0:	40020400 	.word	0x40020400
 80029b4:	40005c00 	.word	0x40005c00
 80029b8:	40020800 	.word	0x40020800
 80029bc:	40020000 	.word	0x40020000

080029c0 <HAL_I2S_MspInit>:
 * @brief I2S MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi2s: I2S handle pointer
 * @retval None
 */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s) {
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08e      	sub	sp, #56	; 0x38
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	60da      	str	r2, [r3, #12]
 80029d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029d8:	f107 0314 	add.w	r3, r7, #20
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	60da      	str	r2, [r3, #12]
  if (hi2s->Instance == SPI3) {
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a4e      	ldr	r2, [pc, #312]	; (8002b24 <HAL_I2S_MspInit+0x164>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	f040 8095 	bne.w	8002b1c <HAL_I2S_MspInit+0x15c>

    /* USER CODE END SPI3_MspInit 0 */

    /** Initializes the peripherals clock
     */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80029f2:	2301      	movs	r3, #1
 80029f4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 320;
 80029f6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80029fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80029fc:	2302      	movs	r3, #2
 80029fe:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8002a00:	f107 0314 	add.w	r3, r7, #20
 8002a04:	4618      	mov	r0, r3
 8002a06:	f007 fe89 	bl	800a71c <HAL_RCCEx_PeriphCLKConfig>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_I2S_MspInit+0x54>
      Error_Handler();
 8002a10:	f7ff feb4 	bl	800277c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002a14:	2300      	movs	r3, #0
 8002a16:	613b      	str	r3, [r7, #16]
 8002a18:	4b43      	ldr	r3, [pc, #268]	; (8002b28 <HAL_I2S_MspInit+0x168>)
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	4a42      	ldr	r2, [pc, #264]	; (8002b28 <HAL_I2S_MspInit+0x168>)
 8002a1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a22:	6413      	str	r3, [r2, #64]	; 0x40
 8002a24:	4b40      	ldr	r3, [pc, #256]	; (8002b28 <HAL_I2S_MspInit+0x168>)
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a2c:	613b      	str	r3, [r7, #16]
 8002a2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a30:	2300      	movs	r3, #0
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	4b3c      	ldr	r3, [pc, #240]	; (8002b28 <HAL_I2S_MspInit+0x168>)
 8002a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a38:	4a3b      	ldr	r2, [pc, #236]	; (8002b28 <HAL_I2S_MspInit+0x168>)
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a40:	4b39      	ldr	r3, [pc, #228]	; (8002b28 <HAL_I2S_MspInit+0x168>)
 8002a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	4b35      	ldr	r3, [pc, #212]	; (8002b28 <HAL_I2S_MspInit+0x168>)
 8002a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a54:	4a34      	ldr	r2, [pc, #208]	; (8002b28 <HAL_I2S_MspInit+0x168>)
 8002a56:	f043 0304 	orr.w	r3, r3, #4
 8002a5a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5c:	4b32      	ldr	r3, [pc, #200]	; (8002b28 <HAL_I2S_MspInit+0x168>)
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a68:	2310      	movs	r3, #16
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a74:	2300      	movs	r3, #0
 8002a76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a78:	2306      	movs	r3, #6
 8002a7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a80:	4619      	mov	r1, r3
 8002a82:	482a      	ldr	r0, [pc, #168]	; (8002b2c <HAL_I2S_MspInit+0x16c>)
 8002a84:	f001 fab8 	bl	8003ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_10 | GPIO_PIN_12;
 8002a88:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a96:	2300      	movs	r3, #0
 8002a98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a9a:	2306      	movs	r3, #6
 8002a9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4822      	ldr	r0, [pc, #136]	; (8002b30 <HAL_I2S_MspInit+0x170>)
 8002aa6:	f001 faa7 	bl	8003ff8 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8002aaa:	4b22      	ldr	r3, [pc, #136]	; (8002b34 <HAL_I2S_MspInit+0x174>)
 8002aac:	4a22      	ldr	r2, [pc, #136]	; (8002b38 <HAL_I2S_MspInit+0x178>)
 8002aae:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8002ab0:	4b20      	ldr	r3, [pc, #128]	; (8002b34 <HAL_I2S_MspInit+0x174>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ab6:	4b1f      	ldr	r3, [pc, #124]	; (8002b34 <HAL_I2S_MspInit+0x174>)
 8002ab8:	2240      	movs	r2, #64	; 0x40
 8002aba:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002abc:	4b1d      	ldr	r3, [pc, #116]	; (8002b34 <HAL_I2S_MspInit+0x174>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ac2:	4b1c      	ldr	r3, [pc, #112]	; (8002b34 <HAL_I2S_MspInit+0x174>)
 8002ac4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ac8:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002aca:	4b1a      	ldr	r3, [pc, #104]	; (8002b34 <HAL_I2S_MspInit+0x174>)
 8002acc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ad0:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ad2:	4b18      	ldr	r3, [pc, #96]	; (8002b34 <HAL_I2S_MspInit+0x174>)
 8002ad4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ad8:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8002ada:	4b16      	ldr	r3, [pc, #88]	; (8002b34 <HAL_I2S_MspInit+0x174>)
 8002adc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ae0:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ae2:	4b14      	ldr	r3, [pc, #80]	; (8002b34 <HAL_I2S_MspInit+0x174>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002ae8:	4b12      	ldr	r3, [pc, #72]	; (8002b34 <HAL_I2S_MspInit+0x174>)
 8002aea:	2204      	movs	r2, #4
 8002aec:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002aee:	4b11      	ldr	r3, [pc, #68]	; (8002b34 <HAL_I2S_MspInit+0x174>)
 8002af0:	2203      	movs	r2, #3
 8002af2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002af4:	4b0f      	ldr	r3, [pc, #60]	; (8002b34 <HAL_I2S_MspInit+0x174>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002afa:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <HAL_I2S_MspInit+0x174>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK) {
 8002b00:	480c      	ldr	r0, [pc, #48]	; (8002b34 <HAL_I2S_MspInit+0x174>)
 8002b02:	f000 fe0b 	bl	800371c <HAL_DMA_Init>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <HAL_I2S_MspInit+0x150>
      Error_Handler();
 8002b0c:	f7ff fe36 	bl	800277c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s, hdmatx, hdma_spi3_tx);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a08      	ldr	r2, [pc, #32]	; (8002b34 <HAL_I2S_MspInit+0x174>)
 8002b14:	639a      	str	r2, [r3, #56]	; 0x38
 8002b16:	4a07      	ldr	r2, [pc, #28]	; (8002b34 <HAL_I2S_MspInit+0x174>)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002b1c:	bf00      	nop
 8002b1e:	3738      	adds	r7, #56	; 0x38
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40003c00 	.word	0x40003c00
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	40020000 	.word	0x40020000
 8002b30:	40020800 	.word	0x40020800
 8002b34:	20000454 	.word	0x20000454
 8002b38:	40026088 	.word	0x40026088

08002b3c <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef* huart) {
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08a      	sub	sp, #40	; 0x28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b44:	f107 0314 	add.w	r3, r7, #20
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	60da      	str	r2, [r3, #12]
 8002b52:	611a      	str	r2, [r3, #16]
  if (huart->Instance == USART3) {
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a5b      	ldr	r2, [pc, #364]	; (8002cc8 <HAL_UART_MspInit+0x18c>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	f040 80b0 	bne.w	8002cc0 <HAL_UART_MspInit+0x184>
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b60:	2300      	movs	r3, #0
 8002b62:	613b      	str	r3, [r7, #16]
 8002b64:	4b59      	ldr	r3, [pc, #356]	; (8002ccc <HAL_UART_MspInit+0x190>)
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	4a58      	ldr	r2, [pc, #352]	; (8002ccc <HAL_UART_MspInit+0x190>)
 8002b6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b6e:	6413      	str	r3, [r2, #64]	; 0x40
 8002b70:	4b56      	ldr	r3, [pc, #344]	; (8002ccc <HAL_UART_MspInit+0x190>)
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b78:	613b      	str	r3, [r7, #16]
 8002b7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	4b52      	ldr	r3, [pc, #328]	; (8002ccc <HAL_UART_MspInit+0x190>)
 8002b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b84:	4a51      	ldr	r2, [pc, #324]	; (8002ccc <HAL_UART_MspInit+0x190>)
 8002b86:	f043 0302 	orr.w	r3, r3, #2
 8002b8a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8c:	4b4f      	ldr	r3, [pc, #316]	; (8002ccc <HAL_UART_MspInit+0x190>)
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60bb      	str	r3, [r7, #8]
 8002b9c:	4b4b      	ldr	r3, [pc, #300]	; (8002ccc <HAL_UART_MspInit+0x190>)
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	4a4a      	ldr	r2, [pc, #296]	; (8002ccc <HAL_UART_MspInit+0x190>)
 8002ba2:	f043 0308 	orr.w	r3, r3, #8
 8002ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba8:	4b48      	ldr	r3, [pc, #288]	; (8002ccc <HAL_UART_MspInit+0x190>)
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	60bb      	str	r3, [r7, #8]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002bb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002bc6:	2307      	movs	r3, #7
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bca:	f107 0314 	add.w	r3, r7, #20
 8002bce:	4619      	mov	r1, r3
 8002bd0:	483f      	ldr	r0, [pc, #252]	; (8002cd0 <HAL_UART_MspInit+0x194>)
 8002bd2:	f001 fa11 	bl	8003ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002bd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be4:	2303      	movs	r3, #3
 8002be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002be8:	2307      	movs	r3, #7
 8002bea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bec:	f107 0314 	add.w	r3, r7, #20
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4838      	ldr	r0, [pc, #224]	; (8002cd4 <HAL_UART_MspInit+0x198>)
 8002bf4:	f001 fa00 	bl	8003ff8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002bf8:	4b37      	ldr	r3, [pc, #220]	; (8002cd8 <HAL_UART_MspInit+0x19c>)
 8002bfa:	4a38      	ldr	r2, [pc, #224]	; (8002cdc <HAL_UART_MspInit+0x1a0>)
 8002bfc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002bfe:	4b36      	ldr	r3, [pc, #216]	; (8002cd8 <HAL_UART_MspInit+0x19c>)
 8002c00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c04:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c06:	4b34      	ldr	r3, [pc, #208]	; (8002cd8 <HAL_UART_MspInit+0x19c>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c0c:	4b32      	ldr	r3, [pc, #200]	; (8002cd8 <HAL_UART_MspInit+0x19c>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c12:	4b31      	ldr	r3, [pc, #196]	; (8002cd8 <HAL_UART_MspInit+0x19c>)
 8002c14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c18:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c1a:	4b2f      	ldr	r3, [pc, #188]	; (8002cd8 <HAL_UART_MspInit+0x19c>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c20:	4b2d      	ldr	r3, [pc, #180]	; (8002cd8 <HAL_UART_MspInit+0x19c>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002c26:	4b2c      	ldr	r3, [pc, #176]	; (8002cd8 <HAL_UART_MspInit+0x19c>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c2c:	4b2a      	ldr	r3, [pc, #168]	; (8002cd8 <HAL_UART_MspInit+0x19c>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c32:	4b29      	ldr	r3, [pc, #164]	; (8002cd8 <HAL_UART_MspInit+0x19c>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK) {
 8002c38:	4827      	ldr	r0, [pc, #156]	; (8002cd8 <HAL_UART_MspInit+0x19c>)
 8002c3a:	f000 fd6f 	bl	800371c <HAL_DMA_Init>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <HAL_UART_MspInit+0x10c>
      Error_Handler();
 8002c44:	f7ff fd9a 	bl	800277c <Error_Handler>
    }

    __HAL_LINKDMA(huart, hdmarx, hdma_usart3_rx);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a23      	ldr	r2, [pc, #140]	; (8002cd8 <HAL_UART_MspInit+0x19c>)
 8002c4c:	639a      	str	r2, [r3, #56]	; 0x38
 8002c4e:	4a22      	ldr	r2, [pc, #136]	; (8002cd8 <HAL_UART_MspInit+0x19c>)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002c54:	4b22      	ldr	r3, [pc, #136]	; (8002ce0 <HAL_UART_MspInit+0x1a4>)
 8002c56:	4a23      	ldr	r2, [pc, #140]	; (8002ce4 <HAL_UART_MspInit+0x1a8>)
 8002c58:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002c5a:	4b21      	ldr	r3, [pc, #132]	; (8002ce0 <HAL_UART_MspInit+0x1a4>)
 8002c5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c60:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c62:	4b1f      	ldr	r3, [pc, #124]	; (8002ce0 <HAL_UART_MspInit+0x1a4>)
 8002c64:	2240      	movs	r2, #64	; 0x40
 8002c66:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c68:	4b1d      	ldr	r3, [pc, #116]	; (8002ce0 <HAL_UART_MspInit+0x1a4>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c6e:	4b1c      	ldr	r3, [pc, #112]	; (8002ce0 <HAL_UART_MspInit+0x1a4>)
 8002c70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c74:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c76:	4b1a      	ldr	r3, [pc, #104]	; (8002ce0 <HAL_UART_MspInit+0x1a4>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c7c:	4b18      	ldr	r3, [pc, #96]	; (8002ce0 <HAL_UART_MspInit+0x1a4>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002c82:	4b17      	ldr	r3, [pc, #92]	; (8002ce0 <HAL_UART_MspInit+0x1a4>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c88:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <HAL_UART_MspInit+0x1a4>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c8e:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <HAL_UART_MspInit+0x1a4>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK) {
 8002c94:	4812      	ldr	r0, [pc, #72]	; (8002ce0 <HAL_UART_MspInit+0x1a4>)
 8002c96:	f000 fd41 	bl	800371c <HAL_DMA_Init>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <HAL_UART_MspInit+0x168>
      Error_Handler();
 8002ca0:	f7ff fd6c 	bl	800277c <Error_Handler>
    }

    __HAL_LINKDMA(huart, hdmatx, hdma_usart3_tx);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a0e      	ldr	r2, [pc, #56]	; (8002ce0 <HAL_UART_MspInit+0x1a4>)
 8002ca8:	635a      	str	r2, [r3, #52]	; 0x34
 8002caa:	4a0d      	ldr	r2, [pc, #52]	; (8002ce0 <HAL_UART_MspInit+0x1a4>)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	2027      	movs	r0, #39	; 0x27
 8002cb6:	f000 fcec 	bl	8003692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002cba:	2027      	movs	r0, #39	; 0x27
 8002cbc:	f000 fd05 	bl	80036ca <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }
}
 8002cc0:	bf00      	nop
 8002cc2:	3728      	adds	r7, #40	; 0x28
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40004800 	.word	0x40004800
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	40020400 	.word	0x40020400
 8002cd4:	40020c00 	.word	0x40020c00
 8002cd8:	200004f8 	.word	0x200004f8
 8002cdc:	40026028 	.word	0x40026028
 8002ce0:	20000558 	.word	0x20000558
 8002ce4:	40026058 	.word	0x40026058

08002ce8 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 8002cec:	e7fe      	b.n	8002cec <NMI_Handler+0x4>

08002cee <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8002cee:	b480      	push	{r7}
 8002cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1) {
 8002cf2:	e7fe      	b.n	8002cf2 <HardFault_Handler+0x4>

08002cf4 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1) {
 8002cf8:	e7fe      	b.n	8002cf8 <MemManage_Handler+0x4>

08002cfa <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8002cfa:	b480      	push	{r7}
 8002cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1) {
 8002cfe:	e7fe      	b.n	8002cfe <BusFault_Handler+0x4>

08002d00 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1) {
 8002d04:	e7fe      	b.n	8002d04 <UsageFault_Handler+0x4>

08002d06 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8002d06:	b480      	push	{r7}
 8002d08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d0a:	bf00      	nop
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d18:	bf00      	nop
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8002d22:	b480      	push	{r7}
 8002d24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d26:	bf00      	nop
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d34:	f000 fb6a 	bl	800340c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d38:	bf00      	nop
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <EXTI0_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line0 interrupt.
 */
void EXTI0_IRQHandler(void) {
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002d40:	2001      	movs	r0, #1
 8002d42:	f001 fc0b 	bl	800455c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002d46:	bf00      	nop
 8002d48:	bd80      	pop	{r7, pc}
	...

08002d4c <DMA1_Stream1_IRQHandler>:

/**
 * @brief This function handles DMA1 stream1 global interrupt.
 */
void DMA1_Stream1_IRQHandler(void) {
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002d50:	4802      	ldr	r0, [pc, #8]	; (8002d5c <DMA1_Stream1_IRQHandler+0x10>)
 8002d52:	f000 fed9 	bl	8003b08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002d56:	bf00      	nop
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	200004f8 	.word	0x200004f8

08002d60 <DMA1_Stream3_IRQHandler>:

/**
 * @brief This function handles DMA1 stream3 global interrupt.
 */
void DMA1_Stream3_IRQHandler(void) {
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002d64:	4802      	ldr	r0, [pc, #8]	; (8002d70 <DMA1_Stream3_IRQHandler+0x10>)
 8002d66:	f000 fecf 	bl	8003b08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002d6a:	bf00      	nop
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	20000558 	.word	0x20000558

08002d74 <DMA1_Stream5_IRQHandler>:

/**
 * @brief This function handles DMA1 stream5 global interrupt.
 */
void DMA1_Stream5_IRQHandler(void) {
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8002d78:	4802      	ldr	r0, [pc, #8]	; (8002d84 <DMA1_Stream5_IRQHandler+0x10>)
 8002d7a:	f000 fec5 	bl	8003b08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002d7e:	bf00      	nop
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	20000454 	.word	0x20000454

08002d88 <USART3_IRQHandler>:

/**
 * @brief This function handles USART3 global interrupt.
 */
void USART3_IRQHandler(void) {
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002d8c:	4802      	ldr	r0, [pc, #8]	; (8002d98 <USART3_IRQHandler+0x10>)
 8002d8e:	f007 ff63 	bl	800ac58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002d92:	bf00      	nop
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	200004b4 	.word	0x200004b4

08002d9c <OTG_FS_IRQHandler>:

/**
 * @brief This function handles USB On The Go FS global interrupt.
 */
void OTG_FS_IRQHandler(void) {
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002da0:	4802      	ldr	r0, [pc, #8]	; (8002dac <OTG_FS_IRQHandler+0x10>)
 8002da2:	f001 fe5d 	bl	8004a60 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002da6:	bf00      	nop
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	2000246c 	.word	0x2000246c

08002db0 <I2C3_EV_IRQHandler>:

/**
 * @brief This function handles I2C3 event interrupt.
 */
void I2C3_EV_IRQHandler(void) {
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8002db4:	4802      	ldr	r0, [pc, #8]	; (8002dc0 <I2C3_EV_IRQHandler+0x10>)
 8002db6:	f003 feb3 	bl	8006b20 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	200003b8 	.word	0x200003b8

08002dc4 <I2C3_ER_IRQHandler>:

/**
 * @brief This function handles I2C3 error interrupt.
 */
void I2C3_ER_IRQHandler(void) {
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8002dc8:	4802      	ldr	r0, [pc, #8]	; (8002dd4 <I2C3_ER_IRQHandler+0x10>)
 8002dca:	f004 f81a 	bl	8006e02 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	200003b8 	.word	0x200003b8

08002dd8 <_getpid>:
char **environ = __env;

/* Functions */
void initialise_monitor_handles() {}

int _getpid(void) { return 1; }
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	2301      	movs	r3, #1
 8002dde:	4618      	mov	r0, r3
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <_kill>:

int _kill(int pid, int sig) {
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002df2:	f010 ff49 	bl	8013c88 <__errno>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2216      	movs	r2, #22
 8002dfa:	601a      	str	r2, [r3, #0]
  return -1;
 8002dfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <_exit>:

void _exit(int status) {
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e10:	f04f 31ff 	mov.w	r1, #4294967295
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7ff ffe7 	bl	8002de8 <_kill>
  while (1) {
 8002e1a:	e7fe      	b.n	8002e1a <_exit+0x12>

08002e1c <_read>:
  } /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]
 8002e2c:	e00a      	b.n	8002e44 <_read+0x28>
    *ptr++ = __io_getchar();
 8002e2e:	f3af 8000 	nop.w
 8002e32:	4601      	mov	r1, r0
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	60ba      	str	r2, [r7, #8]
 8002e3a:	b2ca      	uxtb	r2, r1
 8002e3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	3301      	adds	r3, #1
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	dbf0      	blt.n	8002e2e <_read+0x12>
  }

  return len;
 8002e4c:	687b      	ldr	r3, [r7, #4]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b086      	sub	sp, #24
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	60b9      	str	r1, [r7, #8]
 8002e60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002e62:	2300      	movs	r3, #0
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	e009      	b.n	8002e7c <_write+0x26>
    __io_putchar(*ptr++);
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	60ba      	str	r2, [r7, #8]
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	dbf1      	blt.n	8002e68 <_write+0x12>
  }
  return len;
 8002e84:	687b      	ldr	r3, [r7, #4]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <_close>:

int _close(int file) {
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <_fstat>:

int _fstat(int file, struct stat *st) {
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002eb6:	605a      	str	r2, [r3, #4]
  return 0;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <_isatty>:

int _isatty(int file) {
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ece:	2301      	movs	r3, #1
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
	...

08002ef8 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr) {
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end;             /* Symbol defined in the linker script */
  extern uint8_t _estack;          /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f00:	4a14      	ldr	r2, [pc, #80]	; (8002f54 <_sbrk+0x5c>)
 8002f02:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <_sbrk+0x60>)
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end) {
 8002f0c:	4b13      	ldr	r3, [pc, #76]	; (8002f5c <_sbrk+0x64>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d102      	bne.n	8002f1a <_sbrk+0x22>
    __sbrk_heap_end = &_end;
 8002f14:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <_sbrk+0x64>)
 8002f16:	4a12      	ldr	r2, [pc, #72]	; (8002f60 <_sbrk+0x68>)
 8002f18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap) {
 8002f1a:	4b10      	ldr	r3, [pc, #64]	; (8002f5c <_sbrk+0x64>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d207      	bcs.n	8002f38 <_sbrk+0x40>
    errno = ENOMEM;
 8002f28:	f010 feae 	bl	8013c88 <__errno>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	220c      	movs	r2, #12
 8002f30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f32:	f04f 33ff 	mov.w	r3, #4294967295
 8002f36:	e009      	b.n	8002f4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f38:	4b08      	ldr	r3, [pc, #32]	; (8002f5c <_sbrk+0x64>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f3e:	4b07      	ldr	r3, [pc, #28]	; (8002f5c <_sbrk+0x64>)
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4413      	add	r3, r2
 8002f46:	4a05      	ldr	r2, [pc, #20]	; (8002f5c <_sbrk+0x64>)
 8002f48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	20020000 	.word	0x20020000
 8002f58:	00000400 	.word	0x00000400
 8002f5c:	200005d4 	.word	0x200005d4
 8002f60:	20002780 	.word	0x20002780

08002f64 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |=
 8002f68:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <SystemInit+0x20>)
 8002f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6e:	4a05      	ldr	r2, [pc, #20]	; (8002f84 <SystemInit+0x20>)
 8002f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS |
              VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                         /* USER_VECT_TAB_ADDRESS */
}
 8002f78:	bf00      	nop
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	e000ed00 	.word	0xe000ed00

08002f88 <PlayerInit>:
WAVE_FormatTypeDef WaveFormat;

FIL WavFile;

/* Private function prototypes -----------------------------------------------*/
uint8_t PlayerInit(uint32_t AudioFreq) {
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Initialize the Audio codec and all related peripherals (I2S, I2C,
   * IOExpander, IOs...) */
  if (AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, uwVolume, AudioFreq) != 0) {
 8002f90:	4b08      	ldr	r3, [pc, #32]	; (8002fb4 <PlayerInit+0x2c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	4619      	mov	r1, r3
 8002f9a:	2003      	movs	r0, #3
 8002f9c:	f7fd ff86 	bl	8000eac <AUDIO_OUT_Init>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <PlayerInit+0x22>
    return 1;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <PlayerInit+0x24>
  } else {
    return 0;
 8002faa:	2300      	movs	r3, #0
  }
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	2000003c 	.word	0x2000003c

08002fb8 <AUDIO_PLAYER_Start>:
/**
 * @brief  Starts Audio streaming.
 * @param  idx: File index
 * @retval Audio error
 */
AUDIO_ErrorTypeDef AUDIO_PLAYER_Start(uint8_t idx) {
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	71fb      	strb	r3, [r7, #7]
  uint bytesread;

  f_close(&WavFile);
 8002fc2:	4828      	ldr	r0, [pc, #160]	; (8003064 <AUDIO_PLAYER_Start+0xac>)
 8002fc4:	f00f fefd 	bl	8012dc2 <f_close>
  if (AUDIO_GetWavObjectNumber() > idx) {
 8002fc8:	f7fe fbd2 	bl	8001770 <AUDIO_GetWavObjectNumber>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	461a      	mov	r2, r3
 8002fd0:	79fb      	ldrb	r3, [r7, #7]
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d93f      	bls.n	8003058 <AUDIO_PLAYER_Start+0xa0>
    // Open WAV file
    f_open(&WavFile, (char *)FileList.file[idx].name, FA_READ);
 8002fd8:	79fa      	ldrb	r2, [r7, #7]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	4a20      	ldr	r2, [pc, #128]	; (8003068 <AUDIO_PLAYER_Start+0xb0>)
 8002fe6:	4413      	add	r3, r2
 8002fe8:	3301      	adds	r3, #1
 8002fea:	2201      	movs	r2, #1
 8002fec:	4619      	mov	r1, r3
 8002fee:	481d      	ldr	r0, [pc, #116]	; (8003064 <AUDIO_PLAYER_Start+0xac>)
 8002ff0:	f00f fb6c 	bl	80126cc <f_open>
    // Read WAV file Header
    f_read(&WavFile, &WaveFormat, sizeof(WaveFormat), &bytesread);
 8002ff4:	f107 030c 	add.w	r3, r7, #12
 8002ff8:	222c      	movs	r2, #44	; 0x2c
 8002ffa:	491c      	ldr	r1, [pc, #112]	; (800306c <AUDIO_PLAYER_Start+0xb4>)
 8002ffc:	4819      	ldr	r0, [pc, #100]	; (8003064 <AUDIO_PLAYER_Start+0xac>)
 8002ffe:	f00f fd23 	bl	8012a48 <f_read>

    /*Adjust the Audio frequency */
    PlayerInit(WaveFormat.SampleRate);
 8003002:	4b1a      	ldr	r3, [pc, #104]	; (800306c <AUDIO_PLAYER_Start+0xb4>)
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff ffbe 	bl	8002f88 <PlayerInit>

    BufferCtl.state = BUFFER_OFFSET_NONE;
 800300c:	4b18      	ldr	r3, [pc, #96]	; (8003070 <AUDIO_PLAYER_Start+0xb8>)
 800300e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003012:	2200      	movs	r2, #0
 8003014:	701a      	strb	r2, [r3, #0]

    /* Get Data from USB Flash Disk */
    f_lseek(&WavFile, 0);
 8003016:	2100      	movs	r1, #0
 8003018:	4812      	ldr	r0, [pc, #72]	; (8003064 <AUDIO_PLAYER_Start+0xac>)
 800301a:	f00f fefc 	bl	8012e16 <f_lseek>

    /* Fill whole buffer at first time */
    if (f_read(&WavFile, &BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE,
 800301e:	f107 030c 	add.w	r3, r7, #12
 8003022:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003026:	4912      	ldr	r1, [pc, #72]	; (8003070 <AUDIO_PLAYER_Start+0xb8>)
 8003028:	480e      	ldr	r0, [pc, #56]	; (8003064 <AUDIO_PLAYER_Start+0xac>)
 800302a:	f00f fd0d 	bl	8012a48 <f_read>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d111      	bne.n	8003058 <AUDIO_PLAYER_Start+0xa0>
               (void *)&bytesread) == FR_OK) {
      AudioState = AUDIO_STATE_PLAY;
 8003034:	4b0f      	ldr	r3, [pc, #60]	; (8003074 <AUDIO_PLAYER_Start+0xbc>)
 8003036:	2203      	movs	r2, #3
 8003038:	701a      	strb	r2, [r3, #0]
      if (bytesread != 0) {
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00b      	beq.n	8003058 <AUDIO_PLAYER_Start+0xa0>
        AUDIO_OUT_Play((uint16_t *)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE);
 8003040:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003044:	480a      	ldr	r0, [pc, #40]	; (8003070 <AUDIO_PLAYER_Start+0xb8>)
 8003046:	f7fd ff7f 	bl	8000f48 <AUDIO_OUT_Play>
        BufferCtl.fptr = bytesread;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4a08      	ldr	r2, [pc, #32]	; (8003070 <AUDIO_PLAYER_Start+0xb8>)
 800304e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003052:	6053      	str	r3, [r2, #4]
        return AUDIO_ERROR_NONE;
 8003054:	2300      	movs	r3, #0
 8003056:	e000      	b.n	800305a <AUDIO_PLAYER_Start+0xa2>
      }
    }
  }
  return AUDIO_ERROR_IO;
 8003058:	2301      	movs	r3, #1
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	200019ec 	.word	0x200019ec
 8003068:	200015e4 	.word	0x200015e4
 800306c:	200019c0 	.word	0x200019c0
 8003070:	200005d8 	.word	0x200005d8
 8003074:	200015e0 	.word	0x200015e0

08003078 <AUDIO_PLAYER_Process>:
/**
 * @brief  Manages Audio process.
 * @param  None
 * @retval Audio error
 */
AUDIO_ErrorTypeDef AUDIO_PLAYER_Process(bool isLoop) {
 8003078:	b590      	push	{r4, r7, lr}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	71fb      	strb	r3, [r7, #7]
  uint32_t bytesread;
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 8003082:	2300      	movs	r3, #0
 8003084:	73fb      	strb	r3, [r7, #15]

  switch (AudioState) {
 8003086:	4b82      	ldr	r3, [pc, #520]	; (8003290 <AUDIO_PLAYER_Process+0x218>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	3b03      	subs	r3, #3
 800308c:	2b0a      	cmp	r3, #10
 800308e:	f200 80f6 	bhi.w	800327e <AUDIO_PLAYER_Process+0x206>
 8003092:	a201      	add	r2, pc, #4	; (adr r2, 8003098 <AUDIO_PLAYER_Process+0x20>)
 8003094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003098:	080030c5 	.word	0x080030c5
 800309c:	0800327f 	.word	0x0800327f
 80030a0:	0800318b 	.word	0x0800318b
 80030a4:	080031d9 	.word	0x080031d9
 80030a8:	0800327f 	.word	0x0800327f
 80030ac:	0800327f 	.word	0x0800327f
 80030b0:	08003179 	.word	0x08003179
 80030b4:	0800321b 	.word	0x0800321b
 80030b8:	08003227 	.word	0x08003227
 80030bc:	08003233 	.word	0x08003233
 80030c0:	08003259 	.word	0x08003259
    case AUDIO_STATE_PLAY:
      if (BufferCtl.fptr >= WaveFormat.FileSize) {
 80030c4:	4b73      	ldr	r3, [pc, #460]	; (8003294 <AUDIO_PLAYER_Process+0x21c>)
 80030c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	4b72      	ldr	r3, [pc, #456]	; (8003298 <AUDIO_PLAYER_Process+0x220>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d305      	bcc.n	80030e0 <AUDIO_PLAYER_Process+0x68>
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 80030d4:	2002      	movs	r0, #2
 80030d6:	f7fd ff8d 	bl	8000ff4 <AUDIO_OUT_Stop>
        AudioState = AUDIO_STATE_NEXT;
 80030da:	4b6d      	ldr	r3, [pc, #436]	; (8003290 <AUDIO_PLAYER_Process+0x218>)
 80030dc:	2205      	movs	r2, #5
 80030de:	701a      	strb	r2, [r3, #0]
      }

      if (BufferCtl.state == BUFFER_OFFSET_HALF) {
 80030e0:	4b6c      	ldr	r3, [pc, #432]	; (8003294 <AUDIO_PLAYER_Process+0x21c>)
 80030e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d11e      	bne.n	800312a <AUDIO_PLAYER_Process+0xb2>
        if (f_read(&WavFile, &BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE / 2,
 80030ec:	f107 0308 	add.w	r3, r7, #8
 80030f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030f4:	4967      	ldr	r1, [pc, #412]	; (8003294 <AUDIO_PLAYER_Process+0x21c>)
 80030f6:	4869      	ldr	r0, [pc, #420]	; (800329c <AUDIO_PLAYER_Process+0x224>)
 80030f8:	f00f fca6 	bl	8012a48 <f_read>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d004      	beq.n	800310c <AUDIO_PLAYER_Process+0x94>
                   (void *)&bytesread) != FR_OK) {
          AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8003102:	2002      	movs	r0, #2
 8003104:	f7fd ff76 	bl	8000ff4 <AUDIO_OUT_Stop>
          return AUDIO_ERROR_IO;
 8003108:	2301      	movs	r3, #1
 800310a:	e0bc      	b.n	8003286 <AUDIO_PLAYER_Process+0x20e>
        }
        BufferCtl.state = BUFFER_OFFSET_NONE;
 800310c:	4b61      	ldr	r3, [pc, #388]	; (8003294 <AUDIO_PLAYER_Process+0x21c>)
 800310e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003112:	2200      	movs	r2, #0
 8003114:	701a      	strb	r2, [r3, #0]
        BufferCtl.fptr += bytesread;
 8003116:	4b5f      	ldr	r3, [pc, #380]	; (8003294 <AUDIO_PLAYER_Process+0x21c>)
 8003118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	4413      	add	r3, r2
 8003122:	4a5c      	ldr	r2, [pc, #368]	; (8003294 <AUDIO_PLAYER_Process+0x21c>)
 8003124:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003128:	6053      	str	r3, [r2, #4]
      }

      if (BufferCtl.state == BUFFER_OFFSET_FULL) {
 800312a:	4b5a      	ldr	r3, [pc, #360]	; (8003294 <AUDIO_PLAYER_Process+0x21c>)
 800312c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b02      	cmp	r3, #2
 8003134:	f040 80a5 	bne.w	8003282 <AUDIO_PLAYER_Process+0x20a>
        if (f_read(&WavFile, &BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE / 2],
 8003138:	f107 0308 	add.w	r3, r7, #8
 800313c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003140:	4957      	ldr	r1, [pc, #348]	; (80032a0 <AUDIO_PLAYER_Process+0x228>)
 8003142:	4856      	ldr	r0, [pc, #344]	; (800329c <AUDIO_PLAYER_Process+0x224>)
 8003144:	f00f fc80 	bl	8012a48 <f_read>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d004      	beq.n	8003158 <AUDIO_PLAYER_Process+0xe0>
                   AUDIO_OUT_BUFFER_SIZE / 2, (void *)&bytesread) != FR_OK) {
          AUDIO_OUT_Stop(CODEC_PDWN_SW);
 800314e:	2002      	movs	r0, #2
 8003150:	f7fd ff50 	bl	8000ff4 <AUDIO_OUT_Stop>
          return AUDIO_ERROR_IO;
 8003154:	2301      	movs	r3, #1
 8003156:	e096      	b.n	8003286 <AUDIO_PLAYER_Process+0x20e>
        }

        BufferCtl.state = BUFFER_OFFSET_NONE;
 8003158:	4b4e      	ldr	r3, [pc, #312]	; (8003294 <AUDIO_PLAYER_Process+0x21c>)
 800315a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800315e:	2200      	movs	r2, #0
 8003160:	701a      	strb	r2, [r3, #0]
        BufferCtl.fptr += bytesread;
 8003162:	4b4c      	ldr	r3, [pc, #304]	; (8003294 <AUDIO_PLAYER_Process+0x21c>)
 8003164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	4413      	add	r3, r2
 800316e:	4a49      	ldr	r2, [pc, #292]	; (8003294 <AUDIO_PLAYER_Process+0x21c>)
 8003170:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003174:	6053      	str	r3, [r2, #4]
      }
      break;
 8003176:	e084      	b.n	8003282 <AUDIO_PLAYER_Process+0x20a>

    case AUDIO_STATE_STOP:
      AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8003178:	2002      	movs	r0, #2
 800317a:	f7fd ff3b 	bl	8000ff4 <AUDIO_OUT_Stop>
      AudioState = AUDIO_STATE_IDLE;
 800317e:	4b44      	ldr	r3, [pc, #272]	; (8003290 <AUDIO_PLAYER_Process+0x218>)
 8003180:	2200      	movs	r2, #0
 8003182:	701a      	strb	r2, [r3, #0]
      audio_error = AUDIO_ERROR_IO;
 8003184:	2301      	movs	r3, #1
 8003186:	73fb      	strb	r3, [r7, #15]
      break;
 8003188:	e07c      	b.n	8003284 <AUDIO_PLAYER_Process+0x20c>

    case AUDIO_STATE_NEXT:
      if (++FilePos >= AUDIO_GetWavObjectNumber()) {
 800318a:	4b46      	ldr	r3, [pc, #280]	; (80032a4 <AUDIO_PLAYER_Process+0x22c>)
 800318c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003190:	b29b      	uxth	r3, r3
 8003192:	3301      	adds	r3, #1
 8003194:	b29b      	uxth	r3, r3
 8003196:	b21a      	sxth	r2, r3
 8003198:	4b42      	ldr	r3, [pc, #264]	; (80032a4 <AUDIO_PLAYER_Process+0x22c>)
 800319a:	801a      	strh	r2, [r3, #0]
 800319c:	4b41      	ldr	r3, [pc, #260]	; (80032a4 <AUDIO_PLAYER_Process+0x22c>)
 800319e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031a2:	461c      	mov	r4, r3
 80031a4:	f7fe fae4 	bl	8001770 <AUDIO_GetWavObjectNumber>
 80031a8:	4603      	mov	r3, r0
 80031aa:	429c      	cmp	r4, r3
 80031ac:	db09      	blt.n	80031c2 <AUDIO_PLAYER_Process+0x14a>
        if (isLoop) {
 80031ae:	79fb      	ldrb	r3, [r7, #7]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <AUDIO_PLAYER_Process+0x144>
          FilePos = 0;
 80031b4:	4b3b      	ldr	r3, [pc, #236]	; (80032a4 <AUDIO_PLAYER_Process+0x22c>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	801a      	strh	r2, [r3, #0]
 80031ba:	e002      	b.n	80031c2 <AUDIO_PLAYER_Process+0x14a>
        } else {
          AudioState = AUDIO_STATE_STOP;
 80031bc:	4b34      	ldr	r3, [pc, #208]	; (8003290 <AUDIO_PLAYER_Process+0x218>)
 80031be:	2209      	movs	r2, #9
 80031c0:	701a      	strb	r2, [r3, #0]
        }
      }
      AUDIO_OUT_Stop(CODEC_PDWN_SW);
 80031c2:	2002      	movs	r0, #2
 80031c4:	f7fd ff16 	bl	8000ff4 <AUDIO_OUT_Stop>
      AUDIO_PLAYER_Start(FilePos);
 80031c8:	4b36      	ldr	r3, [pc, #216]	; (80032a4 <AUDIO_PLAYER_Process+0x22c>)
 80031ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff fef1 	bl	8002fb8 <AUDIO_PLAYER_Start>
      break;
 80031d6:	e055      	b.n	8003284 <AUDIO_PLAYER_Process+0x20c>

    case AUDIO_STATE_PREVIOUS:
      if (--FilePos < 0) {
 80031d8:	4b32      	ldr	r3, [pc, #200]	; (80032a4 <AUDIO_PLAYER_Process+0x22c>)
 80031da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031de:	b29b      	uxth	r3, r3
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	b21a      	sxth	r2, r3
 80031e6:	4b2f      	ldr	r3, [pc, #188]	; (80032a4 <AUDIO_PLAYER_Process+0x22c>)
 80031e8:	801a      	strh	r2, [r3, #0]
 80031ea:	4b2e      	ldr	r3, [pc, #184]	; (80032a4 <AUDIO_PLAYER_Process+0x22c>)
 80031ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	da07      	bge.n	8003204 <AUDIO_PLAYER_Process+0x18c>
        FilePos = AUDIO_GetWavObjectNumber() - 1;
 80031f4:	f7fe fabc 	bl	8001770 <AUDIO_GetWavObjectNumber>
 80031f8:	4603      	mov	r3, r0
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	b21a      	sxth	r2, r3
 8003200:	4b28      	ldr	r3, [pc, #160]	; (80032a4 <AUDIO_PLAYER_Process+0x22c>)
 8003202:	801a      	strh	r2, [r3, #0]
      }
      AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8003204:	2002      	movs	r0, #2
 8003206:	f7fd fef5 	bl	8000ff4 <AUDIO_OUT_Stop>
      AUDIO_PLAYER_Start(FilePos);
 800320a:	4b26      	ldr	r3, [pc, #152]	; (80032a4 <AUDIO_PLAYER_Process+0x22c>)
 800320c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003210:	b2db      	uxtb	r3, r3
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff fed0 	bl	8002fb8 <AUDIO_PLAYER_Start>
      break;
 8003218:	e034      	b.n	8003284 <AUDIO_PLAYER_Process+0x20c>

    case AUDIO_STATE_PAUSE:
      AUDIO_OUT_Pause();
 800321a:	f7fd febf 	bl	8000f9c <AUDIO_OUT_Pause>
      //HAL_Delay(20);
      AudioState = AUDIO_STATE_WAIT;
 800321e:	4b1c      	ldr	r3, [pc, #112]	; (8003290 <AUDIO_PLAYER_Process+0x218>)
 8003220:	2201      	movs	r2, #1
 8003222:	701a      	strb	r2, [r3, #0]
      break;
 8003224:	e02e      	b.n	8003284 <AUDIO_PLAYER_Process+0x20c>

    case AUDIO_STATE_RESUME:
      AUDIO_OUT_Resume();
 8003226:	f7fd fecf 	bl	8000fc8 <AUDIO_OUT_Resume>
      //HAL_Delay(20);
      AudioState = AUDIO_STATE_PLAY;
 800322a:	4b19      	ldr	r3, [pc, #100]	; (8003290 <AUDIO_PLAYER_Process+0x218>)
 800322c:	2203      	movs	r2, #3
 800322e:	701a      	strb	r2, [r3, #0]
      break;
 8003230:	e028      	b.n	8003284 <AUDIO_PLAYER_Process+0x20c>

    case AUDIO_STATE_VOLUME_UP:
      if (uwVolume <= 90) {
 8003232:	4b1d      	ldr	r3, [pc, #116]	; (80032a8 <AUDIO_PLAYER_Process+0x230>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b5a      	cmp	r3, #90	; 0x5a
 8003238:	d804      	bhi.n	8003244 <AUDIO_PLAYER_Process+0x1cc>
        uwVolume += 10;
 800323a:	4b1b      	ldr	r3, [pc, #108]	; (80032a8 <AUDIO_PLAYER_Process+0x230>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	330a      	adds	r3, #10
 8003240:	4a19      	ldr	r2, [pc, #100]	; (80032a8 <AUDIO_PLAYER_Process+0x230>)
 8003242:	6013      	str	r3, [r2, #0]
      }
      AUDIO_OUT_SetVolume(uwVolume);
 8003244:	4b18      	ldr	r3, [pc, #96]	; (80032a8 <AUDIO_PLAYER_Process+0x230>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	b2db      	uxtb	r3, r3
 800324a:	4618      	mov	r0, r3
 800324c:	f7fd fefa 	bl	8001044 <AUDIO_OUT_SetVolume>
      //HAL_Delay(20);
      AudioState = AUDIO_STATE_PLAY;
 8003250:	4b0f      	ldr	r3, [pc, #60]	; (8003290 <AUDIO_PLAYER_Process+0x218>)
 8003252:	2203      	movs	r2, #3
 8003254:	701a      	strb	r2, [r3, #0]
      break;
 8003256:	e015      	b.n	8003284 <AUDIO_PLAYER_Process+0x20c>

    case AUDIO_STATE_VOLUME_DOWN:
      if (uwVolume >= 10) {
 8003258:	4b13      	ldr	r3, [pc, #76]	; (80032a8 <AUDIO_PLAYER_Process+0x230>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b09      	cmp	r3, #9
 800325e:	d904      	bls.n	800326a <AUDIO_PLAYER_Process+0x1f2>
        uwVolume -= 10;
 8003260:	4b11      	ldr	r3, [pc, #68]	; (80032a8 <AUDIO_PLAYER_Process+0x230>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	3b0a      	subs	r3, #10
 8003266:	4a10      	ldr	r2, [pc, #64]	; (80032a8 <AUDIO_PLAYER_Process+0x230>)
 8003268:	6013      	str	r3, [r2, #0]
      }
      AUDIO_OUT_SetVolume(uwVolume);
 800326a:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <AUDIO_PLAYER_Process+0x230>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	b2db      	uxtb	r3, r3
 8003270:	4618      	mov	r0, r3
 8003272:	f7fd fee7 	bl	8001044 <AUDIO_OUT_SetVolume>
      //HAL_Delay(20);
      AudioState = AUDIO_STATE_PLAY;
 8003276:	4b06      	ldr	r3, [pc, #24]	; (8003290 <AUDIO_PLAYER_Process+0x218>)
 8003278:	2203      	movs	r2, #3
 800327a:	701a      	strb	r2, [r3, #0]
      break;
 800327c:	e002      	b.n	8003284 <AUDIO_PLAYER_Process+0x20c>
    case AUDIO_STATE_WAIT:
    case AUDIO_STATE_IDLE:
    case AUDIO_STATE_INIT:
    default:
      /* Do Nothing */
      break;
 800327e:	bf00      	nop
 8003280:	e000      	b.n	8003284 <AUDIO_PLAYER_Process+0x20c>
      break;
 8003282:	bf00      	nop
  }
  return audio_error;
 8003284:	7bfb      	ldrb	r3, [r7, #15]
}
 8003286:	4618      	mov	r0, r3
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	bd90      	pop	{r4, r7, pc}
 800328e:	bf00      	nop
 8003290:	200015e0 	.word	0x200015e0
 8003294:	200005d8 	.word	0x200005d8
 8003298:	200019c0 	.word	0x200019c0
 800329c:	200019ec 	.word	0x200019ec
 80032a0:	20000dd8 	.word	0x20000dd8
 80032a4:	200015e2 	.word	0x200015e2
 80032a8:	2000003c 	.word	0x2000003c

080032ac <AUDIO_OUT_TransferComplete_CallBack>:
/**
 * @brief  Calculates the remaining file size and new position of the pointer.
 * @param  None
 * @retval None
 */
void AUDIO_OUT_TransferComplete_CallBack(void) {
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  if (AudioState == AUDIO_STATE_PLAY) {
 80032b0:	4b06      	ldr	r3, [pc, #24]	; (80032cc <AUDIO_OUT_TransferComplete_CallBack+0x20>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	d104      	bne.n	80032c2 <AUDIO_OUT_TransferComplete_CallBack+0x16>
    BufferCtl.state = BUFFER_OFFSET_FULL;
 80032b8:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <AUDIO_OUT_TransferComplete_CallBack+0x24>)
 80032ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032be:	2202      	movs	r2, #2
 80032c0:	701a      	strb	r2, [r3, #0]
  }
}
 80032c2:	bf00      	nop
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	200015e0 	.word	0x200015e0
 80032d0:	200005d8 	.word	0x200005d8

080032d4 <AUDIO_OUT_HalfTransfer_CallBack>:
/**
 * @brief  Manages the DMA Half Transfer complete interrupt.
 * @param  None
 * @retval None
 */
void AUDIO_OUT_HalfTransfer_CallBack(void) {
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  if (AudioState == AUDIO_STATE_PLAY) {
 80032d8:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b03      	cmp	r3, #3
 80032de:	d104      	bne.n	80032ea <AUDIO_OUT_HalfTransfer_CallBack+0x16>
    BufferCtl.state = BUFFER_OFFSET_HALF;
 80032e0:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 80032e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032e6:	2201      	movs	r2, #1
 80032e8:	701a      	strb	r2, [r3, #0]
  }
}
 80032ea:	bf00      	nop
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	200015e0 	.word	0x200015e0
 80032f8:	200005d8 	.word	0x200005d8

080032fc <get_uwVolume>:

// JIA change
uint32_t get_uwVolume(void) { return uwVolume; }
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
 8003300:	4b03      	ldr	r3, [pc, #12]	; (8003310 <get_uwVolume+0x14>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	2000003c 	.word	0x2000003c

08003314 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003314:	f8df d034 	ldr.w	sp, [pc, #52]	; 800334c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003318:	480d      	ldr	r0, [pc, #52]	; (8003350 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800331a:	490e      	ldr	r1, [pc, #56]	; (8003354 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800331c:	4a0e      	ldr	r2, [pc, #56]	; (8003358 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800331e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003320:	e002      	b.n	8003328 <LoopCopyDataInit>

08003322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003326:	3304      	adds	r3, #4

08003328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800332a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800332c:	d3f9      	bcc.n	8003322 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800332e:	4a0b      	ldr	r2, [pc, #44]	; (800335c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003330:	4c0b      	ldr	r4, [pc, #44]	; (8003360 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003334:	e001      	b.n	800333a <LoopFillZerobss>

08003336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003338:	3204      	adds	r2, #4

0800333a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800333a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800333c:	d3fb      	bcc.n	8003336 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800333e:	f7ff fe11 	bl	8002f64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003342:	f010 fca7 	bl	8013c94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003346:	f7fe ff47 	bl	80021d8 <main>
  bx  lr    
 800334a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800334c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003354:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8003358:	08017494 	.word	0x08017494
  ldr r2, =_sbss
 800335c:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8003360:	20002780 	.word	0x20002780

08003364 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003364:	e7fe      	b.n	8003364 <ADC_IRQHandler>
	...

08003368 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800336c:	4b0e      	ldr	r3, [pc, #56]	; (80033a8 <HAL_Init+0x40>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a0d      	ldr	r2, [pc, #52]	; (80033a8 <HAL_Init+0x40>)
 8003372:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003376:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003378:	4b0b      	ldr	r3, [pc, #44]	; (80033a8 <HAL_Init+0x40>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a0a      	ldr	r2, [pc, #40]	; (80033a8 <HAL_Init+0x40>)
 800337e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003382:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003384:	4b08      	ldr	r3, [pc, #32]	; (80033a8 <HAL_Init+0x40>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a07      	ldr	r2, [pc, #28]	; (80033a8 <HAL_Init+0x40>)
 800338a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800338e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003390:	2003      	movs	r0, #3
 8003392:	f000 f973 	bl	800367c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003396:	200f      	movs	r0, #15
 8003398:	f000 f808 	bl	80033ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800339c:	f7ff f9f4 	bl	8002788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	40023c00 	.word	0x40023c00

080033ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033b4:	4b12      	ldr	r3, [pc, #72]	; (8003400 <HAL_InitTick+0x54>)
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	4b12      	ldr	r3, [pc, #72]	; (8003404 <HAL_InitTick+0x58>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	4619      	mov	r1, r3
 80033be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80033c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 f999 	bl	8003702 <HAL_SYSTICK_Config>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e00e      	b.n	80033f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b0f      	cmp	r3, #15
 80033de:	d80a      	bhi.n	80033f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033e0:	2200      	movs	r2, #0
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	f04f 30ff 	mov.w	r0, #4294967295
 80033e8:	f000 f953 	bl	8003692 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033ec:	4a06      	ldr	r2, [pc, #24]	; (8003408 <HAL_InitTick+0x5c>)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	e000      	b.n	80033f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3708      	adds	r7, #8
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	20000038 	.word	0x20000038
 8003404:	20000044 	.word	0x20000044
 8003408:	20000040 	.word	0x20000040

0800340c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003410:	4b06      	ldr	r3, [pc, #24]	; (800342c <HAL_IncTick+0x20>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	461a      	mov	r2, r3
 8003416:	4b06      	ldr	r3, [pc, #24]	; (8003430 <HAL_IncTick+0x24>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4413      	add	r3, r2
 800341c:	4a04      	ldr	r2, [pc, #16]	; (8003430 <HAL_IncTick+0x24>)
 800341e:	6013      	str	r3, [r2, #0]
}
 8003420:	bf00      	nop
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	20000044 	.word	0x20000044
 8003430:	20001c1c 	.word	0x20001c1c

08003434 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  return uwTick;
 8003438:	4b03      	ldr	r3, [pc, #12]	; (8003448 <HAL_GetTick+0x14>)
 800343a:	681b      	ldr	r3, [r3, #0]
}
 800343c:	4618      	mov	r0, r3
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	20001c1c 	.word	0x20001c1c

0800344c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003454:	f7ff ffee 	bl	8003434 <HAL_GetTick>
 8003458:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003464:	d005      	beq.n	8003472 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003466:	4b0a      	ldr	r3, [pc, #40]	; (8003490 <HAL_Delay+0x44>)
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	461a      	mov	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4413      	add	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003472:	bf00      	nop
 8003474:	f7ff ffde 	bl	8003434 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	429a      	cmp	r2, r3
 8003482:	d8f7      	bhi.n	8003474 <HAL_Delay+0x28>
  {
  }
}
 8003484:	bf00      	nop
 8003486:	bf00      	nop
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	20000044 	.word	0x20000044

08003494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034a4:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <__NVIC_SetPriorityGrouping+0x44>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034b0:	4013      	ands	r3, r2
 80034b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034c6:	4a04      	ldr	r2, [pc, #16]	; (80034d8 <__NVIC_SetPriorityGrouping+0x44>)
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	60d3      	str	r3, [r2, #12]
}
 80034cc:	bf00      	nop
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	e000ed00 	.word	0xe000ed00

080034dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034e0:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <__NVIC_GetPriorityGrouping+0x18>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	0a1b      	lsrs	r3, r3, #8
 80034e6:	f003 0307 	and.w	r3, r3, #7
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	e000ed00 	.word	0xe000ed00

080034f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003506:	2b00      	cmp	r3, #0
 8003508:	db0b      	blt.n	8003522 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800350a:	79fb      	ldrb	r3, [r7, #7]
 800350c:	f003 021f 	and.w	r2, r3, #31
 8003510:	4907      	ldr	r1, [pc, #28]	; (8003530 <__NVIC_EnableIRQ+0x38>)
 8003512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	2001      	movs	r0, #1
 800351a:	fa00 f202 	lsl.w	r2, r0, r2
 800351e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	e000e100 	.word	0xe000e100

08003534 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	4603      	mov	r3, r0
 800353c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800353e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003542:	2b00      	cmp	r3, #0
 8003544:	db12      	blt.n	800356c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	f003 021f 	and.w	r2, r3, #31
 800354c:	490a      	ldr	r1, [pc, #40]	; (8003578 <__NVIC_DisableIRQ+0x44>)
 800354e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003552:	095b      	lsrs	r3, r3, #5
 8003554:	2001      	movs	r0, #1
 8003556:	fa00 f202 	lsl.w	r2, r0, r2
 800355a:	3320      	adds	r3, #32
 800355c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003560:	f3bf 8f4f 	dsb	sy
}
 8003564:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003566:	f3bf 8f6f 	isb	sy
}
 800356a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	e000e100 	.word	0xe000e100

0800357c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	4603      	mov	r3, r0
 8003584:	6039      	str	r1, [r7, #0]
 8003586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358c:	2b00      	cmp	r3, #0
 800358e:	db0a      	blt.n	80035a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	b2da      	uxtb	r2, r3
 8003594:	490c      	ldr	r1, [pc, #48]	; (80035c8 <__NVIC_SetPriority+0x4c>)
 8003596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359a:	0112      	lsls	r2, r2, #4
 800359c:	b2d2      	uxtb	r2, r2
 800359e:	440b      	add	r3, r1
 80035a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035a4:	e00a      	b.n	80035bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	b2da      	uxtb	r2, r3
 80035aa:	4908      	ldr	r1, [pc, #32]	; (80035cc <__NVIC_SetPriority+0x50>)
 80035ac:	79fb      	ldrb	r3, [r7, #7]
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	3b04      	subs	r3, #4
 80035b4:	0112      	lsls	r2, r2, #4
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	440b      	add	r3, r1
 80035ba:	761a      	strb	r2, [r3, #24]
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	e000e100 	.word	0xe000e100
 80035cc:	e000ed00 	.word	0xe000ed00

080035d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b089      	sub	sp, #36	; 0x24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	f1c3 0307 	rsb	r3, r3, #7
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	bf28      	it	cs
 80035ee:	2304      	movcs	r3, #4
 80035f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	3304      	adds	r3, #4
 80035f6:	2b06      	cmp	r3, #6
 80035f8:	d902      	bls.n	8003600 <NVIC_EncodePriority+0x30>
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	3b03      	subs	r3, #3
 80035fe:	e000      	b.n	8003602 <NVIC_EncodePriority+0x32>
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003604:	f04f 32ff 	mov.w	r2, #4294967295
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43da      	mvns	r2, r3
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	401a      	ands	r2, r3
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003618:	f04f 31ff 	mov.w	r1, #4294967295
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	fa01 f303 	lsl.w	r3, r1, r3
 8003622:	43d9      	mvns	r1, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003628:	4313      	orrs	r3, r2
         );
}
 800362a:	4618      	mov	r0, r3
 800362c:	3724      	adds	r7, #36	; 0x24
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
	...

08003638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3b01      	subs	r3, #1
 8003644:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003648:	d301      	bcc.n	800364e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800364a:	2301      	movs	r3, #1
 800364c:	e00f      	b.n	800366e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800364e:	4a0a      	ldr	r2, [pc, #40]	; (8003678 <SysTick_Config+0x40>)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3b01      	subs	r3, #1
 8003654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003656:	210f      	movs	r1, #15
 8003658:	f04f 30ff 	mov.w	r0, #4294967295
 800365c:	f7ff ff8e 	bl	800357c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003660:	4b05      	ldr	r3, [pc, #20]	; (8003678 <SysTick_Config+0x40>)
 8003662:	2200      	movs	r2, #0
 8003664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003666:	4b04      	ldr	r3, [pc, #16]	; (8003678 <SysTick_Config+0x40>)
 8003668:	2207      	movs	r2, #7
 800366a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	e000e010 	.word	0xe000e010

0800367c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f7ff ff05 	bl	8003494 <__NVIC_SetPriorityGrouping>
}
 800368a:	bf00      	nop
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003692:	b580      	push	{r7, lr}
 8003694:	b086      	sub	sp, #24
 8003696:	af00      	add	r7, sp, #0
 8003698:	4603      	mov	r3, r0
 800369a:	60b9      	str	r1, [r7, #8]
 800369c:	607a      	str	r2, [r7, #4]
 800369e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036a4:	f7ff ff1a 	bl	80034dc <__NVIC_GetPriorityGrouping>
 80036a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	68b9      	ldr	r1, [r7, #8]
 80036ae:	6978      	ldr	r0, [r7, #20]
 80036b0:	f7ff ff8e 	bl	80035d0 <NVIC_EncodePriority>
 80036b4:	4602      	mov	r2, r0
 80036b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ba:	4611      	mov	r1, r2
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff ff5d 	bl	800357c <__NVIC_SetPriority>
}
 80036c2:	bf00      	nop
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b082      	sub	sp, #8
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	4603      	mov	r3, r0
 80036d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff ff0d 	bl	80034f8 <__NVIC_EnableIRQ>
}
 80036de:	bf00      	nop
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b082      	sub	sp, #8
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	4603      	mov	r3, r0
 80036ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80036f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff ff1d 	bl	8003534 <__NVIC_DisableIRQ>
}
 80036fa:	bf00      	nop
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b082      	sub	sp, #8
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff ff94 	bl	8003638 <SysTick_Config>
 8003710:	4603      	mov	r3, r0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
	...

0800371c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003724:	2300      	movs	r3, #0
 8003726:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003728:	f7ff fe84 	bl	8003434 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e099      	b.n	800386c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0201 	bic.w	r2, r2, #1
 8003756:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003758:	e00f      	b.n	800377a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800375a:	f7ff fe6b 	bl	8003434 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b05      	cmp	r3, #5
 8003766:	d908      	bls.n	800377a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2220      	movs	r2, #32
 800376c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2203      	movs	r2, #3
 8003772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e078      	b.n	800386c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1e8      	bne.n	800375a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	4b38      	ldr	r3, [pc, #224]	; (8003874 <HAL_DMA_Init+0x158>)
 8003794:	4013      	ands	r3, r2
 8003796:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	2b04      	cmp	r3, #4
 80037d2:	d107      	bne.n	80037e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037dc:	4313      	orrs	r3, r2
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	f023 0307 	bic.w	r3, r3, #7
 80037fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	4313      	orrs	r3, r2
 8003804:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	2b04      	cmp	r3, #4
 800380c:	d117      	bne.n	800383e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	4313      	orrs	r3, r2
 8003816:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00e      	beq.n	800383e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 fb6d 	bl	8003f00 <DMA_CheckFifoParam>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d008      	beq.n	800383e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2240      	movs	r2, #64	; 0x40
 8003830:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800383a:	2301      	movs	r3, #1
 800383c:	e016      	b.n	800386c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 fb24 	bl	8003e94 <DMA_CalcBaseAndBitshift>
 800384c:	4603      	mov	r3, r0
 800384e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003854:	223f      	movs	r2, #63	; 0x3f
 8003856:	409a      	lsls	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	f010803f 	.word	0xf010803f

08003878 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e050      	b.n	800392c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d101      	bne.n	800389a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003896:	2302      	movs	r3, #2
 8003898:	e048      	b.n	800392c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0201 	bic.w	r2, r2, #1
 80038a8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2200      	movs	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2200      	movs	r2, #0
 80038b8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2200      	movs	r2, #0
 80038c0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2200      	movs	r2, #0
 80038c8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2200      	movs	r2, #0
 80038d0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2221      	movs	r2, #33	; 0x21
 80038d8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 fada 	bl	8003e94 <DMA_CalcBaseAndBitshift>
 80038e0:	4603      	mov	r3, r0
 80038e2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390c:	223f      	movs	r2, #63	; 0x3f
 800390e:	409a      	lsls	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003952:	2b01      	cmp	r3, #1
 8003954:	d101      	bne.n	800395a <HAL_DMA_Start_IT+0x26>
 8003956:	2302      	movs	r3, #2
 8003958:	e040      	b.n	80039dc <HAL_DMA_Start_IT+0xa8>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b01      	cmp	r3, #1
 800396c:	d12f      	bne.n	80039ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2202      	movs	r2, #2
 8003972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	68b9      	ldr	r1, [r7, #8]
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 fa58 	bl	8003e38 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800398c:	223f      	movs	r2, #63	; 0x3f
 800398e:	409a      	lsls	r2, r3
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0216 	orr.w	r2, r2, #22
 80039a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d007      	beq.n	80039bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f042 0208 	orr.w	r2, r2, #8
 80039ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f042 0201 	orr.w	r2, r2, #1
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	e005      	b.n	80039da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80039d6:	2302      	movs	r3, #2
 80039d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80039da:	7dfb      	ldrb	r3, [r7, #23]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3718      	adds	r7, #24
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80039f2:	f7ff fd1f 	bl	8003434 <HAL_GetTick>
 80039f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d008      	beq.n	8003a16 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2280      	movs	r2, #128	; 0x80
 8003a08:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e052      	b.n	8003abc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0216 	bic.w	r2, r2, #22
 8003a24:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	695a      	ldr	r2, [r3, #20]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a34:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d103      	bne.n	8003a46 <HAL_DMA_Abort+0x62>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d007      	beq.n	8003a56 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0208 	bic.w	r2, r2, #8
 8003a54:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0201 	bic.w	r2, r2, #1
 8003a64:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a66:	e013      	b.n	8003a90 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a68:	f7ff fce4 	bl	8003434 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b05      	cmp	r3, #5
 8003a74:	d90c      	bls.n	8003a90 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2203      	movs	r2, #3
 8003a80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e015      	b.n	8003abc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1e4      	bne.n	8003a68 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa2:	223f      	movs	r2, #63	; 0x3f
 8003aa4:	409a      	lsls	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d004      	beq.n	8003ae2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2280      	movs	r2, #128	; 0x80
 8003adc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e00c      	b.n	8003afc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2205      	movs	r2, #5
 8003ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 0201 	bic.w	r2, r2, #1
 8003af8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b14:	4b8e      	ldr	r3, [pc, #568]	; (8003d50 <HAL_DMA_IRQHandler+0x248>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a8e      	ldr	r2, [pc, #568]	; (8003d54 <HAL_DMA_IRQHandler+0x24c>)
 8003b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1e:	0a9b      	lsrs	r3, r3, #10
 8003b20:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b26:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b32:	2208      	movs	r2, #8
 8003b34:	409a      	lsls	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d01a      	beq.n	8003b74 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d013      	beq.n	8003b74 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 0204 	bic.w	r2, r2, #4
 8003b5a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b60:	2208      	movs	r2, #8
 8003b62:	409a      	lsls	r2, r3
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6c:	f043 0201 	orr.w	r2, r3, #1
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b78:	2201      	movs	r2, #1
 8003b7a:	409a      	lsls	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d012      	beq.n	8003baa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00b      	beq.n	8003baa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b96:	2201      	movs	r2, #1
 8003b98:	409a      	lsls	r2, r3
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba2:	f043 0202 	orr.w	r2, r3, #2
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bae:	2204      	movs	r2, #4
 8003bb0:	409a      	lsls	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d012      	beq.n	8003be0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00b      	beq.n	8003be0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bcc:	2204      	movs	r2, #4
 8003bce:	409a      	lsls	r2, r3
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd8:	f043 0204 	orr.w	r2, r3, #4
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be4:	2210      	movs	r2, #16
 8003be6:	409a      	lsls	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4013      	ands	r3, r2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d043      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0308 	and.w	r3, r3, #8
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d03c      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c02:	2210      	movs	r2, #16
 8003c04:	409a      	lsls	r2, r3
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d018      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d108      	bne.n	8003c38 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d024      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	4798      	blx	r3
 8003c36:	e01f      	b.n	8003c78 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d01b      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	4798      	blx	r3
 8003c48:	e016      	b.n	8003c78 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d107      	bne.n	8003c68 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0208 	bic.w	r2, r2, #8
 8003c66:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d003      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	409a      	lsls	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4013      	ands	r3, r2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 808f 	beq.w	8003da8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0310 	and.w	r3, r3, #16
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 8087 	beq.w	8003da8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	409a      	lsls	r2, r3
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b05      	cmp	r3, #5
 8003cb0:	d136      	bne.n	8003d20 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0216 	bic.w	r2, r2, #22
 8003cc0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695a      	ldr	r2, [r3, #20]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cd0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d103      	bne.n	8003ce2 <HAL_DMA_IRQHandler+0x1da>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d007      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 0208 	bic.w	r2, r2, #8
 8003cf0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf6:	223f      	movs	r2, #63	; 0x3f
 8003cf8:	409a      	lsls	r2, r3
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d07e      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	4798      	blx	r3
        }
        return;
 8003d1e:	e079      	b.n	8003e14 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d01d      	beq.n	8003d6a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10d      	bne.n	8003d58 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d031      	beq.n	8003da8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	4798      	blx	r3
 8003d4c:	e02c      	b.n	8003da8 <HAL_DMA_IRQHandler+0x2a0>
 8003d4e:	bf00      	nop
 8003d50:	20000038 	.word	0x20000038
 8003d54:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d023      	beq.n	8003da8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	4798      	blx	r3
 8003d68:	e01e      	b.n	8003da8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10f      	bne.n	8003d98 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0210 	bic.w	r2, r2, #16
 8003d86:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d032      	beq.n	8003e16 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d022      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2205      	movs	r2, #5
 8003dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0201 	bic.w	r2, r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	60bb      	str	r3, [r7, #8]
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d307      	bcc.n	8003df0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f2      	bne.n	8003dd4 <HAL_DMA_IRQHandler+0x2cc>
 8003dee:	e000      	b.n	8003df2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003df0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d005      	beq.n	8003e16 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	4798      	blx	r3
 8003e12:	e000      	b.n	8003e16 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003e14:	bf00      	nop
    }
  }
}
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e2a:	b2db      	uxtb	r3, r3
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
 8003e44:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e54:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	2b40      	cmp	r3, #64	; 0x40
 8003e64:	d108      	bne.n	8003e78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e76:	e007      	b.n	8003e88 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	60da      	str	r2, [r3, #12]
}
 8003e88:	bf00      	nop
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	3b10      	subs	r3, #16
 8003ea4:	4a14      	ldr	r2, [pc, #80]	; (8003ef8 <DMA_CalcBaseAndBitshift+0x64>)
 8003ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eaa:	091b      	lsrs	r3, r3, #4
 8003eac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003eae:	4a13      	ldr	r2, [pc, #76]	; (8003efc <DMA_CalcBaseAndBitshift+0x68>)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2b03      	cmp	r3, #3
 8003ec0:	d909      	bls.n	8003ed6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003eca:	f023 0303 	bic.w	r3, r3, #3
 8003ece:	1d1a      	adds	r2, r3, #4
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	659a      	str	r2, [r3, #88]	; 0x58
 8003ed4:	e007      	b.n	8003ee6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ede:	f023 0303 	bic.w	r3, r3, #3
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	aaaaaaab 	.word	0xaaaaaaab
 8003efc:	08016c4c 	.word	0x08016c4c

08003f00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d11f      	bne.n	8003f5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	2b03      	cmp	r3, #3
 8003f1e:	d856      	bhi.n	8003fce <DMA_CheckFifoParam+0xce>
 8003f20:	a201      	add	r2, pc, #4	; (adr r2, 8003f28 <DMA_CheckFifoParam+0x28>)
 8003f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f26:	bf00      	nop
 8003f28:	08003f39 	.word	0x08003f39
 8003f2c:	08003f4b 	.word	0x08003f4b
 8003f30:	08003f39 	.word	0x08003f39
 8003f34:	08003fcf 	.word	0x08003fcf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d046      	beq.n	8003fd2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f48:	e043      	b.n	8003fd2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f52:	d140      	bne.n	8003fd6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f58:	e03d      	b.n	8003fd6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f62:	d121      	bne.n	8003fa8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	2b03      	cmp	r3, #3
 8003f68:	d837      	bhi.n	8003fda <DMA_CheckFifoParam+0xda>
 8003f6a:	a201      	add	r2, pc, #4	; (adr r2, 8003f70 <DMA_CheckFifoParam+0x70>)
 8003f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f70:	08003f81 	.word	0x08003f81
 8003f74:	08003f87 	.word	0x08003f87
 8003f78:	08003f81 	.word	0x08003f81
 8003f7c:	08003f99 	.word	0x08003f99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	73fb      	strb	r3, [r7, #15]
      break;
 8003f84:	e030      	b.n	8003fe8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d025      	beq.n	8003fde <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f96:	e022      	b.n	8003fde <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fa0:	d11f      	bne.n	8003fe2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003fa6:	e01c      	b.n	8003fe2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d903      	bls.n	8003fb6 <DMA_CheckFifoParam+0xb6>
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2b03      	cmp	r3, #3
 8003fb2:	d003      	beq.n	8003fbc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003fb4:	e018      	b.n	8003fe8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	73fb      	strb	r3, [r7, #15]
      break;
 8003fba:	e015      	b.n	8003fe8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00e      	beq.n	8003fe6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	73fb      	strb	r3, [r7, #15]
      break;
 8003fcc:	e00b      	b.n	8003fe6 <DMA_CheckFifoParam+0xe6>
      break;
 8003fce:	bf00      	nop
 8003fd0:	e00a      	b.n	8003fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8003fd2:	bf00      	nop
 8003fd4:	e008      	b.n	8003fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8003fd6:	bf00      	nop
 8003fd8:	e006      	b.n	8003fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8003fda:	bf00      	nop
 8003fdc:	e004      	b.n	8003fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8003fde:	bf00      	nop
 8003fe0:	e002      	b.n	8003fe8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003fe2:	bf00      	nop
 8003fe4:	e000      	b.n	8003fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8003fe6:	bf00      	nop
    }
  } 
  
  return status; 
 8003fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3714      	adds	r7, #20
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop

08003ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b089      	sub	sp, #36	; 0x24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004002:	2300      	movs	r3, #0
 8004004:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004006:	2300      	movs	r3, #0
 8004008:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800400a:	2300      	movs	r3, #0
 800400c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800400e:	2300      	movs	r3, #0
 8004010:	61fb      	str	r3, [r7, #28]
 8004012:	e16b      	b.n	80042ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004014:	2201      	movs	r2, #1
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	fa02 f303 	lsl.w	r3, r2, r3
 800401c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	4013      	ands	r3, r2
 8004026:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	429a      	cmp	r2, r3
 800402e:	f040 815a 	bne.w	80042e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	2b01      	cmp	r3, #1
 800403c:	d005      	beq.n	800404a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004046:	2b02      	cmp	r3, #2
 8004048:	d130      	bne.n	80040ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	2203      	movs	r2, #3
 8004056:	fa02 f303 	lsl.w	r3, r2, r3
 800405a:	43db      	mvns	r3, r3
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	4013      	ands	r3, r2
 8004060:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68da      	ldr	r2, [r3, #12]
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	4313      	orrs	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004080:	2201      	movs	r2, #1
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	43db      	mvns	r3, r3
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	4013      	ands	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	091b      	lsrs	r3, r3, #4
 8004096:	f003 0201 	and.w	r2, r3, #1
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f003 0303 	and.w	r3, r3, #3
 80040b4:	2b03      	cmp	r3, #3
 80040b6:	d017      	beq.n	80040e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	2203      	movs	r2, #3
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	43db      	mvns	r3, r3
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	4013      	ands	r3, r2
 80040ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	4313      	orrs	r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f003 0303 	and.w	r3, r3, #3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d123      	bne.n	800413c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	08da      	lsrs	r2, r3, #3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3208      	adds	r2, #8
 80040fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004100:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	220f      	movs	r2, #15
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	43db      	mvns	r3, r3
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4013      	ands	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	691a      	ldr	r2, [r3, #16]
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	f003 0307 	and.w	r3, r3, #7
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	4313      	orrs	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	08da      	lsrs	r2, r3, #3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	3208      	adds	r2, #8
 8004136:	69b9      	ldr	r1, [r7, #24]
 8004138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	2203      	movs	r2, #3
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	43db      	mvns	r3, r3
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	4013      	ands	r3, r2
 8004152:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f003 0203 	and.w	r2, r3, #3
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	fa02 f303 	lsl.w	r3, r2, r3
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	4313      	orrs	r3, r2
 8004168:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 80b4 	beq.w	80042e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800417e:	2300      	movs	r3, #0
 8004180:	60fb      	str	r3, [r7, #12]
 8004182:	4b60      	ldr	r3, [pc, #384]	; (8004304 <HAL_GPIO_Init+0x30c>)
 8004184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004186:	4a5f      	ldr	r2, [pc, #380]	; (8004304 <HAL_GPIO_Init+0x30c>)
 8004188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800418c:	6453      	str	r3, [r2, #68]	; 0x44
 800418e:	4b5d      	ldr	r3, [pc, #372]	; (8004304 <HAL_GPIO_Init+0x30c>)
 8004190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800419a:	4a5b      	ldr	r2, [pc, #364]	; (8004308 <HAL_GPIO_Init+0x310>)
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	089b      	lsrs	r3, r3, #2
 80041a0:	3302      	adds	r3, #2
 80041a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	220f      	movs	r2, #15
 80041b2:	fa02 f303 	lsl.w	r3, r2, r3
 80041b6:	43db      	mvns	r3, r3
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	4013      	ands	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a52      	ldr	r2, [pc, #328]	; (800430c <HAL_GPIO_Init+0x314>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d02b      	beq.n	800421e <HAL_GPIO_Init+0x226>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a51      	ldr	r2, [pc, #324]	; (8004310 <HAL_GPIO_Init+0x318>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d025      	beq.n	800421a <HAL_GPIO_Init+0x222>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a50      	ldr	r2, [pc, #320]	; (8004314 <HAL_GPIO_Init+0x31c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d01f      	beq.n	8004216 <HAL_GPIO_Init+0x21e>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a4f      	ldr	r2, [pc, #316]	; (8004318 <HAL_GPIO_Init+0x320>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d019      	beq.n	8004212 <HAL_GPIO_Init+0x21a>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a4e      	ldr	r2, [pc, #312]	; (800431c <HAL_GPIO_Init+0x324>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d013      	beq.n	800420e <HAL_GPIO_Init+0x216>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a4d      	ldr	r2, [pc, #308]	; (8004320 <HAL_GPIO_Init+0x328>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d00d      	beq.n	800420a <HAL_GPIO_Init+0x212>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a4c      	ldr	r2, [pc, #304]	; (8004324 <HAL_GPIO_Init+0x32c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d007      	beq.n	8004206 <HAL_GPIO_Init+0x20e>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a4b      	ldr	r2, [pc, #300]	; (8004328 <HAL_GPIO_Init+0x330>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d101      	bne.n	8004202 <HAL_GPIO_Init+0x20a>
 80041fe:	2307      	movs	r3, #7
 8004200:	e00e      	b.n	8004220 <HAL_GPIO_Init+0x228>
 8004202:	2308      	movs	r3, #8
 8004204:	e00c      	b.n	8004220 <HAL_GPIO_Init+0x228>
 8004206:	2306      	movs	r3, #6
 8004208:	e00a      	b.n	8004220 <HAL_GPIO_Init+0x228>
 800420a:	2305      	movs	r3, #5
 800420c:	e008      	b.n	8004220 <HAL_GPIO_Init+0x228>
 800420e:	2304      	movs	r3, #4
 8004210:	e006      	b.n	8004220 <HAL_GPIO_Init+0x228>
 8004212:	2303      	movs	r3, #3
 8004214:	e004      	b.n	8004220 <HAL_GPIO_Init+0x228>
 8004216:	2302      	movs	r3, #2
 8004218:	e002      	b.n	8004220 <HAL_GPIO_Init+0x228>
 800421a:	2301      	movs	r3, #1
 800421c:	e000      	b.n	8004220 <HAL_GPIO_Init+0x228>
 800421e:	2300      	movs	r3, #0
 8004220:	69fa      	ldr	r2, [r7, #28]
 8004222:	f002 0203 	and.w	r2, r2, #3
 8004226:	0092      	lsls	r2, r2, #2
 8004228:	4093      	lsls	r3, r2
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	4313      	orrs	r3, r2
 800422e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004230:	4935      	ldr	r1, [pc, #212]	; (8004308 <HAL_GPIO_Init+0x310>)
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	089b      	lsrs	r3, r3, #2
 8004236:	3302      	adds	r3, #2
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800423e:	4b3b      	ldr	r3, [pc, #236]	; (800432c <HAL_GPIO_Init+0x334>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	43db      	mvns	r3, r3
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	4013      	ands	r3, r2
 800424c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	4313      	orrs	r3, r2
 8004260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004262:	4a32      	ldr	r2, [pc, #200]	; (800432c <HAL_GPIO_Init+0x334>)
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004268:	4b30      	ldr	r3, [pc, #192]	; (800432c <HAL_GPIO_Init+0x334>)
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	43db      	mvns	r3, r3
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	4013      	ands	r3, r2
 8004276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	4313      	orrs	r3, r2
 800428a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800428c:	4a27      	ldr	r2, [pc, #156]	; (800432c <HAL_GPIO_Init+0x334>)
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004292:	4b26      	ldr	r3, [pc, #152]	; (800432c <HAL_GPIO_Init+0x334>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	43db      	mvns	r3, r3
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	4013      	ands	r3, r2
 80042a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042b6:	4a1d      	ldr	r2, [pc, #116]	; (800432c <HAL_GPIO_Init+0x334>)
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042bc:	4b1b      	ldr	r3, [pc, #108]	; (800432c <HAL_GPIO_Init+0x334>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	43db      	mvns	r3, r3
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	4013      	ands	r3, r2
 80042ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	4313      	orrs	r3, r2
 80042de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042e0:	4a12      	ldr	r2, [pc, #72]	; (800432c <HAL_GPIO_Init+0x334>)
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	3301      	adds	r3, #1
 80042ea:	61fb      	str	r3, [r7, #28]
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	2b0f      	cmp	r3, #15
 80042f0:	f67f ae90 	bls.w	8004014 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042f4:	bf00      	nop
 80042f6:	bf00      	nop
 80042f8:	3724      	adds	r7, #36	; 0x24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	40023800 	.word	0x40023800
 8004308:	40013800 	.word	0x40013800
 800430c:	40020000 	.word	0x40020000
 8004310:	40020400 	.word	0x40020400
 8004314:	40020800 	.word	0x40020800
 8004318:	40020c00 	.word	0x40020c00
 800431c:	40021000 	.word	0x40021000
 8004320:	40021400 	.word	0x40021400
 8004324:	40021800 	.word	0x40021800
 8004328:	40021c00 	.word	0x40021c00
 800432c:	40013c00 	.word	0x40013c00

08004330 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800433a:	2300      	movs	r3, #0
 800433c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800433e:	2300      	movs	r3, #0
 8004340:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004342:	2300      	movs	r3, #0
 8004344:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004346:	2300      	movs	r3, #0
 8004348:	617b      	str	r3, [r7, #20]
 800434a:	e0cd      	b.n	80044e8 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800434c:	2201      	movs	r2, #1
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	fa02 f303 	lsl.w	r3, r2, r3
 8004354:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	4013      	ands	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	429a      	cmp	r2, r3
 8004364:	f040 80bd 	bne.w	80044e2 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004368:	4a65      	ldr	r2, [pc, #404]	; (8004500 <HAL_GPIO_DeInit+0x1d0>)
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	089b      	lsrs	r3, r3, #2
 800436e:	3302      	adds	r3, #2
 8004370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004374:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f003 0303 	and.w	r3, r3, #3
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	220f      	movs	r2, #15
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	4013      	ands	r3, r2
 8004388:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a5d      	ldr	r2, [pc, #372]	; (8004504 <HAL_GPIO_DeInit+0x1d4>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d02b      	beq.n	80043ea <HAL_GPIO_DeInit+0xba>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a5c      	ldr	r2, [pc, #368]	; (8004508 <HAL_GPIO_DeInit+0x1d8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d025      	beq.n	80043e6 <HAL_GPIO_DeInit+0xb6>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a5b      	ldr	r2, [pc, #364]	; (800450c <HAL_GPIO_DeInit+0x1dc>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d01f      	beq.n	80043e2 <HAL_GPIO_DeInit+0xb2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a5a      	ldr	r2, [pc, #360]	; (8004510 <HAL_GPIO_DeInit+0x1e0>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d019      	beq.n	80043de <HAL_GPIO_DeInit+0xae>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a59      	ldr	r2, [pc, #356]	; (8004514 <HAL_GPIO_DeInit+0x1e4>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d013      	beq.n	80043da <HAL_GPIO_DeInit+0xaa>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a58      	ldr	r2, [pc, #352]	; (8004518 <HAL_GPIO_DeInit+0x1e8>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d00d      	beq.n	80043d6 <HAL_GPIO_DeInit+0xa6>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a57      	ldr	r2, [pc, #348]	; (800451c <HAL_GPIO_DeInit+0x1ec>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d007      	beq.n	80043d2 <HAL_GPIO_DeInit+0xa2>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a56      	ldr	r2, [pc, #344]	; (8004520 <HAL_GPIO_DeInit+0x1f0>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d101      	bne.n	80043ce <HAL_GPIO_DeInit+0x9e>
 80043ca:	2307      	movs	r3, #7
 80043cc:	e00e      	b.n	80043ec <HAL_GPIO_DeInit+0xbc>
 80043ce:	2308      	movs	r3, #8
 80043d0:	e00c      	b.n	80043ec <HAL_GPIO_DeInit+0xbc>
 80043d2:	2306      	movs	r3, #6
 80043d4:	e00a      	b.n	80043ec <HAL_GPIO_DeInit+0xbc>
 80043d6:	2305      	movs	r3, #5
 80043d8:	e008      	b.n	80043ec <HAL_GPIO_DeInit+0xbc>
 80043da:	2304      	movs	r3, #4
 80043dc:	e006      	b.n	80043ec <HAL_GPIO_DeInit+0xbc>
 80043de:	2303      	movs	r3, #3
 80043e0:	e004      	b.n	80043ec <HAL_GPIO_DeInit+0xbc>
 80043e2:	2302      	movs	r3, #2
 80043e4:	e002      	b.n	80043ec <HAL_GPIO_DeInit+0xbc>
 80043e6:	2301      	movs	r3, #1
 80043e8:	e000      	b.n	80043ec <HAL_GPIO_DeInit+0xbc>
 80043ea:	2300      	movs	r3, #0
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	f002 0203 	and.w	r2, r2, #3
 80043f2:	0092      	lsls	r2, r2, #2
 80043f4:	4093      	lsls	r3, r2
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d132      	bne.n	8004462 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80043fc:	4b49      	ldr	r3, [pc, #292]	; (8004524 <HAL_GPIO_DeInit+0x1f4>)
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	43db      	mvns	r3, r3
 8004404:	4947      	ldr	r1, [pc, #284]	; (8004524 <HAL_GPIO_DeInit+0x1f4>)
 8004406:	4013      	ands	r3, r2
 8004408:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800440a:	4b46      	ldr	r3, [pc, #280]	; (8004524 <HAL_GPIO_DeInit+0x1f4>)
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	43db      	mvns	r3, r3
 8004412:	4944      	ldr	r1, [pc, #272]	; (8004524 <HAL_GPIO_DeInit+0x1f4>)
 8004414:	4013      	ands	r3, r2
 8004416:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004418:	4b42      	ldr	r3, [pc, #264]	; (8004524 <HAL_GPIO_DeInit+0x1f4>)
 800441a:	68da      	ldr	r2, [r3, #12]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	43db      	mvns	r3, r3
 8004420:	4940      	ldr	r1, [pc, #256]	; (8004524 <HAL_GPIO_DeInit+0x1f4>)
 8004422:	4013      	ands	r3, r2
 8004424:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004426:	4b3f      	ldr	r3, [pc, #252]	; (8004524 <HAL_GPIO_DeInit+0x1f4>)
 8004428:	689a      	ldr	r2, [r3, #8]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	43db      	mvns	r3, r3
 800442e:	493d      	ldr	r1, [pc, #244]	; (8004524 <HAL_GPIO_DeInit+0x1f4>)
 8004430:	4013      	ands	r3, r2
 8004432:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	220f      	movs	r2, #15
 800443e:	fa02 f303 	lsl.w	r3, r2, r3
 8004442:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004444:	4a2e      	ldr	r2, [pc, #184]	; (8004500 <HAL_GPIO_DeInit+0x1d0>)
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	089b      	lsrs	r3, r3, #2
 800444a:	3302      	adds	r3, #2
 800444c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	43da      	mvns	r2, r3
 8004454:	482a      	ldr	r0, [pc, #168]	; (8004500 <HAL_GPIO_DeInit+0x1d0>)
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	089b      	lsrs	r3, r3, #2
 800445a:	400a      	ands	r2, r1
 800445c:	3302      	adds	r3, #2
 800445e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	2103      	movs	r1, #3
 800446c:	fa01 f303 	lsl.w	r3, r1, r3
 8004470:	43db      	mvns	r3, r3
 8004472:	401a      	ands	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	08da      	lsrs	r2, r3, #3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3208      	adds	r2, #8
 8004480:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f003 0307 	and.w	r3, r3, #7
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	220f      	movs	r2, #15
 800448e:	fa02 f303 	lsl.w	r3, r2, r3
 8004492:	43db      	mvns	r3, r3
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	08d2      	lsrs	r2, r2, #3
 8004498:	4019      	ands	r1, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	3208      	adds	r2, #8
 800449e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	2103      	movs	r1, #3
 80044ac:	fa01 f303 	lsl.w	r3, r1, r3
 80044b0:	43db      	mvns	r3, r3
 80044b2:	401a      	ands	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	2101      	movs	r1, #1
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	fa01 f303 	lsl.w	r3, r1, r3
 80044c4:	43db      	mvns	r3, r3
 80044c6:	401a      	ands	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	2103      	movs	r1, #3
 80044d6:	fa01 f303 	lsl.w	r3, r1, r3
 80044da:	43db      	mvns	r3, r3
 80044dc:	401a      	ands	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	3301      	adds	r3, #1
 80044e6:	617b      	str	r3, [r7, #20]
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	2b0f      	cmp	r3, #15
 80044ec:	f67f af2e 	bls.w	800434c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80044f0:	bf00      	nop
 80044f2:	bf00      	nop
 80044f4:	371c      	adds	r7, #28
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	40013800 	.word	0x40013800
 8004504:	40020000 	.word	0x40020000
 8004508:	40020400 	.word	0x40020400
 800450c:	40020800 	.word	0x40020800
 8004510:	40020c00 	.word	0x40020c00
 8004514:	40021000 	.word	0x40021000
 8004518:	40021400 	.word	0x40021400
 800451c:	40021800 	.word	0x40021800
 8004520:	40021c00 	.word	0x40021c00
 8004524:	40013c00 	.word	0x40013c00

08004528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	460b      	mov	r3, r1
 8004532:	807b      	strh	r3, [r7, #2]
 8004534:	4613      	mov	r3, r2
 8004536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004538:	787b      	ldrb	r3, [r7, #1]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800453e:	887a      	ldrh	r2, [r7, #2]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004544:	e003      	b.n	800454e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004546:	887b      	ldrh	r3, [r7, #2]
 8004548:	041a      	lsls	r2, r3, #16
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	619a      	str	r2, [r3, #24]
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
	...

0800455c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	4603      	mov	r3, r0
 8004564:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004566:	4b08      	ldr	r3, [pc, #32]	; (8004588 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004568:	695a      	ldr	r2, [r3, #20]
 800456a:	88fb      	ldrh	r3, [r7, #6]
 800456c:	4013      	ands	r3, r2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d006      	beq.n	8004580 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004572:	4a05      	ldr	r2, [pc, #20]	; (8004588 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004574:	88fb      	ldrh	r3, [r7, #6]
 8004576:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004578:	88fb      	ldrh	r3, [r7, #6]
 800457a:	4618      	mov	r0, r3
 800457c:	f7fd fe0e 	bl	800219c <HAL_GPIO_EXTI_Callback>
  }
}
 8004580:	bf00      	nop
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	40013c00 	.word	0x40013c00

0800458c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800458c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800458e:	b08f      	sub	sp, #60	; 0x3c
 8004590:	af0a      	add	r7, sp, #40	; 0x28
 8004592:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e054      	b.n	8004648 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d106      	bne.n	80045be <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f00f f88b 	bl	80136d4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2203      	movs	r2, #3
 80045c2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d102      	bne.n	80045d8 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4618      	mov	r0, r3
 80045de:	f007 fc95 	bl	800bf0c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	603b      	str	r3, [r7, #0]
 80045e8:	687e      	ldr	r6, [r7, #4]
 80045ea:	466d      	mov	r5, sp
 80045ec:	f106 0410 	add.w	r4, r6, #16
 80045f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80045fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8004600:	1d33      	adds	r3, r6, #4
 8004602:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004604:	6838      	ldr	r0, [r7, #0]
 8004606:	f007 fc0f 	bl	800be28 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2101      	movs	r1, #1
 8004610:	4618      	mov	r0, r3
 8004612:	f007 fc8c 	bl	800bf2e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	603b      	str	r3, [r7, #0]
 800461c:	687e      	ldr	r6, [r7, #4]
 800461e:	466d      	mov	r5, sp
 8004620:	f106 0410 	add.w	r4, r6, #16
 8004624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004626:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004628:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800462a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800462c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004630:	e885 0003 	stmia.w	r5, {r0, r1}
 8004634:	1d33      	adds	r3, r6, #4
 8004636:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004638:	6838      	ldr	r0, [r7, #0]
 800463a:	f007 fe15 	bl	800c268 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004650 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004650:	b590      	push	{r4, r7, lr}
 8004652:	b089      	sub	sp, #36	; 0x24
 8004654:	af04      	add	r7, sp, #16
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	4608      	mov	r0, r1
 800465a:	4611      	mov	r1, r2
 800465c:	461a      	mov	r2, r3
 800465e:	4603      	mov	r3, r0
 8004660:	70fb      	strb	r3, [r7, #3]
 8004662:	460b      	mov	r3, r1
 8004664:	70bb      	strb	r3, [r7, #2]
 8004666:	4613      	mov	r3, r2
 8004668:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004670:	2b01      	cmp	r3, #1
 8004672:	d101      	bne.n	8004678 <HAL_HCD_HC_Init+0x28>
 8004674:	2302      	movs	r3, #2
 8004676:	e076      	b.n	8004766 <HAL_HCD_HC_Init+0x116>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8004680:	78fb      	ldrb	r3, [r7, #3]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	212c      	movs	r1, #44	; 0x2c
 8004686:	fb01 f303 	mul.w	r3, r1, r3
 800468a:	4413      	add	r3, r2
 800468c:	333d      	adds	r3, #61	; 0x3d
 800468e:	2200      	movs	r2, #0
 8004690:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004692:	78fb      	ldrb	r3, [r7, #3]
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	212c      	movs	r1, #44	; 0x2c
 8004698:	fb01 f303 	mul.w	r3, r1, r3
 800469c:	4413      	add	r3, r2
 800469e:	3338      	adds	r3, #56	; 0x38
 80046a0:	787a      	ldrb	r2, [r7, #1]
 80046a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80046a4:	78fb      	ldrb	r3, [r7, #3]
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	212c      	movs	r1, #44	; 0x2c
 80046aa:	fb01 f303 	mul.w	r3, r1, r3
 80046ae:	4413      	add	r3, r2
 80046b0:	3340      	adds	r3, #64	; 0x40
 80046b2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80046b4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80046b6:	78fb      	ldrb	r3, [r7, #3]
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	212c      	movs	r1, #44	; 0x2c
 80046bc:	fb01 f303 	mul.w	r3, r1, r3
 80046c0:	4413      	add	r3, r2
 80046c2:	3339      	adds	r3, #57	; 0x39
 80046c4:	78fa      	ldrb	r2, [r7, #3]
 80046c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80046c8:	78fb      	ldrb	r3, [r7, #3]
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	212c      	movs	r1, #44	; 0x2c
 80046ce:	fb01 f303 	mul.w	r3, r1, r3
 80046d2:	4413      	add	r3, r2
 80046d4:	333f      	adds	r3, #63	; 0x3f
 80046d6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80046da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80046dc:	78fb      	ldrb	r3, [r7, #3]
 80046de:	78ba      	ldrb	r2, [r7, #2]
 80046e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80046e4:	b2d0      	uxtb	r0, r2
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	212c      	movs	r1, #44	; 0x2c
 80046ea:	fb01 f303 	mul.w	r3, r1, r3
 80046ee:	4413      	add	r3, r2
 80046f0:	333a      	adds	r3, #58	; 0x3a
 80046f2:	4602      	mov	r2, r0
 80046f4:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80046f6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	da09      	bge.n	8004712 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80046fe:	78fb      	ldrb	r3, [r7, #3]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	212c      	movs	r1, #44	; 0x2c
 8004704:	fb01 f303 	mul.w	r3, r1, r3
 8004708:	4413      	add	r3, r2
 800470a:	333b      	adds	r3, #59	; 0x3b
 800470c:	2201      	movs	r2, #1
 800470e:	701a      	strb	r2, [r3, #0]
 8004710:	e008      	b.n	8004724 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004712:	78fb      	ldrb	r3, [r7, #3]
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	212c      	movs	r1, #44	; 0x2c
 8004718:	fb01 f303 	mul.w	r3, r1, r3
 800471c:	4413      	add	r3, r2
 800471e:	333b      	adds	r3, #59	; 0x3b
 8004720:	2200      	movs	r2, #0
 8004722:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004724:	78fb      	ldrb	r3, [r7, #3]
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	212c      	movs	r1, #44	; 0x2c
 800472a:	fb01 f303 	mul.w	r3, r1, r3
 800472e:	4413      	add	r3, r2
 8004730:	333c      	adds	r3, #60	; 0x3c
 8004732:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004736:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6818      	ldr	r0, [r3, #0]
 800473c:	787c      	ldrb	r4, [r7, #1]
 800473e:	78ba      	ldrb	r2, [r7, #2]
 8004740:	78f9      	ldrb	r1, [r7, #3]
 8004742:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004744:	9302      	str	r3, [sp, #8]
 8004746:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800474a:	9301      	str	r3, [sp, #4]
 800474c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	4623      	mov	r3, r4
 8004754:	f007 ff0e 	bl	800c574 <USB_HC_Init>
 8004758:	4603      	mov	r3, r0
 800475a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004764:	7bfb      	ldrb	r3, [r7, #15]
}
 8004766:	4618      	mov	r0, r3
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	bd90      	pop	{r4, r7, pc}

0800476e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b084      	sub	sp, #16
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
 8004776:	460b      	mov	r3, r1
 8004778:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004784:	2b01      	cmp	r3, #1
 8004786:	d101      	bne.n	800478c <HAL_HCD_HC_Halt+0x1e>
 8004788:	2302      	movs	r3, #2
 800478a:	e00f      	b.n	80047ac <HAL_HCD_HC_Halt+0x3e>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	78fa      	ldrb	r2, [r7, #3]
 800479a:	4611      	mov	r1, r2
 800479c:	4618      	mov	r0, r3
 800479e:	f008 f95e 	bl	800ca5e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80047aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	4608      	mov	r0, r1
 80047be:	4611      	mov	r1, r2
 80047c0:	461a      	mov	r2, r3
 80047c2:	4603      	mov	r3, r0
 80047c4:	70fb      	strb	r3, [r7, #3]
 80047c6:	460b      	mov	r3, r1
 80047c8:	70bb      	strb	r3, [r7, #2]
 80047ca:	4613      	mov	r3, r2
 80047cc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80047ce:	78fb      	ldrb	r3, [r7, #3]
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	212c      	movs	r1, #44	; 0x2c
 80047d4:	fb01 f303 	mul.w	r3, r1, r3
 80047d8:	4413      	add	r3, r2
 80047da:	333b      	adds	r3, #59	; 0x3b
 80047dc:	78ba      	ldrb	r2, [r7, #2]
 80047de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80047e0:	78fb      	ldrb	r3, [r7, #3]
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	212c      	movs	r1, #44	; 0x2c
 80047e6:	fb01 f303 	mul.w	r3, r1, r3
 80047ea:	4413      	add	r3, r2
 80047ec:	333f      	adds	r3, #63	; 0x3f
 80047ee:	787a      	ldrb	r2, [r7, #1]
 80047f0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80047f2:	7c3b      	ldrb	r3, [r7, #16]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d112      	bne.n	800481e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80047f8:	78fb      	ldrb	r3, [r7, #3]
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	212c      	movs	r1, #44	; 0x2c
 80047fe:	fb01 f303 	mul.w	r3, r1, r3
 8004802:	4413      	add	r3, r2
 8004804:	3342      	adds	r3, #66	; 0x42
 8004806:	2203      	movs	r2, #3
 8004808:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800480a:	78fb      	ldrb	r3, [r7, #3]
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	212c      	movs	r1, #44	; 0x2c
 8004810:	fb01 f303 	mul.w	r3, r1, r3
 8004814:	4413      	add	r3, r2
 8004816:	333d      	adds	r3, #61	; 0x3d
 8004818:	7f3a      	ldrb	r2, [r7, #28]
 800481a:	701a      	strb	r2, [r3, #0]
 800481c:	e008      	b.n	8004830 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800481e:	78fb      	ldrb	r3, [r7, #3]
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	212c      	movs	r1, #44	; 0x2c
 8004824:	fb01 f303 	mul.w	r3, r1, r3
 8004828:	4413      	add	r3, r2
 800482a:	3342      	adds	r3, #66	; 0x42
 800482c:	2202      	movs	r2, #2
 800482e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004830:	787b      	ldrb	r3, [r7, #1]
 8004832:	2b03      	cmp	r3, #3
 8004834:	f200 80c6 	bhi.w	80049c4 <HAL_HCD_HC_SubmitRequest+0x210>
 8004838:	a201      	add	r2, pc, #4	; (adr r2, 8004840 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800483a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483e:	bf00      	nop
 8004840:	08004851 	.word	0x08004851
 8004844:	080049b1 	.word	0x080049b1
 8004848:	080048b5 	.word	0x080048b5
 800484c:	08004933 	.word	0x08004933
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004850:	7c3b      	ldrb	r3, [r7, #16]
 8004852:	2b01      	cmp	r3, #1
 8004854:	f040 80b8 	bne.w	80049c8 <HAL_HCD_HC_SubmitRequest+0x214>
 8004858:	78bb      	ldrb	r3, [r7, #2]
 800485a:	2b00      	cmp	r3, #0
 800485c:	f040 80b4 	bne.w	80049c8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004860:	8b3b      	ldrh	r3, [r7, #24]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d108      	bne.n	8004878 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004866:	78fb      	ldrb	r3, [r7, #3]
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	212c      	movs	r1, #44	; 0x2c
 800486c:	fb01 f303 	mul.w	r3, r1, r3
 8004870:	4413      	add	r3, r2
 8004872:	3355      	adds	r3, #85	; 0x55
 8004874:	2201      	movs	r2, #1
 8004876:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004878:	78fb      	ldrb	r3, [r7, #3]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	212c      	movs	r1, #44	; 0x2c
 800487e:	fb01 f303 	mul.w	r3, r1, r3
 8004882:	4413      	add	r3, r2
 8004884:	3355      	adds	r3, #85	; 0x55
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d109      	bne.n	80048a0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800488c:	78fb      	ldrb	r3, [r7, #3]
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	212c      	movs	r1, #44	; 0x2c
 8004892:	fb01 f303 	mul.w	r3, r1, r3
 8004896:	4413      	add	r3, r2
 8004898:	3342      	adds	r3, #66	; 0x42
 800489a:	2200      	movs	r2, #0
 800489c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800489e:	e093      	b.n	80049c8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80048a0:	78fb      	ldrb	r3, [r7, #3]
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	212c      	movs	r1, #44	; 0x2c
 80048a6:	fb01 f303 	mul.w	r3, r1, r3
 80048aa:	4413      	add	r3, r2
 80048ac:	3342      	adds	r3, #66	; 0x42
 80048ae:	2202      	movs	r2, #2
 80048b0:	701a      	strb	r2, [r3, #0]
      break;
 80048b2:	e089      	b.n	80049c8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80048b4:	78bb      	ldrb	r3, [r7, #2]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d11d      	bne.n	80048f6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80048ba:	78fb      	ldrb	r3, [r7, #3]
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	212c      	movs	r1, #44	; 0x2c
 80048c0:	fb01 f303 	mul.w	r3, r1, r3
 80048c4:	4413      	add	r3, r2
 80048c6:	3355      	adds	r3, #85	; 0x55
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d109      	bne.n	80048e2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80048ce:	78fb      	ldrb	r3, [r7, #3]
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	212c      	movs	r1, #44	; 0x2c
 80048d4:	fb01 f303 	mul.w	r3, r1, r3
 80048d8:	4413      	add	r3, r2
 80048da:	3342      	adds	r3, #66	; 0x42
 80048dc:	2200      	movs	r2, #0
 80048de:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80048e0:	e073      	b.n	80049ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80048e2:	78fb      	ldrb	r3, [r7, #3]
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	212c      	movs	r1, #44	; 0x2c
 80048e8:	fb01 f303 	mul.w	r3, r1, r3
 80048ec:	4413      	add	r3, r2
 80048ee:	3342      	adds	r3, #66	; 0x42
 80048f0:	2202      	movs	r2, #2
 80048f2:	701a      	strb	r2, [r3, #0]
      break;
 80048f4:	e069      	b.n	80049ca <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80048f6:	78fb      	ldrb	r3, [r7, #3]
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	212c      	movs	r1, #44	; 0x2c
 80048fc:	fb01 f303 	mul.w	r3, r1, r3
 8004900:	4413      	add	r3, r2
 8004902:	3354      	adds	r3, #84	; 0x54
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d109      	bne.n	800491e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800490a:	78fb      	ldrb	r3, [r7, #3]
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	212c      	movs	r1, #44	; 0x2c
 8004910:	fb01 f303 	mul.w	r3, r1, r3
 8004914:	4413      	add	r3, r2
 8004916:	3342      	adds	r3, #66	; 0x42
 8004918:	2200      	movs	r2, #0
 800491a:	701a      	strb	r2, [r3, #0]
      break;
 800491c:	e055      	b.n	80049ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800491e:	78fb      	ldrb	r3, [r7, #3]
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	212c      	movs	r1, #44	; 0x2c
 8004924:	fb01 f303 	mul.w	r3, r1, r3
 8004928:	4413      	add	r3, r2
 800492a:	3342      	adds	r3, #66	; 0x42
 800492c:	2202      	movs	r2, #2
 800492e:	701a      	strb	r2, [r3, #0]
      break;
 8004930:	e04b      	b.n	80049ca <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004932:	78bb      	ldrb	r3, [r7, #2]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d11d      	bne.n	8004974 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004938:	78fb      	ldrb	r3, [r7, #3]
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	212c      	movs	r1, #44	; 0x2c
 800493e:	fb01 f303 	mul.w	r3, r1, r3
 8004942:	4413      	add	r3, r2
 8004944:	3355      	adds	r3, #85	; 0x55
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d109      	bne.n	8004960 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800494c:	78fb      	ldrb	r3, [r7, #3]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	212c      	movs	r1, #44	; 0x2c
 8004952:	fb01 f303 	mul.w	r3, r1, r3
 8004956:	4413      	add	r3, r2
 8004958:	3342      	adds	r3, #66	; 0x42
 800495a:	2200      	movs	r2, #0
 800495c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800495e:	e034      	b.n	80049ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004960:	78fb      	ldrb	r3, [r7, #3]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	212c      	movs	r1, #44	; 0x2c
 8004966:	fb01 f303 	mul.w	r3, r1, r3
 800496a:	4413      	add	r3, r2
 800496c:	3342      	adds	r3, #66	; 0x42
 800496e:	2202      	movs	r2, #2
 8004970:	701a      	strb	r2, [r3, #0]
      break;
 8004972:	e02a      	b.n	80049ca <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004974:	78fb      	ldrb	r3, [r7, #3]
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	212c      	movs	r1, #44	; 0x2c
 800497a:	fb01 f303 	mul.w	r3, r1, r3
 800497e:	4413      	add	r3, r2
 8004980:	3354      	adds	r3, #84	; 0x54
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d109      	bne.n	800499c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004988:	78fb      	ldrb	r3, [r7, #3]
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	212c      	movs	r1, #44	; 0x2c
 800498e:	fb01 f303 	mul.w	r3, r1, r3
 8004992:	4413      	add	r3, r2
 8004994:	3342      	adds	r3, #66	; 0x42
 8004996:	2200      	movs	r2, #0
 8004998:	701a      	strb	r2, [r3, #0]
      break;
 800499a:	e016      	b.n	80049ca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800499c:	78fb      	ldrb	r3, [r7, #3]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	212c      	movs	r1, #44	; 0x2c
 80049a2:	fb01 f303 	mul.w	r3, r1, r3
 80049a6:	4413      	add	r3, r2
 80049a8:	3342      	adds	r3, #66	; 0x42
 80049aa:	2202      	movs	r2, #2
 80049ac:	701a      	strb	r2, [r3, #0]
      break;
 80049ae:	e00c      	b.n	80049ca <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80049b0:	78fb      	ldrb	r3, [r7, #3]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	212c      	movs	r1, #44	; 0x2c
 80049b6:	fb01 f303 	mul.w	r3, r1, r3
 80049ba:	4413      	add	r3, r2
 80049bc:	3342      	adds	r3, #66	; 0x42
 80049be:	2200      	movs	r2, #0
 80049c0:	701a      	strb	r2, [r3, #0]
      break;
 80049c2:	e002      	b.n	80049ca <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80049c4:	bf00      	nop
 80049c6:	e000      	b.n	80049ca <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80049c8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80049ca:	78fb      	ldrb	r3, [r7, #3]
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	212c      	movs	r1, #44	; 0x2c
 80049d0:	fb01 f303 	mul.w	r3, r1, r3
 80049d4:	4413      	add	r3, r2
 80049d6:	3344      	adds	r3, #68	; 0x44
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80049dc:	78fb      	ldrb	r3, [r7, #3]
 80049de:	8b3a      	ldrh	r2, [r7, #24]
 80049e0:	6879      	ldr	r1, [r7, #4]
 80049e2:	202c      	movs	r0, #44	; 0x2c
 80049e4:	fb00 f303 	mul.w	r3, r0, r3
 80049e8:	440b      	add	r3, r1
 80049ea:	334c      	adds	r3, #76	; 0x4c
 80049ec:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80049ee:	78fb      	ldrb	r3, [r7, #3]
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	212c      	movs	r1, #44	; 0x2c
 80049f4:	fb01 f303 	mul.w	r3, r1, r3
 80049f8:	4413      	add	r3, r2
 80049fa:	3360      	adds	r3, #96	; 0x60
 80049fc:	2200      	movs	r2, #0
 80049fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004a00:	78fb      	ldrb	r3, [r7, #3]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	212c      	movs	r1, #44	; 0x2c
 8004a06:	fb01 f303 	mul.w	r3, r1, r3
 8004a0a:	4413      	add	r3, r2
 8004a0c:	3350      	adds	r3, #80	; 0x50
 8004a0e:	2200      	movs	r2, #0
 8004a10:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004a12:	78fb      	ldrb	r3, [r7, #3]
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	212c      	movs	r1, #44	; 0x2c
 8004a18:	fb01 f303 	mul.w	r3, r1, r3
 8004a1c:	4413      	add	r3, r2
 8004a1e:	3339      	adds	r3, #57	; 0x39
 8004a20:	78fa      	ldrb	r2, [r7, #3]
 8004a22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004a24:	78fb      	ldrb	r3, [r7, #3]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	212c      	movs	r1, #44	; 0x2c
 8004a2a:	fb01 f303 	mul.w	r3, r1, r3
 8004a2e:	4413      	add	r3, r2
 8004a30:	3361      	adds	r3, #97	; 0x61
 8004a32:	2200      	movs	r2, #0
 8004a34:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6818      	ldr	r0, [r3, #0]
 8004a3a:	78fb      	ldrb	r3, [r7, #3]
 8004a3c:	222c      	movs	r2, #44	; 0x2c
 8004a3e:	fb02 f303 	mul.w	r3, r2, r3
 8004a42:	3338      	adds	r3, #56	; 0x38
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	18d1      	adds	r1, r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	461a      	mov	r2, r3
 8004a50:	f007 feb2 	bl	800c7b8 <USB_HC_StartXfer>
 8004a54:	4603      	mov	r3, r0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop

08004a60 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f007 fbb3 	bl	800c1e2 <USB_GetMode>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	f040 80f6 	bne.w	8004c70 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f007 fb97 	bl	800c1bc <USB_ReadInterrupts>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 80ec 	beq.w	8004c6e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f007 fb8e 	bl	800c1bc <USB_ReadInterrupts>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aa6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004aaa:	d104      	bne.n	8004ab6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004ab4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f007 fb7e 	bl	800c1bc <USB_ReadInterrupts>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aca:	d104      	bne.n	8004ad6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004ad4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f007 fb6e 	bl	800c1bc <USB_ReadInterrupts>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ae6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004aea:	d104      	bne.n	8004af6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004af4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f007 fb5e 	bl	800c1bc <USB_ReadInterrupts>
 8004b00:	4603      	mov	r3, r0
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d103      	bne.n	8004b12 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f007 fb50 	bl	800c1bc <USB_ReadInterrupts>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b26:	d11c      	bne.n	8004b62 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004b30:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10f      	bne.n	8004b62 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004b42:	2110      	movs	r1, #16
 8004b44:	6938      	ldr	r0, [r7, #16]
 8004b46:	f007 fa3f 	bl	800bfc8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004b4a:	6938      	ldr	r0, [r7, #16]
 8004b4c:	f007 fa70 	bl	800c030 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2101      	movs	r1, #1
 8004b56:	4618      	mov	r0, r3
 8004b58:	f007 fc46 	bl	800c3e8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f00e fe37 	bl	80137d0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f007 fb28 	bl	800c1bc <USB_ReadInterrupts>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b76:	d102      	bne.n	8004b7e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f001 f89e 	bl	8005cba <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f007 fb1a 	bl	800c1bc <USB_ReadInterrupts>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	f003 0308 	and.w	r3, r3, #8
 8004b8e:	2b08      	cmp	r3, #8
 8004b90:	d106      	bne.n	8004ba0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f00e fe00 	bl	8013798 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2208      	movs	r2, #8
 8004b9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f007 fb09 	bl	800c1bc <USB_ReadInterrupts>
 8004baa:	4603      	mov	r3, r0
 8004bac:	f003 0310 	and.w	r3, r3, #16
 8004bb0:	2b10      	cmp	r3, #16
 8004bb2:	d101      	bne.n	8004bb8 <HAL_HCD_IRQHandler+0x158>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e000      	b.n	8004bba <HAL_HCD_IRQHandler+0x15a>
 8004bb8:	2300      	movs	r3, #0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d012      	beq.n	8004be4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	699a      	ldr	r2, [r3, #24]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 0210 	bic.w	r2, r2, #16
 8004bcc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 ffa1 	bl	8005b16 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	699a      	ldr	r2, [r3, #24]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f042 0210 	orr.w	r2, r2, #16
 8004be2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f007 fae7 	bl	800c1bc <USB_ReadInterrupts>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bf8:	d13a      	bne.n	8004c70 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f007 ff1c 	bl	800ca3c <USB_HC_ReadInterrupt>
 8004c04:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004c06:	2300      	movs	r3, #0
 8004c08:	617b      	str	r3, [r7, #20]
 8004c0a:	e025      	b.n	8004c58 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f003 030f 	and.w	r3, r3, #15
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	fa22 f303 	lsr.w	r3, r2, r3
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d018      	beq.n	8004c52 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c36:	d106      	bne.n	8004c46 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f8ab 	bl	8004d9a <HCD_HC_IN_IRQHandler>
 8004c44:	e005      	b.n	8004c52 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 fbf9 	bl	8005444 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	3301      	adds	r3, #1
 8004c56:	617b      	str	r3, [r7, #20]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d3d4      	bcc.n	8004c0c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c6a:	615a      	str	r2, [r3, #20]
 8004c6c:	e000      	b.n	8004c70 <HAL_HCD_IRQHandler+0x210>
      return;
 8004c6e:	bf00      	nop
    }
  }
}
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b082      	sub	sp, #8
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d101      	bne.n	8004c8c <HAL_HCD_Start+0x16>
 8004c88:	2302      	movs	r3, #2
 8004c8a:	e013      	b.n	8004cb4 <HAL_HCD_Start+0x3e>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2101      	movs	r1, #1
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f007 fc08 	bl	800c4b0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f007 f920 	bl	800beea <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3708      	adds	r7, #8
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d101      	bne.n	8004cd2 <HAL_HCD_Stop+0x16>
 8004cce:	2302      	movs	r3, #2
 8004cd0:	e00d      	b.n	8004cee <HAL_HCD_Stop+0x32>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f007 fff6 	bl	800ccd0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b082      	sub	sp, #8
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f007 fbaa 	bl	800c45c <USB_ResetPort>
 8004d08:	4603      	mov	r3, r0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3708      	adds	r7, #8
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b083      	sub	sp, #12
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004d1e:	78fb      	ldrb	r3, [r7, #3]
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	212c      	movs	r1, #44	; 0x2c
 8004d24:	fb01 f303 	mul.w	r3, r1, r3
 8004d28:	4413      	add	r3, r2
 8004d2a:	3360      	adds	r3, #96	; 0x60
 8004d2c:	781b      	ldrb	r3, [r3, #0]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b083      	sub	sp, #12
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
 8004d42:	460b      	mov	r3, r1
 8004d44:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004d46:	78fb      	ldrb	r3, [r7, #3]
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	212c      	movs	r1, #44	; 0x2c
 8004d4c:	fb01 f303 	mul.w	r3, r1, r3
 8004d50:	4413      	add	r3, r2
 8004d52:	3350      	adds	r3, #80	; 0x50
 8004d54:	681b      	ldr	r3, [r3, #0]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b082      	sub	sp, #8
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f007 fbee 	bl	800c550 <USB_GetCurrentFrame>
 8004d74:	4603      	mov	r3, r0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b082      	sub	sp, #8
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f007 fbc9 	bl	800c522 <USB_GetHostSpeed>
 8004d90:	4603      	mov	r3, r0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b086      	sub	sp, #24
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
 8004da2:	460b      	mov	r3, r1
 8004da4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004db0:	78fb      	ldrb	r3, [r7, #3]
 8004db2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 0304 	and.w	r3, r3, #4
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	d11a      	bne.n	8004e00 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	2304      	movs	r3, #4
 8004dda:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	212c      	movs	r1, #44	; 0x2c
 8004de2:	fb01 f303 	mul.w	r3, r1, r3
 8004de6:	4413      	add	r3, r2
 8004de8:	3361      	adds	r3, #97	; 0x61
 8004dea:	2206      	movs	r2, #6
 8004dec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	b2d2      	uxtb	r2, r2
 8004df6:	4611      	mov	r1, r2
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f007 fe30 	bl	800ca5e <USB_HC_Halt>
 8004dfe:	e0af      	b.n	8004f60 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	015a      	lsls	r2, r3, #5
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e16:	d11b      	bne.n	8004e50 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e24:	461a      	mov	r2, r3
 8004e26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e2a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	212c      	movs	r1, #44	; 0x2c
 8004e32:	fb01 f303 	mul.w	r3, r1, r3
 8004e36:	4413      	add	r3, r2
 8004e38:	3361      	adds	r3, #97	; 0x61
 8004e3a:	2207      	movs	r2, #7
 8004e3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	b2d2      	uxtb	r2, r2
 8004e46:	4611      	mov	r1, r2
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f007 fe08 	bl	800ca5e <USB_HC_Halt>
 8004e4e:	e087      	b.n	8004f60 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 0320 	and.w	r3, r3, #32
 8004e62:	2b20      	cmp	r3, #32
 8004e64:	d109      	bne.n	8004e7a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	015a      	lsls	r2, r3, #5
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e72:	461a      	mov	r2, r3
 8004e74:	2320      	movs	r3, #32
 8004e76:	6093      	str	r3, [r2, #8]
 8004e78:	e072      	b.n	8004f60 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	015a      	lsls	r2, r3, #5
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f003 0308 	and.w	r3, r3, #8
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d11a      	bne.n	8004ec6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	2308      	movs	r3, #8
 8004ea0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	212c      	movs	r1, #44	; 0x2c
 8004ea8:	fb01 f303 	mul.w	r3, r1, r3
 8004eac:	4413      	add	r3, r2
 8004eae:	3361      	adds	r3, #97	; 0x61
 8004eb0:	2205      	movs	r2, #5
 8004eb2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	b2d2      	uxtb	r2, r2
 8004ebc:	4611      	mov	r1, r2
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f007 fdcd 	bl	800ca5e <USB_HC_Halt>
 8004ec4:	e04c      	b.n	8004f60 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004edc:	d11b      	bne.n	8004f16 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	015a      	lsls	r2, r3, #5
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eea:	461a      	mov	r2, r3
 8004eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ef0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	212c      	movs	r1, #44	; 0x2c
 8004ef8:	fb01 f303 	mul.w	r3, r1, r3
 8004efc:	4413      	add	r3, r2
 8004efe:	3361      	adds	r3, #97	; 0x61
 8004f00:	2208      	movs	r2, #8
 8004f02:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	b2d2      	uxtb	r2, r2
 8004f0c:	4611      	mov	r1, r2
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f007 fda5 	bl	800ca5e <USB_HC_Halt>
 8004f14:	e024      	b.n	8004f60 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	015a      	lsls	r2, r3, #5
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f28:	2b80      	cmp	r3, #128	; 0x80
 8004f2a:	d119      	bne.n	8004f60 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	015a      	lsls	r2, r3, #5
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	4413      	add	r3, r2
 8004f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f38:	461a      	mov	r2, r3
 8004f3a:	2380      	movs	r3, #128	; 0x80
 8004f3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	212c      	movs	r1, #44	; 0x2c
 8004f44:	fb01 f303 	mul.w	r3, r1, r3
 8004f48:	4413      	add	r3, r2
 8004f4a:	3361      	adds	r3, #97	; 0x61
 8004f4c:	2206      	movs	r2, #6
 8004f4e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	4611      	mov	r1, r2
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f007 fd7f 	bl	800ca5e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f76:	d112      	bne.n	8004f9e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	b2d2      	uxtb	r2, r2
 8004f80:	4611      	mov	r1, r2
 8004f82:	4618      	mov	r0, r3
 8004f84:	f007 fd6b 	bl	800ca5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f94:	461a      	mov	r2, r3
 8004f96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f9a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004f9c:	e24e      	b.n	800543c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f003 0301 	and.w	r3, r3, #1
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	f040 80df 	bne.w	8005174 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d019      	beq.n	8004ff2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	212c      	movs	r1, #44	; 0x2c
 8004fc4:	fb01 f303 	mul.w	r3, r1, r3
 8004fc8:	4413      	add	r3, r2
 8004fca:	3348      	adds	r3, #72	; 0x48
 8004fcc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	0159      	lsls	r1, r3, #5
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	440b      	add	r3, r1
 8004fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004fe0:	1ad2      	subs	r2, r2, r3
 8004fe2:	6879      	ldr	r1, [r7, #4]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	202c      	movs	r0, #44	; 0x2c
 8004fe8:	fb00 f303 	mul.w	r3, r0, r3
 8004fec:	440b      	add	r3, r1
 8004fee:	3350      	adds	r3, #80	; 0x50
 8004ff0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	212c      	movs	r1, #44	; 0x2c
 8004ff8:	fb01 f303 	mul.w	r3, r1, r3
 8004ffc:	4413      	add	r3, r2
 8004ffe:	3361      	adds	r3, #97	; 0x61
 8005000:	2201      	movs	r2, #1
 8005002:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	212c      	movs	r1, #44	; 0x2c
 800500a:	fb01 f303 	mul.w	r3, r1, r3
 800500e:	4413      	add	r3, r2
 8005010:	335c      	adds	r3, #92	; 0x5c
 8005012:	2200      	movs	r2, #0
 8005014:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	4413      	add	r3, r2
 800501e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005022:	461a      	mov	r2, r3
 8005024:	2301      	movs	r3, #1
 8005026:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	212c      	movs	r1, #44	; 0x2c
 800502e:	fb01 f303 	mul.w	r3, r1, r3
 8005032:	4413      	add	r3, r2
 8005034:	333f      	adds	r3, #63	; 0x3f
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d009      	beq.n	8005050 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	212c      	movs	r1, #44	; 0x2c
 8005042:	fb01 f303 	mul.w	r3, r1, r3
 8005046:	4413      	add	r3, r2
 8005048:	333f      	adds	r3, #63	; 0x3f
 800504a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800504c:	2b02      	cmp	r3, #2
 800504e:	d111      	bne.n	8005074 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	b2d2      	uxtb	r2, r2
 8005058:	4611      	mov	r1, r2
 800505a:	4618      	mov	r0, r3
 800505c:	f007 fcff 	bl	800ca5e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	4413      	add	r3, r2
 8005068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800506c:	461a      	mov	r2, r3
 800506e:	2310      	movs	r3, #16
 8005070:	6093      	str	r3, [r2, #8]
 8005072:	e03a      	b.n	80050ea <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	212c      	movs	r1, #44	; 0x2c
 800507a:	fb01 f303 	mul.w	r3, r1, r3
 800507e:	4413      	add	r3, r2
 8005080:	333f      	adds	r3, #63	; 0x3f
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	2b03      	cmp	r3, #3
 8005086:	d009      	beq.n	800509c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	212c      	movs	r1, #44	; 0x2c
 800508e:	fb01 f303 	mul.w	r3, r1, r3
 8005092:	4413      	add	r3, r2
 8005094:	333f      	adds	r3, #63	; 0x3f
 8005096:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8005098:	2b01      	cmp	r3, #1
 800509a:	d126      	bne.n	80050ea <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	0151      	lsls	r1, r2, #5
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	440a      	add	r2, r1
 80050b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050ba:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	212c      	movs	r1, #44	; 0x2c
 80050c2:	fb01 f303 	mul.w	r3, r1, r3
 80050c6:	4413      	add	r3, r2
 80050c8:	3360      	adds	r3, #96	; 0x60
 80050ca:	2201      	movs	r2, #1
 80050cc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	b2d9      	uxtb	r1, r3
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	202c      	movs	r0, #44	; 0x2c
 80050d8:	fb00 f303 	mul.w	r3, r0, r3
 80050dc:	4413      	add	r3, r2
 80050de:	3360      	adds	r3, #96	; 0x60
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	461a      	mov	r2, r3
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f00e fb81 	bl	80137ec <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d12b      	bne.n	800514a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	212c      	movs	r1, #44	; 0x2c
 80050f8:	fb01 f303 	mul.w	r3, r1, r3
 80050fc:	4413      	add	r3, r2
 80050fe:	3348      	adds	r3, #72	; 0x48
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6879      	ldr	r1, [r7, #4]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	202c      	movs	r0, #44	; 0x2c
 8005108:	fb00 f202 	mul.w	r2, r0, r2
 800510c:	440a      	add	r2, r1
 800510e:	3240      	adds	r2, #64	; 0x40
 8005110:	8812      	ldrh	r2, [r2, #0]
 8005112:	fbb3 f3f2 	udiv	r3, r3, r2
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 818e 	beq.w	800543c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	212c      	movs	r1, #44	; 0x2c
 8005126:	fb01 f303 	mul.w	r3, r1, r3
 800512a:	4413      	add	r3, r2
 800512c:	3354      	adds	r3, #84	; 0x54
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	f083 0301 	eor.w	r3, r3, #1
 8005134:	b2d8      	uxtb	r0, r3
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	212c      	movs	r1, #44	; 0x2c
 800513c:	fb01 f303 	mul.w	r3, r1, r3
 8005140:	4413      	add	r3, r2
 8005142:	3354      	adds	r3, #84	; 0x54
 8005144:	4602      	mov	r2, r0
 8005146:	701a      	strb	r2, [r3, #0]
}
 8005148:	e178      	b.n	800543c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	212c      	movs	r1, #44	; 0x2c
 8005150:	fb01 f303 	mul.w	r3, r1, r3
 8005154:	4413      	add	r3, r2
 8005156:	3354      	adds	r3, #84	; 0x54
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	f083 0301 	eor.w	r3, r3, #1
 800515e:	b2d8      	uxtb	r0, r3
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	212c      	movs	r1, #44	; 0x2c
 8005166:	fb01 f303 	mul.w	r3, r1, r3
 800516a:	4413      	add	r3, r2
 800516c:	3354      	adds	r3, #84	; 0x54
 800516e:	4602      	mov	r2, r0
 8005170:	701a      	strb	r2, [r3, #0]
}
 8005172:	e163      	b.n	800543c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	4413      	add	r3, r2
 800517c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b02      	cmp	r3, #2
 8005188:	f040 80f6 	bne.w	8005378 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	212c      	movs	r1, #44	; 0x2c
 8005192:	fb01 f303 	mul.w	r3, r1, r3
 8005196:	4413      	add	r3, r2
 8005198:	3361      	adds	r3, #97	; 0x61
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d109      	bne.n	80051b4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	212c      	movs	r1, #44	; 0x2c
 80051a6:	fb01 f303 	mul.w	r3, r1, r3
 80051aa:	4413      	add	r3, r2
 80051ac:	3360      	adds	r3, #96	; 0x60
 80051ae:	2201      	movs	r2, #1
 80051b0:	701a      	strb	r2, [r3, #0]
 80051b2:	e0c9      	b.n	8005348 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	212c      	movs	r1, #44	; 0x2c
 80051ba:	fb01 f303 	mul.w	r3, r1, r3
 80051be:	4413      	add	r3, r2
 80051c0:	3361      	adds	r3, #97	; 0x61
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	2b05      	cmp	r3, #5
 80051c6:	d109      	bne.n	80051dc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	212c      	movs	r1, #44	; 0x2c
 80051ce:	fb01 f303 	mul.w	r3, r1, r3
 80051d2:	4413      	add	r3, r2
 80051d4:	3360      	adds	r3, #96	; 0x60
 80051d6:	2205      	movs	r2, #5
 80051d8:	701a      	strb	r2, [r3, #0]
 80051da:	e0b5      	b.n	8005348 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	212c      	movs	r1, #44	; 0x2c
 80051e2:	fb01 f303 	mul.w	r3, r1, r3
 80051e6:	4413      	add	r3, r2
 80051e8:	3361      	adds	r3, #97	; 0x61
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b06      	cmp	r3, #6
 80051ee:	d009      	beq.n	8005204 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	212c      	movs	r1, #44	; 0x2c
 80051f6:	fb01 f303 	mul.w	r3, r1, r3
 80051fa:	4413      	add	r3, r2
 80051fc:	3361      	adds	r3, #97	; 0x61
 80051fe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005200:	2b08      	cmp	r3, #8
 8005202:	d150      	bne.n	80052a6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	212c      	movs	r1, #44	; 0x2c
 800520a:	fb01 f303 	mul.w	r3, r1, r3
 800520e:	4413      	add	r3, r2
 8005210:	335c      	adds	r3, #92	; 0x5c
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	6879      	ldr	r1, [r7, #4]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	202c      	movs	r0, #44	; 0x2c
 800521c:	fb00 f303 	mul.w	r3, r0, r3
 8005220:	440b      	add	r3, r1
 8005222:	335c      	adds	r3, #92	; 0x5c
 8005224:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	212c      	movs	r1, #44	; 0x2c
 800522c:	fb01 f303 	mul.w	r3, r1, r3
 8005230:	4413      	add	r3, r2
 8005232:	335c      	adds	r3, #92	; 0x5c
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2b02      	cmp	r3, #2
 8005238:	d912      	bls.n	8005260 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	212c      	movs	r1, #44	; 0x2c
 8005240:	fb01 f303 	mul.w	r3, r1, r3
 8005244:	4413      	add	r3, r2
 8005246:	335c      	adds	r3, #92	; 0x5c
 8005248:	2200      	movs	r2, #0
 800524a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	212c      	movs	r1, #44	; 0x2c
 8005252:	fb01 f303 	mul.w	r3, r1, r3
 8005256:	4413      	add	r3, r2
 8005258:	3360      	adds	r3, #96	; 0x60
 800525a:	2204      	movs	r2, #4
 800525c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800525e:	e073      	b.n	8005348 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	212c      	movs	r1, #44	; 0x2c
 8005266:	fb01 f303 	mul.w	r3, r1, r3
 800526a:	4413      	add	r3, r2
 800526c:	3360      	adds	r3, #96	; 0x60
 800526e:	2202      	movs	r2, #2
 8005270:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	015a      	lsls	r2, r3, #5
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	4413      	add	r3, r2
 800527a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005288:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005290:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	4413      	add	r3, r2
 800529a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800529e:	461a      	mov	r2, r3
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80052a4:	e050      	b.n	8005348 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	212c      	movs	r1, #44	; 0x2c
 80052ac:	fb01 f303 	mul.w	r3, r1, r3
 80052b0:	4413      	add	r3, r2
 80052b2:	3361      	adds	r3, #97	; 0x61
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	2b03      	cmp	r3, #3
 80052b8:	d122      	bne.n	8005300 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	212c      	movs	r1, #44	; 0x2c
 80052c0:	fb01 f303 	mul.w	r3, r1, r3
 80052c4:	4413      	add	r3, r2
 80052c6:	3360      	adds	r3, #96	; 0x60
 80052c8:	2202      	movs	r2, #2
 80052ca:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052e2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052ea:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052f8:	461a      	mov	r2, r3
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	6013      	str	r3, [r2, #0]
 80052fe:	e023      	b.n	8005348 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	212c      	movs	r1, #44	; 0x2c
 8005306:	fb01 f303 	mul.w	r3, r1, r3
 800530a:	4413      	add	r3, r2
 800530c:	3361      	adds	r3, #97	; 0x61
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	2b07      	cmp	r3, #7
 8005312:	d119      	bne.n	8005348 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	212c      	movs	r1, #44	; 0x2c
 800531a:	fb01 f303 	mul.w	r3, r1, r3
 800531e:	4413      	add	r3, r2
 8005320:	335c      	adds	r3, #92	; 0x5c
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	6879      	ldr	r1, [r7, #4]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	202c      	movs	r0, #44	; 0x2c
 800532c:	fb00 f303 	mul.w	r3, r0, r3
 8005330:	440b      	add	r3, r1
 8005332:	335c      	adds	r3, #92	; 0x5c
 8005334:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	212c      	movs	r1, #44	; 0x2c
 800533c:	fb01 f303 	mul.w	r3, r1, r3
 8005340:	4413      	add	r3, r2
 8005342:	3360      	adds	r3, #96	; 0x60
 8005344:	2204      	movs	r2, #4
 8005346:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	015a      	lsls	r2, r3, #5
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	4413      	add	r3, r2
 8005350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005354:	461a      	mov	r2, r3
 8005356:	2302      	movs	r3, #2
 8005358:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	b2d9      	uxtb	r1, r3
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	202c      	movs	r0, #44	; 0x2c
 8005364:	fb00 f303 	mul.w	r3, r0, r3
 8005368:	4413      	add	r3, r2
 800536a:	3360      	adds	r3, #96	; 0x60
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	461a      	mov	r2, r3
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f00e fa3b 	bl	80137ec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005376:	e061      	b.n	800543c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	4413      	add	r3, r2
 8005380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f003 0310 	and.w	r3, r3, #16
 800538a:	2b10      	cmp	r3, #16
 800538c:	d156      	bne.n	800543c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	212c      	movs	r1, #44	; 0x2c
 8005394:	fb01 f303 	mul.w	r3, r1, r3
 8005398:	4413      	add	r3, r2
 800539a:	333f      	adds	r3, #63	; 0x3f
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	2b03      	cmp	r3, #3
 80053a0:	d111      	bne.n	80053c6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	212c      	movs	r1, #44	; 0x2c
 80053a8:	fb01 f303 	mul.w	r3, r1, r3
 80053ac:	4413      	add	r3, r2
 80053ae:	335c      	adds	r3, #92	; 0x5c
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	b2d2      	uxtb	r2, r2
 80053bc:	4611      	mov	r1, r2
 80053be:	4618      	mov	r0, r3
 80053c0:	f007 fb4d 	bl	800ca5e <USB_HC_Halt>
 80053c4:	e031      	b.n	800542a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	212c      	movs	r1, #44	; 0x2c
 80053cc:	fb01 f303 	mul.w	r3, r1, r3
 80053d0:	4413      	add	r3, r2
 80053d2:	333f      	adds	r3, #63	; 0x3f
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d009      	beq.n	80053ee <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	212c      	movs	r1, #44	; 0x2c
 80053e0:	fb01 f303 	mul.w	r3, r1, r3
 80053e4:	4413      	add	r3, r2
 80053e6:	333f      	adds	r3, #63	; 0x3f
 80053e8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d11d      	bne.n	800542a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	212c      	movs	r1, #44	; 0x2c
 80053f4:	fb01 f303 	mul.w	r3, r1, r3
 80053f8:	4413      	add	r3, r2
 80053fa:	335c      	adds	r3, #92	; 0x5c
 80053fc:	2200      	movs	r2, #0
 80053fe:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d110      	bne.n	800542a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	212c      	movs	r1, #44	; 0x2c
 800540e:	fb01 f303 	mul.w	r3, r1, r3
 8005412:	4413      	add	r3, r2
 8005414:	3361      	adds	r3, #97	; 0x61
 8005416:	2203      	movs	r2, #3
 8005418:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	b2d2      	uxtb	r2, r2
 8005422:	4611      	mov	r1, r2
 8005424:	4618      	mov	r0, r3
 8005426:	f007 fb1a 	bl	800ca5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	4413      	add	r3, r2
 8005432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005436:	461a      	mov	r2, r3
 8005438:	2310      	movs	r3, #16
 800543a:	6093      	str	r3, [r2, #8]
}
 800543c:	bf00      	nop
 800543e:	3718      	adds	r7, #24
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b088      	sub	sp, #32
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	460b      	mov	r3, r1
 800544e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800545a:	78fb      	ldrb	r3, [r7, #3]
 800545c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	4413      	add	r3, r2
 8005466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b04      	cmp	r3, #4
 8005472:	d11a      	bne.n	80054aa <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	4413      	add	r3, r2
 800547c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005480:	461a      	mov	r2, r3
 8005482:	2304      	movs	r3, #4
 8005484:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	212c      	movs	r1, #44	; 0x2c
 800548c:	fb01 f303 	mul.w	r3, r1, r3
 8005490:	4413      	add	r3, r2
 8005492:	3361      	adds	r3, #97	; 0x61
 8005494:	2206      	movs	r2, #6
 8005496:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	b2d2      	uxtb	r2, r2
 80054a0:	4611      	mov	r1, r2
 80054a2:	4618      	mov	r0, r3
 80054a4:	f007 fadb 	bl	800ca5e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80054a8:	e331      	b.n	8005b0e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f003 0320 	and.w	r3, r3, #32
 80054bc:	2b20      	cmp	r3, #32
 80054be:	d12e      	bne.n	800551e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054cc:	461a      	mov	r2, r3
 80054ce:	2320      	movs	r3, #32
 80054d0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	212c      	movs	r1, #44	; 0x2c
 80054d8:	fb01 f303 	mul.w	r3, r1, r3
 80054dc:	4413      	add	r3, r2
 80054de:	333d      	adds	r3, #61	; 0x3d
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	f040 8313 	bne.w	8005b0e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	212c      	movs	r1, #44	; 0x2c
 80054ee:	fb01 f303 	mul.w	r3, r1, r3
 80054f2:	4413      	add	r3, r2
 80054f4:	333d      	adds	r3, #61	; 0x3d
 80054f6:	2200      	movs	r2, #0
 80054f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	212c      	movs	r1, #44	; 0x2c
 8005500:	fb01 f303 	mul.w	r3, r1, r3
 8005504:	4413      	add	r3, r2
 8005506:	3360      	adds	r3, #96	; 0x60
 8005508:	2202      	movs	r2, #2
 800550a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	b2d2      	uxtb	r2, r2
 8005514:	4611      	mov	r1, r2
 8005516:	4618      	mov	r0, r3
 8005518:	f007 faa1 	bl	800ca5e <USB_HC_Halt>
}
 800551c:	e2f7      	b.n	8005b0e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	4413      	add	r3, r2
 8005526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005534:	d112      	bne.n	800555c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	4413      	add	r3, r2
 800553e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005542:	461a      	mov	r2, r3
 8005544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005548:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	b2d2      	uxtb	r2, r2
 8005552:	4611      	mov	r1, r2
 8005554:	4618      	mov	r0, r3
 8005556:	f007 fa82 	bl	800ca5e <USB_HC_Halt>
}
 800555a:	e2d8      	b.n	8005b0e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	4413      	add	r3, r2
 8005564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b01      	cmp	r3, #1
 8005570:	d140      	bne.n	80055f4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	212c      	movs	r1, #44	; 0x2c
 8005578:	fb01 f303 	mul.w	r3, r1, r3
 800557c:	4413      	add	r3, r2
 800557e:	335c      	adds	r3, #92	; 0x5c
 8005580:	2200      	movs	r2, #0
 8005582:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	4413      	add	r3, r2
 800558c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005596:	2b40      	cmp	r3, #64	; 0x40
 8005598:	d111      	bne.n	80055be <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	212c      	movs	r1, #44	; 0x2c
 80055a0:	fb01 f303 	mul.w	r3, r1, r3
 80055a4:	4413      	add	r3, r2
 80055a6:	333d      	adds	r3, #61	; 0x3d
 80055a8:	2201      	movs	r2, #1
 80055aa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b8:	461a      	mov	r2, r3
 80055ba:	2340      	movs	r3, #64	; 0x40
 80055bc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ca:	461a      	mov	r2, r3
 80055cc:	2301      	movs	r3, #1
 80055ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	212c      	movs	r1, #44	; 0x2c
 80055d6:	fb01 f303 	mul.w	r3, r1, r3
 80055da:	4413      	add	r3, r2
 80055dc:	3361      	adds	r3, #97	; 0x61
 80055de:	2201      	movs	r2, #1
 80055e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	b2d2      	uxtb	r2, r2
 80055ea:	4611      	mov	r1, r2
 80055ec:	4618      	mov	r0, r3
 80055ee:	f007 fa36 	bl	800ca5e <USB_HC_Halt>
}
 80055f2:	e28c      	b.n	8005b0e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005606:	2b40      	cmp	r3, #64	; 0x40
 8005608:	d12c      	bne.n	8005664 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	212c      	movs	r1, #44	; 0x2c
 8005610:	fb01 f303 	mul.w	r3, r1, r3
 8005614:	4413      	add	r3, r2
 8005616:	3361      	adds	r3, #97	; 0x61
 8005618:	2204      	movs	r2, #4
 800561a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	212c      	movs	r1, #44	; 0x2c
 8005622:	fb01 f303 	mul.w	r3, r1, r3
 8005626:	4413      	add	r3, r2
 8005628:	333d      	adds	r3, #61	; 0x3d
 800562a:	2201      	movs	r2, #1
 800562c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	212c      	movs	r1, #44	; 0x2c
 8005634:	fb01 f303 	mul.w	r3, r1, r3
 8005638:	4413      	add	r3, r2
 800563a:	335c      	adds	r3, #92	; 0x5c
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	b2d2      	uxtb	r2, r2
 8005648:	4611      	mov	r1, r2
 800564a:	4618      	mov	r0, r3
 800564c:	f007 fa07 	bl	800ca5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	4413      	add	r3, r2
 8005658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800565c:	461a      	mov	r2, r3
 800565e:	2340      	movs	r3, #64	; 0x40
 8005660:	6093      	str	r3, [r2, #8]
}
 8005662:	e254      	b.n	8005b0e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	4413      	add	r3, r2
 800566c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f003 0308 	and.w	r3, r3, #8
 8005676:	2b08      	cmp	r3, #8
 8005678:	d11a      	bne.n	80056b0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	4413      	add	r3, r2
 8005682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005686:	461a      	mov	r2, r3
 8005688:	2308      	movs	r3, #8
 800568a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	212c      	movs	r1, #44	; 0x2c
 8005692:	fb01 f303 	mul.w	r3, r1, r3
 8005696:	4413      	add	r3, r2
 8005698:	3361      	adds	r3, #97	; 0x61
 800569a:	2205      	movs	r2, #5
 800569c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	b2d2      	uxtb	r2, r2
 80056a6:	4611      	mov	r1, r2
 80056a8:	4618      	mov	r0, r3
 80056aa:	f007 f9d8 	bl	800ca5e <USB_HC_Halt>
}
 80056ae:	e22e      	b.n	8005b0e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	015a      	lsls	r2, r3, #5
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f003 0310 	and.w	r3, r3, #16
 80056c2:	2b10      	cmp	r3, #16
 80056c4:	d140      	bne.n	8005748 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	212c      	movs	r1, #44	; 0x2c
 80056cc:	fb01 f303 	mul.w	r3, r1, r3
 80056d0:	4413      	add	r3, r2
 80056d2:	335c      	adds	r3, #92	; 0x5c
 80056d4:	2200      	movs	r2, #0
 80056d6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	212c      	movs	r1, #44	; 0x2c
 80056de:	fb01 f303 	mul.w	r3, r1, r3
 80056e2:	4413      	add	r3, r2
 80056e4:	3361      	adds	r3, #97	; 0x61
 80056e6:	2203      	movs	r2, #3
 80056e8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	212c      	movs	r1, #44	; 0x2c
 80056f0:	fb01 f303 	mul.w	r3, r1, r3
 80056f4:	4413      	add	r3, r2
 80056f6:	333d      	adds	r3, #61	; 0x3d
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d112      	bne.n	8005724 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	212c      	movs	r1, #44	; 0x2c
 8005704:	fb01 f303 	mul.w	r3, r1, r3
 8005708:	4413      	add	r3, r2
 800570a:	333c      	adds	r3, #60	; 0x3c
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d108      	bne.n	8005724 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	212c      	movs	r1, #44	; 0x2c
 8005718:	fb01 f303 	mul.w	r3, r1, r3
 800571c:	4413      	add	r3, r2
 800571e:	333d      	adds	r3, #61	; 0x3d
 8005720:	2201      	movs	r2, #1
 8005722:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	b2d2      	uxtb	r2, r2
 800572c:	4611      	mov	r1, r2
 800572e:	4618      	mov	r0, r3
 8005730:	f007 f995 	bl	800ca5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	4413      	add	r3, r2
 800573c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005740:	461a      	mov	r2, r3
 8005742:	2310      	movs	r3, #16
 8005744:	6093      	str	r3, [r2, #8]
}
 8005746:	e1e2      	b.n	8005b0e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	4413      	add	r3, r2
 8005750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800575a:	2b80      	cmp	r3, #128	; 0x80
 800575c:	d164      	bne.n	8005828 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d111      	bne.n	800578a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	212c      	movs	r1, #44	; 0x2c
 800576c:	fb01 f303 	mul.w	r3, r1, r3
 8005770:	4413      	add	r3, r2
 8005772:	3361      	adds	r3, #97	; 0x61
 8005774:	2206      	movs	r2, #6
 8005776:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	b2d2      	uxtb	r2, r2
 8005780:	4611      	mov	r1, r2
 8005782:	4618      	mov	r0, r3
 8005784:	f007 f96b 	bl	800ca5e <USB_HC_Halt>
 8005788:	e044      	b.n	8005814 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	212c      	movs	r1, #44	; 0x2c
 8005790:	fb01 f303 	mul.w	r3, r1, r3
 8005794:	4413      	add	r3, r2
 8005796:	335c      	adds	r3, #92	; 0x5c
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	1c5a      	adds	r2, r3, #1
 800579c:	6879      	ldr	r1, [r7, #4]
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	202c      	movs	r0, #44	; 0x2c
 80057a2:	fb00 f303 	mul.w	r3, r0, r3
 80057a6:	440b      	add	r3, r1
 80057a8:	335c      	adds	r3, #92	; 0x5c
 80057aa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	212c      	movs	r1, #44	; 0x2c
 80057b2:	fb01 f303 	mul.w	r3, r1, r3
 80057b6:	4413      	add	r3, r2
 80057b8:	335c      	adds	r3, #92	; 0x5c
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d920      	bls.n	8005802 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	212c      	movs	r1, #44	; 0x2c
 80057c6:	fb01 f303 	mul.w	r3, r1, r3
 80057ca:	4413      	add	r3, r2
 80057cc:	335c      	adds	r3, #92	; 0x5c
 80057ce:	2200      	movs	r2, #0
 80057d0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	212c      	movs	r1, #44	; 0x2c
 80057d8:	fb01 f303 	mul.w	r3, r1, r3
 80057dc:	4413      	add	r3, r2
 80057de:	3360      	adds	r3, #96	; 0x60
 80057e0:	2204      	movs	r2, #4
 80057e2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	b2d9      	uxtb	r1, r3
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	202c      	movs	r0, #44	; 0x2c
 80057ee:	fb00 f303 	mul.w	r3, r0, r3
 80057f2:	4413      	add	r3, r2
 80057f4:	3360      	adds	r3, #96	; 0x60
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	461a      	mov	r2, r3
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f00d fff6 	bl	80137ec <HAL_HCD_HC_NotifyURBChange_Callback>
 8005800:	e008      	b.n	8005814 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	212c      	movs	r1, #44	; 0x2c
 8005808:	fb01 f303 	mul.w	r3, r1, r3
 800580c:	4413      	add	r3, r2
 800580e:	3360      	adds	r3, #96	; 0x60
 8005810:	2202      	movs	r2, #2
 8005812:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	4413      	add	r3, r2
 800581c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005820:	461a      	mov	r2, r3
 8005822:	2380      	movs	r3, #128	; 0x80
 8005824:	6093      	str	r3, [r2, #8]
}
 8005826:	e172      	b.n	8005b0e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	4413      	add	r3, r2
 8005830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800583a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800583e:	d11b      	bne.n	8005878 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	212c      	movs	r1, #44	; 0x2c
 8005846:	fb01 f303 	mul.w	r3, r1, r3
 800584a:	4413      	add	r3, r2
 800584c:	3361      	adds	r3, #97	; 0x61
 800584e:	2208      	movs	r2, #8
 8005850:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	b2d2      	uxtb	r2, r2
 800585a:	4611      	mov	r1, r2
 800585c:	4618      	mov	r0, r3
 800585e:	f007 f8fe 	bl	800ca5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	4413      	add	r3, r2
 800586a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800586e:	461a      	mov	r2, r3
 8005870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005874:	6093      	str	r3, [r2, #8]
}
 8005876:	e14a      	b.n	8005b0e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	4413      	add	r3, r2
 8005880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b02      	cmp	r3, #2
 800588c:	f040 813f 	bne.w	8005b0e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	212c      	movs	r1, #44	; 0x2c
 8005896:	fb01 f303 	mul.w	r3, r1, r3
 800589a:	4413      	add	r3, r2
 800589c:	3361      	adds	r3, #97	; 0x61
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d17d      	bne.n	80059a0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	212c      	movs	r1, #44	; 0x2c
 80058aa:	fb01 f303 	mul.w	r3, r1, r3
 80058ae:	4413      	add	r3, r2
 80058b0:	3360      	adds	r3, #96	; 0x60
 80058b2:	2201      	movs	r2, #1
 80058b4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	212c      	movs	r1, #44	; 0x2c
 80058bc:	fb01 f303 	mul.w	r3, r1, r3
 80058c0:	4413      	add	r3, r2
 80058c2:	333f      	adds	r3, #63	; 0x3f
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d00a      	beq.n	80058e0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	212c      	movs	r1, #44	; 0x2c
 80058d0:	fb01 f303 	mul.w	r3, r1, r3
 80058d4:	4413      	add	r3, r2
 80058d6:	333f      	adds	r3, #63	; 0x3f
 80058d8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80058da:	2b03      	cmp	r3, #3
 80058dc:	f040 8100 	bne.w	8005ae0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d113      	bne.n	8005910 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	212c      	movs	r1, #44	; 0x2c
 80058ee:	fb01 f303 	mul.w	r3, r1, r3
 80058f2:	4413      	add	r3, r2
 80058f4:	3355      	adds	r3, #85	; 0x55
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	f083 0301 	eor.w	r3, r3, #1
 80058fc:	b2d8      	uxtb	r0, r3
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	212c      	movs	r1, #44	; 0x2c
 8005904:	fb01 f303 	mul.w	r3, r1, r3
 8005908:	4413      	add	r3, r2
 800590a:	3355      	adds	r3, #85	; 0x55
 800590c:	4602      	mov	r2, r0
 800590e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	2b01      	cmp	r3, #1
 8005916:	f040 80e3 	bne.w	8005ae0 <HCD_HC_OUT_IRQHandler+0x69c>
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	212c      	movs	r1, #44	; 0x2c
 8005920:	fb01 f303 	mul.w	r3, r1, r3
 8005924:	4413      	add	r3, r2
 8005926:	334c      	adds	r3, #76	; 0x4c
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	f000 80d8 	beq.w	8005ae0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	212c      	movs	r1, #44	; 0x2c
 8005936:	fb01 f303 	mul.w	r3, r1, r3
 800593a:	4413      	add	r3, r2
 800593c:	334c      	adds	r3, #76	; 0x4c
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6879      	ldr	r1, [r7, #4]
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	202c      	movs	r0, #44	; 0x2c
 8005946:	fb00 f202 	mul.w	r2, r0, r2
 800594a:	440a      	add	r2, r1
 800594c:	3240      	adds	r2, #64	; 0x40
 800594e:	8812      	ldrh	r2, [r2, #0]
 8005950:	4413      	add	r3, r2
 8005952:	3b01      	subs	r3, #1
 8005954:	6879      	ldr	r1, [r7, #4]
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	202c      	movs	r0, #44	; 0x2c
 800595a:	fb00 f202 	mul.w	r2, r0, r2
 800595e:	440a      	add	r2, r1
 8005960:	3240      	adds	r2, #64	; 0x40
 8005962:	8812      	ldrh	r2, [r2, #0]
 8005964:	fbb3 f3f2 	udiv	r3, r3, r2
 8005968:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	2b00      	cmp	r3, #0
 8005972:	f000 80b5 	beq.w	8005ae0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	212c      	movs	r1, #44	; 0x2c
 800597c:	fb01 f303 	mul.w	r3, r1, r3
 8005980:	4413      	add	r3, r2
 8005982:	3355      	adds	r3, #85	; 0x55
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	f083 0301 	eor.w	r3, r3, #1
 800598a:	b2d8      	uxtb	r0, r3
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	212c      	movs	r1, #44	; 0x2c
 8005992:	fb01 f303 	mul.w	r3, r1, r3
 8005996:	4413      	add	r3, r2
 8005998:	3355      	adds	r3, #85	; 0x55
 800599a:	4602      	mov	r2, r0
 800599c:	701a      	strb	r2, [r3, #0]
 800599e:	e09f      	b.n	8005ae0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	212c      	movs	r1, #44	; 0x2c
 80059a6:	fb01 f303 	mul.w	r3, r1, r3
 80059aa:	4413      	add	r3, r2
 80059ac:	3361      	adds	r3, #97	; 0x61
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	2b03      	cmp	r3, #3
 80059b2:	d109      	bne.n	80059c8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	212c      	movs	r1, #44	; 0x2c
 80059ba:	fb01 f303 	mul.w	r3, r1, r3
 80059be:	4413      	add	r3, r2
 80059c0:	3360      	adds	r3, #96	; 0x60
 80059c2:	2202      	movs	r2, #2
 80059c4:	701a      	strb	r2, [r3, #0]
 80059c6:	e08b      	b.n	8005ae0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	212c      	movs	r1, #44	; 0x2c
 80059ce:	fb01 f303 	mul.w	r3, r1, r3
 80059d2:	4413      	add	r3, r2
 80059d4:	3361      	adds	r3, #97	; 0x61
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	2b04      	cmp	r3, #4
 80059da:	d109      	bne.n	80059f0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	212c      	movs	r1, #44	; 0x2c
 80059e2:	fb01 f303 	mul.w	r3, r1, r3
 80059e6:	4413      	add	r3, r2
 80059e8:	3360      	adds	r3, #96	; 0x60
 80059ea:	2202      	movs	r2, #2
 80059ec:	701a      	strb	r2, [r3, #0]
 80059ee:	e077      	b.n	8005ae0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	212c      	movs	r1, #44	; 0x2c
 80059f6:	fb01 f303 	mul.w	r3, r1, r3
 80059fa:	4413      	add	r3, r2
 80059fc:	3361      	adds	r3, #97	; 0x61
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	2b05      	cmp	r3, #5
 8005a02:	d109      	bne.n	8005a18 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	212c      	movs	r1, #44	; 0x2c
 8005a0a:	fb01 f303 	mul.w	r3, r1, r3
 8005a0e:	4413      	add	r3, r2
 8005a10:	3360      	adds	r3, #96	; 0x60
 8005a12:	2205      	movs	r2, #5
 8005a14:	701a      	strb	r2, [r3, #0]
 8005a16:	e063      	b.n	8005ae0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	212c      	movs	r1, #44	; 0x2c
 8005a1e:	fb01 f303 	mul.w	r3, r1, r3
 8005a22:	4413      	add	r3, r2
 8005a24:	3361      	adds	r3, #97	; 0x61
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	2b06      	cmp	r3, #6
 8005a2a:	d009      	beq.n	8005a40 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	212c      	movs	r1, #44	; 0x2c
 8005a32:	fb01 f303 	mul.w	r3, r1, r3
 8005a36:	4413      	add	r3, r2
 8005a38:	3361      	adds	r3, #97	; 0x61
 8005a3a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005a3c:	2b08      	cmp	r3, #8
 8005a3e:	d14f      	bne.n	8005ae0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	212c      	movs	r1, #44	; 0x2c
 8005a46:	fb01 f303 	mul.w	r3, r1, r3
 8005a4a:	4413      	add	r3, r2
 8005a4c:	335c      	adds	r3, #92	; 0x5c
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	1c5a      	adds	r2, r3, #1
 8005a52:	6879      	ldr	r1, [r7, #4]
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	202c      	movs	r0, #44	; 0x2c
 8005a58:	fb00 f303 	mul.w	r3, r0, r3
 8005a5c:	440b      	add	r3, r1
 8005a5e:	335c      	adds	r3, #92	; 0x5c
 8005a60:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	212c      	movs	r1, #44	; 0x2c
 8005a68:	fb01 f303 	mul.w	r3, r1, r3
 8005a6c:	4413      	add	r3, r2
 8005a6e:	335c      	adds	r3, #92	; 0x5c
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d912      	bls.n	8005a9c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	212c      	movs	r1, #44	; 0x2c
 8005a7c:	fb01 f303 	mul.w	r3, r1, r3
 8005a80:	4413      	add	r3, r2
 8005a82:	335c      	adds	r3, #92	; 0x5c
 8005a84:	2200      	movs	r2, #0
 8005a86:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	212c      	movs	r1, #44	; 0x2c
 8005a8e:	fb01 f303 	mul.w	r3, r1, r3
 8005a92:	4413      	add	r3, r2
 8005a94:	3360      	adds	r3, #96	; 0x60
 8005a96:	2204      	movs	r2, #4
 8005a98:	701a      	strb	r2, [r3, #0]
 8005a9a:	e021      	b.n	8005ae0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	212c      	movs	r1, #44	; 0x2c
 8005aa2:	fb01 f303 	mul.w	r3, r1, r3
 8005aa6:	4413      	add	r3, r2
 8005aa8:	3360      	adds	r3, #96	; 0x60
 8005aaa:	2202      	movs	r2, #2
 8005aac:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ac4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005acc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ada:	461a      	mov	r2, r3
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aec:	461a      	mov	r2, r3
 8005aee:	2302      	movs	r3, #2
 8005af0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	b2d9      	uxtb	r1, r3
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	202c      	movs	r0, #44	; 0x2c
 8005afc:	fb00 f303 	mul.w	r3, r0, r3
 8005b00:	4413      	add	r3, r2
 8005b02:	3360      	adds	r3, #96	; 0x60
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	461a      	mov	r2, r3
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f00d fe6f 	bl	80137ec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005b0e:	bf00      	nop
 8005b10:	3720      	adds	r7, #32
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b08a      	sub	sp, #40	; 0x28
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b26:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	f003 030f 	and.w	r3, r3, #15
 8005b36:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	0c5b      	lsrs	r3, r3, #17
 8005b3c:	f003 030f 	and.w	r3, r3, #15
 8005b40:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	091b      	lsrs	r3, r3, #4
 8005b46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b4a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d004      	beq.n	8005b5c <HCD_RXQLVL_IRQHandler+0x46>
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	2b05      	cmp	r3, #5
 8005b56:	f000 80a9 	beq.w	8005cac <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005b5a:	e0aa      	b.n	8005cb2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f000 80a6 	beq.w	8005cb0 <HCD_RXQLVL_IRQHandler+0x19a>
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	212c      	movs	r1, #44	; 0x2c
 8005b6a:	fb01 f303 	mul.w	r3, r1, r3
 8005b6e:	4413      	add	r3, r2
 8005b70:	3344      	adds	r3, #68	; 0x44
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 809b 	beq.w	8005cb0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	212c      	movs	r1, #44	; 0x2c
 8005b80:	fb01 f303 	mul.w	r3, r1, r3
 8005b84:	4413      	add	r3, r2
 8005b86:	3350      	adds	r3, #80	; 0x50
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	441a      	add	r2, r3
 8005b8e:	6879      	ldr	r1, [r7, #4]
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	202c      	movs	r0, #44	; 0x2c
 8005b94:	fb00 f303 	mul.w	r3, r0, r3
 8005b98:	440b      	add	r3, r1
 8005b9a:	334c      	adds	r3, #76	; 0x4c
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d87a      	bhi.n	8005c98 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6818      	ldr	r0, [r3, #0]
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	212c      	movs	r1, #44	; 0x2c
 8005bac:	fb01 f303 	mul.w	r3, r1, r3
 8005bb0:	4413      	add	r3, r2
 8005bb2:	3344      	adds	r3, #68	; 0x44
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	b292      	uxth	r2, r2
 8005bba:	4619      	mov	r1, r3
 8005bbc:	f006 faa6 	bl	800c10c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	212c      	movs	r1, #44	; 0x2c
 8005bc6:	fb01 f303 	mul.w	r3, r1, r3
 8005bca:	4413      	add	r3, r2
 8005bcc:	3344      	adds	r3, #68	; 0x44
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	441a      	add	r2, r3
 8005bd4:	6879      	ldr	r1, [r7, #4]
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	202c      	movs	r0, #44	; 0x2c
 8005bda:	fb00 f303 	mul.w	r3, r0, r3
 8005bde:	440b      	add	r3, r1
 8005be0:	3344      	adds	r3, #68	; 0x44
 8005be2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	212c      	movs	r1, #44	; 0x2c
 8005bea:	fb01 f303 	mul.w	r3, r1, r3
 8005bee:	4413      	add	r3, r2
 8005bf0:	3350      	adds	r3, #80	; 0x50
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	441a      	add	r2, r3
 8005bf8:	6879      	ldr	r1, [r7, #4]
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	202c      	movs	r0, #44	; 0x2c
 8005bfe:	fb00 f303 	mul.w	r3, r0, r3
 8005c02:	440b      	add	r3, r1
 8005c04:	3350      	adds	r3, #80	; 0x50
 8005c06:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	6a3b      	ldr	r3, [r7, #32]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	0cdb      	lsrs	r3, r3, #19
 8005c18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c1c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	212c      	movs	r1, #44	; 0x2c
 8005c24:	fb01 f303 	mul.w	r3, r1, r3
 8005c28:	4413      	add	r3, r2
 8005c2a:	3340      	adds	r3, #64	; 0x40
 8005c2c:	881b      	ldrh	r3, [r3, #0]
 8005c2e:	461a      	mov	r2, r3
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d13c      	bne.n	8005cb0 <HCD_RXQLVL_IRQHandler+0x19a>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d039      	beq.n	8005cb0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	6a3b      	ldr	r3, [r7, #32]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c52:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c5a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	015a      	lsls	r2, r3, #5
 8005c60:	6a3b      	ldr	r3, [r7, #32]
 8005c62:	4413      	add	r3, r2
 8005c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c68:	461a      	mov	r2, r3
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	212c      	movs	r1, #44	; 0x2c
 8005c74:	fb01 f303 	mul.w	r3, r1, r3
 8005c78:	4413      	add	r3, r2
 8005c7a:	3354      	adds	r3, #84	; 0x54
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	f083 0301 	eor.w	r3, r3, #1
 8005c82:	b2d8      	uxtb	r0, r3
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	212c      	movs	r1, #44	; 0x2c
 8005c8a:	fb01 f303 	mul.w	r3, r1, r3
 8005c8e:	4413      	add	r3, r2
 8005c90:	3354      	adds	r3, #84	; 0x54
 8005c92:	4602      	mov	r2, r0
 8005c94:	701a      	strb	r2, [r3, #0]
      break;
 8005c96:	e00b      	b.n	8005cb0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	212c      	movs	r1, #44	; 0x2c
 8005c9e:	fb01 f303 	mul.w	r3, r1, r3
 8005ca2:	4413      	add	r3, r2
 8005ca4:	3360      	adds	r3, #96	; 0x60
 8005ca6:	2204      	movs	r2, #4
 8005ca8:	701a      	strb	r2, [r3, #0]
      break;
 8005caa:	e001      	b.n	8005cb0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005cac:	bf00      	nop
 8005cae:	e000      	b.n	8005cb2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005cb0:	bf00      	nop
  }
}
 8005cb2:	bf00      	nop
 8005cb4:	3728      	adds	r7, #40	; 0x28
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b086      	sub	sp, #24
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005ce6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d10b      	bne.n	8005d0a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f003 0301 	and.w	r3, r3, #1
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d102      	bne.n	8005d02 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f00d fd59 	bl	80137b4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	f043 0302 	orr.w	r3, r3, #2
 8005d08:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f003 0308 	and.w	r3, r3, #8
 8005d10:	2b08      	cmp	r3, #8
 8005d12:	d132      	bne.n	8005d7a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	f043 0308 	orr.w	r3, r3, #8
 8005d1a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f003 0304 	and.w	r3, r3, #4
 8005d22:	2b04      	cmp	r3, #4
 8005d24:	d126      	bne.n	8005d74 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d113      	bne.n	8005d56 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005d34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d38:	d106      	bne.n	8005d48 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2102      	movs	r1, #2
 8005d40:	4618      	mov	r0, r3
 8005d42:	f006 fb51 	bl	800c3e8 <USB_InitFSLSPClkSel>
 8005d46:	e011      	b.n	8005d6c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f006 fb4a 	bl	800c3e8 <USB_InitFSLSPClkSel>
 8005d54:	e00a      	b.n	8005d6c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d106      	bne.n	8005d6c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d64:	461a      	mov	r2, r3
 8005d66:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005d6a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f00d fd4b 	bl	8013808 <HAL_HCD_PortEnabled_Callback>
 8005d72:	e002      	b.n	8005d7a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f00d fd55 	bl	8013824 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f003 0320 	and.w	r3, r3, #32
 8005d80:	2b20      	cmp	r3, #32
 8005d82:	d103      	bne.n	8005d8c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	f043 0320 	orr.w	r3, r3, #32
 8005d8a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d92:	461a      	mov	r2, r3
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	6013      	str	r3, [r2, #0]
}
 8005d98:	bf00      	nop
 8005d9a:	3718      	adds	r7, #24
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e12b      	b.n	800600a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d106      	bne.n	8005dcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7fc fd06 	bl	80027d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2224      	movs	r2, #36	; 0x24
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f022 0201 	bic.w	r2, r2, #1
 8005de2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005df2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005e04:	f004 fc62 	bl	800a6cc <HAL_RCC_GetPCLK1Freq>
 8005e08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	4a81      	ldr	r2, [pc, #516]	; (8006014 <HAL_I2C_Init+0x274>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d807      	bhi.n	8005e24 <HAL_I2C_Init+0x84>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4a80      	ldr	r2, [pc, #512]	; (8006018 <HAL_I2C_Init+0x278>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	bf94      	ite	ls
 8005e1c:	2301      	movls	r3, #1
 8005e1e:	2300      	movhi	r3, #0
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	e006      	b.n	8005e32 <HAL_I2C_Init+0x92>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	4a7d      	ldr	r2, [pc, #500]	; (800601c <HAL_I2C_Init+0x27c>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	bf94      	ite	ls
 8005e2c:	2301      	movls	r3, #1
 8005e2e:	2300      	movhi	r3, #0
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d001      	beq.n	8005e3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e0e7      	b.n	800600a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	4a78      	ldr	r2, [pc, #480]	; (8006020 <HAL_I2C_Init+0x280>)
 8005e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e42:	0c9b      	lsrs	r3, r3, #18
 8005e44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	430a      	orrs	r2, r1
 8005e58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6a1b      	ldr	r3, [r3, #32]
 8005e60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	4a6a      	ldr	r2, [pc, #424]	; (8006014 <HAL_I2C_Init+0x274>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d802      	bhi.n	8005e74 <HAL_I2C_Init+0xd4>
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	3301      	adds	r3, #1
 8005e72:	e009      	b.n	8005e88 <HAL_I2C_Init+0xe8>
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005e7a:	fb02 f303 	mul.w	r3, r2, r3
 8005e7e:	4a69      	ldr	r2, [pc, #420]	; (8006024 <HAL_I2C_Init+0x284>)
 8005e80:	fba2 2303 	umull	r2, r3, r2, r3
 8005e84:	099b      	lsrs	r3, r3, #6
 8005e86:	3301      	adds	r3, #1
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	6812      	ldr	r2, [r2, #0]
 8005e8c:	430b      	orrs	r3, r1
 8005e8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	69db      	ldr	r3, [r3, #28]
 8005e96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005e9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	495c      	ldr	r1, [pc, #368]	; (8006014 <HAL_I2C_Init+0x274>)
 8005ea4:	428b      	cmp	r3, r1
 8005ea6:	d819      	bhi.n	8005edc <HAL_I2C_Init+0x13c>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	1e59      	subs	r1, r3, #1
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	005b      	lsls	r3, r3, #1
 8005eb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005eb6:	1c59      	adds	r1, r3, #1
 8005eb8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005ebc:	400b      	ands	r3, r1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00a      	beq.n	8005ed8 <HAL_I2C_Init+0x138>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	1e59      	subs	r1, r3, #1
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ed6:	e051      	b.n	8005f7c <HAL_I2C_Init+0x1dc>
 8005ed8:	2304      	movs	r3, #4
 8005eda:	e04f      	b.n	8005f7c <HAL_I2C_Init+0x1dc>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d111      	bne.n	8005f08 <HAL_I2C_Init+0x168>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	1e58      	subs	r0, r3, #1
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6859      	ldr	r1, [r3, #4]
 8005eec:	460b      	mov	r3, r1
 8005eee:	005b      	lsls	r3, r3, #1
 8005ef0:	440b      	add	r3, r1
 8005ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	bf0c      	ite	eq
 8005f00:	2301      	moveq	r3, #1
 8005f02:	2300      	movne	r3, #0
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	e012      	b.n	8005f2e <HAL_I2C_Init+0x18e>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	1e58      	subs	r0, r3, #1
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6859      	ldr	r1, [r3, #4]
 8005f10:	460b      	mov	r3, r1
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	440b      	add	r3, r1
 8005f16:	0099      	lsls	r1, r3, #2
 8005f18:	440b      	add	r3, r1
 8005f1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f1e:	3301      	adds	r3, #1
 8005f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	bf0c      	ite	eq
 8005f28:	2301      	moveq	r3, #1
 8005f2a:	2300      	movne	r3, #0
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d001      	beq.n	8005f36 <HAL_I2C_Init+0x196>
 8005f32:	2301      	movs	r3, #1
 8005f34:	e022      	b.n	8005f7c <HAL_I2C_Init+0x1dc>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10e      	bne.n	8005f5c <HAL_I2C_Init+0x1bc>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	1e58      	subs	r0, r3, #1
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6859      	ldr	r1, [r3, #4]
 8005f46:	460b      	mov	r3, r1
 8005f48:	005b      	lsls	r3, r3, #1
 8005f4a:	440b      	add	r3, r1
 8005f4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f50:	3301      	adds	r3, #1
 8005f52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f5a:	e00f      	b.n	8005f7c <HAL_I2C_Init+0x1dc>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	1e58      	subs	r0, r3, #1
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6859      	ldr	r1, [r3, #4]
 8005f64:	460b      	mov	r3, r1
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	440b      	add	r3, r1
 8005f6a:	0099      	lsls	r1, r3, #2
 8005f6c:	440b      	add	r3, r1
 8005f6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f72:	3301      	adds	r3, #1
 8005f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f7c:	6879      	ldr	r1, [r7, #4]
 8005f7e:	6809      	ldr	r1, [r1, #0]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	69da      	ldr	r2, [r3, #28]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	431a      	orrs	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005faa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	6911      	ldr	r1, [r2, #16]
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	68d2      	ldr	r2, [r2, #12]
 8005fb6:	4311      	orrs	r1, r2
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	6812      	ldr	r2, [r2, #0]
 8005fbc:	430b      	orrs	r3, r1
 8005fbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	695a      	ldr	r2, [r3, #20]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f042 0201 	orr.w	r2, r2, #1
 8005fea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2220      	movs	r2, #32
 8005ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	000186a0 	.word	0x000186a0
 8006018:	001e847f 	.word	0x001e847f
 800601c:	003d08ff 	.word	0x003d08ff
 8006020:	431bde83 	.word	0x431bde83
 8006024:	10624dd3 	.word	0x10624dd3

08006028 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d101      	bne.n	800603a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e021      	b.n	800607e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2224      	movs	r2, #36	; 0x24
 800603e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f022 0201 	bic.w	r2, r2, #1
 8006050:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7fc fc70 	bl	8002938 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
	...

08006088 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b088      	sub	sp, #32
 800608c:	af02      	add	r7, sp, #8
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	607a      	str	r2, [r7, #4]
 8006092:	461a      	mov	r2, r3
 8006094:	460b      	mov	r3, r1
 8006096:	817b      	strh	r3, [r7, #10]
 8006098:	4613      	mov	r3, r2
 800609a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800609c:	f7fd f9ca 	bl	8003434 <HAL_GetTick>
 80060a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b20      	cmp	r3, #32
 80060ac:	f040 80e0 	bne.w	8006270 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	2319      	movs	r3, #25
 80060b6:	2201      	movs	r2, #1
 80060b8:	4970      	ldr	r1, [pc, #448]	; (800627c <HAL_I2C_Master_Transmit+0x1f4>)
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f002 fbcc 	bl	8008858 <I2C_WaitOnFlagUntilTimeout>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d001      	beq.n	80060ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80060c6:	2302      	movs	r3, #2
 80060c8:	e0d3      	b.n	8006272 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d101      	bne.n	80060d8 <HAL_I2C_Master_Transmit+0x50>
 80060d4:	2302      	movs	r3, #2
 80060d6:	e0cc      	b.n	8006272 <HAL_I2C_Master_Transmit+0x1ea>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d007      	beq.n	80060fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f042 0201 	orr.w	r2, r2, #1
 80060fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800610c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2221      	movs	r2, #33	; 0x21
 8006112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2210      	movs	r2, #16
 800611a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	893a      	ldrh	r2, [r7, #8]
 800612e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006134:	b29a      	uxth	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	4a50      	ldr	r2, [pc, #320]	; (8006280 <HAL_I2C_Master_Transmit+0x1f8>)
 800613e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006140:	8979      	ldrh	r1, [r7, #10]
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	6a3a      	ldr	r2, [r7, #32]
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f002 f8de 	bl	8008308 <I2C_MasterRequestWrite>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e08d      	b.n	8006272 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006156:	2300      	movs	r3, #0
 8006158:	613b      	str	r3, [r7, #16]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	613b      	str	r3, [r7, #16]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	613b      	str	r3, [r7, #16]
 800616a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800616c:	e066      	b.n	800623c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	6a39      	ldr	r1, [r7, #32]
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f002 fc46 	bl	8008a04 <I2C_WaitOnTXEFlagUntilTimeout>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00d      	beq.n	800619a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	2b04      	cmp	r3, #4
 8006184:	d107      	bne.n	8006196 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006194:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e06b      	b.n	8006272 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619e:	781a      	ldrb	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	3b01      	subs	r3, #1
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061c2:	3b01      	subs	r3, #1
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	f003 0304 	and.w	r3, r3, #4
 80061d4:	2b04      	cmp	r3, #4
 80061d6:	d11b      	bne.n	8006210 <HAL_I2C_Master_Transmit+0x188>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d017      	beq.n	8006210 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e4:	781a      	ldrb	r2, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	1c5a      	adds	r2, r3, #1
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	3b01      	subs	r3, #1
 80061fe:	b29a      	uxth	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006208:	3b01      	subs	r3, #1
 800620a:	b29a      	uxth	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	6a39      	ldr	r1, [r7, #32]
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f002 fc36 	bl	8008a86 <I2C_WaitOnBTFFlagUntilTimeout>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00d      	beq.n	800623c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006224:	2b04      	cmp	r3, #4
 8006226:	d107      	bne.n	8006238 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006236:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e01a      	b.n	8006272 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006240:	2b00      	cmp	r3, #0
 8006242:	d194      	bne.n	800616e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006252:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2220      	movs	r2, #32
 8006258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800626c:	2300      	movs	r3, #0
 800626e:	e000      	b.n	8006272 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006270:	2302      	movs	r3, #2
  }
}
 8006272:	4618      	mov	r0, r3
 8006274:	3718      	adds	r7, #24
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	00100002 	.word	0x00100002
 8006280:	ffff0000 	.word	0xffff0000

08006284 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b088      	sub	sp, #32
 8006288:	af02      	add	r7, sp, #8
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	4608      	mov	r0, r1
 800628e:	4611      	mov	r1, r2
 8006290:	461a      	mov	r2, r3
 8006292:	4603      	mov	r3, r0
 8006294:	817b      	strh	r3, [r7, #10]
 8006296:	460b      	mov	r3, r1
 8006298:	813b      	strh	r3, [r7, #8]
 800629a:	4613      	mov	r3, r2
 800629c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800629e:	f7fd f8c9 	bl	8003434 <HAL_GetTick>
 80062a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b20      	cmp	r3, #32
 80062ae:	f040 80d9 	bne.w	8006464 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	9300      	str	r3, [sp, #0]
 80062b6:	2319      	movs	r3, #25
 80062b8:	2201      	movs	r2, #1
 80062ba:	496d      	ldr	r1, [pc, #436]	; (8006470 <HAL_I2C_Mem_Write+0x1ec>)
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f002 facb 	bl	8008858 <I2C_WaitOnFlagUntilTimeout>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d001      	beq.n	80062cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80062c8:	2302      	movs	r3, #2
 80062ca:	e0cc      	b.n	8006466 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d101      	bne.n	80062da <HAL_I2C_Mem_Write+0x56>
 80062d6:	2302      	movs	r3, #2
 80062d8:	e0c5      	b.n	8006466 <HAL_I2C_Mem_Write+0x1e2>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d007      	beq.n	8006300 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f042 0201 	orr.w	r2, r2, #1
 80062fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800630e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2221      	movs	r2, #33	; 0x21
 8006314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2240      	movs	r2, #64	; 0x40
 800631c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6a3a      	ldr	r2, [r7, #32]
 800632a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006330:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006336:	b29a      	uxth	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	4a4d      	ldr	r2, [pc, #308]	; (8006474 <HAL_I2C_Mem_Write+0x1f0>)
 8006340:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006342:	88f8      	ldrh	r0, [r7, #6]
 8006344:	893a      	ldrh	r2, [r7, #8]
 8006346:	8979      	ldrh	r1, [r7, #10]
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	9301      	str	r3, [sp, #4]
 800634c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634e:	9300      	str	r3, [sp, #0]
 8006350:	4603      	mov	r3, r0
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f002 f85a 	bl	800840c <I2C_RequestMemoryWrite>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d052      	beq.n	8006404 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e081      	b.n	8006466 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f002 fb4c 	bl	8008a04 <I2C_WaitOnTXEFlagUntilTimeout>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00d      	beq.n	800638e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006376:	2b04      	cmp	r3, #4
 8006378:	d107      	bne.n	800638a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006388:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e06b      	b.n	8006466 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006392:	781a      	ldrb	r2, [r3, #0]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639e:	1c5a      	adds	r2, r3, #1
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063a8:	3b01      	subs	r3, #1
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	3b01      	subs	r3, #1
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	f003 0304 	and.w	r3, r3, #4
 80063c8:	2b04      	cmp	r3, #4
 80063ca:	d11b      	bne.n	8006404 <HAL_I2C_Mem_Write+0x180>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d017      	beq.n	8006404 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d8:	781a      	ldrb	r2, [r3, #0]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e4:	1c5a      	adds	r2, r3, #1
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ee:	3b01      	subs	r3, #1
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	3b01      	subs	r3, #1
 80063fe:	b29a      	uxth	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1aa      	bne.n	8006362 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f002 fb38 	bl	8008a86 <I2C_WaitOnBTFFlagUntilTimeout>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00d      	beq.n	8006438 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006420:	2b04      	cmp	r3, #4
 8006422:	d107      	bne.n	8006434 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006432:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e016      	b.n	8006466 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006446:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2220      	movs	r2, #32
 800644c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006460:	2300      	movs	r3, #0
 8006462:	e000      	b.n	8006466 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006464:	2302      	movs	r3, #2
  }
}
 8006466:	4618      	mov	r0, r3
 8006468:	3718      	adds	r7, #24
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	00100002 	.word	0x00100002
 8006474:	ffff0000 	.word	0xffff0000

08006478 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b08c      	sub	sp, #48	; 0x30
 800647c:	af02      	add	r7, sp, #8
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	4608      	mov	r0, r1
 8006482:	4611      	mov	r1, r2
 8006484:	461a      	mov	r2, r3
 8006486:	4603      	mov	r3, r0
 8006488:	817b      	strh	r3, [r7, #10]
 800648a:	460b      	mov	r3, r1
 800648c:	813b      	strh	r3, [r7, #8]
 800648e:	4613      	mov	r3, r2
 8006490:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006492:	f7fc ffcf 	bl	8003434 <HAL_GetTick>
 8006496:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	2b20      	cmp	r3, #32
 80064a2:	f040 8208 	bne.w	80068b6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80064a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	2319      	movs	r3, #25
 80064ac:	2201      	movs	r2, #1
 80064ae:	497b      	ldr	r1, [pc, #492]	; (800669c <HAL_I2C_Mem_Read+0x224>)
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f002 f9d1 	bl	8008858 <I2C_WaitOnFlagUntilTimeout>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d001      	beq.n	80064c0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80064bc:	2302      	movs	r3, #2
 80064be:	e1fb      	b.n	80068b8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d101      	bne.n	80064ce <HAL_I2C_Mem_Read+0x56>
 80064ca:	2302      	movs	r3, #2
 80064cc:	e1f4      	b.n	80068b8 <HAL_I2C_Mem_Read+0x440>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0301 	and.w	r3, r3, #1
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d007      	beq.n	80064f4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f042 0201 	orr.w	r2, r2, #1
 80064f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006502:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2222      	movs	r2, #34	; 0x22
 8006508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2240      	movs	r2, #64	; 0x40
 8006510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800651e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006524:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800652a:	b29a      	uxth	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	4a5b      	ldr	r2, [pc, #364]	; (80066a0 <HAL_I2C_Mem_Read+0x228>)
 8006534:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006536:	88f8      	ldrh	r0, [r7, #6]
 8006538:	893a      	ldrh	r2, [r7, #8]
 800653a:	8979      	ldrh	r1, [r7, #10]
 800653c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653e:	9301      	str	r3, [sp, #4]
 8006540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	4603      	mov	r3, r0
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f001 fff6 	bl	8008538 <I2C_RequestMemoryRead>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d001      	beq.n	8006556 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e1b0      	b.n	80068b8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800655a:	2b00      	cmp	r3, #0
 800655c:	d113      	bne.n	8006586 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800655e:	2300      	movs	r3, #0
 8006560:	623b      	str	r3, [r7, #32]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	623b      	str	r3, [r7, #32]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	623b      	str	r3, [r7, #32]
 8006572:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006582:	601a      	str	r2, [r3, #0]
 8006584:	e184      	b.n	8006890 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800658a:	2b01      	cmp	r3, #1
 800658c:	d11b      	bne.n	80065c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800659c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800659e:	2300      	movs	r3, #0
 80065a0:	61fb      	str	r3, [r7, #28]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	695b      	ldr	r3, [r3, #20]
 80065a8:	61fb      	str	r3, [r7, #28]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	61fb      	str	r3, [r7, #28]
 80065b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065c2:	601a      	str	r2, [r3, #0]
 80065c4:	e164      	b.n	8006890 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d11b      	bne.n	8006606 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065ee:	2300      	movs	r3, #0
 80065f0:	61bb      	str	r3, [r7, #24]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	61bb      	str	r3, [r7, #24]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	61bb      	str	r3, [r7, #24]
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	e144      	b.n	8006890 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006606:	2300      	movs	r3, #0
 8006608:	617b      	str	r3, [r7, #20]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	695b      	ldr	r3, [r3, #20]
 8006610:	617b      	str	r3, [r7, #20]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	617b      	str	r3, [r7, #20]
 800661a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800661c:	e138      	b.n	8006890 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006622:	2b03      	cmp	r3, #3
 8006624:	f200 80f1 	bhi.w	800680a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800662c:	2b01      	cmp	r3, #1
 800662e:	d123      	bne.n	8006678 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006632:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f002 fa99 	bl	8008b6c <I2C_WaitOnRXNEFlagUntilTimeout>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d001      	beq.n	8006644 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e139      	b.n	80068b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	691a      	ldr	r2, [r3, #16]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664e:	b2d2      	uxtb	r2, r2
 8006650:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006656:	1c5a      	adds	r2, r3, #1
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006660:	3b01      	subs	r3, #1
 8006662:	b29a      	uxth	r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800666c:	b29b      	uxth	r3, r3
 800666e:	3b01      	subs	r3, #1
 8006670:	b29a      	uxth	r2, r3
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006676:	e10b      	b.n	8006890 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800667c:	2b02      	cmp	r3, #2
 800667e:	d14e      	bne.n	800671e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006686:	2200      	movs	r2, #0
 8006688:	4906      	ldr	r1, [pc, #24]	; (80066a4 <HAL_I2C_Mem_Read+0x22c>)
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f002 f8e4 	bl	8008858 <I2C_WaitOnFlagUntilTimeout>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d008      	beq.n	80066a8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e10e      	b.n	80068b8 <HAL_I2C_Mem_Read+0x440>
 800669a:	bf00      	nop
 800669c:	00100002 	.word	0x00100002
 80066a0:	ffff0000 	.word	0xffff0000
 80066a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	691a      	ldr	r2, [r3, #16]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c2:	b2d2      	uxtb	r2, r2
 80066c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ca:	1c5a      	adds	r2, r3, #1
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066d4:	3b01      	subs	r3, #1
 80066d6:	b29a      	uxth	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	3b01      	subs	r3, #1
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	691a      	ldr	r2, [r3, #16]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f4:	b2d2      	uxtb	r2, r2
 80066f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fc:	1c5a      	adds	r2, r3, #1
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006706:	3b01      	subs	r3, #1
 8006708:	b29a      	uxth	r2, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006712:	b29b      	uxth	r3, r3
 8006714:	3b01      	subs	r3, #1
 8006716:	b29a      	uxth	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800671c:	e0b8      	b.n	8006890 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800671e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006724:	2200      	movs	r2, #0
 8006726:	4966      	ldr	r1, [pc, #408]	; (80068c0 <HAL_I2C_Mem_Read+0x448>)
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f002 f895 	bl	8008858 <I2C_WaitOnFlagUntilTimeout>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d001      	beq.n	8006738 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e0bf      	b.n	80068b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006746:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	691a      	ldr	r2, [r3, #16]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006752:	b2d2      	uxtb	r2, r2
 8006754:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675a:	1c5a      	adds	r2, r3, #1
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006764:	3b01      	subs	r3, #1
 8006766:	b29a      	uxth	r2, r3
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006770:	b29b      	uxth	r3, r3
 8006772:	3b01      	subs	r3, #1
 8006774:	b29a      	uxth	r2, r3
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800677a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006780:	2200      	movs	r2, #0
 8006782:	494f      	ldr	r1, [pc, #316]	; (80068c0 <HAL_I2C_Mem_Read+0x448>)
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f002 f867 	bl	8008858 <I2C_WaitOnFlagUntilTimeout>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d001      	beq.n	8006794 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e091      	b.n	80068b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	691a      	ldr	r2, [r3, #16]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ae:	b2d2      	uxtb	r2, r2
 80067b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b6:	1c5a      	adds	r2, r3, #1
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067c0:	3b01      	subs	r3, #1
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	3b01      	subs	r3, #1
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	691a      	ldr	r2, [r3, #16]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e0:	b2d2      	uxtb	r2, r2
 80067e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e8:	1c5a      	adds	r2, r3, #1
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067f2:	3b01      	subs	r3, #1
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067fe:	b29b      	uxth	r3, r3
 8006800:	3b01      	subs	r3, #1
 8006802:	b29a      	uxth	r2, r3
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006808:	e042      	b.n	8006890 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800680a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800680c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f002 f9ac 	bl	8008b6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d001      	beq.n	800681e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e04c      	b.n	80068b8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	691a      	ldr	r2, [r3, #16]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006828:	b2d2      	uxtb	r2, r2
 800682a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006830:	1c5a      	adds	r2, r3, #1
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800683a:	3b01      	subs	r3, #1
 800683c:	b29a      	uxth	r2, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006846:	b29b      	uxth	r3, r3
 8006848:	3b01      	subs	r3, #1
 800684a:	b29a      	uxth	r2, r3
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	f003 0304 	and.w	r3, r3, #4
 800685a:	2b04      	cmp	r3, #4
 800685c:	d118      	bne.n	8006890 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	691a      	ldr	r2, [r3, #16]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006868:	b2d2      	uxtb	r2, r2
 800686a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006870:	1c5a      	adds	r2, r3, #1
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800687a:	3b01      	subs	r3, #1
 800687c:	b29a      	uxth	r2, r3
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006886:	b29b      	uxth	r3, r3
 8006888:	3b01      	subs	r3, #1
 800688a:	b29a      	uxth	r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006894:	2b00      	cmp	r3, #0
 8006896:	f47f aec2 	bne.w	800661e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2220      	movs	r2, #32
 800689e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80068b2:	2300      	movs	r3, #0
 80068b4:	e000      	b.n	80068b8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80068b6:	2302      	movs	r3, #2
  }
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3728      	adds	r7, #40	; 0x28
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	00010004 	.word	0x00010004

080068c4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b08a      	sub	sp, #40	; 0x28
 80068c8:	af02      	add	r7, sp, #8
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	607a      	str	r2, [r7, #4]
 80068ce:	603b      	str	r3, [r7, #0]
 80068d0:	460b      	mov	r3, r1
 80068d2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80068d4:	f7fc fdae 	bl	8003434 <HAL_GetTick>
 80068d8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80068da:	2300      	movs	r3, #0
 80068dc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b20      	cmp	r3, #32
 80068e8:	f040 8111 	bne.w	8006b0e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	9300      	str	r3, [sp, #0]
 80068f0:	2319      	movs	r3, #25
 80068f2:	2201      	movs	r2, #1
 80068f4:	4988      	ldr	r1, [pc, #544]	; (8006b18 <HAL_I2C_IsDeviceReady+0x254>)
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f001 ffae 	bl	8008858 <I2C_WaitOnFlagUntilTimeout>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d001      	beq.n	8006906 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006902:	2302      	movs	r3, #2
 8006904:	e104      	b.n	8006b10 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800690c:	2b01      	cmp	r3, #1
 800690e:	d101      	bne.n	8006914 <HAL_I2C_IsDeviceReady+0x50>
 8006910:	2302      	movs	r3, #2
 8006912:	e0fd      	b.n	8006b10 <HAL_I2C_IsDeviceReady+0x24c>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0301 	and.w	r3, r3, #1
 8006926:	2b01      	cmp	r3, #1
 8006928:	d007      	beq.n	800693a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f042 0201 	orr.w	r2, r2, #1
 8006938:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006948:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2224      	movs	r2, #36	; 0x24
 800694e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	4a70      	ldr	r2, [pc, #448]	; (8006b1c <HAL_I2C_IsDeviceReady+0x258>)
 800695c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800696c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	2200      	movs	r2, #0
 8006976:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	f001 ff6c 	bl	8008858 <I2C_WaitOnFlagUntilTimeout>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00d      	beq.n	80069a2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006994:	d103      	bne.n	800699e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f44f 7200 	mov.w	r2, #512	; 0x200
 800699c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e0b6      	b.n	8006b10 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80069a2:	897b      	ldrh	r3, [r7, #10]
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	461a      	mov	r2, r3
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80069b0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80069b2:	f7fc fd3f 	bl	8003434 <HAL_GetTick>
 80069b6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	f003 0302 	and.w	r3, r3, #2
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	bf0c      	ite	eq
 80069c6:	2301      	moveq	r3, #1
 80069c8:	2300      	movne	r3, #0
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	695b      	ldr	r3, [r3, #20]
 80069d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069dc:	bf0c      	ite	eq
 80069de:	2301      	moveq	r3, #1
 80069e0:	2300      	movne	r3, #0
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80069e6:	e025      	b.n	8006a34 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80069e8:	f7fc fd24 	bl	8003434 <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	683a      	ldr	r2, [r7, #0]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d302      	bcc.n	80069fe <HAL_I2C_IsDeviceReady+0x13a>
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d103      	bne.n	8006a06 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	22a0      	movs	r2, #160	; 0xa0
 8006a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	695b      	ldr	r3, [r3, #20]
 8006a0c:	f003 0302 	and.w	r3, r3, #2
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	bf0c      	ite	eq
 8006a14:	2301      	moveq	r3, #1
 8006a16:	2300      	movne	r3, #0
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a2a:	bf0c      	ite	eq
 8006a2c:	2301      	moveq	r3, #1
 8006a2e:	2300      	movne	r3, #0
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	2ba0      	cmp	r3, #160	; 0xa0
 8006a3e:	d005      	beq.n	8006a4c <HAL_I2C_IsDeviceReady+0x188>
 8006a40:	7dfb      	ldrb	r3, [r7, #23]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d102      	bne.n	8006a4c <HAL_I2C_IsDeviceReady+0x188>
 8006a46:	7dbb      	ldrb	r3, [r7, #22]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d0cd      	beq.n	80069e8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	695b      	ldr	r3, [r3, #20]
 8006a5a:	f003 0302 	and.w	r3, r3, #2
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d129      	bne.n	8006ab6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a70:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a72:	2300      	movs	r3, #0
 8006a74:	613b      	str	r3, [r7, #16]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	695b      	ldr	r3, [r3, #20]
 8006a7c:	613b      	str	r3, [r7, #16]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	699b      	ldr	r3, [r3, #24]
 8006a84:	613b      	str	r3, [r7, #16]
 8006a86:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	9300      	str	r3, [sp, #0]
 8006a8c:	2319      	movs	r3, #25
 8006a8e:	2201      	movs	r2, #1
 8006a90:	4921      	ldr	r1, [pc, #132]	; (8006b18 <HAL_I2C_IsDeviceReady+0x254>)
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f001 fee0 	bl	8008858 <I2C_WaitOnFlagUntilTimeout>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e036      	b.n	8006b10 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	e02c      	b.n	8006b10 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ac4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ace:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	2319      	movs	r3, #25
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	490f      	ldr	r1, [pc, #60]	; (8006b18 <HAL_I2C_IsDeviceReady+0x254>)
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f001 febc 	bl	8008858 <I2C_WaitOnFlagUntilTimeout>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d001      	beq.n	8006aea <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e012      	b.n	8006b10 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	3301      	adds	r3, #1
 8006aee:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006af0:	69ba      	ldr	r2, [r7, #24]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	f4ff af32 	bcc.w	800695e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2220      	movs	r2, #32
 8006afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e000      	b.n	8006b10 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006b0e:	2302      	movs	r3, #2
  }
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3720      	adds	r7, #32
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	00100002 	.word	0x00100002
 8006b1c:	ffff0000 	.word	0xffff0000

08006b20 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b088      	sub	sp, #32
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b38:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b40:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b48:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006b4a:	7bfb      	ldrb	r3, [r7, #15]
 8006b4c:	2b10      	cmp	r3, #16
 8006b4e:	d003      	beq.n	8006b58 <HAL_I2C_EV_IRQHandler+0x38>
 8006b50:	7bfb      	ldrb	r3, [r7, #15]
 8006b52:	2b40      	cmp	r3, #64	; 0x40
 8006b54:	f040 80c1 	bne.w	8006cda <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10d      	bne.n	8006b8e <HAL_I2C_EV_IRQHandler+0x6e>
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006b78:	d003      	beq.n	8006b82 <HAL_I2C_EV_IRQHandler+0x62>
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006b80:	d101      	bne.n	8006b86 <HAL_I2C_EV_IRQHandler+0x66>
 8006b82:	2301      	movs	r3, #1
 8006b84:	e000      	b.n	8006b88 <HAL_I2C_EV_IRQHandler+0x68>
 8006b86:	2300      	movs	r3, #0
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	f000 8132 	beq.w	8006df2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00c      	beq.n	8006bb2 <HAL_I2C_EV_IRQHandler+0x92>
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	0a5b      	lsrs	r3, r3, #9
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d006      	beq.n	8006bb2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f002 f866 	bl	8008c76 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 fd91 	bl	80076d2 <I2C_Master_SB>
 8006bb0:	e092      	b.n	8006cd8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	08db      	lsrs	r3, r3, #3
 8006bb6:	f003 0301 	and.w	r3, r3, #1
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d009      	beq.n	8006bd2 <HAL_I2C_EV_IRQHandler+0xb2>
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	0a5b      	lsrs	r3, r3, #9
 8006bc2:	f003 0301 	and.w	r3, r3, #1
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d003      	beq.n	8006bd2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 fe07 	bl	80077de <I2C_Master_ADD10>
 8006bd0:	e082      	b.n	8006cd8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	085b      	lsrs	r3, r3, #1
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d009      	beq.n	8006bf2 <HAL_I2C_EV_IRQHandler+0xd2>
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	0a5b      	lsrs	r3, r3, #9
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d003      	beq.n	8006bf2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fe21 	bl	8007832 <I2C_Master_ADDR>
 8006bf0:	e072      	b.n	8006cd8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	089b      	lsrs	r3, r3, #2
 8006bf6:	f003 0301 	and.w	r3, r3, #1
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d03b      	beq.n	8006c76 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c0c:	f000 80f3 	beq.w	8006df6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	09db      	lsrs	r3, r3, #7
 8006c14:	f003 0301 	and.w	r3, r3, #1
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00f      	beq.n	8006c3c <HAL_I2C_EV_IRQHandler+0x11c>
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	0a9b      	lsrs	r3, r3, #10
 8006c20:	f003 0301 	and.w	r3, r3, #1
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d009      	beq.n	8006c3c <HAL_I2C_EV_IRQHandler+0x11c>
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	089b      	lsrs	r3, r3, #2
 8006c2c:	f003 0301 	and.w	r3, r3, #1
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d103      	bne.n	8006c3c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 fa01 	bl	800703c <I2C_MasterTransmit_TXE>
 8006c3a:	e04d      	b.n	8006cd8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	089b      	lsrs	r3, r3, #2
 8006c40:	f003 0301 	and.w	r3, r3, #1
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f000 80d6 	beq.w	8006df6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	0a5b      	lsrs	r3, r3, #9
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f000 80cf 	beq.w	8006df6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006c58:	7bbb      	ldrb	r3, [r7, #14]
 8006c5a:	2b21      	cmp	r3, #33	; 0x21
 8006c5c:	d103      	bne.n	8006c66 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 fa88 	bl	8007174 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c64:	e0c7      	b.n	8006df6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006c66:	7bfb      	ldrb	r3, [r7, #15]
 8006c68:	2b40      	cmp	r3, #64	; 0x40
 8006c6a:	f040 80c4 	bne.w	8006df6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 faf6 	bl	8007260 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c74:	e0bf      	b.n	8006df6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c84:	f000 80b7 	beq.w	8006df6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	099b      	lsrs	r3, r3, #6
 8006c8c:	f003 0301 	and.w	r3, r3, #1
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00f      	beq.n	8006cb4 <HAL_I2C_EV_IRQHandler+0x194>
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	0a9b      	lsrs	r3, r3, #10
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d009      	beq.n	8006cb4 <HAL_I2C_EV_IRQHandler+0x194>
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	089b      	lsrs	r3, r3, #2
 8006ca4:	f003 0301 	and.w	r3, r3, #1
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d103      	bne.n	8006cb4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 fb6b 	bl	8007388 <I2C_MasterReceive_RXNE>
 8006cb2:	e011      	b.n	8006cd8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	089b      	lsrs	r3, r3, #2
 8006cb8:	f003 0301 	and.w	r3, r3, #1
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f000 809a 	beq.w	8006df6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	0a5b      	lsrs	r3, r3, #9
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f000 8093 	beq.w	8006df6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 fc14 	bl	80074fe <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006cd6:	e08e      	b.n	8006df6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006cd8:	e08d      	b.n	8006df6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d004      	beq.n	8006cec <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	695b      	ldr	r3, [r3, #20]
 8006ce8:	61fb      	str	r3, [r7, #28]
 8006cea:	e007      	b.n	8006cfc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	699b      	ldr	r3, [r3, #24]
 8006cf2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	085b      	lsrs	r3, r3, #1
 8006d00:	f003 0301 	and.w	r3, r3, #1
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d012      	beq.n	8006d2e <HAL_I2C_EV_IRQHandler+0x20e>
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	0a5b      	lsrs	r3, r3, #9
 8006d0c:	f003 0301 	and.w	r3, r3, #1
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00c      	beq.n	8006d2e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d003      	beq.n	8006d24 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006d24:	69b9      	ldr	r1, [r7, #24]
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 ffd2 	bl	8007cd0 <I2C_Slave_ADDR>
 8006d2c:	e066      	b.n	8006dfc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	091b      	lsrs	r3, r3, #4
 8006d32:	f003 0301 	and.w	r3, r3, #1
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d009      	beq.n	8006d4e <HAL_I2C_EV_IRQHandler+0x22e>
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	0a5b      	lsrs	r3, r3, #9
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d003      	beq.n	8006d4e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f001 f80c 	bl	8007d64 <I2C_Slave_STOPF>
 8006d4c:	e056      	b.n	8006dfc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006d4e:	7bbb      	ldrb	r3, [r7, #14]
 8006d50:	2b21      	cmp	r3, #33	; 0x21
 8006d52:	d002      	beq.n	8006d5a <HAL_I2C_EV_IRQHandler+0x23a>
 8006d54:	7bbb      	ldrb	r3, [r7, #14]
 8006d56:	2b29      	cmp	r3, #41	; 0x29
 8006d58:	d125      	bne.n	8006da6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	09db      	lsrs	r3, r3, #7
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00f      	beq.n	8006d86 <HAL_I2C_EV_IRQHandler+0x266>
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	0a9b      	lsrs	r3, r3, #10
 8006d6a:	f003 0301 	and.w	r3, r3, #1
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d009      	beq.n	8006d86 <HAL_I2C_EV_IRQHandler+0x266>
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	089b      	lsrs	r3, r3, #2
 8006d76:	f003 0301 	and.w	r3, r3, #1
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d103      	bne.n	8006d86 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 fee8 	bl	8007b54 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006d84:	e039      	b.n	8006dfa <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	089b      	lsrs	r3, r3, #2
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d033      	beq.n	8006dfa <HAL_I2C_EV_IRQHandler+0x2da>
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	0a5b      	lsrs	r3, r3, #9
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d02d      	beq.n	8006dfa <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 ff15 	bl	8007bce <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006da4:	e029      	b.n	8006dfa <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	099b      	lsrs	r3, r3, #6
 8006daa:	f003 0301 	and.w	r3, r3, #1
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00f      	beq.n	8006dd2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	0a9b      	lsrs	r3, r3, #10
 8006db6:	f003 0301 	and.w	r3, r3, #1
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d009      	beq.n	8006dd2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	089b      	lsrs	r3, r3, #2
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d103      	bne.n	8006dd2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 ff20 	bl	8007c10 <I2C_SlaveReceive_RXNE>
 8006dd0:	e014      	b.n	8006dfc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	089b      	lsrs	r3, r3, #2
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00e      	beq.n	8006dfc <HAL_I2C_EV_IRQHandler+0x2dc>
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	0a5b      	lsrs	r3, r3, #9
 8006de2:	f003 0301 	and.w	r3, r3, #1
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d008      	beq.n	8006dfc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 ff4e 	bl	8007c8c <I2C_SlaveReceive_BTF>
 8006df0:	e004      	b.n	8006dfc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006df2:	bf00      	nop
 8006df4:	e002      	b.n	8006dfc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006df6:	bf00      	nop
 8006df8:	e000      	b.n	8006dfc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006dfa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006dfc:	3720      	adds	r7, #32
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b08a      	sub	sp, #40	; 0x28
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e24:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006e26:	6a3b      	ldr	r3, [r7, #32]
 8006e28:	0a1b      	lsrs	r3, r3, #8
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00e      	beq.n	8006e50 <HAL_I2C_ER_IRQHandler+0x4e>
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	0a1b      	lsrs	r3, r3, #8
 8006e36:	f003 0301 	and.w	r3, r3, #1
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d008      	beq.n	8006e50 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e40:	f043 0301 	orr.w	r3, r3, #1
 8006e44:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006e4e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006e50:	6a3b      	ldr	r3, [r7, #32]
 8006e52:	0a5b      	lsrs	r3, r3, #9
 8006e54:	f003 0301 	and.w	r3, r3, #1
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d00e      	beq.n	8006e7a <HAL_I2C_ER_IRQHandler+0x78>
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	0a1b      	lsrs	r3, r3, #8
 8006e60:	f003 0301 	and.w	r3, r3, #1
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d008      	beq.n	8006e7a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6a:	f043 0302 	orr.w	r3, r3, #2
 8006e6e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006e78:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006e7a:	6a3b      	ldr	r3, [r7, #32]
 8006e7c:	0a9b      	lsrs	r3, r3, #10
 8006e7e:	f003 0301 	and.w	r3, r3, #1
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d03f      	beq.n	8006f06 <HAL_I2C_ER_IRQHandler+0x104>
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	0a1b      	lsrs	r3, r3, #8
 8006e8a:	f003 0301 	and.w	r3, r3, #1
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d039      	beq.n	8006f06 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006e92:	7efb      	ldrb	r3, [r7, #27]
 8006e94:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ea4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eaa:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006eac:	7ebb      	ldrb	r3, [r7, #26]
 8006eae:	2b20      	cmp	r3, #32
 8006eb0:	d112      	bne.n	8006ed8 <HAL_I2C_ER_IRQHandler+0xd6>
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d10f      	bne.n	8006ed8 <HAL_I2C_ER_IRQHandler+0xd6>
 8006eb8:	7cfb      	ldrb	r3, [r7, #19]
 8006eba:	2b21      	cmp	r3, #33	; 0x21
 8006ebc:	d008      	beq.n	8006ed0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006ebe:	7cfb      	ldrb	r3, [r7, #19]
 8006ec0:	2b29      	cmp	r3, #41	; 0x29
 8006ec2:	d005      	beq.n	8006ed0 <HAL_I2C_ER_IRQHandler+0xce>
 8006ec4:	7cfb      	ldrb	r3, [r7, #19]
 8006ec6:	2b28      	cmp	r3, #40	; 0x28
 8006ec8:	d106      	bne.n	8006ed8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2b21      	cmp	r3, #33	; 0x21
 8006ece:	d103      	bne.n	8006ed8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f001 f877 	bl	8007fc4 <I2C_Slave_AF>
 8006ed6:	e016      	b.n	8006f06 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ee0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee4:	f043 0304 	orr.w	r3, r3, #4
 8006ee8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006eea:	7efb      	ldrb	r3, [r7, #27]
 8006eec:	2b10      	cmp	r3, #16
 8006eee:	d002      	beq.n	8006ef6 <HAL_I2C_ER_IRQHandler+0xf4>
 8006ef0:	7efb      	ldrb	r3, [r7, #27]
 8006ef2:	2b40      	cmp	r3, #64	; 0x40
 8006ef4:	d107      	bne.n	8006f06 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f04:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006f06:	6a3b      	ldr	r3, [r7, #32]
 8006f08:	0adb      	lsrs	r3, r3, #11
 8006f0a:	f003 0301 	and.w	r3, r3, #1
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00e      	beq.n	8006f30 <HAL_I2C_ER_IRQHandler+0x12e>
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	0a1b      	lsrs	r3, r3, #8
 8006f16:	f003 0301 	and.w	r3, r3, #1
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d008      	beq.n	8006f30 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f20:	f043 0308 	orr.w	r3, r3, #8
 8006f24:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006f2e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d008      	beq.n	8006f48 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3c:	431a      	orrs	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f001 f8ae 	bl	80080a4 <I2C_ITError>
  }
}
 8006f48:	bf00      	nop
 8006f4a:	3728      	adds	r7, #40	; 0x28
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006f58:	bf00      	nop
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	460b      	mov	r3, r1
 8006faa:	70fb      	strb	r3, [r7, #3]
 8006fac:	4613      	mov	r3, r2
 8006fae:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006fc4:	bf00      	nop
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006fd8:	bf00      	nop
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006fec:	bf00      	nop
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007000:	bf00      	nop
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007014:	bf00      	nop
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800702e:	b2db      	uxtb	r3, r3
}
 8007030:	4618      	mov	r0, r3
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800704a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007052:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007058:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800705e:	2b00      	cmp	r3, #0
 8007060:	d150      	bne.n	8007104 <I2C_MasterTransmit_TXE+0xc8>
 8007062:	7bfb      	ldrb	r3, [r7, #15]
 8007064:	2b21      	cmp	r3, #33	; 0x21
 8007066:	d14d      	bne.n	8007104 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	2b08      	cmp	r3, #8
 800706c:	d01d      	beq.n	80070aa <I2C_MasterTransmit_TXE+0x6e>
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	2b20      	cmp	r3, #32
 8007072:	d01a      	beq.n	80070aa <I2C_MasterTransmit_TXE+0x6e>
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800707a:	d016      	beq.n	80070aa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	685a      	ldr	r2, [r3, #4]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800708a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2211      	movs	r2, #17
 8007090:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2220      	movs	r2, #32
 800709e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f7ff ff54 	bl	8006f50 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80070a8:	e060      	b.n	800716c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	685a      	ldr	r2, [r3, #4]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80070b8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070c8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2220      	movs	r2, #32
 80070d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	2b40      	cmp	r3, #64	; 0x40
 80070e2:	d107      	bne.n	80070f4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f7ff ff6f 	bl	8006fd0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80070f2:	e03b      	b.n	800716c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f7ff ff27 	bl	8006f50 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007102:	e033      	b.n	800716c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007104:	7bfb      	ldrb	r3, [r7, #15]
 8007106:	2b21      	cmp	r3, #33	; 0x21
 8007108:	d005      	beq.n	8007116 <I2C_MasterTransmit_TXE+0xda>
 800710a:	7bbb      	ldrb	r3, [r7, #14]
 800710c:	2b40      	cmp	r3, #64	; 0x40
 800710e:	d12d      	bne.n	800716c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007110:	7bfb      	ldrb	r3, [r7, #15]
 8007112:	2b22      	cmp	r3, #34	; 0x22
 8007114:	d12a      	bne.n	800716c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800711a:	b29b      	uxth	r3, r3
 800711c:	2b00      	cmp	r3, #0
 800711e:	d108      	bne.n	8007132 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	685a      	ldr	r2, [r3, #4]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800712e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007130:	e01c      	b.n	800716c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b40      	cmp	r3, #64	; 0x40
 800713c:	d103      	bne.n	8007146 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 f88e 	bl	8007260 <I2C_MemoryTransmit_TXE_BTF>
}
 8007144:	e012      	b.n	800716c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714a:	781a      	ldrb	r2, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007156:	1c5a      	adds	r2, r3, #1
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007160:	b29b      	uxth	r3, r3
 8007162:	3b01      	subs	r3, #1
 8007164:	b29a      	uxth	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800716a:	e7ff      	b.n	800716c <I2C_MasterTransmit_TXE+0x130>
 800716c:	bf00      	nop
 800716e:	3710      	adds	r7, #16
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007180:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007188:	b2db      	uxtb	r3, r3
 800718a:	2b21      	cmp	r3, #33	; 0x21
 800718c:	d164      	bne.n	8007258 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007192:	b29b      	uxth	r3, r3
 8007194:	2b00      	cmp	r3, #0
 8007196:	d012      	beq.n	80071be <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719c:	781a      	ldrb	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a8:	1c5a      	adds	r2, r3, #1
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	3b01      	subs	r3, #1
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80071bc:	e04c      	b.n	8007258 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2b08      	cmp	r3, #8
 80071c2:	d01d      	beq.n	8007200 <I2C_MasterTransmit_BTF+0x8c>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2b20      	cmp	r3, #32
 80071c8:	d01a      	beq.n	8007200 <I2C_MasterTransmit_BTF+0x8c>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80071d0:	d016      	beq.n	8007200 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	685a      	ldr	r2, [r3, #4]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80071e0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2211      	movs	r2, #17
 80071e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2220      	movs	r2, #32
 80071f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f7ff fea9 	bl	8006f50 <HAL_I2C_MasterTxCpltCallback>
}
 80071fe:	e02b      	b.n	8007258 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	685a      	ldr	r2, [r3, #4]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800720e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800721e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2220      	movs	r2, #32
 800722a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007234:	b2db      	uxtb	r3, r3
 8007236:	2b40      	cmp	r3, #64	; 0x40
 8007238:	d107      	bne.n	800724a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f7ff fec4 	bl	8006fd0 <HAL_I2C_MemTxCpltCallback>
}
 8007248:	e006      	b.n	8007258 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f7ff fe7c 	bl	8006f50 <HAL_I2C_MasterTxCpltCallback>
}
 8007258:	bf00      	nop
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800726e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007274:	2b00      	cmp	r3, #0
 8007276:	d11d      	bne.n	80072b4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800727c:	2b01      	cmp	r3, #1
 800727e:	d10b      	bne.n	8007298 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007284:	b2da      	uxtb	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007290:	1c9a      	adds	r2, r3, #2
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007296:	e073      	b.n	8007380 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800729c:	b29b      	uxth	r3, r3
 800729e:	121b      	asrs	r3, r3, #8
 80072a0:	b2da      	uxtb	r2, r3
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ac:	1c5a      	adds	r2, r3, #1
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80072b2:	e065      	b.n	8007380 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d10b      	bne.n	80072d4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072c0:	b2da      	uxtb	r2, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072cc:	1c5a      	adds	r2, r3, #1
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80072d2:	e055      	b.n	8007380 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d151      	bne.n	8007380 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80072dc:	7bfb      	ldrb	r3, [r7, #15]
 80072de:	2b22      	cmp	r3, #34	; 0x22
 80072e0:	d10d      	bne.n	80072fe <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072f0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072f6:	1c5a      	adds	r2, r3, #1
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	651a      	str	r2, [r3, #80]	; 0x50
}
 80072fc:	e040      	b.n	8007380 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007302:	b29b      	uxth	r3, r3
 8007304:	2b00      	cmp	r3, #0
 8007306:	d015      	beq.n	8007334 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007308:	7bfb      	ldrb	r3, [r7, #15]
 800730a:	2b21      	cmp	r3, #33	; 0x21
 800730c:	d112      	bne.n	8007334 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007312:	781a      	ldrb	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731e:	1c5a      	adds	r2, r3, #1
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007328:	b29b      	uxth	r3, r3
 800732a:	3b01      	subs	r3, #1
 800732c:	b29a      	uxth	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007332:	e025      	b.n	8007380 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007338:	b29b      	uxth	r3, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	d120      	bne.n	8007380 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800733e:	7bfb      	ldrb	r3, [r7, #15]
 8007340:	2b21      	cmp	r3, #33	; 0x21
 8007342:	d11d      	bne.n	8007380 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	685a      	ldr	r2, [r3, #4]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007352:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007362:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2220      	movs	r2, #32
 800736e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f7ff fe28 	bl	8006fd0 <HAL_I2C_MemTxCpltCallback>
}
 8007380:	bf00      	nop
 8007382:	3710      	adds	r7, #16
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007396:	b2db      	uxtb	r3, r3
 8007398:	2b22      	cmp	r3, #34	; 0x22
 800739a:	f040 80ac 	bne.w	80074f6 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2b03      	cmp	r3, #3
 80073aa:	d921      	bls.n	80073f0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	691a      	ldr	r2, [r3, #16]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b6:	b2d2      	uxtb	r2, r2
 80073b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073be:	1c5a      	adds	r2, r3, #1
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	3b01      	subs	r3, #1
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	2b03      	cmp	r3, #3
 80073da:	f040 808c 	bne.w	80074f6 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	685a      	ldr	r2, [r3, #4]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073ec:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80073ee:	e082      	b.n	80074f6 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d075      	beq.n	80074e4 <I2C_MasterReceive_RXNE+0x15c>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d002      	beq.n	8007404 <I2C_MasterReceive_RXNE+0x7c>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d16f      	bne.n	80074e4 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f001 fb7f 	bl	8008b08 <I2C_WaitOnSTOPRequestThroughIT>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d142      	bne.n	8007496 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800741e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	685a      	ldr	r2, [r3, #4]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800742e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	691a      	ldr	r2, [r3, #16]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743a:	b2d2      	uxtb	r2, r2
 800743c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007442:	1c5a      	adds	r2, r3, #1
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800744c:	b29b      	uxth	r3, r3
 800744e:	3b01      	subs	r3, #1
 8007450:	b29a      	uxth	r2, r3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2220      	movs	r2, #32
 800745a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b40      	cmp	r3, #64	; 0x40
 8007468:	d10a      	bne.n	8007480 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f7ff fdb3 	bl	8006fe4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800747e:	e03a      	b.n	80074f6 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2212      	movs	r2, #18
 800748c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7ff fd68 	bl	8006f64 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007494:	e02f      	b.n	80074f6 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	685a      	ldr	r2, [r3, #4]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80074a4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	691a      	ldr	r2, [r3, #16]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b0:	b2d2      	uxtb	r2, r2
 80074b2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b8:	1c5a      	adds	r2, r3, #1
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	3b01      	subs	r3, #1
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2220      	movs	r2, #32
 80074d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f7ff fd8b 	bl	8006ff8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80074e2:	e008      	b.n	80074f6 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	685a      	ldr	r2, [r3, #4]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074f2:	605a      	str	r2, [r3, #4]
}
 80074f4:	e7ff      	b.n	80074f6 <I2C_MasterReceive_RXNE+0x16e>
 80074f6:	bf00      	nop
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b084      	sub	sp, #16
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007510:	b29b      	uxth	r3, r3
 8007512:	2b04      	cmp	r3, #4
 8007514:	d11b      	bne.n	800754e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	685a      	ldr	r2, [r3, #4]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007524:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	691a      	ldr	r2, [r3, #16]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007530:	b2d2      	uxtb	r2, r2
 8007532:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007538:	1c5a      	adds	r2, r3, #1
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007542:	b29b      	uxth	r3, r3
 8007544:	3b01      	subs	r3, #1
 8007546:	b29a      	uxth	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800754c:	e0bd      	b.n	80076ca <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007552:	b29b      	uxth	r3, r3
 8007554:	2b03      	cmp	r3, #3
 8007556:	d129      	bne.n	80075ac <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	685a      	ldr	r2, [r3, #4]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007566:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2b04      	cmp	r3, #4
 800756c:	d00a      	beq.n	8007584 <I2C_MasterReceive_BTF+0x86>
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2b02      	cmp	r3, #2
 8007572:	d007      	beq.n	8007584 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007582:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	691a      	ldr	r2, [r3, #16]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758e:	b2d2      	uxtb	r2, r2
 8007590:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007596:	1c5a      	adds	r2, r3, #1
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	3b01      	subs	r3, #1
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80075aa:	e08e      	b.n	80076ca <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	d176      	bne.n	80076a4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d002      	beq.n	80075c2 <I2C_MasterReceive_BTF+0xc4>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2b10      	cmp	r3, #16
 80075c0:	d108      	bne.n	80075d4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075d0:	601a      	str	r2, [r3, #0]
 80075d2:	e019      	b.n	8007608 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2b04      	cmp	r3, #4
 80075d8:	d002      	beq.n	80075e0 <I2C_MasterReceive_BTF+0xe2>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d108      	bne.n	80075f2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80075ee:	601a      	str	r2, [r3, #0]
 80075f0:	e00a      	b.n	8007608 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2b10      	cmp	r3, #16
 80075f6:	d007      	beq.n	8007608 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007606:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	691a      	ldr	r2, [r3, #16]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007612:	b2d2      	uxtb	r2, r2
 8007614:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761a:	1c5a      	adds	r2, r3, #1
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007624:	b29b      	uxth	r3, r3
 8007626:	3b01      	subs	r3, #1
 8007628:	b29a      	uxth	r2, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	691a      	ldr	r2, [r3, #16]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007638:	b2d2      	uxtb	r2, r2
 800763a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007640:	1c5a      	adds	r2, r3, #1
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800764a:	b29b      	uxth	r3, r3
 800764c:	3b01      	subs	r3, #1
 800764e:	b29a      	uxth	r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	685a      	ldr	r2, [r3, #4]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007662:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2220      	movs	r2, #32
 8007668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007672:	b2db      	uxtb	r3, r3
 8007674:	2b40      	cmp	r3, #64	; 0x40
 8007676:	d10a      	bne.n	800768e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f7ff fcac 	bl	8006fe4 <HAL_I2C_MemRxCpltCallback>
}
 800768c:	e01d      	b.n	80076ca <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2212      	movs	r2, #18
 800769a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f7ff fc61 	bl	8006f64 <HAL_I2C_MasterRxCpltCallback>
}
 80076a2:	e012      	b.n	80076ca <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	691a      	ldr	r2, [r3, #16]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ae:	b2d2      	uxtb	r2, r2
 80076b0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b6:	1c5a      	adds	r2, r3, #1
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	3b01      	subs	r3, #1
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80076ca:	bf00      	nop
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80076d2:	b480      	push	{r7}
 80076d4:	b083      	sub	sp, #12
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	2b40      	cmp	r3, #64	; 0x40
 80076e4:	d117      	bne.n	8007716 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d109      	bne.n	8007702 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	461a      	mov	r2, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80076fe:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007700:	e067      	b.n	80077d2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007706:	b2db      	uxtb	r3, r3
 8007708:	f043 0301 	orr.w	r3, r3, #1
 800770c:	b2da      	uxtb	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	611a      	str	r2, [r3, #16]
}
 8007714:	e05d      	b.n	80077d2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800771e:	d133      	bne.n	8007788 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007726:	b2db      	uxtb	r3, r3
 8007728:	2b21      	cmp	r3, #33	; 0x21
 800772a:	d109      	bne.n	8007740 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007730:	b2db      	uxtb	r3, r3
 8007732:	461a      	mov	r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800773c:	611a      	str	r2, [r3, #16]
 800773e:	e008      	b.n	8007752 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007744:	b2db      	uxtb	r3, r3
 8007746:	f043 0301 	orr.w	r3, r3, #1
 800774a:	b2da      	uxtb	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007756:	2b00      	cmp	r3, #0
 8007758:	d004      	beq.n	8007764 <I2C_Master_SB+0x92>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800775e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007760:	2b00      	cmp	r3, #0
 8007762:	d108      	bne.n	8007776 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007768:	2b00      	cmp	r3, #0
 800776a:	d032      	beq.n	80077d2 <I2C_Master_SB+0x100>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007772:	2b00      	cmp	r3, #0
 8007774:	d02d      	beq.n	80077d2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	685a      	ldr	r2, [r3, #4]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007784:	605a      	str	r2, [r3, #4]
}
 8007786:	e024      	b.n	80077d2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10e      	bne.n	80077ae <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007794:	b29b      	uxth	r3, r3
 8007796:	11db      	asrs	r3, r3, #7
 8007798:	b2db      	uxtb	r3, r3
 800779a:	f003 0306 	and.w	r3, r3, #6
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	f063 030f 	orn	r3, r3, #15
 80077a4:	b2da      	uxtb	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	611a      	str	r2, [r3, #16]
}
 80077ac:	e011      	b.n	80077d2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d10d      	bne.n	80077d2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	11db      	asrs	r3, r3, #7
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	f003 0306 	and.w	r3, r3, #6
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	f063 030e 	orn	r3, r3, #14
 80077ca:	b2da      	uxtb	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	611a      	str	r2, [r3, #16]
}
 80077d2:	bf00      	nop
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80077de:	b480      	push	{r7}
 80077e0:	b083      	sub	sp, #12
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ea:	b2da      	uxtb	r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d004      	beq.n	8007804 <I2C_Master_ADD10+0x26>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007800:	2b00      	cmp	r3, #0
 8007802:	d108      	bne.n	8007816 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00c      	beq.n	8007826 <I2C_Master_ADD10+0x48>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007812:	2b00      	cmp	r3, #0
 8007814:	d007      	beq.n	8007826 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	685a      	ldr	r2, [r3, #4]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007824:	605a      	str	r2, [r3, #4]
  }
}
 8007826:	bf00      	nop
 8007828:	370c      	adds	r7, #12
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr

08007832 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007832:	b480      	push	{r7}
 8007834:	b091      	sub	sp, #68	; 0x44
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007840:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007848:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007856:	b2db      	uxtb	r3, r3
 8007858:	2b22      	cmp	r3, #34	; 0x22
 800785a:	f040 8169 	bne.w	8007b30 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10f      	bne.n	8007886 <I2C_Master_ADDR+0x54>
 8007866:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800786a:	2b40      	cmp	r3, #64	; 0x40
 800786c:	d10b      	bne.n	8007886 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800786e:	2300      	movs	r3, #0
 8007870:	633b      	str	r3, [r7, #48]	; 0x30
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	695b      	ldr	r3, [r3, #20]
 8007878:	633b      	str	r3, [r7, #48]	; 0x30
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	699b      	ldr	r3, [r3, #24]
 8007880:	633b      	str	r3, [r7, #48]	; 0x30
 8007882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007884:	e160      	b.n	8007b48 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800788a:	2b00      	cmp	r3, #0
 800788c:	d11d      	bne.n	80078ca <I2C_Master_ADDR+0x98>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007896:	d118      	bne.n	80078ca <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007898:	2300      	movs	r3, #0
 800789a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	695b      	ldr	r3, [r3, #20]
 80078a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078bc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078c2:	1c5a      	adds	r2, r3, #1
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	651a      	str	r2, [r3, #80]	; 0x50
 80078c8:	e13e      	b.n	8007b48 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d113      	bne.n	80078fc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078d4:	2300      	movs	r3, #0
 80078d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	695b      	ldr	r3, [r3, #20]
 80078de:	62bb      	str	r3, [r7, #40]	; 0x28
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	699b      	ldr	r3, [r3, #24]
 80078e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80078e8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078f8:	601a      	str	r2, [r3, #0]
 80078fa:	e115      	b.n	8007b28 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007900:	b29b      	uxth	r3, r3
 8007902:	2b01      	cmp	r3, #1
 8007904:	f040 808a 	bne.w	8007a1c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800790e:	d137      	bne.n	8007980 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800791e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800792a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800792e:	d113      	bne.n	8007958 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800793e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007940:	2300      	movs	r3, #0
 8007942:	627b      	str	r3, [r7, #36]	; 0x24
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	627b      	str	r3, [r7, #36]	; 0x24
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	699b      	ldr	r3, [r3, #24]
 8007952:	627b      	str	r3, [r7, #36]	; 0x24
 8007954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007956:	e0e7      	b.n	8007b28 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007958:	2300      	movs	r3, #0
 800795a:	623b      	str	r3, [r7, #32]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	695b      	ldr	r3, [r3, #20]
 8007962:	623b      	str	r3, [r7, #32]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	699b      	ldr	r3, [r3, #24]
 800796a:	623b      	str	r3, [r7, #32]
 800796c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800797c:	601a      	str	r2, [r3, #0]
 800797e:	e0d3      	b.n	8007b28 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007982:	2b08      	cmp	r3, #8
 8007984:	d02e      	beq.n	80079e4 <I2C_Master_ADDR+0x1b2>
 8007986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007988:	2b20      	cmp	r3, #32
 800798a:	d02b      	beq.n	80079e4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800798c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800798e:	2b12      	cmp	r3, #18
 8007990:	d102      	bne.n	8007998 <I2C_Master_ADDR+0x166>
 8007992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007994:	2b01      	cmp	r3, #1
 8007996:	d125      	bne.n	80079e4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799a:	2b04      	cmp	r3, #4
 800799c:	d00e      	beq.n	80079bc <I2C_Master_ADDR+0x18a>
 800799e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d00b      	beq.n	80079bc <I2C_Master_ADDR+0x18a>
 80079a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a6:	2b10      	cmp	r3, #16
 80079a8:	d008      	beq.n	80079bc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079b8:	601a      	str	r2, [r3, #0]
 80079ba:	e007      	b.n	80079cc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80079ca:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079cc:	2300      	movs	r3, #0
 80079ce:	61fb      	str	r3, [r7, #28]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	695b      	ldr	r3, [r3, #20]
 80079d6:	61fb      	str	r3, [r7, #28]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	61fb      	str	r3, [r7, #28]
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	e0a1      	b.n	8007b28 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079f2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079f4:	2300      	movs	r3, #0
 80079f6:	61bb      	str	r3, [r7, #24]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	61bb      	str	r3, [r7, #24]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	61bb      	str	r3, [r7, #24]
 8007a08:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a18:	601a      	str	r2, [r3, #0]
 8007a1a:	e085      	b.n	8007b28 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d14d      	bne.n	8007ac2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a28:	2b04      	cmp	r3, #4
 8007a2a:	d016      	beq.n	8007a5a <I2C_Master_ADDR+0x228>
 8007a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	d013      	beq.n	8007a5a <I2C_Master_ADDR+0x228>
 8007a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a34:	2b10      	cmp	r3, #16
 8007a36:	d010      	beq.n	8007a5a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a46:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a56:	601a      	str	r2, [r3, #0]
 8007a58:	e007      	b.n	8007a6a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a68:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a78:	d117      	bne.n	8007aaa <I2C_Master_ADDR+0x278>
 8007a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007a80:	d00b      	beq.n	8007a9a <I2C_Master_ADDR+0x268>
 8007a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d008      	beq.n	8007a9a <I2C_Master_ADDR+0x268>
 8007a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8a:	2b08      	cmp	r3, #8
 8007a8c:	d005      	beq.n	8007a9a <I2C_Master_ADDR+0x268>
 8007a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a90:	2b10      	cmp	r3, #16
 8007a92:	d002      	beq.n	8007a9a <I2C_Master_ADDR+0x268>
 8007a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a96:	2b20      	cmp	r3, #32
 8007a98:	d107      	bne.n	8007aaa <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	685a      	ldr	r2, [r3, #4]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007aa8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007aaa:	2300      	movs	r3, #0
 8007aac:	617b      	str	r3, [r7, #20]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	695b      	ldr	r3, [r3, #20]
 8007ab4:	617b      	str	r3, [r7, #20]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	617b      	str	r3, [r7, #20]
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	e032      	b.n	8007b28 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ad0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007adc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ae0:	d117      	bne.n	8007b12 <I2C_Master_ADDR+0x2e0>
 8007ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007ae8:	d00b      	beq.n	8007b02 <I2C_Master_ADDR+0x2d0>
 8007aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d008      	beq.n	8007b02 <I2C_Master_ADDR+0x2d0>
 8007af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af2:	2b08      	cmp	r3, #8
 8007af4:	d005      	beq.n	8007b02 <I2C_Master_ADDR+0x2d0>
 8007af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af8:	2b10      	cmp	r3, #16
 8007afa:	d002      	beq.n	8007b02 <I2C_Master_ADDR+0x2d0>
 8007afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afe:	2b20      	cmp	r3, #32
 8007b00:	d107      	bne.n	8007b12 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	685a      	ldr	r2, [r3, #4]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b10:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b12:	2300      	movs	r3, #0
 8007b14:	613b      	str	r3, [r7, #16]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	695b      	ldr	r3, [r3, #20]
 8007b1c:	613b      	str	r3, [r7, #16]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	699b      	ldr	r3, [r3, #24]
 8007b24:	613b      	str	r3, [r7, #16]
 8007b26:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007b2e:	e00b      	b.n	8007b48 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b30:	2300      	movs	r3, #0
 8007b32:	60fb      	str	r3, [r7, #12]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	695b      	ldr	r3, [r3, #20]
 8007b3a:	60fb      	str	r3, [r7, #12]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	60fb      	str	r3, [r7, #12]
 8007b44:	68fb      	ldr	r3, [r7, #12]
}
 8007b46:	e7ff      	b.n	8007b48 <I2C_Master_ADDR+0x316>
 8007b48:	bf00      	nop
 8007b4a:	3744      	adds	r7, #68	; 0x44
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b62:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d02b      	beq.n	8007bc6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b72:	781a      	ldrb	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7e:	1c5a      	adds	r2, r3, #1
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d114      	bne.n	8007bc6 <I2C_SlaveTransmit_TXE+0x72>
 8007b9c:	7bfb      	ldrb	r3, [r7, #15]
 8007b9e:	2b29      	cmp	r3, #41	; 0x29
 8007ba0:	d111      	bne.n	8007bc6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	685a      	ldr	r2, [r3, #4]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bb0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2221      	movs	r2, #33	; 0x21
 8007bb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2228      	movs	r2, #40	; 0x28
 8007bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f7ff f9d9 	bl	8006f78 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007bc6:	bf00      	nop
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007bce:	b480      	push	{r7}
 8007bd0:	b083      	sub	sp, #12
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d011      	beq.n	8007c04 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be4:	781a      	ldrb	r2, [r3, #0]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf0:	1c5a      	adds	r2, r3, #1
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	3b01      	subs	r3, #1
 8007bfe:	b29a      	uxth	r2, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007c04:	bf00      	nop
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c1e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d02c      	beq.n	8007c84 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	691a      	ldr	r2, [r3, #16]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c34:	b2d2      	uxtb	r2, r2
 8007c36:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3c:	1c5a      	adds	r2, r3, #1
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	3b01      	subs	r3, #1
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d114      	bne.n	8007c84 <I2C_SlaveReceive_RXNE+0x74>
 8007c5a:	7bfb      	ldrb	r3, [r7, #15]
 8007c5c:	2b2a      	cmp	r3, #42	; 0x2a
 8007c5e:	d111      	bne.n	8007c84 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	685a      	ldr	r2, [r3, #4]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c6e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2222      	movs	r2, #34	; 0x22
 8007c74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2228      	movs	r2, #40	; 0x28
 8007c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f7ff f984 	bl	8006f8c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007c84:	bf00      	nop
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d012      	beq.n	8007cc4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	691a      	ldr	r2, [r3, #16]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca8:	b2d2      	uxtb	r2, r2
 8007caa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb0:	1c5a      	adds	r2, r3, #1
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	3b01      	subs	r3, #1
 8007cbe:	b29a      	uxth	r2, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007cc4:	bf00      	nop
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007cea:	2b28      	cmp	r3, #40	; 0x28
 8007cec:	d127      	bne.n	8007d3e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	685a      	ldr	r2, [r3, #4]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cfc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	089b      	lsrs	r3, r3, #2
 8007d02:	f003 0301 	and.w	r3, r3, #1
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d101      	bne.n	8007d0e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	09db      	lsrs	r3, r3, #7
 8007d12:	f003 0301 	and.w	r3, r3, #1
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d103      	bne.n	8007d22 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	81bb      	strh	r3, [r7, #12]
 8007d20:	e002      	b.n	8007d28 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	699b      	ldr	r3, [r3, #24]
 8007d26:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007d30:	89ba      	ldrh	r2, [r7, #12]
 8007d32:	7bfb      	ldrb	r3, [r7, #15]
 8007d34:	4619      	mov	r1, r3
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f7ff f932 	bl	8006fa0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007d3c:	e00e      	b.n	8007d5c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d3e:	2300      	movs	r3, #0
 8007d40:	60bb      	str	r3, [r7, #8]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	695b      	ldr	r3, [r3, #20]
 8007d48:	60bb      	str	r3, [r7, #8]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	699b      	ldr	r3, [r3, #24]
 8007d50:	60bb      	str	r3, [r7, #8]
 8007d52:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007d5c:	bf00      	nop
 8007d5e:	3710      	adds	r7, #16
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d72:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	685a      	ldr	r2, [r3, #4]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007d82:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007d84:	2300      	movs	r3, #0
 8007d86:	60bb      	str	r3, [r7, #8]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	695b      	ldr	r3, [r3, #20]
 8007d8e:	60bb      	str	r3, [r7, #8]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f042 0201 	orr.w	r2, r2, #1
 8007d9e:	601a      	str	r2, [r3, #0]
 8007da0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007db0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dc0:	d172      	bne.n	8007ea8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007dc2:	7bfb      	ldrb	r3, [r7, #15]
 8007dc4:	2b22      	cmp	r3, #34	; 0x22
 8007dc6:	d002      	beq.n	8007dce <I2C_Slave_STOPF+0x6a>
 8007dc8:	7bfb      	ldrb	r3, [r7, #15]
 8007dca:	2b2a      	cmp	r3, #42	; 0x2a
 8007dcc:	d135      	bne.n	8007e3a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d005      	beq.n	8007df2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dea:	f043 0204 	orr.w	r2, r3, #4
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	685a      	ldr	r2, [r3, #4]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e00:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7fc f808 	bl	8003e1c <HAL_DMA_GetState>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d049      	beq.n	8007ea6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e16:	4a69      	ldr	r2, [pc, #420]	; (8007fbc <I2C_Slave_STOPF+0x258>)
 8007e18:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fb fe50 	bl	8003ac4 <HAL_DMA_Abort_IT>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d03d      	beq.n	8007ea6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007e34:	4610      	mov	r0, r2
 8007e36:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007e38:	e035      	b.n	8007ea6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	b29a      	uxth	r2, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d005      	beq.n	8007e5e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e56:	f043 0204 	orr.w	r2, r3, #4
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	685a      	ldr	r2, [r3, #4]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e6c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7fb ffd2 	bl	8003e1c <HAL_DMA_GetState>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d014      	beq.n	8007ea8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e82:	4a4e      	ldr	r2, [pc, #312]	; (8007fbc <I2C_Slave_STOPF+0x258>)
 8007e84:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7fb fe1a 	bl	8003ac4 <HAL_DMA_Abort_IT>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d008      	beq.n	8007ea8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007ea0:	4610      	mov	r0, r2
 8007ea2:	4798      	blx	r3
 8007ea4:	e000      	b.n	8007ea8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007ea6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d03e      	beq.n	8007f30 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	695b      	ldr	r3, [r3, #20]
 8007eb8:	f003 0304 	and.w	r3, r3, #4
 8007ebc:	2b04      	cmp	r3, #4
 8007ebe:	d112      	bne.n	8007ee6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	691a      	ldr	r2, [r3, #16]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eca:	b2d2      	uxtb	r2, r2
 8007ecc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed2:	1c5a      	adds	r2, r3, #1
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	b29a      	uxth	r2, r3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	695b      	ldr	r3, [r3, #20]
 8007eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ef0:	2b40      	cmp	r3, #64	; 0x40
 8007ef2:	d112      	bne.n	8007f1a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	691a      	ldr	r2, [r3, #16]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efe:	b2d2      	uxtb	r2, r2
 8007f00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f06:	1c5a      	adds	r2, r3, #1
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	3b01      	subs	r3, #1
 8007f14:	b29a      	uxth	r2, r3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d005      	beq.n	8007f30 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f28:	f043 0204 	orr.w	r2, r3, #4
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d003      	beq.n	8007f40 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 f8b3 	bl	80080a4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007f3e:	e039      	b.n	8007fb4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007f40:	7bfb      	ldrb	r3, [r7, #15]
 8007f42:	2b2a      	cmp	r3, #42	; 0x2a
 8007f44:	d109      	bne.n	8007f5a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2228      	movs	r2, #40	; 0x28
 8007f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f7ff f819 	bl	8006f8c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	2b28      	cmp	r3, #40	; 0x28
 8007f64:	d111      	bne.n	8007f8a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a15      	ldr	r2, [pc, #84]	; (8007fc0 <I2C_Slave_STOPF+0x25c>)
 8007f6a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2220      	movs	r2, #32
 8007f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f7ff f81a 	bl	8006fbc <HAL_I2C_ListenCpltCallback>
}
 8007f88:	e014      	b.n	8007fb4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f8e:	2b22      	cmp	r3, #34	; 0x22
 8007f90:	d002      	beq.n	8007f98 <I2C_Slave_STOPF+0x234>
 8007f92:	7bfb      	ldrb	r3, [r7, #15]
 8007f94:	2b22      	cmp	r3, #34	; 0x22
 8007f96:	d10d      	bne.n	8007fb4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2220      	movs	r2, #32
 8007fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f7fe ffec 	bl	8006f8c <HAL_I2C_SlaveRxCpltCallback>
}
 8007fb4:	bf00      	nop
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	08008709 	.word	0x08008709
 8007fc0:	ffff0000 	.word	0xffff0000

08007fc4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	2b08      	cmp	r3, #8
 8007fde:	d002      	beq.n	8007fe6 <I2C_Slave_AF+0x22>
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	2b20      	cmp	r3, #32
 8007fe4:	d129      	bne.n	800803a <I2C_Slave_AF+0x76>
 8007fe6:	7bfb      	ldrb	r3, [r7, #15]
 8007fe8:	2b28      	cmp	r3, #40	; 0x28
 8007fea:	d126      	bne.n	800803a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a2c      	ldr	r2, [pc, #176]	; (80080a0 <I2C_Slave_AF+0xdc>)
 8007ff0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008000:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800800a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800801a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2220      	movs	r2, #32
 8008026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f7fe ffc2 	bl	8006fbc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8008038:	e02e      	b.n	8008098 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800803a:	7bfb      	ldrb	r3, [r7, #15]
 800803c:	2b21      	cmp	r3, #33	; 0x21
 800803e:	d126      	bne.n	800808e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a17      	ldr	r2, [pc, #92]	; (80080a0 <I2C_Slave_AF+0xdc>)
 8008044:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2221      	movs	r2, #33	; 0x21
 800804a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2220      	movs	r2, #32
 8008050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	685a      	ldr	r2, [r3, #4]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800806a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008074:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008084:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f7fe ff76 	bl	8006f78 <HAL_I2C_SlaveTxCpltCallback>
}
 800808c:	e004      	b.n	8008098 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008096:	615a      	str	r2, [r3, #20]
}
 8008098:	bf00      	nop
 800809a:	3710      	adds	r7, #16
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}
 80080a0:	ffff0000 	.word	0xffff0000

080080a4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080b2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080ba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80080bc:	7bbb      	ldrb	r3, [r7, #14]
 80080be:	2b10      	cmp	r3, #16
 80080c0:	d002      	beq.n	80080c8 <I2C_ITError+0x24>
 80080c2:	7bbb      	ldrb	r3, [r7, #14]
 80080c4:	2b40      	cmp	r3, #64	; 0x40
 80080c6:	d10a      	bne.n	80080de <I2C_ITError+0x3a>
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
 80080ca:	2b22      	cmp	r3, #34	; 0x22
 80080cc:	d107      	bne.n	80080de <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080dc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80080de:	7bfb      	ldrb	r3, [r7, #15]
 80080e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80080e4:	2b28      	cmp	r3, #40	; 0x28
 80080e6:	d107      	bne.n	80080f8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2228      	movs	r2, #40	; 0x28
 80080f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80080f6:	e015      	b.n	8008124 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008102:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008106:	d00a      	beq.n	800811e <I2C_ITError+0x7a>
 8008108:	7bfb      	ldrb	r3, [r7, #15]
 800810a:	2b60      	cmp	r3, #96	; 0x60
 800810c:	d007      	beq.n	800811e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2220      	movs	r2, #32
 8008112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800812e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008132:	d162      	bne.n	80081fa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	685a      	ldr	r2, [r3, #4]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008142:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008148:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800814c:	b2db      	uxtb	r3, r3
 800814e:	2b01      	cmp	r3, #1
 8008150:	d020      	beq.n	8008194 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008156:	4a6a      	ldr	r2, [pc, #424]	; (8008300 <I2C_ITError+0x25c>)
 8008158:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800815e:	4618      	mov	r0, r3
 8008160:	f7fb fcb0 	bl	8003ac4 <HAL_DMA_Abort_IT>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	f000 8089 	beq.w	800827e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f022 0201 	bic.w	r2, r2, #1
 800817a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2220      	movs	r2, #32
 8008180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800818e:	4610      	mov	r0, r2
 8008190:	4798      	blx	r3
 8008192:	e074      	b.n	800827e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008198:	4a59      	ldr	r2, [pc, #356]	; (8008300 <I2C_ITError+0x25c>)
 800819a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7fb fc8f 	bl	8003ac4 <HAL_DMA_Abort_IT>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d068      	beq.n	800827e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	695b      	ldr	r3, [r3, #20]
 80081b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081b6:	2b40      	cmp	r3, #64	; 0x40
 80081b8:	d10b      	bne.n	80081d2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	691a      	ldr	r2, [r3, #16]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c4:	b2d2      	uxtb	r2, r2
 80081c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081cc:	1c5a      	adds	r2, r3, #1
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f022 0201 	bic.w	r2, r2, #1
 80081e0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2220      	movs	r2, #32
 80081e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80081f4:	4610      	mov	r0, r2
 80081f6:	4798      	blx	r3
 80081f8:	e041      	b.n	800827e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008200:	b2db      	uxtb	r3, r3
 8008202:	2b60      	cmp	r3, #96	; 0x60
 8008204:	d125      	bne.n	8008252 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2220      	movs	r2, #32
 800820a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	695b      	ldr	r3, [r3, #20]
 800821a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800821e:	2b40      	cmp	r3, #64	; 0x40
 8008220:	d10b      	bne.n	800823a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	691a      	ldr	r2, [r3, #16]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822c:	b2d2      	uxtb	r2, r2
 800822e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008234:	1c5a      	adds	r2, r3, #1
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f022 0201 	bic.w	r2, r2, #1
 8008248:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f7fe fede 	bl	800700c <HAL_I2C_AbortCpltCallback>
 8008250:	e015      	b.n	800827e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	695b      	ldr	r3, [r3, #20]
 8008258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800825c:	2b40      	cmp	r3, #64	; 0x40
 800825e:	d10b      	bne.n	8008278 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	691a      	ldr	r2, [r3, #16]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826a:	b2d2      	uxtb	r2, r2
 800826c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008272:	1c5a      	adds	r2, r3, #1
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f7fe febd 	bl	8006ff8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008282:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	f003 0301 	and.w	r3, r3, #1
 800828a:	2b00      	cmp	r3, #0
 800828c:	d10e      	bne.n	80082ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008294:	2b00      	cmp	r3, #0
 8008296:	d109      	bne.n	80082ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d104      	bne.n	80082ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d007      	beq.n	80082bc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	685a      	ldr	r2, [r3, #4]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80082ba:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082c2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c8:	f003 0304 	and.w	r3, r3, #4
 80082cc:	2b04      	cmp	r3, #4
 80082ce:	d113      	bne.n	80082f8 <I2C_ITError+0x254>
 80082d0:	7bfb      	ldrb	r3, [r7, #15]
 80082d2:	2b28      	cmp	r3, #40	; 0x28
 80082d4:	d110      	bne.n	80082f8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4a0a      	ldr	r2, [pc, #40]	; (8008304 <I2C_ITError+0x260>)
 80082da:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2220      	movs	r2, #32
 80082e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f7fe fe62 	bl	8006fbc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80082f8:	bf00      	nop
 80082fa:	3710      	adds	r7, #16
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	08008709 	.word	0x08008709
 8008304:	ffff0000 	.word	0xffff0000

08008308 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b088      	sub	sp, #32
 800830c:	af02      	add	r7, sp, #8
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	607a      	str	r2, [r7, #4]
 8008312:	603b      	str	r3, [r7, #0]
 8008314:	460b      	mov	r3, r1
 8008316:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800831c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	2b08      	cmp	r3, #8
 8008322:	d006      	beq.n	8008332 <I2C_MasterRequestWrite+0x2a>
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	2b01      	cmp	r3, #1
 8008328:	d003      	beq.n	8008332 <I2C_MasterRequestWrite+0x2a>
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008330:	d108      	bne.n	8008344 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008340:	601a      	str	r2, [r3, #0]
 8008342:	e00b      	b.n	800835c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008348:	2b12      	cmp	r3, #18
 800834a:	d107      	bne.n	800835c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800835a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	9300      	str	r3, [sp, #0]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f000 fa75 	bl	8008858 <I2C_WaitOnFlagUntilTimeout>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d00d      	beq.n	8008390 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800837e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008382:	d103      	bne.n	800838c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f44f 7200 	mov.w	r2, #512	; 0x200
 800838a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800838c:	2303      	movs	r3, #3
 800838e:	e035      	b.n	80083fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008398:	d108      	bne.n	80083ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800839a:	897b      	ldrh	r3, [r7, #10]
 800839c:	b2db      	uxtb	r3, r3
 800839e:	461a      	mov	r2, r3
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80083a8:	611a      	str	r2, [r3, #16]
 80083aa:	e01b      	b.n	80083e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80083ac:	897b      	ldrh	r3, [r7, #10]
 80083ae:	11db      	asrs	r3, r3, #7
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	f003 0306 	and.w	r3, r3, #6
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	f063 030f 	orn	r3, r3, #15
 80083bc:	b2da      	uxtb	r2, r3
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	490e      	ldr	r1, [pc, #56]	; (8008404 <I2C_MasterRequestWrite+0xfc>)
 80083ca:	68f8      	ldr	r0, [r7, #12]
 80083cc:	f000 fa9b 	bl	8008906 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d001      	beq.n	80083da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	e010      	b.n	80083fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80083da:	897b      	ldrh	r3, [r7, #10]
 80083dc:	b2da      	uxtb	r2, r3
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	4907      	ldr	r1, [pc, #28]	; (8008408 <I2C_MasterRequestWrite+0x100>)
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f000 fa8b 	bl	8008906 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d001      	beq.n	80083fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	e000      	b.n	80083fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3718      	adds	r7, #24
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	00010008 	.word	0x00010008
 8008408:	00010002 	.word	0x00010002

0800840c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b088      	sub	sp, #32
 8008410:	af02      	add	r7, sp, #8
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	4608      	mov	r0, r1
 8008416:	4611      	mov	r1, r2
 8008418:	461a      	mov	r2, r3
 800841a:	4603      	mov	r3, r0
 800841c:	817b      	strh	r3, [r7, #10]
 800841e:	460b      	mov	r3, r1
 8008420:	813b      	strh	r3, [r7, #8]
 8008422:	4613      	mov	r3, r2
 8008424:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008434:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008438:	9300      	str	r3, [sp, #0]
 800843a:	6a3b      	ldr	r3, [r7, #32]
 800843c:	2200      	movs	r2, #0
 800843e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f000 fa08 	bl	8008858 <I2C_WaitOnFlagUntilTimeout>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00d      	beq.n	800846a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800845c:	d103      	bne.n	8008466 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008464:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008466:	2303      	movs	r3, #3
 8008468:	e05f      	b.n	800852a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800846a:	897b      	ldrh	r3, [r7, #10]
 800846c:	b2db      	uxtb	r3, r3
 800846e:	461a      	mov	r2, r3
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008478:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800847a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847c:	6a3a      	ldr	r2, [r7, #32]
 800847e:	492d      	ldr	r1, [pc, #180]	; (8008534 <I2C_RequestMemoryWrite+0x128>)
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f000 fa40 	bl	8008906 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d001      	beq.n	8008490 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800848c:	2301      	movs	r3, #1
 800848e:	e04c      	b.n	800852a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008490:	2300      	movs	r3, #0
 8008492:	617b      	str	r3, [r7, #20]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	695b      	ldr	r3, [r3, #20]
 800849a:	617b      	str	r3, [r7, #20]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	699b      	ldr	r3, [r3, #24]
 80084a2:	617b      	str	r3, [r7, #20]
 80084a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084a8:	6a39      	ldr	r1, [r7, #32]
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f000 faaa 	bl	8008a04 <I2C_WaitOnTXEFlagUntilTimeout>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00d      	beq.n	80084d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ba:	2b04      	cmp	r3, #4
 80084bc:	d107      	bne.n	80084ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	e02b      	b.n	800852a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80084d2:	88fb      	ldrh	r3, [r7, #6]
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d105      	bne.n	80084e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80084d8:	893b      	ldrh	r3, [r7, #8]
 80084da:	b2da      	uxtb	r2, r3
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	611a      	str	r2, [r3, #16]
 80084e2:	e021      	b.n	8008528 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80084e4:	893b      	ldrh	r3, [r7, #8]
 80084e6:	0a1b      	lsrs	r3, r3, #8
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	b2da      	uxtb	r2, r3
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084f4:	6a39      	ldr	r1, [r7, #32]
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f000 fa84 	bl	8008a04 <I2C_WaitOnTXEFlagUntilTimeout>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d00d      	beq.n	800851e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008506:	2b04      	cmp	r3, #4
 8008508:	d107      	bne.n	800851a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008518:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	e005      	b.n	800852a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800851e:	893b      	ldrh	r3, [r7, #8]
 8008520:	b2da      	uxtb	r2, r3
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3718      	adds	r7, #24
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	00010002 	.word	0x00010002

08008538 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b088      	sub	sp, #32
 800853c:	af02      	add	r7, sp, #8
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	4608      	mov	r0, r1
 8008542:	4611      	mov	r1, r2
 8008544:	461a      	mov	r2, r3
 8008546:	4603      	mov	r3, r0
 8008548:	817b      	strh	r3, [r7, #10]
 800854a:	460b      	mov	r3, r1
 800854c:	813b      	strh	r3, [r7, #8]
 800854e:	4613      	mov	r3, r2
 8008550:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008560:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008570:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008574:	9300      	str	r3, [sp, #0]
 8008576:	6a3b      	ldr	r3, [r7, #32]
 8008578:	2200      	movs	r2, #0
 800857a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800857e:	68f8      	ldr	r0, [r7, #12]
 8008580:	f000 f96a 	bl	8008858 <I2C_WaitOnFlagUntilTimeout>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00d      	beq.n	80085a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008594:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008598:	d103      	bne.n	80085a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80085a2:	2303      	movs	r3, #3
 80085a4:	e0aa      	b.n	80086fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80085a6:	897b      	ldrh	r3, [r7, #10]
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	461a      	mov	r2, r3
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80085b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80085b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b8:	6a3a      	ldr	r2, [r7, #32]
 80085ba:	4952      	ldr	r1, [pc, #328]	; (8008704 <I2C_RequestMemoryRead+0x1cc>)
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	f000 f9a2 	bl	8008906 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d001      	beq.n	80085cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	e097      	b.n	80086fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085cc:	2300      	movs	r3, #0
 80085ce:	617b      	str	r3, [r7, #20]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	695b      	ldr	r3, [r3, #20]
 80085d6:	617b      	str	r3, [r7, #20]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	617b      	str	r3, [r7, #20]
 80085e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085e4:	6a39      	ldr	r1, [r7, #32]
 80085e6:	68f8      	ldr	r0, [r7, #12]
 80085e8:	f000 fa0c 	bl	8008a04 <I2C_WaitOnTXEFlagUntilTimeout>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00d      	beq.n	800860e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f6:	2b04      	cmp	r3, #4
 80085f8:	d107      	bne.n	800860a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008608:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	e076      	b.n	80086fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800860e:	88fb      	ldrh	r3, [r7, #6]
 8008610:	2b01      	cmp	r3, #1
 8008612:	d105      	bne.n	8008620 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008614:	893b      	ldrh	r3, [r7, #8]
 8008616:	b2da      	uxtb	r2, r3
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	611a      	str	r2, [r3, #16]
 800861e:	e021      	b.n	8008664 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008620:	893b      	ldrh	r3, [r7, #8]
 8008622:	0a1b      	lsrs	r3, r3, #8
 8008624:	b29b      	uxth	r3, r3
 8008626:	b2da      	uxtb	r2, r3
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800862e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008630:	6a39      	ldr	r1, [r7, #32]
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	f000 f9e6 	bl	8008a04 <I2C_WaitOnTXEFlagUntilTimeout>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d00d      	beq.n	800865a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008642:	2b04      	cmp	r3, #4
 8008644:	d107      	bne.n	8008656 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008654:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	e050      	b.n	80086fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800865a:	893b      	ldrh	r3, [r7, #8]
 800865c:	b2da      	uxtb	r2, r3
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008666:	6a39      	ldr	r1, [r7, #32]
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f000 f9cb 	bl	8008a04 <I2C_WaitOnTXEFlagUntilTimeout>
 800866e:	4603      	mov	r3, r0
 8008670:	2b00      	cmp	r3, #0
 8008672:	d00d      	beq.n	8008690 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008678:	2b04      	cmp	r3, #4
 800867a:	d107      	bne.n	800868c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800868a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800868c:	2301      	movs	r3, #1
 800868e:	e035      	b.n	80086fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800869e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80086a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a2:	9300      	str	r3, [sp, #0]
 80086a4:	6a3b      	ldr	r3, [r7, #32]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f000 f8d3 	bl	8008858 <I2C_WaitOnFlagUntilTimeout>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00d      	beq.n	80086d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086c6:	d103      	bne.n	80086d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80086d0:	2303      	movs	r3, #3
 80086d2:	e013      	b.n	80086fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80086d4:	897b      	ldrh	r3, [r7, #10]
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	f043 0301 	orr.w	r3, r3, #1
 80086dc:	b2da      	uxtb	r2, r3
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80086e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e6:	6a3a      	ldr	r2, [r7, #32]
 80086e8:	4906      	ldr	r1, [pc, #24]	; (8008704 <I2C_RequestMemoryRead+0x1cc>)
 80086ea:	68f8      	ldr	r0, [r7, #12]
 80086ec:	f000 f90b 	bl	8008906 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80086f0:	4603      	mov	r3, r0
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d001      	beq.n	80086fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	e000      	b.n	80086fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3718      	adds	r7, #24
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}
 8008704:	00010002 	.word	0x00010002

08008708 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b086      	sub	sp, #24
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008710:	2300      	movs	r3, #0
 8008712:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008718:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008720:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008722:	4b4b      	ldr	r3, [pc, #300]	; (8008850 <I2C_DMAAbort+0x148>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	08db      	lsrs	r3, r3, #3
 8008728:	4a4a      	ldr	r2, [pc, #296]	; (8008854 <I2C_DMAAbort+0x14c>)
 800872a:	fba2 2303 	umull	r2, r3, r2, r3
 800872e:	0a1a      	lsrs	r2, r3, #8
 8008730:	4613      	mov	r3, r2
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4413      	add	r3, r2
 8008736:	00da      	lsls	r2, r3, #3
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d106      	bne.n	8008750 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008746:	f043 0220 	orr.w	r2, r3, #32
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800874e:	e00a      	b.n	8008766 <I2C_DMAAbort+0x5e>
    }
    count--;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	3b01      	subs	r3, #1
 8008754:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008764:	d0ea      	beq.n	800873c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800876a:	2b00      	cmp	r3, #0
 800876c:	d003      	beq.n	8008776 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008772:	2200      	movs	r2, #0
 8008774:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800877a:	2b00      	cmp	r3, #0
 800877c:	d003      	beq.n	8008786 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008782:	2200      	movs	r2, #0
 8008784:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008794:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	2200      	movs	r2, #0
 800879a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d003      	beq.n	80087ac <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087a8:	2200      	movs	r2, #0
 80087aa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d003      	beq.n	80087bc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b8:	2200      	movs	r2, #0
 80087ba:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f022 0201 	bic.w	r2, r2, #1
 80087ca:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	2b60      	cmp	r3, #96	; 0x60
 80087d6:	d10e      	bne.n	80087f6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	2220      	movs	r2, #32
 80087dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	2200      	movs	r2, #0
 80087ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80087ee:	6978      	ldr	r0, [r7, #20]
 80087f0:	f7fe fc0c 	bl	800700c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80087f4:	e027      	b.n	8008846 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80087f6:	7cfb      	ldrb	r3, [r7, #19]
 80087f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80087fc:	2b28      	cmp	r3, #40	; 0x28
 80087fe:	d117      	bne.n	8008830 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f042 0201 	orr.w	r2, r2, #1
 800880e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800881e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	2200      	movs	r2, #0
 8008824:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	2228      	movs	r2, #40	; 0x28
 800882a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800882e:	e007      	b.n	8008840 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	2220      	movs	r2, #32
 8008834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	2200      	movs	r2, #0
 800883c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008840:	6978      	ldr	r0, [r7, #20]
 8008842:	f7fe fbd9 	bl	8006ff8 <HAL_I2C_ErrorCallback>
}
 8008846:	bf00      	nop
 8008848:	3718      	adds	r7, #24
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	20000038 	.word	0x20000038
 8008854:	14f8b589 	.word	0x14f8b589

08008858 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	603b      	str	r3, [r7, #0]
 8008864:	4613      	mov	r3, r2
 8008866:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008868:	e025      	b.n	80088b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008870:	d021      	beq.n	80088b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008872:	f7fa fddf 	bl	8003434 <HAL_GetTick>
 8008876:	4602      	mov	r2, r0
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	1ad3      	subs	r3, r2, r3
 800887c:	683a      	ldr	r2, [r7, #0]
 800887e:	429a      	cmp	r2, r3
 8008880:	d302      	bcc.n	8008888 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d116      	bne.n	80088b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2200      	movs	r2, #0
 800888c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2220      	movs	r2, #32
 8008892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2200      	movs	r2, #0
 800889a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a2:	f043 0220 	orr.w	r2, r3, #32
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	e023      	b.n	80088fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	0c1b      	lsrs	r3, r3, #16
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d10d      	bne.n	80088dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	695b      	ldr	r3, [r3, #20]
 80088c6:	43da      	mvns	r2, r3
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	4013      	ands	r3, r2
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	bf0c      	ite	eq
 80088d2:	2301      	moveq	r3, #1
 80088d4:	2300      	movne	r3, #0
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	461a      	mov	r2, r3
 80088da:	e00c      	b.n	80088f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	699b      	ldr	r3, [r3, #24]
 80088e2:	43da      	mvns	r2, r3
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	4013      	ands	r3, r2
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	bf0c      	ite	eq
 80088ee:	2301      	moveq	r3, #1
 80088f0:	2300      	movne	r3, #0
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	461a      	mov	r2, r3
 80088f6:	79fb      	ldrb	r3, [r7, #7]
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d0b6      	beq.n	800886a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b084      	sub	sp, #16
 800890a:	af00      	add	r7, sp, #0
 800890c:	60f8      	str	r0, [r7, #12]
 800890e:	60b9      	str	r1, [r7, #8]
 8008910:	607a      	str	r2, [r7, #4]
 8008912:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008914:	e051      	b.n	80089ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	695b      	ldr	r3, [r3, #20]
 800891c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008924:	d123      	bne.n	800896e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008934:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800893e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2200      	movs	r2, #0
 8008944:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2220      	movs	r2, #32
 800894a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800895a:	f043 0204 	orr.w	r2, r3, #4
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2200      	movs	r2, #0
 8008966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e046      	b.n	80089fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008974:	d021      	beq.n	80089ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008976:	f7fa fd5d 	bl	8003434 <HAL_GetTick>
 800897a:	4602      	mov	r2, r0
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	429a      	cmp	r2, r3
 8008984:	d302      	bcc.n	800898c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d116      	bne.n	80089ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2200      	movs	r2, #0
 8008990:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2220      	movs	r2, #32
 8008996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2200      	movs	r2, #0
 800899e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a6:	f043 0220 	orr.w	r2, r3, #32
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	e020      	b.n	80089fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	0c1b      	lsrs	r3, r3, #16
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d10c      	bne.n	80089de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	695b      	ldr	r3, [r3, #20]
 80089ca:	43da      	mvns	r2, r3
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	4013      	ands	r3, r2
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	bf14      	ite	ne
 80089d6:	2301      	movne	r3, #1
 80089d8:	2300      	moveq	r3, #0
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	e00b      	b.n	80089f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	699b      	ldr	r3, [r3, #24]
 80089e4:	43da      	mvns	r2, r3
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	4013      	ands	r3, r2
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	bf14      	ite	ne
 80089f0:	2301      	movne	r3, #1
 80089f2:	2300      	moveq	r3, #0
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d18d      	bne.n	8008916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80089fa:	2300      	movs	r3, #0
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3710      	adds	r7, #16
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a10:	e02d      	b.n	8008a6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	f000 f900 	bl	8008c18 <I2C_IsAcknowledgeFailed>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d001      	beq.n	8008a22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e02d      	b.n	8008a7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a28:	d021      	beq.n	8008a6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a2a:	f7fa fd03 	bl	8003434 <HAL_GetTick>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	1ad3      	subs	r3, r2, r3
 8008a34:	68ba      	ldr	r2, [r7, #8]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d302      	bcc.n	8008a40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d116      	bne.n	8008a6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2200      	movs	r2, #0
 8008a44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2220      	movs	r2, #32
 8008a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2200      	movs	r2, #0
 8008a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5a:	f043 0220 	orr.w	r2, r3, #32
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2200      	movs	r2, #0
 8008a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e007      	b.n	8008a7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	695b      	ldr	r3, [r3, #20]
 8008a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a78:	2b80      	cmp	r3, #128	; 0x80
 8008a7a:	d1ca      	bne.n	8008a12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b084      	sub	sp, #16
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	60f8      	str	r0, [r7, #12]
 8008a8e:	60b9      	str	r1, [r7, #8]
 8008a90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a92:	e02d      	b.n	8008af0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f000 f8bf 	bl	8008c18 <I2C_IsAcknowledgeFailed>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d001      	beq.n	8008aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	e02d      	b.n	8008b00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aaa:	d021      	beq.n	8008af0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008aac:	f7fa fcc2 	bl	8003434 <HAL_GetTick>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	1ad3      	subs	r3, r2, r3
 8008ab6:	68ba      	ldr	r2, [r7, #8]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d302      	bcc.n	8008ac2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d116      	bne.n	8008af0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2220      	movs	r2, #32
 8008acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008adc:	f043 0220 	orr.w	r2, r3, #32
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008aec:	2301      	movs	r3, #1
 8008aee:	e007      	b.n	8008b00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	695b      	ldr	r3, [r3, #20]
 8008af6:	f003 0304 	and.w	r3, r3, #4
 8008afa:	2b04      	cmp	r3, #4
 8008afc:	d1ca      	bne.n	8008a94 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b085      	sub	sp, #20
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b10:	2300      	movs	r3, #0
 8008b12:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008b14:	4b13      	ldr	r3, [pc, #76]	; (8008b64 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	08db      	lsrs	r3, r3, #3
 8008b1a:	4a13      	ldr	r2, [pc, #76]	; (8008b68 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b20:	0a1a      	lsrs	r2, r3, #8
 8008b22:	4613      	mov	r3, r2
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	4413      	add	r3, r2
 8008b28:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	3b01      	subs	r3, #1
 8008b2e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d107      	bne.n	8008b46 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b3a:	f043 0220 	orr.w	r2, r3, #32
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	e008      	b.n	8008b58 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b54:	d0e9      	beq.n	8008b2a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008b56:	2300      	movs	r3, #0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3714      	adds	r7, #20
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr
 8008b64:	20000038 	.word	0x20000038
 8008b68:	14f8b589 	.word	0x14f8b589

08008b6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008b78:	e042      	b.n	8008c00 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	695b      	ldr	r3, [r3, #20]
 8008b80:	f003 0310 	and.w	r3, r3, #16
 8008b84:	2b10      	cmp	r3, #16
 8008b86:	d119      	bne.n	8008bbc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f06f 0210 	mvn.w	r2, #16
 8008b90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2200      	movs	r2, #0
 8008b96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2220      	movs	r2, #32
 8008b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e029      	b.n	8008c10 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bbc:	f7fa fc3a 	bl	8003434 <HAL_GetTick>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	68ba      	ldr	r2, [r7, #8]
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d302      	bcc.n	8008bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d116      	bne.n	8008c00 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2220      	movs	r2, #32
 8008bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bec:	f043 0220 	orr.w	r2, r3, #32
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e007      	b.n	8008c10 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	695b      	ldr	r3, [r3, #20]
 8008c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c0a:	2b40      	cmp	r3, #64	; 0x40
 8008c0c:	d1b5      	bne.n	8008b7a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008c0e:	2300      	movs	r3, #0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	695b      	ldr	r3, [r3, #20]
 8008c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c2e:	d11b      	bne.n	8008c68 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008c38:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2220      	movs	r2, #32
 8008c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c54:	f043 0204 	orr.w	r2, r3, #4
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	e000      	b.n	8008c6a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	370c      	adds	r7, #12
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr

08008c76 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008c76:	b480      	push	{r7}
 8008c78:	b083      	sub	sp, #12
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c82:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008c86:	d103      	bne.n	8008c90 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008c8e:	e007      	b.n	8008ca0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c94:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008c98:	d102      	bne.n	8008ca0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2208      	movs	r2, #8
 8008c9e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b088      	sub	sp, #32
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d101      	bne.n	8008cbe <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e128      	b.n	8008f10 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d109      	bne.n	8008cde <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4a90      	ldr	r2, [pc, #576]	; (8008f18 <HAL_I2S_Init+0x26c>)
 8008cd6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f7f9 fe71 	bl	80029c0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2202      	movs	r2, #2
 8008ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	69db      	ldr	r3, [r3, #28]
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	6812      	ldr	r2, [r2, #0]
 8008cf0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008cf4:	f023 030f 	bic.w	r3, r3, #15
 8008cf8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2202      	movs	r2, #2
 8008d00:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	695b      	ldr	r3, [r3, #20]
 8008d06:	2b02      	cmp	r3, #2
 8008d08:	d060      	beq.n	8008dcc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d102      	bne.n	8008d18 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8008d12:	2310      	movs	r3, #16
 8008d14:	617b      	str	r3, [r7, #20]
 8008d16:	e001      	b.n	8008d1c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8008d18:	2320      	movs	r3, #32
 8008d1a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	2b20      	cmp	r3, #32
 8008d22:	d802      	bhi.n	8008d2a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	005b      	lsls	r3, r3, #1
 8008d28:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8008d2a:	2001      	movs	r0, #1
 8008d2c:	f001 fe04 	bl	800a938 <HAL_RCCEx_GetPeriphCLKFreq>
 8008d30:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	691b      	ldr	r3, [r3, #16]
 8008d36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d3a:	d125      	bne.n	8008d88 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d010      	beq.n	8008d66 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d4e:	4613      	mov	r3, r2
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	4413      	add	r3, r2
 8008d54:	005b      	lsls	r3, r3, #1
 8008d56:	461a      	mov	r2, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	695b      	ldr	r3, [r3, #20]
 8008d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d60:	3305      	adds	r3, #5
 8008d62:	613b      	str	r3, [r7, #16]
 8008d64:	e01f      	b.n	8008da6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	00db      	lsls	r3, r3, #3
 8008d6a:	68fa      	ldr	r2, [r7, #12]
 8008d6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d70:	4613      	mov	r3, r2
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	4413      	add	r3, r2
 8008d76:	005b      	lsls	r3, r3, #1
 8008d78:	461a      	mov	r2, r3
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	695b      	ldr	r3, [r3, #20]
 8008d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d82:	3305      	adds	r3, #5
 8008d84:	613b      	str	r3, [r7, #16]
 8008d86:	e00e      	b.n	8008da6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008d88:	68fa      	ldr	r2, [r7, #12]
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008d90:	4613      	mov	r3, r2
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	4413      	add	r3, r2
 8008d96:	005b      	lsls	r3, r3, #1
 8008d98:	461a      	mov	r2, r3
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	695b      	ldr	r3, [r3, #20]
 8008d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008da2:	3305      	adds	r3, #5
 8008da4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	4a5c      	ldr	r2, [pc, #368]	; (8008f1c <HAL_I2S_Init+0x270>)
 8008daa:	fba2 2303 	umull	r2, r3, r2, r3
 8008dae:	08db      	lsrs	r3, r3, #3
 8008db0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	f003 0301 	and.w	r3, r3, #1
 8008db8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8008dba:	693a      	ldr	r2, [r7, #16]
 8008dbc:	69bb      	ldr	r3, [r7, #24]
 8008dbe:	1ad3      	subs	r3, r2, r3
 8008dc0:	085b      	lsrs	r3, r3, #1
 8008dc2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8008dc4:	69bb      	ldr	r3, [r7, #24]
 8008dc6:	021b      	lsls	r3, r3, #8
 8008dc8:	61bb      	str	r3, [r7, #24]
 8008dca:	e003      	b.n	8008dd4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8008dcc:	2302      	movs	r3, #2
 8008dce:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d902      	bls.n	8008de0 <HAL_I2S_Init+0x134>
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	2bff      	cmp	r3, #255	; 0xff
 8008dde:	d907      	bls.n	8008df0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008de4:	f043 0210 	orr.w	r2, r3, #16
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8008dec:	2301      	movs	r3, #1
 8008dee:	e08f      	b.n	8008f10 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	691a      	ldr	r2, [r3, #16]
 8008df4:	69bb      	ldr	r3, [r7, #24]
 8008df6:	ea42 0103 	orr.w	r1, r2, r3
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	69fa      	ldr	r2, [r7, #28]
 8008e00:	430a      	orrs	r2, r1
 8008e02:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	69db      	ldr	r3, [r3, #28]
 8008e0a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008e0e:	f023 030f 	bic.w	r3, r3, #15
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	6851      	ldr	r1, [r2, #4]
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	6892      	ldr	r2, [r2, #8]
 8008e1a:	4311      	orrs	r1, r2
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	68d2      	ldr	r2, [r2, #12]
 8008e20:	4311      	orrs	r1, r2
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	6992      	ldr	r2, [r2, #24]
 8008e26:	430a      	orrs	r2, r1
 8008e28:	431a      	orrs	r2, r3
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e32:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6a1b      	ldr	r3, [r3, #32]
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d161      	bne.n	8008f00 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	4a38      	ldr	r2, [pc, #224]	; (8008f20 <HAL_I2S_Init+0x274>)
 8008e40:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a37      	ldr	r2, [pc, #220]	; (8008f24 <HAL_I2S_Init+0x278>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d101      	bne.n	8008e50 <HAL_I2S_Init+0x1a4>
 8008e4c:	4b36      	ldr	r3, [pc, #216]	; (8008f28 <HAL_I2S_Init+0x27c>)
 8008e4e:	e001      	b.n	8008e54 <HAL_I2S_Init+0x1a8>
 8008e50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008e54:	69db      	ldr	r3, [r3, #28]
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	6812      	ldr	r2, [r2, #0]
 8008e5a:	4932      	ldr	r1, [pc, #200]	; (8008f24 <HAL_I2S_Init+0x278>)
 8008e5c:	428a      	cmp	r2, r1
 8008e5e:	d101      	bne.n	8008e64 <HAL_I2S_Init+0x1b8>
 8008e60:	4a31      	ldr	r2, [pc, #196]	; (8008f28 <HAL_I2S_Init+0x27c>)
 8008e62:	e001      	b.n	8008e68 <HAL_I2S_Init+0x1bc>
 8008e64:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8008e68:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008e6c:	f023 030f 	bic.w	r3, r3, #15
 8008e70:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a2b      	ldr	r2, [pc, #172]	; (8008f24 <HAL_I2S_Init+0x278>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d101      	bne.n	8008e80 <HAL_I2S_Init+0x1d4>
 8008e7c:	4b2a      	ldr	r3, [pc, #168]	; (8008f28 <HAL_I2S_Init+0x27c>)
 8008e7e:	e001      	b.n	8008e84 <HAL_I2S_Init+0x1d8>
 8008e80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008e84:	2202      	movs	r2, #2
 8008e86:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a25      	ldr	r2, [pc, #148]	; (8008f24 <HAL_I2S_Init+0x278>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d101      	bne.n	8008e96 <HAL_I2S_Init+0x1ea>
 8008e92:	4b25      	ldr	r3, [pc, #148]	; (8008f28 <HAL_I2S_Init+0x27c>)
 8008e94:	e001      	b.n	8008e9a <HAL_I2S_Init+0x1ee>
 8008e96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008e9a:	69db      	ldr	r3, [r3, #28]
 8008e9c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ea6:	d003      	beq.n	8008eb0 <HAL_I2S_Init+0x204>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d103      	bne.n	8008eb8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8008eb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008eb4:	613b      	str	r3, [r7, #16]
 8008eb6:	e001      	b.n	8008ebc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	68db      	ldr	r3, [r3, #12]
 8008ece:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	699b      	ldr	r3, [r3, #24]
 8008ed8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008eda:	4313      	orrs	r3, r2
 8008edc:	b29a      	uxth	r2, r3
 8008ede:	897b      	ldrh	r3, [r7, #10]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008ee8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a0d      	ldr	r2, [pc, #52]	; (8008f24 <HAL_I2S_Init+0x278>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d101      	bne.n	8008ef8 <HAL_I2S_Init+0x24c>
 8008ef4:	4b0c      	ldr	r3, [pc, #48]	; (8008f28 <HAL_I2S_Init+0x27c>)
 8008ef6:	e001      	b.n	8008efc <HAL_I2S_Init+0x250>
 8008ef8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008efc:	897a      	ldrh	r2, [r7, #10]
 8008efe:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3720      	adds	r7, #32
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	080097b1 	.word	0x080097b1
 8008f1c:	cccccccd 	.word	0xcccccccd
 8008f20:	08009939 	.word	0x08009939
 8008f24:	40003800 	.word	0x40003800
 8008f28:	40003400 	.word	0x40003400

08008f2c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b086      	sub	sp, #24
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	4613      	mov	r3, r2
 8008f38:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d002      	beq.n	8008f46 <HAL_I2S_Transmit_DMA+0x1a>
 8008f40:	88fb      	ldrh	r3, [r7, #6]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d101      	bne.n	8008f4a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8008f46:	2301      	movs	r3, #1
 8008f48:	e08e      	b.n	8009068 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d101      	bne.n	8008f5a <HAL_I2S_Transmit_DMA+0x2e>
 8008f56:	2302      	movs	r3, #2
 8008f58:	e086      	b.n	8009068 <HAL_I2S_Transmit_DMA+0x13c>
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d005      	beq.n	8008f7a <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8008f76:	2302      	movs	r3, #2
 8008f78:	e076      	b.n	8009068 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2203      	movs	r2, #3
 8008f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2200      	movs	r2, #0
 8008f86:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	68ba      	ldr	r2, [r7, #8]
 8008f8c:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	69db      	ldr	r3, [r3, #28]
 8008f94:	f003 0307 	and.w	r3, r3, #7
 8008f98:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	2b03      	cmp	r3, #3
 8008f9e:	d002      	beq.n	8008fa6 <HAL_I2S_Transmit_DMA+0x7a>
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	2b05      	cmp	r3, #5
 8008fa4:	d10a      	bne.n	8008fbc <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8008fa6:	88fb      	ldrh	r3, [r7, #6]
 8008fa8:	005b      	lsls	r3, r3, #1
 8008faa:	b29a      	uxth	r2, r3
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8008fb0:	88fb      	ldrh	r3, [r7, #6]
 8008fb2:	005b      	lsls	r3, r3, #1
 8008fb4:	b29a      	uxth	r2, r3
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008fba:	e005      	b.n	8008fc8 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	88fa      	ldrh	r2, [r7, #6]
 8008fc0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	88fa      	ldrh	r2, [r7, #6]
 8008fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fcc:	4a28      	ldr	r2, [pc, #160]	; (8009070 <HAL_I2S_Transmit_DMA+0x144>)
 8008fce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd4:	4a27      	ldr	r2, [pc, #156]	; (8009074 <HAL_I2S_Transmit_DMA+0x148>)
 8008fd6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fdc:	4a26      	ldr	r2, [pc, #152]	; (8009078 <HAL_I2S_Transmit_DMA+0x14c>)
 8008fde:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8008fe8:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8008ff0:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ff6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8008ff8:	f7fa fc9c 	bl	8003934 <HAL_DMA_Start_IT>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00f      	beq.n	8009022 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009006:	f043 0208 	orr.w	r2, r3, #8
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2201      	movs	r2, #1
 8009012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2200      	movs	r2, #0
 800901a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800901e:	2301      	movs	r3, #1
 8009020:	e022      	b.n	8009068 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	69db      	ldr	r3, [r3, #28]
 8009028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800902c:	2b00      	cmp	r3, #0
 800902e:	d107      	bne.n	8009040 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	69da      	ldr	r2, [r3, #28]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800903e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	f003 0302 	and.w	r3, r3, #2
 800904a:	2b00      	cmp	r3, #0
 800904c:	d107      	bne.n	800905e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	685a      	ldr	r2, [r3, #4]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f042 0202 	orr.w	r2, r2, #2
 800905c:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2200      	movs	r2, #0
 8009062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8009066:	2300      	movs	r3, #0
}
 8009068:	4618      	mov	r0, r3
 800906a:	3718      	adds	r7, #24
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}
 8009070:	0800968f 	.word	0x0800968f
 8009074:	0800964d 	.word	0x0800964d
 8009078:	080096ab 	.word	0x080096ab

0800907c <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800908a:	b2db      	uxtb	r3, r3
 800908c:	2b01      	cmp	r3, #1
 800908e:	d101      	bne.n	8009094 <HAL_I2S_DMAPause+0x18>
 8009090:	2302      	movs	r3, #2
 8009092:	e04a      	b.n	800912a <HAL_I2S_DMAPause+0xae>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	2b03      	cmp	r3, #3
 80090a6:	d108      	bne.n	80090ba <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	685a      	ldr	r2, [r3, #4]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f022 0202 	bic.w	r2, r2, #2
 80090b6:	605a      	str	r2, [r3, #4]
 80090b8:	e032      	b.n	8009120 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	2b04      	cmp	r3, #4
 80090c4:	d108      	bne.n	80090d8 <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	685a      	ldr	r2, [r3, #4]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f022 0201 	bic.w	r2, r2, #1
 80090d4:	605a      	str	r2, [r3, #4]
 80090d6:	e023      	b.n	8009120 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	2b05      	cmp	r3, #5
 80090e2:	d11d      	bne.n	8009120 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	685a      	ldr	r2, [r3, #4]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f022 0203 	bic.w	r2, r2, #3
 80090f2:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a0f      	ldr	r2, [pc, #60]	; (8009138 <HAL_I2S_DMAPause+0xbc>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d101      	bne.n	8009102 <HAL_I2S_DMAPause+0x86>
 80090fe:	4b0f      	ldr	r3, [pc, #60]	; (800913c <HAL_I2S_DMAPause+0xc0>)
 8009100:	e001      	b.n	8009106 <HAL_I2S_DMAPause+0x8a>
 8009102:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009106:	685a      	ldr	r2, [r3, #4]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	490a      	ldr	r1, [pc, #40]	; (8009138 <HAL_I2S_DMAPause+0xbc>)
 800910e:	428b      	cmp	r3, r1
 8009110:	d101      	bne.n	8009116 <HAL_I2S_DMAPause+0x9a>
 8009112:	4b0a      	ldr	r3, [pc, #40]	; (800913c <HAL_I2S_DMAPause+0xc0>)
 8009114:	e001      	b.n	800911a <HAL_I2S_DMAPause+0x9e>
 8009116:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800911a:	f022 0203 	bic.w	r2, r2, #3
 800911e:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009128:	2300      	movs	r3, #0
}
 800912a:	4618      	mov	r0, r3
 800912c:	370c      	adds	r7, #12
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr
 8009136:	bf00      	nop
 8009138:	40003800 	.word	0x40003800
 800913c:	40003400 	.word	0x40003400

08009140 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 8009140:	b480      	push	{r7}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800914e:	b2db      	uxtb	r3, r3
 8009150:	2b01      	cmp	r3, #1
 8009152:	d101      	bne.n	8009158 <HAL_I2S_DMAResume+0x18>
 8009154:	2302      	movs	r3, #2
 8009156:	e07d      	b.n	8009254 <HAL_I2S_DMAResume+0x114>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2201      	movs	r2, #1
 800915c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009166:	b2db      	uxtb	r3, r3
 8009168:	2b03      	cmp	r3, #3
 800916a:	d108      	bne.n	800917e <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	685a      	ldr	r2, [r3, #4]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f042 0202 	orr.w	r2, r2, #2
 800917a:	605a      	str	r2, [r3, #4]
 800917c:	e056      	b.n	800922c <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009184:	b2db      	uxtb	r3, r3
 8009186:	2b04      	cmp	r3, #4
 8009188:	d108      	bne.n	800919c <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	685a      	ldr	r2, [r3, #4]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f042 0201 	orr.w	r2, r2, #1
 8009198:	605a      	str	r2, [r3, #4]
 800919a:	e047      	b.n	800922c <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	2b05      	cmp	r3, #5
 80091a6:	d141      	bne.n	800922c <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	685a      	ldr	r2, [r3, #4]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f042 0203 	orr.w	r2, r2, #3
 80091b6:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a28      	ldr	r2, [pc, #160]	; (8009260 <HAL_I2S_DMAResume+0x120>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d101      	bne.n	80091c6 <HAL_I2S_DMAResume+0x86>
 80091c2:	4b28      	ldr	r3, [pc, #160]	; (8009264 <HAL_I2S_DMAResume+0x124>)
 80091c4:	e001      	b.n	80091ca <HAL_I2S_DMAResume+0x8a>
 80091c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80091ca:	685a      	ldr	r2, [r3, #4]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4923      	ldr	r1, [pc, #140]	; (8009260 <HAL_I2S_DMAResume+0x120>)
 80091d2:	428b      	cmp	r3, r1
 80091d4:	d101      	bne.n	80091da <HAL_I2S_DMAResume+0x9a>
 80091d6:	4b23      	ldr	r3, [pc, #140]	; (8009264 <HAL_I2S_DMAResume+0x124>)
 80091d8:	e001      	b.n	80091de <HAL_I2S_DMAResume+0x9e>
 80091da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80091de:	f042 0203 	orr.w	r2, r2, #3
 80091e2:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a1d      	ldr	r2, [pc, #116]	; (8009260 <HAL_I2S_DMAResume+0x120>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d101      	bne.n	80091f2 <HAL_I2S_DMAResume+0xb2>
 80091ee:	4b1d      	ldr	r3, [pc, #116]	; (8009264 <HAL_I2S_DMAResume+0x124>)
 80091f0:	e001      	b.n	80091f6 <HAL_I2S_DMAResume+0xb6>
 80091f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80091f6:	69db      	ldr	r3, [r3, #28]
 80091f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d115      	bne.n	800922c <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a16      	ldr	r2, [pc, #88]	; (8009260 <HAL_I2S_DMAResume+0x120>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d101      	bne.n	800920e <HAL_I2S_DMAResume+0xce>
 800920a:	4b16      	ldr	r3, [pc, #88]	; (8009264 <HAL_I2S_DMAResume+0x124>)
 800920c:	e001      	b.n	8009212 <HAL_I2S_DMAResume+0xd2>
 800920e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009212:	69da      	ldr	r2, [r3, #28]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4911      	ldr	r1, [pc, #68]	; (8009260 <HAL_I2S_DMAResume+0x120>)
 800921a:	428b      	cmp	r3, r1
 800921c:	d101      	bne.n	8009222 <HAL_I2S_DMAResume+0xe2>
 800921e:	4b11      	ldr	r3, [pc, #68]	; (8009264 <HAL_I2S_DMAResume+0x124>)
 8009220:	e001      	b.n	8009226 <HAL_I2S_DMAResume+0xe6>
 8009222:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009226:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800922a:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	69db      	ldr	r3, [r3, #28]
 8009232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009236:	2b00      	cmp	r3, #0
 8009238:	d107      	bne.n	800924a <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	69da      	ldr	r2, [r3, #28]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009248:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	370c      	adds	r7, #12
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr
 8009260:	40003800 	.word	0x40003800
 8009264:	40003400 	.word	0x40003400

08009268 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b088      	sub	sp, #32
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009270:	2300      	movs	r3, #0
 8009272:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800927c:	d004      	beq.n	8009288 <HAL_I2S_DMAStop+0x20>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	2b00      	cmp	r3, #0
 8009284:	f040 80d1 	bne.w	800942a <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00f      	beq.n	80092b0 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009294:	4618      	mov	r0, r3
 8009296:	f7fa fba5 	bl	80039e4 <HAL_DMA_Abort>
 800929a:	4603      	mov	r3, r0
 800929c:	2b00      	cmp	r3, #0
 800929e:	d007      	beq.n	80092b0 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092a4:	f043 0208 	orr.w	r2, r3, #8
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80092b0:	2364      	movs	r3, #100	; 0x64
 80092b2:	2201      	movs	r2, #1
 80092b4:	2102      	movs	r1, #2
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 fb04 	bl	80098c4 <I2S_WaitFlagStateUntilTimeout>
 80092bc:	4603      	mov	r3, r0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d00b      	beq.n	80092da <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092c6:	f043 0201 	orr.w	r2, r3, #1
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2201      	movs	r2, #1
 80092d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80092da:	2364      	movs	r3, #100	; 0x64
 80092dc:	2200      	movs	r2, #0
 80092de:	2180      	movs	r1, #128	; 0x80
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 faef 	bl	80098c4 <I2S_WaitFlagStateUntilTimeout>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d00b      	beq.n	8009304 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092f0:	f043 0201 	orr.w	r2, r3, #1
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8009300:	2301      	movs	r3, #1
 8009302:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	69da      	ldr	r2, [r3, #28]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009312:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8009314:	2300      	movs	r3, #0
 8009316:	617b      	str	r3, [r7, #20]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	617b      	str	r3, [r7, #20]
 8009320:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	685a      	ldr	r2, [r3, #4]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f022 0202 	bic.w	r2, r2, #2
 8009330:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009338:	b2db      	uxtb	r3, r3
 800933a:	2b05      	cmp	r3, #5
 800933c:	f040 8165 	bne.w	800960a <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009344:	2b00      	cmp	r3, #0
 8009346:	d00f      	beq.n	8009368 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800934c:	4618      	mov	r0, r3
 800934e:	f7fa fb49 	bl	80039e4 <HAL_DMA_Abort>
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d007      	beq.n	8009368 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800935c:	f043 0208 	orr.w	r2, r3, #8
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8009364:	2301      	movs	r3, #1
 8009366:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a8a      	ldr	r2, [pc, #552]	; (8009598 <HAL_I2S_DMAStop+0x330>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d101      	bne.n	8009376 <HAL_I2S_DMAStop+0x10e>
 8009372:	4b8a      	ldr	r3, [pc, #552]	; (800959c <HAL_I2S_DMAStop+0x334>)
 8009374:	e001      	b.n	800937a <HAL_I2S_DMAStop+0x112>
 8009376:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800937a:	69da      	ldr	r2, [r3, #28]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4985      	ldr	r1, [pc, #532]	; (8009598 <HAL_I2S_DMAStop+0x330>)
 8009382:	428b      	cmp	r3, r1
 8009384:	d101      	bne.n	800938a <HAL_I2S_DMAStop+0x122>
 8009386:	4b85      	ldr	r3, [pc, #532]	; (800959c <HAL_I2S_DMAStop+0x334>)
 8009388:	e001      	b.n	800938e <HAL_I2S_DMAStop+0x126>
 800938a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800938e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009392:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8009394:	2300      	movs	r3, #0
 8009396:	613b      	str	r3, [r7, #16]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a7e      	ldr	r2, [pc, #504]	; (8009598 <HAL_I2S_DMAStop+0x330>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d101      	bne.n	80093a6 <HAL_I2S_DMAStop+0x13e>
 80093a2:	4b7e      	ldr	r3, [pc, #504]	; (800959c <HAL_I2S_DMAStop+0x334>)
 80093a4:	e001      	b.n	80093aa <HAL_I2S_DMAStop+0x142>
 80093a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	613b      	str	r3, [r7, #16]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a79      	ldr	r2, [pc, #484]	; (8009598 <HAL_I2S_DMAStop+0x330>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d101      	bne.n	80093bc <HAL_I2S_DMAStop+0x154>
 80093b8:	4b78      	ldr	r3, [pc, #480]	; (800959c <HAL_I2S_DMAStop+0x334>)
 80093ba:	e001      	b.n	80093c0 <HAL_I2S_DMAStop+0x158>
 80093bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	613b      	str	r3, [r7, #16]
 80093c4:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a73      	ldr	r2, [pc, #460]	; (8009598 <HAL_I2S_DMAStop+0x330>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d101      	bne.n	80093d4 <HAL_I2S_DMAStop+0x16c>
 80093d0:	4b72      	ldr	r3, [pc, #456]	; (800959c <HAL_I2S_DMAStop+0x334>)
 80093d2:	e001      	b.n	80093d8 <HAL_I2S_DMAStop+0x170>
 80093d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80093d8:	685a      	ldr	r2, [r3, #4]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	496e      	ldr	r1, [pc, #440]	; (8009598 <HAL_I2S_DMAStop+0x330>)
 80093e0:	428b      	cmp	r3, r1
 80093e2:	d101      	bne.n	80093e8 <HAL_I2S_DMAStop+0x180>
 80093e4:	4b6d      	ldr	r3, [pc, #436]	; (800959c <HAL_I2S_DMAStop+0x334>)
 80093e6:	e001      	b.n	80093ec <HAL_I2S_DMAStop+0x184>
 80093e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80093ec:	f022 0201 	bic.w	r2, r2, #1
 80093f0:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d10c      	bne.n	8009414 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2201      	movs	r2, #1
 800940a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 800940e:	2301      	movs	r3, #1
 8009410:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8009412:	e0fa      	b.n	800960a <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a5f      	ldr	r2, [pc, #380]	; (8009598 <HAL_I2S_DMAStop+0x330>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d101      	bne.n	8009422 <HAL_I2S_DMAStop+0x1ba>
 800941e:	4b5f      	ldr	r3, [pc, #380]	; (800959c <HAL_I2S_DMAStop+0x334>)
 8009420:	e001      	b.n	8009426 <HAL_I2S_DMAStop+0x1be>
 8009422:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009426:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8009428:	e0ef      	b.n	800960a <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009432:	d005      	beq.n	8009440 <HAL_I2S_DMAStop+0x1d8>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800943c:	f040 80e5 	bne.w	800960a <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009444:	2b00      	cmp	r3, #0
 8009446:	d00f      	beq.n	8009468 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800944c:	4618      	mov	r0, r3
 800944e:	f7fa fac9 	bl	80039e4 <HAL_DMA_Abort>
 8009452:	4603      	mov	r3, r0
 8009454:	2b00      	cmp	r3, #0
 8009456:	d007      	beq.n	8009468 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800945c:	f043 0208 	orr.w	r2, r3, #8
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8009464:	2301      	movs	r3, #1
 8009466:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800946e:	b2db      	uxtb	r3, r3
 8009470:	2b05      	cmp	r3, #5
 8009472:	f040 809a 	bne.w	80095aa <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800947a:	2b00      	cmp	r3, #0
 800947c:	d00f      	beq.n	800949e <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009482:	4618      	mov	r0, r3
 8009484:	f7fa faae 	bl	80039e4 <HAL_DMA_Abort>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d007      	beq.n	800949e <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009492:	f043 0208 	orr.w	r2, r3, #8
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 800949e:	f7f9 ffc9 	bl	8003434 <HAL_GetTick>
 80094a2:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80094a4:	e012      	b.n	80094cc <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80094a6:	f7f9 ffc5 	bl	8003434 <HAL_GetTick>
 80094aa:	4602      	mov	r2, r0
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	1ad3      	subs	r3, r2, r3
 80094b0:	2b64      	cmp	r3, #100	; 0x64
 80094b2:	d90b      	bls.n	80094cc <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094b8:	f043 0201 	orr.w	r2, r3, #1
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2201      	movs	r2, #1
 80094c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a31      	ldr	r2, [pc, #196]	; (8009598 <HAL_I2S_DMAStop+0x330>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d101      	bne.n	80094da <HAL_I2S_DMAStop+0x272>
 80094d6:	4b31      	ldr	r3, [pc, #196]	; (800959c <HAL_I2S_DMAStop+0x334>)
 80094d8:	e001      	b.n	80094de <HAL_I2S_DMAStop+0x276>
 80094da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	f003 0302 	and.w	r3, r3, #2
 80094e4:	2b02      	cmp	r3, #2
 80094e6:	d1de      	bne.n	80094a6 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80094e8:	e012      	b.n	8009510 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80094ea:	f7f9 ffa3 	bl	8003434 <HAL_GetTick>
 80094ee:	4602      	mov	r2, r0
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	1ad3      	subs	r3, r2, r3
 80094f4:	2b64      	cmp	r3, #100	; 0x64
 80094f6:	d90b      	bls.n	8009510 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094fc:	f043 0201 	orr.w	r2, r3, #1
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2201      	movs	r2, #1
 8009508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 800950c:	2301      	movs	r3, #1
 800950e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a20      	ldr	r2, [pc, #128]	; (8009598 <HAL_I2S_DMAStop+0x330>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d101      	bne.n	800951e <HAL_I2S_DMAStop+0x2b6>
 800951a:	4b20      	ldr	r3, [pc, #128]	; (800959c <HAL_I2S_DMAStop+0x334>)
 800951c:	e001      	b.n	8009522 <HAL_I2S_DMAStop+0x2ba>
 800951e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009528:	2b80      	cmp	r3, #128	; 0x80
 800952a:	d0de      	beq.n	80094ea <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a19      	ldr	r2, [pc, #100]	; (8009598 <HAL_I2S_DMAStop+0x330>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d101      	bne.n	800953a <HAL_I2S_DMAStop+0x2d2>
 8009536:	4b19      	ldr	r3, [pc, #100]	; (800959c <HAL_I2S_DMAStop+0x334>)
 8009538:	e001      	b.n	800953e <HAL_I2S_DMAStop+0x2d6>
 800953a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800953e:	69da      	ldr	r2, [r3, #28]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4914      	ldr	r1, [pc, #80]	; (8009598 <HAL_I2S_DMAStop+0x330>)
 8009546:	428b      	cmp	r3, r1
 8009548:	d101      	bne.n	800954e <HAL_I2S_DMAStop+0x2e6>
 800954a:	4b14      	ldr	r3, [pc, #80]	; (800959c <HAL_I2S_DMAStop+0x334>)
 800954c:	e001      	b.n	8009552 <HAL_I2S_DMAStop+0x2ea>
 800954e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009556:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8009558:	2300      	movs	r3, #0
 800955a:	60fb      	str	r3, [r7, #12]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a0d      	ldr	r2, [pc, #52]	; (8009598 <HAL_I2S_DMAStop+0x330>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d101      	bne.n	800956a <HAL_I2S_DMAStop+0x302>
 8009566:	4b0d      	ldr	r3, [pc, #52]	; (800959c <HAL_I2S_DMAStop+0x334>)
 8009568:	e001      	b.n	800956e <HAL_I2S_DMAStop+0x306>
 800956a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	60fb      	str	r3, [r7, #12]
 8009572:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a07      	ldr	r2, [pc, #28]	; (8009598 <HAL_I2S_DMAStop+0x330>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d101      	bne.n	8009582 <HAL_I2S_DMAStop+0x31a>
 800957e:	4b07      	ldr	r3, [pc, #28]	; (800959c <HAL_I2S_DMAStop+0x334>)
 8009580:	e001      	b.n	8009586 <HAL_I2S_DMAStop+0x31e>
 8009582:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009586:	685a      	ldr	r2, [r3, #4]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4902      	ldr	r1, [pc, #8]	; (8009598 <HAL_I2S_DMAStop+0x330>)
 800958e:	428b      	cmp	r3, r1
 8009590:	d106      	bne.n	80095a0 <HAL_I2S_DMAStop+0x338>
 8009592:	4b02      	ldr	r3, [pc, #8]	; (800959c <HAL_I2S_DMAStop+0x334>)
 8009594:	e006      	b.n	80095a4 <HAL_I2S_DMAStop+0x33c>
 8009596:	bf00      	nop
 8009598:	40003800 	.word	0x40003800
 800959c:	40003400 	.word	0x40003400
 80095a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80095a4:	f022 0202 	bic.w	r2, r2, #2
 80095a8:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	69da      	ldr	r2, [r3, #28]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095b8:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80095ba:	2300      	movs	r3, #0
 80095bc:	60bb      	str	r3, [r7, #8]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	60bb      	str	r3, [r7, #8]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	60bb      	str	r3, [r7, #8]
 80095ce:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	685a      	ldr	r2, [r3, #4]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f022 0201 	bic.w	r2, r2, #1
 80095de:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095e8:	d10c      	bne.n	8009604 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2201      	movs	r2, #1
 80095fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 80095fe:	2301      	movs	r3, #1
 8009600:	77fb      	strb	r3, [r7, #31]
 8009602:	e002      	b.n	800960a <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2201      	movs	r2, #1
 800960e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8009612:	7ffb      	ldrb	r3, [r7, #31]
}
 8009614:	4618      	mov	r0, r3
 8009616:	3720      	adds	r7, #32
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8009624:	bf00      	nop
 8009626:	370c      	adds	r7, #12
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800963e:	b2db      	uxtb	r3, r3
}
 8009640:	4618      	mov	r0, r3
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009658:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	69db      	ldr	r3, [r3, #28]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d10e      	bne.n	8009680 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	685a      	ldr	r2, [r3, #4]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f022 0202 	bic.w	r2, r2, #2
 8009670:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2200      	movs	r2, #0
 8009676:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2201      	movs	r2, #1
 800967c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8009680:	68f8      	ldr	r0, [r7, #12]
 8009682:	f7f7 fcf7 	bl	8001074 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8009686:	bf00      	nop
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800968e:	b580      	push	{r7, lr}
 8009690:	b084      	sub	sp, #16
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800969a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800969c:	68f8      	ldr	r0, [r7, #12]
 800969e:	f7f7 fcfb 	bl	8001098 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80096a2:	bf00      	nop
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b084      	sub	sp, #16
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	685a      	ldr	r2, [r3, #4]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f022 0203 	bic.w	r2, r2, #3
 80096c6:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2200      	movs	r2, #0
 80096cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2200      	movs	r2, #0
 80096d2:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096e0:	f043 0208 	orr.w	r2, r3, #8
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80096e8:	68f8      	ldr	r0, [r7, #12]
 80096ea:	f7f7 fe41 	bl	8001370 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80096ee:	bf00      	nop
 80096f0:	3710      	adds	r7, #16
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b082      	sub	sp, #8
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009702:	881a      	ldrh	r2, [r3, #0]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800970e:	1c9a      	adds	r2, r3, #2
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009718:	b29b      	uxth	r3, r3
 800971a:	3b01      	subs	r3, #1
 800971c:	b29a      	uxth	r2, r3
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009726:	b29b      	uxth	r3, r3
 8009728:	2b00      	cmp	r3, #0
 800972a:	d10e      	bne.n	800974a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	685a      	ldr	r2, [r3, #4]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800973a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2201      	movs	r2, #1
 8009740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f7f7 fc95 	bl	8001074 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800974a:	bf00      	nop
 800974c:	3708      	adds	r7, #8
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8009752:	b580      	push	{r7, lr}
 8009754:	b082      	sub	sp, #8
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	68da      	ldr	r2, [r3, #12]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009764:	b292      	uxth	r2, r2
 8009766:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800976c:	1c9a      	adds	r2, r3, #2
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009776:	b29b      	uxth	r3, r3
 8009778:	3b01      	subs	r3, #1
 800977a:	b29a      	uxth	r2, r3
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009784:	b29b      	uxth	r3, r3
 8009786:	2b00      	cmp	r3, #0
 8009788:	d10e      	bne.n	80097a8 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	685a      	ldr	r2, [r3, #4]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009798:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2201      	movs	r2, #1
 800979e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f7ff ff3a 	bl	800961c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80097a8:	bf00      	nop
 80097aa:	3708      	adds	r7, #8
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b086      	sub	sp, #24
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	2b04      	cmp	r3, #4
 80097ca:	d13a      	bne.n	8009842 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	f003 0301 	and.w	r3, r3, #1
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d109      	bne.n	80097ea <I2S_IRQHandler+0x3a>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097e0:	2b40      	cmp	r3, #64	; 0x40
 80097e2:	d102      	bne.n	80097ea <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f7ff ffb4 	bl	8009752 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097f0:	2b40      	cmp	r3, #64	; 0x40
 80097f2:	d126      	bne.n	8009842 <I2S_IRQHandler+0x92>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	f003 0320 	and.w	r3, r3, #32
 80097fe:	2b20      	cmp	r3, #32
 8009800:	d11f      	bne.n	8009842 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	685a      	ldr	r2, [r3, #4]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009810:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8009812:	2300      	movs	r3, #0
 8009814:	613b      	str	r3, [r7, #16]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	68db      	ldr	r3, [r3, #12]
 800981c:	613b      	str	r3, [r7, #16]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	613b      	str	r3, [r7, #16]
 8009826:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009834:	f043 0202 	orr.w	r2, r3, #2
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f7f7 fd97 	bl	8001370 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009848:	b2db      	uxtb	r3, r3
 800984a:	2b03      	cmp	r3, #3
 800984c:	d136      	bne.n	80098bc <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	f003 0302 	and.w	r3, r3, #2
 8009854:	2b02      	cmp	r3, #2
 8009856:	d109      	bne.n	800986c <I2S_IRQHandler+0xbc>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009862:	2b80      	cmp	r3, #128	; 0x80
 8009864:	d102      	bne.n	800986c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f7ff ff45 	bl	80096f6 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	f003 0308 	and.w	r3, r3, #8
 8009872:	2b08      	cmp	r3, #8
 8009874:	d122      	bne.n	80098bc <I2S_IRQHandler+0x10c>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	f003 0320 	and.w	r3, r3, #32
 8009880:	2b20      	cmp	r3, #32
 8009882:	d11b      	bne.n	80098bc <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	685a      	ldr	r2, [r3, #4]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009892:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8009894:	2300      	movs	r3, #0
 8009896:	60fb      	str	r3, [r7, #12]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	60fb      	str	r3, [r7, #12]
 80098a0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2201      	movs	r2, #1
 80098a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ae:	f043 0204 	orr.w	r2, r3, #4
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f7f7 fd5a 	bl	8001370 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80098bc:	bf00      	nop
 80098be:	3718      	adds	r7, #24
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b086      	sub	sp, #24
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	60b9      	str	r1, [r7, #8]
 80098ce:	603b      	str	r3, [r7, #0]
 80098d0:	4613      	mov	r3, r2
 80098d2:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80098d4:	f7f9 fdae 	bl	8003434 <HAL_GetTick>
 80098d8:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80098da:	e018      	b.n	800990e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e2:	d014      	beq.n	800990e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80098e4:	f7f9 fda6 	bl	8003434 <HAL_GetTick>
 80098e8:	4602      	mov	r2, r0
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	1ad3      	subs	r3, r2, r3
 80098ee:	683a      	ldr	r2, [r7, #0]
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d902      	bls.n	80098fa <I2S_WaitFlagStateUntilTimeout+0x36>
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d109      	bne.n	800990e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2201      	movs	r2, #1
 80098fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2200      	movs	r2, #0
 8009906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800990a:	2303      	movs	r3, #3
 800990c:	e00f      	b.n	800992e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	689a      	ldr	r2, [r3, #8]
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	4013      	ands	r3, r2
 8009918:	68ba      	ldr	r2, [r7, #8]
 800991a:	429a      	cmp	r2, r3
 800991c:	bf0c      	ite	eq
 800991e:	2301      	moveq	r3, #1
 8009920:	2300      	movne	r3, #0
 8009922:	b2db      	uxtb	r3, r3
 8009924:	461a      	mov	r2, r3
 8009926:	79fb      	ldrb	r3, [r7, #7]
 8009928:	429a      	cmp	r2, r3
 800992a:	d1d7      	bne.n	80098dc <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 800992c:	2300      	movs	r3, #0
}
 800992e:	4618      	mov	r0, r3
 8009930:	3718      	adds	r7, #24
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
	...

08009938 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b088      	sub	sp, #32
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	689b      	ldr	r3, [r3, #8]
 8009946:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a92      	ldr	r2, [pc, #584]	; (8009b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d101      	bne.n	8009956 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8009952:	4b92      	ldr	r3, [pc, #584]	; (8009b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009954:	e001      	b.n	800995a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8009956:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800995a:	689b      	ldr	r3, [r3, #8]
 800995c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a8b      	ldr	r2, [pc, #556]	; (8009b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d101      	bne.n	8009974 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8009970:	4b8a      	ldr	r3, [pc, #552]	; (8009b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009972:	e001      	b.n	8009978 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8009974:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009984:	d004      	beq.n	8009990 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	2b00      	cmp	r3, #0
 800998c:	f040 8099 	bne.w	8009ac2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8009990:	69fb      	ldr	r3, [r7, #28]
 8009992:	f003 0302 	and.w	r3, r3, #2
 8009996:	2b02      	cmp	r3, #2
 8009998:	d107      	bne.n	80099aa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d002      	beq.n	80099aa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 f925 	bl	8009bf4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	f003 0301 	and.w	r3, r3, #1
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d107      	bne.n	80099c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d002      	beq.n	80099c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 f9c8 	bl	8009d54 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80099c4:	69bb      	ldr	r3, [r7, #24]
 80099c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ca:	2b40      	cmp	r3, #64	; 0x40
 80099cc:	d13a      	bne.n	8009a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	f003 0320 	and.w	r3, r3, #32
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d035      	beq.n	8009a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a6e      	ldr	r2, [pc, #440]	; (8009b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d101      	bne.n	80099e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80099e2:	4b6e      	ldr	r3, [pc, #440]	; (8009b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80099e4:	e001      	b.n	80099ea <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80099e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80099ea:	685a      	ldr	r2, [r3, #4]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4969      	ldr	r1, [pc, #420]	; (8009b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80099f2:	428b      	cmp	r3, r1
 80099f4:	d101      	bne.n	80099fa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80099f6:	4b69      	ldr	r3, [pc, #420]	; (8009b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80099f8:	e001      	b.n	80099fe <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80099fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80099fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009a02:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	685a      	ldr	r2, [r3, #4]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009a12:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8009a14:	2300      	movs	r3, #0
 8009a16:	60fb      	str	r3, [r7, #12]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	68db      	ldr	r3, [r3, #12]
 8009a1e:	60fb      	str	r3, [r7, #12]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	60fb      	str	r3, [r7, #12]
 8009a28:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a36:	f043 0202 	orr.w	r2, r3, #2
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f7f7 fc96 	bl	8001370 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8009a44:	69fb      	ldr	r3, [r7, #28]
 8009a46:	f003 0308 	and.w	r3, r3, #8
 8009a4a:	2b08      	cmp	r3, #8
 8009a4c:	f040 80c3 	bne.w	8009bd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	f003 0320 	and.w	r3, r3, #32
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	f000 80bd 	beq.w	8009bd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	685a      	ldr	r2, [r3, #4]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009a6a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a49      	ldr	r2, [pc, #292]	; (8009b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d101      	bne.n	8009a7a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8009a76:	4b49      	ldr	r3, [pc, #292]	; (8009b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009a78:	e001      	b.n	8009a7e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8009a7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009a7e:	685a      	ldr	r2, [r3, #4]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4944      	ldr	r1, [pc, #272]	; (8009b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8009a86:	428b      	cmp	r3, r1
 8009a88:	d101      	bne.n	8009a8e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8009a8a:	4b44      	ldr	r3, [pc, #272]	; (8009b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009a8c:	e001      	b.n	8009a92 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8009a8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009a92:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009a96:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8009a98:	2300      	movs	r3, #0
 8009a9a:	60bb      	str	r3, [r7, #8]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	60bb      	str	r3, [r7, #8]
 8009aa4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ab2:	f043 0204 	orr.w	r2, r3, #4
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f7f7 fc58 	bl	8001370 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8009ac0:	e089      	b.n	8009bd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8009ac2:	69bb      	ldr	r3, [r7, #24]
 8009ac4:	f003 0302 	and.w	r3, r3, #2
 8009ac8:	2b02      	cmp	r3, #2
 8009aca:	d107      	bne.n	8009adc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d002      	beq.n	8009adc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 f8be 	bl	8009c58 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8009adc:	69fb      	ldr	r3, [r7, #28]
 8009ade:	f003 0301 	and.w	r3, r3, #1
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d107      	bne.n	8009af6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d002      	beq.n	8009af6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 f8fd 	bl	8009cf0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8009af6:	69fb      	ldr	r3, [r7, #28]
 8009af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009afc:	2b40      	cmp	r3, #64	; 0x40
 8009afe:	d12f      	bne.n	8009b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	f003 0320 	and.w	r3, r3, #32
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d02a      	beq.n	8009b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	685a      	ldr	r2, [r3, #4]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009b18:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a1e      	ldr	r2, [pc, #120]	; (8009b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d101      	bne.n	8009b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8009b24:	4b1d      	ldr	r3, [pc, #116]	; (8009b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009b26:	e001      	b.n	8009b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8009b28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009b2c:	685a      	ldr	r2, [r3, #4]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4919      	ldr	r1, [pc, #100]	; (8009b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8009b34:	428b      	cmp	r3, r1
 8009b36:	d101      	bne.n	8009b3c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8009b38:	4b18      	ldr	r3, [pc, #96]	; (8009b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009b3a:	e001      	b.n	8009b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8009b3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009b40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009b44:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b52:	f043 0202 	orr.w	r2, r3, #2
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f7f7 fc08 	bl	8001370 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	f003 0308 	and.w	r3, r3, #8
 8009b66:	2b08      	cmp	r3, #8
 8009b68:	d136      	bne.n	8009bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	f003 0320 	and.w	r3, r3, #32
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d031      	beq.n	8009bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a07      	ldr	r2, [pc, #28]	; (8009b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d101      	bne.n	8009b82 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8009b7e:	4b07      	ldr	r3, [pc, #28]	; (8009b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009b80:	e001      	b.n	8009b86 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8009b82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009b86:	685a      	ldr	r2, [r3, #4]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4902      	ldr	r1, [pc, #8]	; (8009b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8009b8e:	428b      	cmp	r3, r1
 8009b90:	d106      	bne.n	8009ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8009b92:	4b02      	ldr	r3, [pc, #8]	; (8009b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009b94:	e006      	b.n	8009ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8009b96:	bf00      	nop
 8009b98:	40003800 	.word	0x40003800
 8009b9c:	40003400 	.word	0x40003400
 8009ba0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009ba4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009ba8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	685a      	ldr	r2, [r3, #4]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009bb8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bc6:	f043 0204 	orr.w	r2, r3, #4
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f7f7 fbce 	bl	8001370 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009bd4:	e000      	b.n	8009bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8009bd6:	bf00      	nop
}
 8009bd8:	bf00      	nop
 8009bda:	3720      	adds	r7, #32
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b083      	sub	sp, #12
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8009be8:	bf00      	nop
 8009bea:	370c      	adds	r7, #12
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr

08009bf4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c00:	1c99      	adds	r1, r3, #2
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	6251      	str	r1, [r2, #36]	; 0x24
 8009c06:	881a      	ldrh	r2, [r3, #0]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	3b01      	subs	r3, #1
 8009c16:	b29a      	uxth	r2, r3
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d113      	bne.n	8009c4e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	685a      	ldr	r2, [r3, #4]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009c34:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d106      	bne.n	8009c4e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2201      	movs	r2, #1
 8009c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f7ff ffc9 	bl	8009be0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009c4e:	bf00      	nop
 8009c50:	3708      	adds	r7, #8
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
	...

08009c58 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c64:	1c99      	adds	r1, r3, #2
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	6251      	str	r1, [r2, #36]	; 0x24
 8009c6a:	8819      	ldrh	r1, [r3, #0]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a1d      	ldr	r2, [pc, #116]	; (8009ce8 <I2SEx_TxISR_I2SExt+0x90>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d101      	bne.n	8009c7a <I2SEx_TxISR_I2SExt+0x22>
 8009c76:	4b1d      	ldr	r3, [pc, #116]	; (8009cec <I2SEx_TxISR_I2SExt+0x94>)
 8009c78:	e001      	b.n	8009c7e <I2SEx_TxISR_I2SExt+0x26>
 8009c7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009c7e:	460a      	mov	r2, r1
 8009c80:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	3b01      	subs	r3, #1
 8009c8a:	b29a      	uxth	r2, r3
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d121      	bne.n	8009cde <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a12      	ldr	r2, [pc, #72]	; (8009ce8 <I2SEx_TxISR_I2SExt+0x90>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d101      	bne.n	8009ca8 <I2SEx_TxISR_I2SExt+0x50>
 8009ca4:	4b11      	ldr	r3, [pc, #68]	; (8009cec <I2SEx_TxISR_I2SExt+0x94>)
 8009ca6:	e001      	b.n	8009cac <I2SEx_TxISR_I2SExt+0x54>
 8009ca8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009cac:	685a      	ldr	r2, [r3, #4]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	490d      	ldr	r1, [pc, #52]	; (8009ce8 <I2SEx_TxISR_I2SExt+0x90>)
 8009cb4:	428b      	cmp	r3, r1
 8009cb6:	d101      	bne.n	8009cbc <I2SEx_TxISR_I2SExt+0x64>
 8009cb8:	4b0c      	ldr	r3, [pc, #48]	; (8009cec <I2SEx_TxISR_I2SExt+0x94>)
 8009cba:	e001      	b.n	8009cc0 <I2SEx_TxISR_I2SExt+0x68>
 8009cbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009cc0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009cc4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009cca:	b29b      	uxth	r3, r3
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d106      	bne.n	8009cde <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f7ff ff81 	bl	8009be0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009cde:	bf00      	nop
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	40003800 	.word	0x40003800
 8009cec:	40003400 	.word	0x40003400

08009cf0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	68d8      	ldr	r0, [r3, #12]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d02:	1c99      	adds	r1, r3, #2
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	62d1      	str	r1, [r2, #44]	; 0x2c
 8009d08:	b282      	uxth	r2, r0
 8009d0a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009d10:	b29b      	uxth	r3, r3
 8009d12:	3b01      	subs	r3, #1
 8009d14:	b29a      	uxth	r2, r3
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d113      	bne.n	8009d4c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	685a      	ldr	r2, [r3, #4]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009d32:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d106      	bne.n	8009d4c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2201      	movs	r2, #1
 8009d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f7ff ff4a 	bl	8009be0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009d4c:	bf00      	nop
 8009d4e:	3708      	adds	r7, #8
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a20      	ldr	r2, [pc, #128]	; (8009de4 <I2SEx_RxISR_I2SExt+0x90>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d101      	bne.n	8009d6a <I2SEx_RxISR_I2SExt+0x16>
 8009d66:	4b20      	ldr	r3, [pc, #128]	; (8009de8 <I2SEx_RxISR_I2SExt+0x94>)
 8009d68:	e001      	b.n	8009d6e <I2SEx_RxISR_I2SExt+0x1a>
 8009d6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009d6e:	68d8      	ldr	r0, [r3, #12]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d74:	1c99      	adds	r1, r3, #2
 8009d76:	687a      	ldr	r2, [r7, #4]
 8009d78:	62d1      	str	r1, [r2, #44]	; 0x2c
 8009d7a:	b282      	uxth	r2, r0
 8009d7c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	3b01      	subs	r3, #1
 8009d86:	b29a      	uxth	r2, r3
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d121      	bne.n	8009dda <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a12      	ldr	r2, [pc, #72]	; (8009de4 <I2SEx_RxISR_I2SExt+0x90>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d101      	bne.n	8009da4 <I2SEx_RxISR_I2SExt+0x50>
 8009da0:	4b11      	ldr	r3, [pc, #68]	; (8009de8 <I2SEx_RxISR_I2SExt+0x94>)
 8009da2:	e001      	b.n	8009da8 <I2SEx_RxISR_I2SExt+0x54>
 8009da4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009da8:	685a      	ldr	r2, [r3, #4]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	490d      	ldr	r1, [pc, #52]	; (8009de4 <I2SEx_RxISR_I2SExt+0x90>)
 8009db0:	428b      	cmp	r3, r1
 8009db2:	d101      	bne.n	8009db8 <I2SEx_RxISR_I2SExt+0x64>
 8009db4:	4b0c      	ldr	r3, [pc, #48]	; (8009de8 <I2SEx_RxISR_I2SExt+0x94>)
 8009db6:	e001      	b.n	8009dbc <I2SEx_RxISR_I2SExt+0x68>
 8009db8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009dbc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009dc0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d106      	bne.n	8009dda <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f7ff ff03 	bl	8009be0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009dda:	bf00      	nop
 8009ddc:	3708      	adds	r7, #8
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	40003800 	.word	0x40003800
 8009de8:	40003400 	.word	0x40003400

08009dec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b086      	sub	sp, #24
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d101      	bne.n	8009dfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e267      	b.n	800a2ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f003 0301 	and.w	r3, r3, #1
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d075      	beq.n	8009ef6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009e0a:	4b88      	ldr	r3, [pc, #544]	; (800a02c <HAL_RCC_OscConfig+0x240>)
 8009e0c:	689b      	ldr	r3, [r3, #8]
 8009e0e:	f003 030c 	and.w	r3, r3, #12
 8009e12:	2b04      	cmp	r3, #4
 8009e14:	d00c      	beq.n	8009e30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009e16:	4b85      	ldr	r3, [pc, #532]	; (800a02c <HAL_RCC_OscConfig+0x240>)
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009e1e:	2b08      	cmp	r3, #8
 8009e20:	d112      	bne.n	8009e48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009e22:	4b82      	ldr	r3, [pc, #520]	; (800a02c <HAL_RCC_OscConfig+0x240>)
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e2e:	d10b      	bne.n	8009e48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e30:	4b7e      	ldr	r3, [pc, #504]	; (800a02c <HAL_RCC_OscConfig+0x240>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d05b      	beq.n	8009ef4 <HAL_RCC_OscConfig+0x108>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d157      	bne.n	8009ef4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009e44:	2301      	movs	r3, #1
 8009e46:	e242      	b.n	800a2ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e50:	d106      	bne.n	8009e60 <HAL_RCC_OscConfig+0x74>
 8009e52:	4b76      	ldr	r3, [pc, #472]	; (800a02c <HAL_RCC_OscConfig+0x240>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4a75      	ldr	r2, [pc, #468]	; (800a02c <HAL_RCC_OscConfig+0x240>)
 8009e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e5c:	6013      	str	r3, [r2, #0]
 8009e5e:	e01d      	b.n	8009e9c <HAL_RCC_OscConfig+0xb0>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009e68:	d10c      	bne.n	8009e84 <HAL_RCC_OscConfig+0x98>
 8009e6a:	4b70      	ldr	r3, [pc, #448]	; (800a02c <HAL_RCC_OscConfig+0x240>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4a6f      	ldr	r2, [pc, #444]	; (800a02c <HAL_RCC_OscConfig+0x240>)
 8009e70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e74:	6013      	str	r3, [r2, #0]
 8009e76:	4b6d      	ldr	r3, [pc, #436]	; (800a02c <HAL_RCC_OscConfig+0x240>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a6c      	ldr	r2, [pc, #432]	; (800a02c <HAL_RCC_OscConfig+0x240>)
 8009e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e80:	6013      	str	r3, [r2, #0]
 8009e82:	e00b      	b.n	8009e9c <HAL_RCC_OscConfig+0xb0>
 8009e84:	4b69      	ldr	r3, [pc, #420]	; (800a02c <HAL_RCC_OscConfig+0x240>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4a68      	ldr	r2, [pc, #416]	; (800a02c <HAL_RCC_OscConfig+0x240>)
 8009e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e8e:	6013      	str	r3, [r2, #0]
 8009e90:	4b66      	ldr	r3, [pc, #408]	; (800a02c <HAL_RCC_OscConfig+0x240>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a65      	ldr	r2, [pc, #404]	; (800a02c <HAL_RCC_OscConfig+0x240>)
 8009e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d013      	beq.n	8009ecc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ea4:	f7f9 fac6 	bl	8003434 <HAL_GetTick>
 8009ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009eaa:	e008      	b.n	8009ebe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009eac:	f7f9 fac2 	bl	8003434 <HAL_GetTick>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	1ad3      	subs	r3, r2, r3
 8009eb6:	2b64      	cmp	r3, #100	; 0x64
 8009eb8:	d901      	bls.n	8009ebe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009eba:	2303      	movs	r3, #3
 8009ebc:	e207      	b.n	800a2ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ebe:	4b5b      	ldr	r3, [pc, #364]	; (800a02c <HAL_RCC_OscConfig+0x240>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d0f0      	beq.n	8009eac <HAL_RCC_OscConfig+0xc0>
 8009eca:	e014      	b.n	8009ef6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ecc:	f7f9 fab2 	bl	8003434 <HAL_GetTick>
 8009ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009ed2:	e008      	b.n	8009ee6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009ed4:	f7f9 faae 	bl	8003434 <HAL_GetTick>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	1ad3      	subs	r3, r2, r3
 8009ede:	2b64      	cmp	r3, #100	; 0x64
 8009ee0:	d901      	bls.n	8009ee6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009ee2:	2303      	movs	r3, #3
 8009ee4:	e1f3      	b.n	800a2ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009ee6:	4b51      	ldr	r3, [pc, #324]	; (800a02c <HAL_RCC_OscConfig+0x240>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d1f0      	bne.n	8009ed4 <HAL_RCC_OscConfig+0xe8>
 8009ef2:	e000      	b.n	8009ef6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f003 0302 	and.w	r3, r3, #2
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d063      	beq.n	8009fca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009f02:	4b4a      	ldr	r3, [pc, #296]	; (800a02c <HAL_RCC_OscConfig+0x240>)
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	f003 030c 	and.w	r3, r3, #12
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d00b      	beq.n	8009f26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009f0e:	4b47      	ldr	r3, [pc, #284]	; (800a02c <HAL_RCC_OscConfig+0x240>)
 8009f10:	689b      	ldr	r3, [r3, #8]
 8009f12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009f16:	2b08      	cmp	r3, #8
 8009f18:	d11c      	bne.n	8009f54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009f1a:	4b44      	ldr	r3, [pc, #272]	; (800a02c <HAL_RCC_OscConfig+0x240>)
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d116      	bne.n	8009f54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f26:	4b41      	ldr	r3, [pc, #260]	; (800a02c <HAL_RCC_OscConfig+0x240>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f003 0302 	and.w	r3, r3, #2
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d005      	beq.n	8009f3e <HAL_RCC_OscConfig+0x152>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	68db      	ldr	r3, [r3, #12]
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	d001      	beq.n	8009f3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	e1c7      	b.n	800a2ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f3e:	4b3b      	ldr	r3, [pc, #236]	; (800a02c <HAL_RCC_OscConfig+0x240>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	691b      	ldr	r3, [r3, #16]
 8009f4a:	00db      	lsls	r3, r3, #3
 8009f4c:	4937      	ldr	r1, [pc, #220]	; (800a02c <HAL_RCC_OscConfig+0x240>)
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f52:	e03a      	b.n	8009fca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d020      	beq.n	8009f9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009f5c:	4b34      	ldr	r3, [pc, #208]	; (800a030 <HAL_RCC_OscConfig+0x244>)
 8009f5e:	2201      	movs	r2, #1
 8009f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f62:	f7f9 fa67 	bl	8003434 <HAL_GetTick>
 8009f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f68:	e008      	b.n	8009f7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009f6a:	f7f9 fa63 	bl	8003434 <HAL_GetTick>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	1ad3      	subs	r3, r2, r3
 8009f74:	2b02      	cmp	r3, #2
 8009f76:	d901      	bls.n	8009f7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009f78:	2303      	movs	r3, #3
 8009f7a:	e1a8      	b.n	800a2ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f7c:	4b2b      	ldr	r3, [pc, #172]	; (800a02c <HAL_RCC_OscConfig+0x240>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f003 0302 	and.w	r3, r3, #2
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d0f0      	beq.n	8009f6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f88:	4b28      	ldr	r3, [pc, #160]	; (800a02c <HAL_RCC_OscConfig+0x240>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	691b      	ldr	r3, [r3, #16]
 8009f94:	00db      	lsls	r3, r3, #3
 8009f96:	4925      	ldr	r1, [pc, #148]	; (800a02c <HAL_RCC_OscConfig+0x240>)
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	600b      	str	r3, [r1, #0]
 8009f9c:	e015      	b.n	8009fca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009f9e:	4b24      	ldr	r3, [pc, #144]	; (800a030 <HAL_RCC_OscConfig+0x244>)
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fa4:	f7f9 fa46 	bl	8003434 <HAL_GetTick>
 8009fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009faa:	e008      	b.n	8009fbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009fac:	f7f9 fa42 	bl	8003434 <HAL_GetTick>
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	1ad3      	subs	r3, r2, r3
 8009fb6:	2b02      	cmp	r3, #2
 8009fb8:	d901      	bls.n	8009fbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009fba:	2303      	movs	r3, #3
 8009fbc:	e187      	b.n	800a2ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009fbe:	4b1b      	ldr	r3, [pc, #108]	; (800a02c <HAL_RCC_OscConfig+0x240>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f003 0302 	and.w	r3, r3, #2
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d1f0      	bne.n	8009fac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f003 0308 	and.w	r3, r3, #8
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d036      	beq.n	800a044 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	695b      	ldr	r3, [r3, #20]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d016      	beq.n	800a00c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009fde:	4b15      	ldr	r3, [pc, #84]	; (800a034 <HAL_RCC_OscConfig+0x248>)
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009fe4:	f7f9 fa26 	bl	8003434 <HAL_GetTick>
 8009fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009fea:	e008      	b.n	8009ffe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009fec:	f7f9 fa22 	bl	8003434 <HAL_GetTick>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	1ad3      	subs	r3, r2, r3
 8009ff6:	2b02      	cmp	r3, #2
 8009ff8:	d901      	bls.n	8009ffe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009ffa:	2303      	movs	r3, #3
 8009ffc:	e167      	b.n	800a2ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009ffe:	4b0b      	ldr	r3, [pc, #44]	; (800a02c <HAL_RCC_OscConfig+0x240>)
 800a000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a002:	f003 0302 	and.w	r3, r3, #2
 800a006:	2b00      	cmp	r3, #0
 800a008:	d0f0      	beq.n	8009fec <HAL_RCC_OscConfig+0x200>
 800a00a:	e01b      	b.n	800a044 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a00c:	4b09      	ldr	r3, [pc, #36]	; (800a034 <HAL_RCC_OscConfig+0x248>)
 800a00e:	2200      	movs	r2, #0
 800a010:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a012:	f7f9 fa0f 	bl	8003434 <HAL_GetTick>
 800a016:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a018:	e00e      	b.n	800a038 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a01a:	f7f9 fa0b 	bl	8003434 <HAL_GetTick>
 800a01e:	4602      	mov	r2, r0
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	1ad3      	subs	r3, r2, r3
 800a024:	2b02      	cmp	r3, #2
 800a026:	d907      	bls.n	800a038 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a028:	2303      	movs	r3, #3
 800a02a:	e150      	b.n	800a2ce <HAL_RCC_OscConfig+0x4e2>
 800a02c:	40023800 	.word	0x40023800
 800a030:	42470000 	.word	0x42470000
 800a034:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a038:	4b88      	ldr	r3, [pc, #544]	; (800a25c <HAL_RCC_OscConfig+0x470>)
 800a03a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a03c:	f003 0302 	and.w	r3, r3, #2
 800a040:	2b00      	cmp	r3, #0
 800a042:	d1ea      	bne.n	800a01a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f003 0304 	and.w	r3, r3, #4
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	f000 8097 	beq.w	800a180 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a052:	2300      	movs	r3, #0
 800a054:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a056:	4b81      	ldr	r3, [pc, #516]	; (800a25c <HAL_RCC_OscConfig+0x470>)
 800a058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a05a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d10f      	bne.n	800a082 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a062:	2300      	movs	r3, #0
 800a064:	60bb      	str	r3, [r7, #8]
 800a066:	4b7d      	ldr	r3, [pc, #500]	; (800a25c <HAL_RCC_OscConfig+0x470>)
 800a068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a06a:	4a7c      	ldr	r2, [pc, #496]	; (800a25c <HAL_RCC_OscConfig+0x470>)
 800a06c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a070:	6413      	str	r3, [r2, #64]	; 0x40
 800a072:	4b7a      	ldr	r3, [pc, #488]	; (800a25c <HAL_RCC_OscConfig+0x470>)
 800a074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a07a:	60bb      	str	r3, [r7, #8]
 800a07c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a07e:	2301      	movs	r3, #1
 800a080:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a082:	4b77      	ldr	r3, [pc, #476]	; (800a260 <HAL_RCC_OscConfig+0x474>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d118      	bne.n	800a0c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a08e:	4b74      	ldr	r3, [pc, #464]	; (800a260 <HAL_RCC_OscConfig+0x474>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4a73      	ldr	r2, [pc, #460]	; (800a260 <HAL_RCC_OscConfig+0x474>)
 800a094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a098:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a09a:	f7f9 f9cb 	bl	8003434 <HAL_GetTick>
 800a09e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a0a0:	e008      	b.n	800a0b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a0a2:	f7f9 f9c7 	bl	8003434 <HAL_GetTick>
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	1ad3      	subs	r3, r2, r3
 800a0ac:	2b02      	cmp	r3, #2
 800a0ae:	d901      	bls.n	800a0b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a0b0:	2303      	movs	r3, #3
 800a0b2:	e10c      	b.n	800a2ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a0b4:	4b6a      	ldr	r3, [pc, #424]	; (800a260 <HAL_RCC_OscConfig+0x474>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d0f0      	beq.n	800a0a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	689b      	ldr	r3, [r3, #8]
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d106      	bne.n	800a0d6 <HAL_RCC_OscConfig+0x2ea>
 800a0c8:	4b64      	ldr	r3, [pc, #400]	; (800a25c <HAL_RCC_OscConfig+0x470>)
 800a0ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0cc:	4a63      	ldr	r2, [pc, #396]	; (800a25c <HAL_RCC_OscConfig+0x470>)
 800a0ce:	f043 0301 	orr.w	r3, r3, #1
 800a0d2:	6713      	str	r3, [r2, #112]	; 0x70
 800a0d4:	e01c      	b.n	800a110 <HAL_RCC_OscConfig+0x324>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	2b05      	cmp	r3, #5
 800a0dc:	d10c      	bne.n	800a0f8 <HAL_RCC_OscConfig+0x30c>
 800a0de:	4b5f      	ldr	r3, [pc, #380]	; (800a25c <HAL_RCC_OscConfig+0x470>)
 800a0e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0e2:	4a5e      	ldr	r2, [pc, #376]	; (800a25c <HAL_RCC_OscConfig+0x470>)
 800a0e4:	f043 0304 	orr.w	r3, r3, #4
 800a0e8:	6713      	str	r3, [r2, #112]	; 0x70
 800a0ea:	4b5c      	ldr	r3, [pc, #368]	; (800a25c <HAL_RCC_OscConfig+0x470>)
 800a0ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0ee:	4a5b      	ldr	r2, [pc, #364]	; (800a25c <HAL_RCC_OscConfig+0x470>)
 800a0f0:	f043 0301 	orr.w	r3, r3, #1
 800a0f4:	6713      	str	r3, [r2, #112]	; 0x70
 800a0f6:	e00b      	b.n	800a110 <HAL_RCC_OscConfig+0x324>
 800a0f8:	4b58      	ldr	r3, [pc, #352]	; (800a25c <HAL_RCC_OscConfig+0x470>)
 800a0fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0fc:	4a57      	ldr	r2, [pc, #348]	; (800a25c <HAL_RCC_OscConfig+0x470>)
 800a0fe:	f023 0301 	bic.w	r3, r3, #1
 800a102:	6713      	str	r3, [r2, #112]	; 0x70
 800a104:	4b55      	ldr	r3, [pc, #340]	; (800a25c <HAL_RCC_OscConfig+0x470>)
 800a106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a108:	4a54      	ldr	r2, [pc, #336]	; (800a25c <HAL_RCC_OscConfig+0x470>)
 800a10a:	f023 0304 	bic.w	r3, r3, #4
 800a10e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d015      	beq.n	800a144 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a118:	f7f9 f98c 	bl	8003434 <HAL_GetTick>
 800a11c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a11e:	e00a      	b.n	800a136 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a120:	f7f9 f988 	bl	8003434 <HAL_GetTick>
 800a124:	4602      	mov	r2, r0
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	1ad3      	subs	r3, r2, r3
 800a12a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a12e:	4293      	cmp	r3, r2
 800a130:	d901      	bls.n	800a136 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a132:	2303      	movs	r3, #3
 800a134:	e0cb      	b.n	800a2ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a136:	4b49      	ldr	r3, [pc, #292]	; (800a25c <HAL_RCC_OscConfig+0x470>)
 800a138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a13a:	f003 0302 	and.w	r3, r3, #2
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d0ee      	beq.n	800a120 <HAL_RCC_OscConfig+0x334>
 800a142:	e014      	b.n	800a16e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a144:	f7f9 f976 	bl	8003434 <HAL_GetTick>
 800a148:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a14a:	e00a      	b.n	800a162 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a14c:	f7f9 f972 	bl	8003434 <HAL_GetTick>
 800a150:	4602      	mov	r2, r0
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	1ad3      	subs	r3, r2, r3
 800a156:	f241 3288 	movw	r2, #5000	; 0x1388
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d901      	bls.n	800a162 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a15e:	2303      	movs	r3, #3
 800a160:	e0b5      	b.n	800a2ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a162:	4b3e      	ldr	r3, [pc, #248]	; (800a25c <HAL_RCC_OscConfig+0x470>)
 800a164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a166:	f003 0302 	and.w	r3, r3, #2
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d1ee      	bne.n	800a14c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a16e:	7dfb      	ldrb	r3, [r7, #23]
 800a170:	2b01      	cmp	r3, #1
 800a172:	d105      	bne.n	800a180 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a174:	4b39      	ldr	r3, [pc, #228]	; (800a25c <HAL_RCC_OscConfig+0x470>)
 800a176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a178:	4a38      	ldr	r2, [pc, #224]	; (800a25c <HAL_RCC_OscConfig+0x470>)
 800a17a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a17e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	699b      	ldr	r3, [r3, #24]
 800a184:	2b00      	cmp	r3, #0
 800a186:	f000 80a1 	beq.w	800a2cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a18a:	4b34      	ldr	r3, [pc, #208]	; (800a25c <HAL_RCC_OscConfig+0x470>)
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	f003 030c 	and.w	r3, r3, #12
 800a192:	2b08      	cmp	r3, #8
 800a194:	d05c      	beq.n	800a250 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	699b      	ldr	r3, [r3, #24]
 800a19a:	2b02      	cmp	r3, #2
 800a19c:	d141      	bne.n	800a222 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a19e:	4b31      	ldr	r3, [pc, #196]	; (800a264 <HAL_RCC_OscConfig+0x478>)
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1a4:	f7f9 f946 	bl	8003434 <HAL_GetTick>
 800a1a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a1aa:	e008      	b.n	800a1be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a1ac:	f7f9 f942 	bl	8003434 <HAL_GetTick>
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	1ad3      	subs	r3, r2, r3
 800a1b6:	2b02      	cmp	r3, #2
 800a1b8:	d901      	bls.n	800a1be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a1ba:	2303      	movs	r3, #3
 800a1bc:	e087      	b.n	800a2ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a1be:	4b27      	ldr	r3, [pc, #156]	; (800a25c <HAL_RCC_OscConfig+0x470>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d1f0      	bne.n	800a1ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	69da      	ldr	r2, [r3, #28]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6a1b      	ldr	r3, [r3, #32]
 800a1d2:	431a      	orrs	r2, r3
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d8:	019b      	lsls	r3, r3, #6
 800a1da:	431a      	orrs	r2, r3
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e0:	085b      	lsrs	r3, r3, #1
 800a1e2:	3b01      	subs	r3, #1
 800a1e4:	041b      	lsls	r3, r3, #16
 800a1e6:	431a      	orrs	r2, r3
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ec:	061b      	lsls	r3, r3, #24
 800a1ee:	491b      	ldr	r1, [pc, #108]	; (800a25c <HAL_RCC_OscConfig+0x470>)
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a1f4:	4b1b      	ldr	r3, [pc, #108]	; (800a264 <HAL_RCC_OscConfig+0x478>)
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1fa:	f7f9 f91b 	bl	8003434 <HAL_GetTick>
 800a1fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a200:	e008      	b.n	800a214 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a202:	f7f9 f917 	bl	8003434 <HAL_GetTick>
 800a206:	4602      	mov	r2, r0
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	1ad3      	subs	r3, r2, r3
 800a20c:	2b02      	cmp	r3, #2
 800a20e:	d901      	bls.n	800a214 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a210:	2303      	movs	r3, #3
 800a212:	e05c      	b.n	800a2ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a214:	4b11      	ldr	r3, [pc, #68]	; (800a25c <HAL_RCC_OscConfig+0x470>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d0f0      	beq.n	800a202 <HAL_RCC_OscConfig+0x416>
 800a220:	e054      	b.n	800a2cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a222:	4b10      	ldr	r3, [pc, #64]	; (800a264 <HAL_RCC_OscConfig+0x478>)
 800a224:	2200      	movs	r2, #0
 800a226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a228:	f7f9 f904 	bl	8003434 <HAL_GetTick>
 800a22c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a22e:	e008      	b.n	800a242 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a230:	f7f9 f900 	bl	8003434 <HAL_GetTick>
 800a234:	4602      	mov	r2, r0
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	1ad3      	subs	r3, r2, r3
 800a23a:	2b02      	cmp	r3, #2
 800a23c:	d901      	bls.n	800a242 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a23e:	2303      	movs	r3, #3
 800a240:	e045      	b.n	800a2ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a242:	4b06      	ldr	r3, [pc, #24]	; (800a25c <HAL_RCC_OscConfig+0x470>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d1f0      	bne.n	800a230 <HAL_RCC_OscConfig+0x444>
 800a24e:	e03d      	b.n	800a2cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	699b      	ldr	r3, [r3, #24]
 800a254:	2b01      	cmp	r3, #1
 800a256:	d107      	bne.n	800a268 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a258:	2301      	movs	r3, #1
 800a25a:	e038      	b.n	800a2ce <HAL_RCC_OscConfig+0x4e2>
 800a25c:	40023800 	.word	0x40023800
 800a260:	40007000 	.word	0x40007000
 800a264:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a268:	4b1b      	ldr	r3, [pc, #108]	; (800a2d8 <HAL_RCC_OscConfig+0x4ec>)
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	699b      	ldr	r3, [r3, #24]
 800a272:	2b01      	cmp	r3, #1
 800a274:	d028      	beq.n	800a2c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a280:	429a      	cmp	r2, r3
 800a282:	d121      	bne.n	800a2c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a28e:	429a      	cmp	r2, r3
 800a290:	d11a      	bne.n	800a2c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a292:	68fa      	ldr	r2, [r7, #12]
 800a294:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a298:	4013      	ands	r3, r2
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a29e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d111      	bne.n	800a2c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ae:	085b      	lsrs	r3, r3, #1
 800a2b0:	3b01      	subs	r3, #1
 800a2b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d107      	bne.n	800a2c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d001      	beq.n	800a2cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	e000      	b.n	800a2ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3718      	adds	r7, #24
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	40023800 	.word	0x40023800

0800a2dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d101      	bne.n	800a2f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	e0cc      	b.n	800a48a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a2f0:	4b68      	ldr	r3, [pc, #416]	; (800a494 <HAL_RCC_ClockConfig+0x1b8>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f003 0307 	and.w	r3, r3, #7
 800a2f8:	683a      	ldr	r2, [r7, #0]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d90c      	bls.n	800a318 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2fe:	4b65      	ldr	r3, [pc, #404]	; (800a494 <HAL_RCC_ClockConfig+0x1b8>)
 800a300:	683a      	ldr	r2, [r7, #0]
 800a302:	b2d2      	uxtb	r2, r2
 800a304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a306:	4b63      	ldr	r3, [pc, #396]	; (800a494 <HAL_RCC_ClockConfig+0x1b8>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f003 0307 	and.w	r3, r3, #7
 800a30e:	683a      	ldr	r2, [r7, #0]
 800a310:	429a      	cmp	r2, r3
 800a312:	d001      	beq.n	800a318 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a314:	2301      	movs	r3, #1
 800a316:	e0b8      	b.n	800a48a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f003 0302 	and.w	r3, r3, #2
 800a320:	2b00      	cmp	r3, #0
 800a322:	d020      	beq.n	800a366 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f003 0304 	and.w	r3, r3, #4
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d005      	beq.n	800a33c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a330:	4b59      	ldr	r3, [pc, #356]	; (800a498 <HAL_RCC_ClockConfig+0x1bc>)
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	4a58      	ldr	r2, [pc, #352]	; (800a498 <HAL_RCC_ClockConfig+0x1bc>)
 800a336:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a33a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f003 0308 	and.w	r3, r3, #8
 800a344:	2b00      	cmp	r3, #0
 800a346:	d005      	beq.n	800a354 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a348:	4b53      	ldr	r3, [pc, #332]	; (800a498 <HAL_RCC_ClockConfig+0x1bc>)
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	4a52      	ldr	r2, [pc, #328]	; (800a498 <HAL_RCC_ClockConfig+0x1bc>)
 800a34e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a352:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a354:	4b50      	ldr	r3, [pc, #320]	; (800a498 <HAL_RCC_ClockConfig+0x1bc>)
 800a356:	689b      	ldr	r3, [r3, #8]
 800a358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	494d      	ldr	r1, [pc, #308]	; (800a498 <HAL_RCC_ClockConfig+0x1bc>)
 800a362:	4313      	orrs	r3, r2
 800a364:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f003 0301 	and.w	r3, r3, #1
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d044      	beq.n	800a3fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	2b01      	cmp	r3, #1
 800a378:	d107      	bne.n	800a38a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a37a:	4b47      	ldr	r3, [pc, #284]	; (800a498 <HAL_RCC_ClockConfig+0x1bc>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a382:	2b00      	cmp	r3, #0
 800a384:	d119      	bne.n	800a3ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a386:	2301      	movs	r3, #1
 800a388:	e07f      	b.n	800a48a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	2b02      	cmp	r3, #2
 800a390:	d003      	beq.n	800a39a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a396:	2b03      	cmp	r3, #3
 800a398:	d107      	bne.n	800a3aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a39a:	4b3f      	ldr	r3, [pc, #252]	; (800a498 <HAL_RCC_ClockConfig+0x1bc>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d109      	bne.n	800a3ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e06f      	b.n	800a48a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a3aa:	4b3b      	ldr	r3, [pc, #236]	; (800a498 <HAL_RCC_ClockConfig+0x1bc>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f003 0302 	and.w	r3, r3, #2
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d101      	bne.n	800a3ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	e067      	b.n	800a48a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a3ba:	4b37      	ldr	r3, [pc, #220]	; (800a498 <HAL_RCC_ClockConfig+0x1bc>)
 800a3bc:	689b      	ldr	r3, [r3, #8]
 800a3be:	f023 0203 	bic.w	r2, r3, #3
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	4934      	ldr	r1, [pc, #208]	; (800a498 <HAL_RCC_ClockConfig+0x1bc>)
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a3cc:	f7f9 f832 	bl	8003434 <HAL_GetTick>
 800a3d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3d2:	e00a      	b.n	800a3ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a3d4:	f7f9 f82e 	bl	8003434 <HAL_GetTick>
 800a3d8:	4602      	mov	r2, r0
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	1ad3      	subs	r3, r2, r3
 800a3de:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d901      	bls.n	800a3ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a3e6:	2303      	movs	r3, #3
 800a3e8:	e04f      	b.n	800a48a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3ea:	4b2b      	ldr	r3, [pc, #172]	; (800a498 <HAL_RCC_ClockConfig+0x1bc>)
 800a3ec:	689b      	ldr	r3, [r3, #8]
 800a3ee:	f003 020c 	and.w	r2, r3, #12
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d1eb      	bne.n	800a3d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a3fc:	4b25      	ldr	r3, [pc, #148]	; (800a494 <HAL_RCC_ClockConfig+0x1b8>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f003 0307 	and.w	r3, r3, #7
 800a404:	683a      	ldr	r2, [r7, #0]
 800a406:	429a      	cmp	r2, r3
 800a408:	d20c      	bcs.n	800a424 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a40a:	4b22      	ldr	r3, [pc, #136]	; (800a494 <HAL_RCC_ClockConfig+0x1b8>)
 800a40c:	683a      	ldr	r2, [r7, #0]
 800a40e:	b2d2      	uxtb	r2, r2
 800a410:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a412:	4b20      	ldr	r3, [pc, #128]	; (800a494 <HAL_RCC_ClockConfig+0x1b8>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f003 0307 	and.w	r3, r3, #7
 800a41a:	683a      	ldr	r2, [r7, #0]
 800a41c:	429a      	cmp	r2, r3
 800a41e:	d001      	beq.n	800a424 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a420:	2301      	movs	r3, #1
 800a422:	e032      	b.n	800a48a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f003 0304 	and.w	r3, r3, #4
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d008      	beq.n	800a442 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a430:	4b19      	ldr	r3, [pc, #100]	; (800a498 <HAL_RCC_ClockConfig+0x1bc>)
 800a432:	689b      	ldr	r3, [r3, #8]
 800a434:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	68db      	ldr	r3, [r3, #12]
 800a43c:	4916      	ldr	r1, [pc, #88]	; (800a498 <HAL_RCC_ClockConfig+0x1bc>)
 800a43e:	4313      	orrs	r3, r2
 800a440:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f003 0308 	and.w	r3, r3, #8
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d009      	beq.n	800a462 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a44e:	4b12      	ldr	r3, [pc, #72]	; (800a498 <HAL_RCC_ClockConfig+0x1bc>)
 800a450:	689b      	ldr	r3, [r3, #8]
 800a452:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	691b      	ldr	r3, [r3, #16]
 800a45a:	00db      	lsls	r3, r3, #3
 800a45c:	490e      	ldr	r1, [pc, #56]	; (800a498 <HAL_RCC_ClockConfig+0x1bc>)
 800a45e:	4313      	orrs	r3, r2
 800a460:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a462:	f000 f821 	bl	800a4a8 <HAL_RCC_GetSysClockFreq>
 800a466:	4602      	mov	r2, r0
 800a468:	4b0b      	ldr	r3, [pc, #44]	; (800a498 <HAL_RCC_ClockConfig+0x1bc>)
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	091b      	lsrs	r3, r3, #4
 800a46e:	f003 030f 	and.w	r3, r3, #15
 800a472:	490a      	ldr	r1, [pc, #40]	; (800a49c <HAL_RCC_ClockConfig+0x1c0>)
 800a474:	5ccb      	ldrb	r3, [r1, r3]
 800a476:	fa22 f303 	lsr.w	r3, r2, r3
 800a47a:	4a09      	ldr	r2, [pc, #36]	; (800a4a0 <HAL_RCC_ClockConfig+0x1c4>)
 800a47c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a47e:	4b09      	ldr	r3, [pc, #36]	; (800a4a4 <HAL_RCC_ClockConfig+0x1c8>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4618      	mov	r0, r3
 800a484:	f7f8 ff92 	bl	80033ac <HAL_InitTick>

  return HAL_OK;
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3710      	adds	r7, #16
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	40023c00 	.word	0x40023c00
 800a498:	40023800 	.word	0x40023800
 800a49c:	08016c34 	.word	0x08016c34
 800a4a0:	20000038 	.word	0x20000038
 800a4a4:	20000040 	.word	0x20000040

0800a4a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a4a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a4ac:	b094      	sub	sp, #80	; 0x50
 800a4ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	647b      	str	r3, [r7, #68]	; 0x44
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a4c0:	4b79      	ldr	r3, [pc, #484]	; (800a6a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	f003 030c 	and.w	r3, r3, #12
 800a4c8:	2b08      	cmp	r3, #8
 800a4ca:	d00d      	beq.n	800a4e8 <HAL_RCC_GetSysClockFreq+0x40>
 800a4cc:	2b08      	cmp	r3, #8
 800a4ce:	f200 80e1 	bhi.w	800a694 <HAL_RCC_GetSysClockFreq+0x1ec>
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d002      	beq.n	800a4dc <HAL_RCC_GetSysClockFreq+0x34>
 800a4d6:	2b04      	cmp	r3, #4
 800a4d8:	d003      	beq.n	800a4e2 <HAL_RCC_GetSysClockFreq+0x3a>
 800a4da:	e0db      	b.n	800a694 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a4dc:	4b73      	ldr	r3, [pc, #460]	; (800a6ac <HAL_RCC_GetSysClockFreq+0x204>)
 800a4de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800a4e0:	e0db      	b.n	800a69a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a4e2:	4b73      	ldr	r3, [pc, #460]	; (800a6b0 <HAL_RCC_GetSysClockFreq+0x208>)
 800a4e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a4e6:	e0d8      	b.n	800a69a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a4e8:	4b6f      	ldr	r3, [pc, #444]	; (800a6a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a4f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a4f2:	4b6d      	ldr	r3, [pc, #436]	; (800a6a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d063      	beq.n	800a5c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a4fe:	4b6a      	ldr	r3, [pc, #424]	; (800a6a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	099b      	lsrs	r3, r3, #6
 800a504:	2200      	movs	r2, #0
 800a506:	63bb      	str	r3, [r7, #56]	; 0x38
 800a508:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a50c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a510:	633b      	str	r3, [r7, #48]	; 0x30
 800a512:	2300      	movs	r3, #0
 800a514:	637b      	str	r3, [r7, #52]	; 0x34
 800a516:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a51a:	4622      	mov	r2, r4
 800a51c:	462b      	mov	r3, r5
 800a51e:	f04f 0000 	mov.w	r0, #0
 800a522:	f04f 0100 	mov.w	r1, #0
 800a526:	0159      	lsls	r1, r3, #5
 800a528:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a52c:	0150      	lsls	r0, r2, #5
 800a52e:	4602      	mov	r2, r0
 800a530:	460b      	mov	r3, r1
 800a532:	4621      	mov	r1, r4
 800a534:	1a51      	subs	r1, r2, r1
 800a536:	6139      	str	r1, [r7, #16]
 800a538:	4629      	mov	r1, r5
 800a53a:	eb63 0301 	sbc.w	r3, r3, r1
 800a53e:	617b      	str	r3, [r7, #20]
 800a540:	f04f 0200 	mov.w	r2, #0
 800a544:	f04f 0300 	mov.w	r3, #0
 800a548:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a54c:	4659      	mov	r1, fp
 800a54e:	018b      	lsls	r3, r1, #6
 800a550:	4651      	mov	r1, sl
 800a552:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a556:	4651      	mov	r1, sl
 800a558:	018a      	lsls	r2, r1, #6
 800a55a:	4651      	mov	r1, sl
 800a55c:	ebb2 0801 	subs.w	r8, r2, r1
 800a560:	4659      	mov	r1, fp
 800a562:	eb63 0901 	sbc.w	r9, r3, r1
 800a566:	f04f 0200 	mov.w	r2, #0
 800a56a:	f04f 0300 	mov.w	r3, #0
 800a56e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a572:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a576:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a57a:	4690      	mov	r8, r2
 800a57c:	4699      	mov	r9, r3
 800a57e:	4623      	mov	r3, r4
 800a580:	eb18 0303 	adds.w	r3, r8, r3
 800a584:	60bb      	str	r3, [r7, #8]
 800a586:	462b      	mov	r3, r5
 800a588:	eb49 0303 	adc.w	r3, r9, r3
 800a58c:	60fb      	str	r3, [r7, #12]
 800a58e:	f04f 0200 	mov.w	r2, #0
 800a592:	f04f 0300 	mov.w	r3, #0
 800a596:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a59a:	4629      	mov	r1, r5
 800a59c:	024b      	lsls	r3, r1, #9
 800a59e:	4621      	mov	r1, r4
 800a5a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a5a4:	4621      	mov	r1, r4
 800a5a6:	024a      	lsls	r2, r1, #9
 800a5a8:	4610      	mov	r0, r2
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a5b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a5b8:	f7f6 faf6 	bl	8000ba8 <__aeabi_uldivmod>
 800a5bc:	4602      	mov	r2, r0
 800a5be:	460b      	mov	r3, r1
 800a5c0:	4613      	mov	r3, r2
 800a5c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a5c4:	e058      	b.n	800a678 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a5c6:	4b38      	ldr	r3, [pc, #224]	; (800a6a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	099b      	lsrs	r3, r3, #6
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	4611      	mov	r1, r2
 800a5d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a5d6:	623b      	str	r3, [r7, #32]
 800a5d8:	2300      	movs	r3, #0
 800a5da:	627b      	str	r3, [r7, #36]	; 0x24
 800a5dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a5e0:	4642      	mov	r2, r8
 800a5e2:	464b      	mov	r3, r9
 800a5e4:	f04f 0000 	mov.w	r0, #0
 800a5e8:	f04f 0100 	mov.w	r1, #0
 800a5ec:	0159      	lsls	r1, r3, #5
 800a5ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a5f2:	0150      	lsls	r0, r2, #5
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	4641      	mov	r1, r8
 800a5fa:	ebb2 0a01 	subs.w	sl, r2, r1
 800a5fe:	4649      	mov	r1, r9
 800a600:	eb63 0b01 	sbc.w	fp, r3, r1
 800a604:	f04f 0200 	mov.w	r2, #0
 800a608:	f04f 0300 	mov.w	r3, #0
 800a60c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a610:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a614:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a618:	ebb2 040a 	subs.w	r4, r2, sl
 800a61c:	eb63 050b 	sbc.w	r5, r3, fp
 800a620:	f04f 0200 	mov.w	r2, #0
 800a624:	f04f 0300 	mov.w	r3, #0
 800a628:	00eb      	lsls	r3, r5, #3
 800a62a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a62e:	00e2      	lsls	r2, r4, #3
 800a630:	4614      	mov	r4, r2
 800a632:	461d      	mov	r5, r3
 800a634:	4643      	mov	r3, r8
 800a636:	18e3      	adds	r3, r4, r3
 800a638:	603b      	str	r3, [r7, #0]
 800a63a:	464b      	mov	r3, r9
 800a63c:	eb45 0303 	adc.w	r3, r5, r3
 800a640:	607b      	str	r3, [r7, #4]
 800a642:	f04f 0200 	mov.w	r2, #0
 800a646:	f04f 0300 	mov.w	r3, #0
 800a64a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a64e:	4629      	mov	r1, r5
 800a650:	028b      	lsls	r3, r1, #10
 800a652:	4621      	mov	r1, r4
 800a654:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a658:	4621      	mov	r1, r4
 800a65a:	028a      	lsls	r2, r1, #10
 800a65c:	4610      	mov	r0, r2
 800a65e:	4619      	mov	r1, r3
 800a660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a662:	2200      	movs	r2, #0
 800a664:	61bb      	str	r3, [r7, #24]
 800a666:	61fa      	str	r2, [r7, #28]
 800a668:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a66c:	f7f6 fa9c 	bl	8000ba8 <__aeabi_uldivmod>
 800a670:	4602      	mov	r2, r0
 800a672:	460b      	mov	r3, r1
 800a674:	4613      	mov	r3, r2
 800a676:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a678:	4b0b      	ldr	r3, [pc, #44]	; (800a6a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	0c1b      	lsrs	r3, r3, #16
 800a67e:	f003 0303 	and.w	r3, r3, #3
 800a682:	3301      	adds	r3, #1
 800a684:	005b      	lsls	r3, r3, #1
 800a686:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800a688:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a68a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a68c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a690:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a692:	e002      	b.n	800a69a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a694:	4b05      	ldr	r3, [pc, #20]	; (800a6ac <HAL_RCC_GetSysClockFreq+0x204>)
 800a696:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a698:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a69a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3750      	adds	r7, #80	; 0x50
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a6a6:	bf00      	nop
 800a6a8:	40023800 	.word	0x40023800
 800a6ac:	00f42400 	.word	0x00f42400
 800a6b0:	007a1200 	.word	0x007a1200

0800a6b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a6b8:	4b03      	ldr	r3, [pc, #12]	; (800a6c8 <HAL_RCC_GetHCLKFreq+0x14>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr
 800a6c6:	bf00      	nop
 800a6c8:	20000038 	.word	0x20000038

0800a6cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a6d0:	f7ff fff0 	bl	800a6b4 <HAL_RCC_GetHCLKFreq>
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	4b05      	ldr	r3, [pc, #20]	; (800a6ec <HAL_RCC_GetPCLK1Freq+0x20>)
 800a6d8:	689b      	ldr	r3, [r3, #8]
 800a6da:	0a9b      	lsrs	r3, r3, #10
 800a6dc:	f003 0307 	and.w	r3, r3, #7
 800a6e0:	4903      	ldr	r1, [pc, #12]	; (800a6f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a6e2:	5ccb      	ldrb	r3, [r1, r3]
 800a6e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	bd80      	pop	{r7, pc}
 800a6ec:	40023800 	.word	0x40023800
 800a6f0:	08016c44 	.word	0x08016c44

0800a6f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a6f8:	f7ff ffdc 	bl	800a6b4 <HAL_RCC_GetHCLKFreq>
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	4b05      	ldr	r3, [pc, #20]	; (800a714 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a700:	689b      	ldr	r3, [r3, #8]
 800a702:	0b5b      	lsrs	r3, r3, #13
 800a704:	f003 0307 	and.w	r3, r3, #7
 800a708:	4903      	ldr	r1, [pc, #12]	; (800a718 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a70a:	5ccb      	ldrb	r3, [r1, r3]
 800a70c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a710:	4618      	mov	r0, r3
 800a712:	bd80      	pop	{r7, pc}
 800a714:	40023800 	.word	0x40023800
 800a718:	08016c44 	.word	0x08016c44

0800a71c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b086      	sub	sp, #24
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a724:	2300      	movs	r3, #0
 800a726:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800a728:	2300      	movs	r3, #0
 800a72a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f003 0301 	and.w	r3, r3, #1
 800a734:	2b00      	cmp	r3, #0
 800a736:	d105      	bne.n	800a744 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a740:	2b00      	cmp	r3, #0
 800a742:	d035      	beq.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a744:	4b62      	ldr	r3, [pc, #392]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800a746:	2200      	movs	r2, #0
 800a748:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a74a:	f7f8 fe73 	bl	8003434 <HAL_GetTick>
 800a74e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a750:	e008      	b.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a752:	f7f8 fe6f 	bl	8003434 <HAL_GetTick>
 800a756:	4602      	mov	r2, r0
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	1ad3      	subs	r3, r2, r3
 800a75c:	2b02      	cmp	r3, #2
 800a75e:	d901      	bls.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a760:	2303      	movs	r3, #3
 800a762:	e0b0      	b.n	800a8c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a764:	4b5b      	ldr	r3, [pc, #364]	; (800a8d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d1f0      	bne.n	800a752 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	019a      	lsls	r2, r3, #6
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	689b      	ldr	r3, [r3, #8]
 800a77a:	071b      	lsls	r3, r3, #28
 800a77c:	4955      	ldr	r1, [pc, #340]	; (800a8d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a77e:	4313      	orrs	r3, r2
 800a780:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a784:	4b52      	ldr	r3, [pc, #328]	; (800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800a786:	2201      	movs	r2, #1
 800a788:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a78a:	f7f8 fe53 	bl	8003434 <HAL_GetTick>
 800a78e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a790:	e008      	b.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a792:	f7f8 fe4f 	bl	8003434 <HAL_GetTick>
 800a796:	4602      	mov	r2, r0
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	1ad3      	subs	r3, r2, r3
 800a79c:	2b02      	cmp	r3, #2
 800a79e:	d901      	bls.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a7a0:	2303      	movs	r3, #3
 800a7a2:	e090      	b.n	800a8c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a7a4:	4b4b      	ldr	r3, [pc, #300]	; (800a8d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d0f0      	beq.n	800a792 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f003 0302 	and.w	r3, r3, #2
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	f000 8083 	beq.w	800a8c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a7be:	2300      	movs	r3, #0
 800a7c0:	60fb      	str	r3, [r7, #12]
 800a7c2:	4b44      	ldr	r3, [pc, #272]	; (800a8d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a7c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7c6:	4a43      	ldr	r2, [pc, #268]	; (800a8d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a7c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7cc:	6413      	str	r3, [r2, #64]	; 0x40
 800a7ce:	4b41      	ldr	r3, [pc, #260]	; (800a8d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a7d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7d6:	60fb      	str	r3, [r7, #12]
 800a7d8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a7da:	4b3f      	ldr	r3, [pc, #252]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a3e      	ldr	r2, [pc, #248]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a7e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7e4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a7e6:	f7f8 fe25 	bl	8003434 <HAL_GetTick>
 800a7ea:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a7ec:	e008      	b.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a7ee:	f7f8 fe21 	bl	8003434 <HAL_GetTick>
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	1ad3      	subs	r3, r2, r3
 800a7f8:	2b02      	cmp	r3, #2
 800a7fa:	d901      	bls.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800a7fc:	2303      	movs	r3, #3
 800a7fe:	e062      	b.n	800a8c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a800:	4b35      	ldr	r3, [pc, #212]	; (800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d0f0      	beq.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a80c:	4b31      	ldr	r3, [pc, #196]	; (800a8d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a80e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a810:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a814:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d02f      	beq.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	68db      	ldr	r3, [r3, #12]
 800a820:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a824:	693a      	ldr	r2, [r7, #16]
 800a826:	429a      	cmp	r2, r3
 800a828:	d028      	beq.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a82a:	4b2a      	ldr	r3, [pc, #168]	; (800a8d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a82c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a82e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a832:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a834:	4b29      	ldr	r3, [pc, #164]	; (800a8dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800a836:	2201      	movs	r2, #1
 800a838:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a83a:	4b28      	ldr	r3, [pc, #160]	; (800a8dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800a83c:	2200      	movs	r2, #0
 800a83e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a840:	4a24      	ldr	r2, [pc, #144]	; (800a8d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a846:	4b23      	ldr	r3, [pc, #140]	; (800a8d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a84a:	f003 0301 	and.w	r3, r3, #1
 800a84e:	2b01      	cmp	r3, #1
 800a850:	d114      	bne.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a852:	f7f8 fdef 	bl	8003434 <HAL_GetTick>
 800a856:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a858:	e00a      	b.n	800a870 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a85a:	f7f8 fdeb 	bl	8003434 <HAL_GetTick>
 800a85e:	4602      	mov	r2, r0
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	1ad3      	subs	r3, r2, r3
 800a864:	f241 3288 	movw	r2, #5000	; 0x1388
 800a868:	4293      	cmp	r3, r2
 800a86a:	d901      	bls.n	800a870 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800a86c:	2303      	movs	r3, #3
 800a86e:	e02a      	b.n	800a8c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a870:	4b18      	ldr	r3, [pc, #96]	; (800a8d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a874:	f003 0302 	and.w	r3, r3, #2
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d0ee      	beq.n	800a85a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	68db      	ldr	r3, [r3, #12]
 800a880:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a884:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a888:	d10d      	bne.n	800a8a6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800a88a:	4b12      	ldr	r3, [pc, #72]	; (800a8d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a88c:	689b      	ldr	r3, [r3, #8]
 800a88e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	68db      	ldr	r3, [r3, #12]
 800a896:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a89a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a89e:	490d      	ldr	r1, [pc, #52]	; (800a8d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	608b      	str	r3, [r1, #8]
 800a8a4:	e005      	b.n	800a8b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a8a6:	4b0b      	ldr	r3, [pc, #44]	; (800a8d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a8a8:	689b      	ldr	r3, [r3, #8]
 800a8aa:	4a0a      	ldr	r2, [pc, #40]	; (800a8d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a8ac:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a8b0:	6093      	str	r3, [r2, #8]
 800a8b2:	4b08      	ldr	r3, [pc, #32]	; (800a8d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a8b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	68db      	ldr	r3, [r3, #12]
 800a8ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a8be:	4905      	ldr	r1, [pc, #20]	; (800a8d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800a8c4:	2300      	movs	r3, #0
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3718      	adds	r7, #24
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	42470068 	.word	0x42470068
 800a8d4:	40023800 	.word	0x40023800
 800a8d8:	40007000 	.word	0x40007000
 800a8dc:	42470e40 	.word	0x42470e40

0800a8e0 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b085      	sub	sp, #20
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2203      	movs	r2, #3
 800a8ec:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800a8ee:	4b11      	ldr	r3, [pc, #68]	; (800a934 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 800a8f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8f4:	099b      	lsrs	r3, r3, #6
 800a8f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a8fe:	4b0d      	ldr	r3, [pc, #52]	; (800a934 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 800a900:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a904:	0f1b      	lsrs	r3, r3, #28
 800a906:	f003 0207 	and.w	r2, r3, #7
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800a90e:	4b09      	ldr	r3, [pc, #36]	; (800a934 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a916:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800a918:	4b06      	ldr	r3, [pc, #24]	; (800a934 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 800a91a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a91c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	431a      	orrs	r2, r3
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 800a928:	bf00      	nop
 800a92a:	3714      	adds	r7, #20
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr
 800a934:	40023800 	.word	0x40023800

0800a938 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a938:	b480      	push	{r7}
 800a93a:	b087      	sub	sp, #28
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800a940:	2300      	movs	r3, #0
 800a942:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800a944:	2300      	movs	r3, #0
 800a946:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800a948:	2300      	movs	r3, #0
 800a94a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800a94c:	2300      	movs	r3, #0
 800a94e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2b01      	cmp	r3, #1
 800a954:	d13e      	bne.n	800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800a956:	4b23      	ldr	r3, [pc, #140]	; (800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a958:	689b      	ldr	r3, [r3, #8]
 800a95a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a95e:	60fb      	str	r3, [r7, #12]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d005      	beq.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d12f      	bne.n	800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800a96c:	4b1e      	ldr	r3, [pc, #120]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a96e:	617b      	str	r3, [r7, #20]
          break;
 800a970:	e02f      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800a972:	4b1c      	ldr	r3, [pc, #112]	; (800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a97a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a97e:	d108      	bne.n	800a992 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a980:	4b18      	ldr	r3, [pc, #96]	; (800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a988:	4a18      	ldr	r2, [pc, #96]	; (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800a98a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a98e:	613b      	str	r3, [r7, #16]
 800a990:	e007      	b.n	800a9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a992:	4b14      	ldr	r3, [pc, #80]	; (800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a994:	685b      	ldr	r3, [r3, #4]
 800a996:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a99a:	4a15      	ldr	r2, [pc, #84]	; (800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800a99c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9a0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800a9a2:	4b10      	ldr	r3, [pc, #64]	; (800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a9a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9a8:	099b      	lsrs	r3, r3, #6
 800a9aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	fb02 f303 	mul.w	r3, r2, r3
 800a9b4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800a9b6:	4b0b      	ldr	r3, [pc, #44]	; (800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a9b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9bc:	0f1b      	lsrs	r3, r3, #28
 800a9be:	f003 0307 	and.w	r3, r3, #7
 800a9c2:	68ba      	ldr	r2, [r7, #8]
 800a9c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9c8:	617b      	str	r3, [r7, #20]
          break;
 800a9ca:	e002      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	617b      	str	r3, [r7, #20]
          break;
 800a9d0:	bf00      	nop
        }
      }
      break;
 800a9d2:	bf00      	nop
    }
  }
  return frequency;
 800a9d4:	697b      	ldr	r3, [r7, #20]
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	371c      	adds	r7, #28
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	40023800 	.word	0x40023800
 800a9e8:	00bb8000 	.word	0x00bb8000
 800a9ec:	007a1200 	.word	0x007a1200
 800a9f0:	00f42400 	.word	0x00f42400

0800a9f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b082      	sub	sp, #8
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d101      	bne.n	800aa06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa02:	2301      	movs	r3, #1
 800aa04:	e03f      	b.n	800aa86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa0c:	b2db      	uxtb	r3, r3
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d106      	bne.n	800aa20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2200      	movs	r2, #0
 800aa16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f7f8 f88e 	bl	8002b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2224      	movs	r2, #36	; 0x24
 800aa24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	68da      	ldr	r2, [r3, #12]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aa36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 ff81 	bl	800b940 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	691a      	ldr	r2, [r3, #16]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aa4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	695a      	ldr	r2, [r3, #20]
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aa5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	68da      	ldr	r2, [r3, #12]
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aa6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2200      	movs	r2, #0
 800aa72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2220      	movs	r2, #32
 800aa78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2220      	movs	r2, #32
 800aa80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800aa84:	2300      	movs	r3, #0
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3708      	adds	r7, #8
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
	...

0800aa90 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b08c      	sub	sp, #48	; 0x30
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	60b9      	str	r1, [r7, #8]
 800aa9a:	4613      	mov	r3, r2
 800aa9c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aaa4:	b2db      	uxtb	r3, r3
 800aaa6:	2b20      	cmp	r3, #32
 800aaa8:	d165      	bne.n	800ab76 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d002      	beq.n	800aab6 <HAL_UART_Transmit_DMA+0x26>
 800aab0:	88fb      	ldrh	r3, [r7, #6]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d101      	bne.n	800aaba <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800aab6:	2301      	movs	r3, #1
 800aab8:	e05e      	b.n	800ab78 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d101      	bne.n	800aac8 <HAL_UART_Transmit_DMA+0x38>
 800aac4:	2302      	movs	r3, #2
 800aac6:	e057      	b.n	800ab78 <HAL_UART_Transmit_DMA+0xe8>
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2201      	movs	r2, #1
 800aacc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800aad0:	68ba      	ldr	r2, [r7, #8]
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	88fa      	ldrh	r2, [r7, #6]
 800aada:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	88fa      	ldrh	r2, [r7, #6]
 800aae0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2200      	movs	r2, #0
 800aae6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2221      	movs	r2, #33	; 0x21
 800aaec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaf4:	4a22      	ldr	r2, [pc, #136]	; (800ab80 <HAL_UART_Transmit_DMA+0xf0>)
 800aaf6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aafc:	4a21      	ldr	r2, [pc, #132]	; (800ab84 <HAL_UART_Transmit_DMA+0xf4>)
 800aafe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab04:	4a20      	ldr	r2, [pc, #128]	; (800ab88 <HAL_UART_Transmit_DMA+0xf8>)
 800ab06:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800ab10:	f107 0308 	add.w	r3, r7, #8
 800ab14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ab1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab1c:	6819      	ldr	r1, [r3, #0]
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	3304      	adds	r3, #4
 800ab24:	461a      	mov	r2, r3
 800ab26:	88fb      	ldrh	r3, [r7, #6]
 800ab28:	f7f8 ff04 	bl	8003934 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ab34:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	3314      	adds	r3, #20
 800ab44:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab46:	69bb      	ldr	r3, [r7, #24]
 800ab48:	e853 3f00 	ldrex	r3, [r3]
 800ab4c:	617b      	str	r3, [r7, #20]
   return(result);
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab54:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	3314      	adds	r3, #20
 800ab5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab5e:	627a      	str	r2, [r7, #36]	; 0x24
 800ab60:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab62:	6a39      	ldr	r1, [r7, #32]
 800ab64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab66:	e841 2300 	strex	r3, r2, [r1]
 800ab6a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab6c:	69fb      	ldr	r3, [r7, #28]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d1e5      	bne.n	800ab3e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800ab72:	2300      	movs	r3, #0
 800ab74:	e000      	b.n	800ab78 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800ab76:	2302      	movs	r3, #2
  }
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3730      	adds	r7, #48	; 0x30
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	0800b1d9 	.word	0x0800b1d9
 800ab84:	0800b273 	.word	0x0800b273
 800ab88:	0800b3eb 	.word	0x0800b3eb

0800ab8c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b08c      	sub	sp, #48	; 0x30
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	60b9      	str	r1, [r7, #8]
 800ab96:	4613      	mov	r3, r2
 800ab98:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	2b20      	cmp	r3, #32
 800aba4:	d152      	bne.n	800ac4c <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d002      	beq.n	800abb2 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800abac:	88fb      	ldrh	r3, [r7, #6]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d101      	bne.n	800abb6 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800abb2:	2301      	movs	r3, #1
 800abb4:	e04b      	b.n	800ac4e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d101      	bne.n	800abc4 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800abc0:	2302      	movs	r3, #2
 800abc2:	e044      	b.n	800ac4e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	2201      	movs	r2, #1
 800abc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2201      	movs	r2, #1
 800abd0:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800abd2:	88fb      	ldrh	r3, [r7, #6]
 800abd4:	461a      	mov	r2, r3
 800abd6:	68b9      	ldr	r1, [r7, #8]
 800abd8:	68f8      	ldr	r0, [r7, #12]
 800abda:	f000 fc51 	bl	800b480 <UART_Start_Receive_DMA>
 800abde:	4603      	mov	r3, r0
 800abe0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800abe4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d12c      	bne.n	800ac46 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d125      	bne.n	800ac40 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800abf4:	2300      	movs	r3, #0
 800abf6:	613b      	str	r3, [r7, #16]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	613b      	str	r3, [r7, #16]
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	613b      	str	r3, [r7, #16]
 800ac08:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	330c      	adds	r3, #12
 800ac10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac12:	69bb      	ldr	r3, [r7, #24]
 800ac14:	e853 3f00 	ldrex	r3, [r3]
 800ac18:	617b      	str	r3, [r7, #20]
   return(result);
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	f043 0310 	orr.w	r3, r3, #16
 800ac20:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	330c      	adds	r3, #12
 800ac28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac2a:	627a      	str	r2, [r7, #36]	; 0x24
 800ac2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac2e:	6a39      	ldr	r1, [r7, #32]
 800ac30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac32:	e841 2300 	strex	r3, r2, [r1]
 800ac36:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac38:	69fb      	ldr	r3, [r7, #28]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d1e5      	bne.n	800ac0a <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800ac3e:	e002      	b.n	800ac46 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800ac40:	2301      	movs	r3, #1
 800ac42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800ac46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac4a:	e000      	b.n	800ac4e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800ac4c:	2302      	movs	r3, #2
  }
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3730      	adds	r7, #48	; 0x30
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
	...

0800ac58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b0ba      	sub	sp, #232	; 0xe8
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	68db      	ldr	r3, [r3, #12]
 800ac70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	695b      	ldr	r3, [r3, #20]
 800ac7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ac84:	2300      	movs	r3, #0
 800ac86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ac8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac8e:	f003 030f 	and.w	r3, r3, #15
 800ac92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ac96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d10f      	bne.n	800acbe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ac9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aca2:	f003 0320 	and.w	r3, r3, #32
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d009      	beq.n	800acbe <HAL_UART_IRQHandler+0x66>
 800acaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acae:	f003 0320 	and.w	r3, r3, #32
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d003      	beq.n	800acbe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 fd87 	bl	800b7ca <UART_Receive_IT>
      return;
 800acbc:	e256      	b.n	800b16c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800acbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	f000 80de 	beq.w	800ae84 <HAL_UART_IRQHandler+0x22c>
 800acc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800accc:	f003 0301 	and.w	r3, r3, #1
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d106      	bne.n	800ace2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800acd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acd8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800acdc:	2b00      	cmp	r3, #0
 800acde:	f000 80d1 	beq.w	800ae84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ace2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ace6:	f003 0301 	and.w	r3, r3, #1
 800acea:	2b00      	cmp	r3, #0
 800acec:	d00b      	beq.n	800ad06 <HAL_UART_IRQHandler+0xae>
 800acee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d005      	beq.n	800ad06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acfe:	f043 0201 	orr.w	r2, r3, #1
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ad06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad0a:	f003 0304 	and.w	r3, r3, #4
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d00b      	beq.n	800ad2a <HAL_UART_IRQHandler+0xd2>
 800ad12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad16:	f003 0301 	and.w	r3, r3, #1
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d005      	beq.n	800ad2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad22:	f043 0202 	orr.w	r2, r3, #2
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ad2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad2e:	f003 0302 	and.w	r3, r3, #2
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d00b      	beq.n	800ad4e <HAL_UART_IRQHandler+0xf6>
 800ad36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad3a:	f003 0301 	and.w	r3, r3, #1
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d005      	beq.n	800ad4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad46:	f043 0204 	orr.w	r2, r3, #4
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ad4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad52:	f003 0308 	and.w	r3, r3, #8
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d011      	beq.n	800ad7e <HAL_UART_IRQHandler+0x126>
 800ad5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad5e:	f003 0320 	and.w	r3, r3, #32
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d105      	bne.n	800ad72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ad66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad6a:	f003 0301 	and.w	r3, r3, #1
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d005      	beq.n	800ad7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad76:	f043 0208 	orr.w	r2, r3, #8
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	f000 81ed 	beq.w	800b162 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ad88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad8c:	f003 0320 	and.w	r3, r3, #32
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d008      	beq.n	800ada6 <HAL_UART_IRQHandler+0x14e>
 800ad94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad98:	f003 0320 	and.w	r3, r3, #32
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d002      	beq.n	800ada6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 fd12 	bl	800b7ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	695b      	ldr	r3, [r3, #20]
 800adac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adb0:	2b40      	cmp	r3, #64	; 0x40
 800adb2:	bf0c      	ite	eq
 800adb4:	2301      	moveq	r3, #1
 800adb6:	2300      	movne	r3, #0
 800adb8:	b2db      	uxtb	r3, r3
 800adba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adc2:	f003 0308 	and.w	r3, r3, #8
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d103      	bne.n	800add2 <HAL_UART_IRQHandler+0x17a>
 800adca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800adce:	2b00      	cmp	r3, #0
 800add0:	d04f      	beq.n	800ae72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 fc1a 	bl	800b60c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	695b      	ldr	r3, [r3, #20]
 800adde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ade2:	2b40      	cmp	r3, #64	; 0x40
 800ade4:	d141      	bne.n	800ae6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	3314      	adds	r3, #20
 800adec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800adf4:	e853 3f00 	ldrex	r3, [r3]
 800adf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800adfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	3314      	adds	r3, #20
 800ae0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ae12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ae16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ae1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ae22:	e841 2300 	strex	r3, r2, [r1]
 800ae26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ae2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d1d9      	bne.n	800ade6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d013      	beq.n	800ae62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae3e:	4a7d      	ldr	r2, [pc, #500]	; (800b034 <HAL_UART_IRQHandler+0x3dc>)
 800ae40:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae46:	4618      	mov	r0, r3
 800ae48:	f7f8 fe3c 	bl	8003ac4 <HAL_DMA_Abort_IT>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d016      	beq.n	800ae80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae58:	687a      	ldr	r2, [r7, #4]
 800ae5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ae5c:	4610      	mov	r0, r2
 800ae5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae60:	e00e      	b.n	800ae80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f000 f9ae 	bl	800b1c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae68:	e00a      	b.n	800ae80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f000 f9aa 	bl	800b1c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae70:	e006      	b.n	800ae80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f000 f9a6 	bl	800b1c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800ae7e:	e170      	b.n	800b162 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae80:	bf00      	nop
    return;
 800ae82:	e16e      	b.n	800b162 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae88:	2b01      	cmp	r3, #1
 800ae8a:	f040 814a 	bne.w	800b122 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ae8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae92:	f003 0310 	and.w	r3, r3, #16
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	f000 8143 	beq.w	800b122 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ae9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aea0:	f003 0310 	and.w	r3, r3, #16
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	f000 813c 	beq.w	800b122 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aeaa:	2300      	movs	r3, #0
 800aeac:	60bb      	str	r3, [r7, #8]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	60bb      	str	r3, [r7, #8]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	60bb      	str	r3, [r7, #8]
 800aebe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	695b      	ldr	r3, [r3, #20]
 800aec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeca:	2b40      	cmp	r3, #64	; 0x40
 800aecc:	f040 80b4 	bne.w	800b038 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aedc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	f000 8140 	beq.w	800b166 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aeea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aeee:	429a      	cmp	r2, r3
 800aef0:	f080 8139 	bcs.w	800b166 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aefa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af00:	69db      	ldr	r3, [r3, #28]
 800af02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af06:	f000 8088 	beq.w	800b01a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	330c      	adds	r3, #12
 800af10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800af18:	e853 3f00 	ldrex	r3, [r3]
 800af1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800af20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800af24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	330c      	adds	r3, #12
 800af32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800af36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800af3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800af42:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800af46:	e841 2300 	strex	r3, r2, [r1]
 800af4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800af4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af52:	2b00      	cmp	r3, #0
 800af54:	d1d9      	bne.n	800af0a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	3314      	adds	r3, #20
 800af5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af60:	e853 3f00 	ldrex	r3, [r3]
 800af64:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800af66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af68:	f023 0301 	bic.w	r3, r3, #1
 800af6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	3314      	adds	r3, #20
 800af76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800af7a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800af7e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800af82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800af86:	e841 2300 	strex	r3, r2, [r1]
 800af8a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800af8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d1e1      	bne.n	800af56 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	3314      	adds	r3, #20
 800af98:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af9c:	e853 3f00 	ldrex	r3, [r3]
 800afa0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800afa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800afa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afa8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	3314      	adds	r3, #20
 800afb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800afb6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800afb8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800afbc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800afbe:	e841 2300 	strex	r3, r2, [r1]
 800afc2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800afc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d1e3      	bne.n	800af92 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2220      	movs	r2, #32
 800afce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2200      	movs	r2, #0
 800afd6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	330c      	adds	r3, #12
 800afde:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afe2:	e853 3f00 	ldrex	r3, [r3]
 800afe6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800afe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afea:	f023 0310 	bic.w	r3, r3, #16
 800afee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	330c      	adds	r3, #12
 800aff8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800affc:	65ba      	str	r2, [r7, #88]	; 0x58
 800affe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b000:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b002:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b004:	e841 2300 	strex	r3, r2, [r1]
 800b008:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b00a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d1e3      	bne.n	800afd8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b014:	4618      	mov	r0, r3
 800b016:	f7f8 fce5 	bl	80039e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b022:	b29b      	uxth	r3, r3
 800b024:	1ad3      	subs	r3, r2, r3
 800b026:	b29b      	uxth	r3, r3
 800b028:	4619      	mov	r1, r3
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f7f7 f82a 	bl	8002084 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b030:	e099      	b.n	800b166 <HAL_UART_IRQHandler+0x50e>
 800b032:	bf00      	nop
 800b034:	0800b6d3 	.word	0x0800b6d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b040:	b29b      	uxth	r3, r3
 800b042:	1ad3      	subs	r3, r2, r3
 800b044:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b04c:	b29b      	uxth	r3, r3
 800b04e:	2b00      	cmp	r3, #0
 800b050:	f000 808b 	beq.w	800b16a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b054:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b058:	2b00      	cmp	r3, #0
 800b05a:	f000 8086 	beq.w	800b16a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	330c      	adds	r3, #12
 800b064:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b068:	e853 3f00 	ldrex	r3, [r3]
 800b06c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b06e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b070:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b074:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	330c      	adds	r3, #12
 800b07e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b082:	647a      	str	r2, [r7, #68]	; 0x44
 800b084:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b086:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b088:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b08a:	e841 2300 	strex	r3, r2, [r1]
 800b08e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b092:	2b00      	cmp	r3, #0
 800b094:	d1e3      	bne.n	800b05e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	3314      	adds	r3, #20
 800b09c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a0:	e853 3f00 	ldrex	r3, [r3]
 800b0a4:	623b      	str	r3, [r7, #32]
   return(result);
 800b0a6:	6a3b      	ldr	r3, [r7, #32]
 800b0a8:	f023 0301 	bic.w	r3, r3, #1
 800b0ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	3314      	adds	r3, #20
 800b0b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b0ba:	633a      	str	r2, [r7, #48]	; 0x30
 800b0bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b0c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0c2:	e841 2300 	strex	r3, r2, [r1]
 800b0c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1e3      	bne.n	800b096 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2220      	movs	r2, #32
 800b0d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	330c      	adds	r3, #12
 800b0e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	e853 3f00 	ldrex	r3, [r3]
 800b0ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f023 0310 	bic.w	r3, r3, #16
 800b0f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	330c      	adds	r3, #12
 800b0fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b100:	61fa      	str	r2, [r7, #28]
 800b102:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b104:	69b9      	ldr	r1, [r7, #24]
 800b106:	69fa      	ldr	r2, [r7, #28]
 800b108:	e841 2300 	strex	r3, r2, [r1]
 800b10c:	617b      	str	r3, [r7, #20]
   return(result);
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d1e3      	bne.n	800b0dc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b114:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b118:	4619      	mov	r1, r3
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f7f6 ffb2 	bl	8002084 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b120:	e023      	b.n	800b16a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d009      	beq.n	800b142 <HAL_UART_IRQHandler+0x4ea>
 800b12e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b136:	2b00      	cmp	r3, #0
 800b138:	d003      	beq.n	800b142 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f000 fadd 	bl	800b6fa <UART_Transmit_IT>
    return;
 800b140:	e014      	b.n	800b16c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d00e      	beq.n	800b16c <HAL_UART_IRQHandler+0x514>
 800b14e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b156:	2b00      	cmp	r3, #0
 800b158:	d008      	beq.n	800b16c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f000 fb1d 	bl	800b79a <UART_EndTransmit_IT>
    return;
 800b160:	e004      	b.n	800b16c <HAL_UART_IRQHandler+0x514>
    return;
 800b162:	bf00      	nop
 800b164:	e002      	b.n	800b16c <HAL_UART_IRQHandler+0x514>
      return;
 800b166:	bf00      	nop
 800b168:	e000      	b.n	800b16c <HAL_UART_IRQHandler+0x514>
      return;
 800b16a:	bf00      	nop
  }
}
 800b16c:	37e8      	adds	r7, #232	; 0xe8
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop

0800b174 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b174:	b480      	push	{r7}
 800b176:	b083      	sub	sp, #12
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b17c:	bf00      	nop
 800b17e:	370c      	adds	r7, #12
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr

0800b188 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b188:	b480      	push	{r7}
 800b18a:	b083      	sub	sp, #12
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b190:	bf00      	nop
 800b192:	370c      	adds	r7, #12
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b1a4:	bf00      	nop
 800b1a6:	370c      	adds	r7, #12
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr

0800b1b0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b083      	sub	sp, #12
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b1b8:	bf00      	nop
 800b1ba:	370c      	adds	r7, #12
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c2:	4770      	bx	lr

0800b1c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b083      	sub	sp, #12
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b1cc:	bf00      	nop
 800b1ce:	370c      	adds	r7, #12
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b090      	sub	sp, #64	; 0x40
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d137      	bne.n	800b264 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b1f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b1fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	3314      	adds	r3, #20
 800b200:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b204:	e853 3f00 	ldrex	r3, [r3]
 800b208:	623b      	str	r3, [r7, #32]
   return(result);
 800b20a:	6a3b      	ldr	r3, [r7, #32]
 800b20c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b210:	63bb      	str	r3, [r7, #56]	; 0x38
 800b212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	3314      	adds	r3, #20
 800b218:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b21a:	633a      	str	r2, [r7, #48]	; 0x30
 800b21c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b21e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b222:	e841 2300 	strex	r3, r2, [r1]
 800b226:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d1e5      	bne.n	800b1fa <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b22e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	330c      	adds	r3, #12
 800b234:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	e853 3f00 	ldrex	r3, [r3]
 800b23c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b244:	637b      	str	r3, [r7, #52]	; 0x34
 800b246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	330c      	adds	r3, #12
 800b24c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b24e:	61fa      	str	r2, [r7, #28]
 800b250:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b252:	69b9      	ldr	r1, [r7, #24]
 800b254:	69fa      	ldr	r2, [r7, #28]
 800b256:	e841 2300 	strex	r3, r2, [r1]
 800b25a:	617b      	str	r3, [r7, #20]
   return(result);
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d1e5      	bne.n	800b22e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b262:	e002      	b.n	800b26a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b264:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b266:	f7ff ff85 	bl	800b174 <HAL_UART_TxCpltCallback>
}
 800b26a:	bf00      	nop
 800b26c:	3740      	adds	r7, #64	; 0x40
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}

0800b272 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b272:	b580      	push	{r7, lr}
 800b274:	b084      	sub	sp, #16
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b27e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b280:	68f8      	ldr	r0, [r7, #12]
 800b282:	f7ff ff81 	bl	800b188 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b286:	bf00      	nop
 800b288:	3710      	adds	r7, #16
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}

0800b28e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b28e:	b580      	push	{r7, lr}
 800b290:	b09c      	sub	sp, #112	; 0x70
 800b292:	af00      	add	r7, sp, #0
 800b294:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b29a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d172      	bne.n	800b390 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b2aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	330c      	adds	r3, #12
 800b2b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2ba:	e853 3f00 	ldrex	r3, [r3]
 800b2be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b2c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2c6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b2c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	330c      	adds	r3, #12
 800b2ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b2d0:	65ba      	str	r2, [r7, #88]	; 0x58
 800b2d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b2d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b2d8:	e841 2300 	strex	r3, r2, [r1]
 800b2dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b2de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d1e5      	bne.n	800b2b0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	3314      	adds	r3, #20
 800b2ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ee:	e853 3f00 	ldrex	r3, [r3]
 800b2f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b2f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2f6:	f023 0301 	bic.w	r3, r3, #1
 800b2fa:	667b      	str	r3, [r7, #100]	; 0x64
 800b2fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	3314      	adds	r3, #20
 800b302:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b304:	647a      	str	r2, [r7, #68]	; 0x44
 800b306:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b308:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b30a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b30c:	e841 2300 	strex	r3, r2, [r1]
 800b310:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b314:	2b00      	cmp	r3, #0
 800b316:	d1e5      	bne.n	800b2e4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	3314      	adds	r3, #20
 800b31e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b322:	e853 3f00 	ldrex	r3, [r3]
 800b326:	623b      	str	r3, [r7, #32]
   return(result);
 800b328:	6a3b      	ldr	r3, [r7, #32]
 800b32a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b32e:	663b      	str	r3, [r7, #96]	; 0x60
 800b330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	3314      	adds	r3, #20
 800b336:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b338:	633a      	str	r2, [r7, #48]	; 0x30
 800b33a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b33c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b33e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b340:	e841 2300 	strex	r3, r2, [r1]
 800b344:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d1e5      	bne.n	800b318 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b34c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b34e:	2220      	movs	r2, #32
 800b350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d119      	bne.n	800b390 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b35c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	330c      	adds	r3, #12
 800b362:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	e853 3f00 	ldrex	r3, [r3]
 800b36a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f023 0310 	bic.w	r3, r3, #16
 800b372:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	330c      	adds	r3, #12
 800b37a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b37c:	61fa      	str	r2, [r7, #28]
 800b37e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b380:	69b9      	ldr	r1, [r7, #24]
 800b382:	69fa      	ldr	r2, [r7, #28]
 800b384:	e841 2300 	strex	r3, r2, [r1]
 800b388:	617b      	str	r3, [r7, #20]
   return(result);
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d1e5      	bne.n	800b35c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b394:	2b01      	cmp	r3, #1
 800b396:	d106      	bne.n	800b3a6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b39a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b39c:	4619      	mov	r1, r3
 800b39e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b3a0:	f7f6 fe70 	bl	8002084 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b3a4:	e002      	b.n	800b3ac <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800b3a6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b3a8:	f7ff fef8 	bl	800b19c <HAL_UART_RxCpltCallback>
}
 800b3ac:	bf00      	nop
 800b3ae:	3770      	adds	r7, #112	; 0x70
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b084      	sub	sp, #16
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3c0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3c6:	2b01      	cmp	r3, #1
 800b3c8:	d108      	bne.n	800b3dc <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b3ce:	085b      	lsrs	r3, r3, #1
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	4619      	mov	r1, r3
 800b3d4:	68f8      	ldr	r0, [r7, #12]
 800b3d6:	f7f6 fe55 	bl	8002084 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b3da:	e002      	b.n	800b3e2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800b3dc:	68f8      	ldr	r0, [r7, #12]
 800b3de:	f7ff fee7 	bl	800b1b0 <HAL_UART_RxHalfCpltCallback>
}
 800b3e2:	bf00      	nop
 800b3e4:	3710      	adds	r7, #16
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}

0800b3ea <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b3ea:	b580      	push	{r7, lr}
 800b3ec:	b084      	sub	sp, #16
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3fa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	695b      	ldr	r3, [r3, #20]
 800b402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b406:	2b80      	cmp	r3, #128	; 0x80
 800b408:	bf0c      	ite	eq
 800b40a:	2301      	moveq	r3, #1
 800b40c:	2300      	movne	r3, #0
 800b40e:	b2db      	uxtb	r3, r3
 800b410:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b418:	b2db      	uxtb	r3, r3
 800b41a:	2b21      	cmp	r3, #33	; 0x21
 800b41c:	d108      	bne.n	800b430 <UART_DMAError+0x46>
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d005      	beq.n	800b430 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	2200      	movs	r2, #0
 800b428:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b42a:	68b8      	ldr	r0, [r7, #8]
 800b42c:	f000 f8c6 	bl	800b5bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	695b      	ldr	r3, [r3, #20]
 800b436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b43a:	2b40      	cmp	r3, #64	; 0x40
 800b43c:	bf0c      	ite	eq
 800b43e:	2301      	moveq	r3, #1
 800b440:	2300      	movne	r3, #0
 800b442:	b2db      	uxtb	r3, r3
 800b444:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b44c:	b2db      	uxtb	r3, r3
 800b44e:	2b22      	cmp	r3, #34	; 0x22
 800b450:	d108      	bne.n	800b464 <UART_DMAError+0x7a>
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d005      	beq.n	800b464 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	2200      	movs	r2, #0
 800b45c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b45e:	68b8      	ldr	r0, [r7, #8]
 800b460:	f000 f8d4 	bl	800b60c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b468:	f043 0210 	orr.w	r2, r3, #16
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b470:	68b8      	ldr	r0, [r7, #8]
 800b472:	f7ff fea7 	bl	800b1c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b476:	bf00      	nop
 800b478:	3710      	adds	r7, #16
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
	...

0800b480 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b098      	sub	sp, #96	; 0x60
 800b484:	af00      	add	r7, sp, #0
 800b486:	60f8      	str	r0, [r7, #12]
 800b488:	60b9      	str	r1, [r7, #8]
 800b48a:	4613      	mov	r3, r2
 800b48c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b48e:	68ba      	ldr	r2, [r7, #8]
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	88fa      	ldrh	r2, [r7, #6]
 800b498:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	2200      	movs	r2, #0
 800b49e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2222      	movs	r2, #34	; 0x22
 800b4a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4ac:	4a40      	ldr	r2, [pc, #256]	; (800b5b0 <UART_Start_Receive_DMA+0x130>)
 800b4ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4b4:	4a3f      	ldr	r2, [pc, #252]	; (800b5b4 <UART_Start_Receive_DMA+0x134>)
 800b4b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4bc:	4a3e      	ldr	r2, [pc, #248]	; (800b5b8 <UART_Start_Receive_DMA+0x138>)
 800b4be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b4c8:	f107 0308 	add.w	r3, r7, #8
 800b4cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	3304      	adds	r3, #4
 800b4d8:	4619      	mov	r1, r3
 800b4da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4dc:	681a      	ldr	r2, [r3, #0]
 800b4de:	88fb      	ldrh	r3, [r7, #6]
 800b4e0:	f7f8 fa28 	bl	8003934 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	613b      	str	r3, [r7, #16]
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	613b      	str	r3, [r7, #16]
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	685b      	ldr	r3, [r3, #4]
 800b4f6:	613b      	str	r3, [r7, #16]
 800b4f8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	691b      	ldr	r3, [r3, #16]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d019      	beq.n	800b53e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	330c      	adds	r3, #12
 800b510:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b514:	e853 3f00 	ldrex	r3, [r3]
 800b518:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b51a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b51c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b520:	65bb      	str	r3, [r7, #88]	; 0x58
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	330c      	adds	r3, #12
 800b528:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b52a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b52c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b52e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b530:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b532:	e841 2300 	strex	r3, r2, [r1]
 800b536:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d1e5      	bne.n	800b50a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	3314      	adds	r3, #20
 800b544:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b548:	e853 3f00 	ldrex	r3, [r3]
 800b54c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b550:	f043 0301 	orr.w	r3, r3, #1
 800b554:	657b      	str	r3, [r7, #84]	; 0x54
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	3314      	adds	r3, #20
 800b55c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b55e:	63ba      	str	r2, [r7, #56]	; 0x38
 800b560:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b562:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b564:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b566:	e841 2300 	strex	r3, r2, [r1]
 800b56a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d1e5      	bne.n	800b53e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	3314      	adds	r3, #20
 800b578:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b57a:	69bb      	ldr	r3, [r7, #24]
 800b57c:	e853 3f00 	ldrex	r3, [r3]
 800b580:	617b      	str	r3, [r7, #20]
   return(result);
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b588:	653b      	str	r3, [r7, #80]	; 0x50
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	3314      	adds	r3, #20
 800b590:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b592:	627a      	str	r2, [r7, #36]	; 0x24
 800b594:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b596:	6a39      	ldr	r1, [r7, #32]
 800b598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b59a:	e841 2300 	strex	r3, r2, [r1]
 800b59e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b5a0:	69fb      	ldr	r3, [r7, #28]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d1e5      	bne.n	800b572 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800b5a6:	2300      	movs	r3, #0
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3760      	adds	r7, #96	; 0x60
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}
 800b5b0:	0800b28f 	.word	0x0800b28f
 800b5b4:	0800b3b5 	.word	0x0800b3b5
 800b5b8:	0800b3eb 	.word	0x0800b3eb

0800b5bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b089      	sub	sp, #36	; 0x24
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	330c      	adds	r3, #12
 800b5ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	e853 3f00 	ldrex	r3, [r3]
 800b5d2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b5da:	61fb      	str	r3, [r7, #28]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	330c      	adds	r3, #12
 800b5e2:	69fa      	ldr	r2, [r7, #28]
 800b5e4:	61ba      	str	r2, [r7, #24]
 800b5e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5e8:	6979      	ldr	r1, [r7, #20]
 800b5ea:	69ba      	ldr	r2, [r7, #24]
 800b5ec:	e841 2300 	strex	r3, r2, [r1]
 800b5f0:	613b      	str	r3, [r7, #16]
   return(result);
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d1e5      	bne.n	800b5c4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2220      	movs	r2, #32
 800b5fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b600:	bf00      	nop
 800b602:	3724      	adds	r7, #36	; 0x24
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr

0800b60c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b095      	sub	sp, #84	; 0x54
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	330c      	adds	r3, #12
 800b61a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b61c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b61e:	e853 3f00 	ldrex	r3, [r3]
 800b622:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b626:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b62a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	330c      	adds	r3, #12
 800b632:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b634:	643a      	str	r2, [r7, #64]	; 0x40
 800b636:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b638:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b63a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b63c:	e841 2300 	strex	r3, r2, [r1]
 800b640:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b644:	2b00      	cmp	r3, #0
 800b646:	d1e5      	bne.n	800b614 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	3314      	adds	r3, #20
 800b64e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b650:	6a3b      	ldr	r3, [r7, #32]
 800b652:	e853 3f00 	ldrex	r3, [r3]
 800b656:	61fb      	str	r3, [r7, #28]
   return(result);
 800b658:	69fb      	ldr	r3, [r7, #28]
 800b65a:	f023 0301 	bic.w	r3, r3, #1
 800b65e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	3314      	adds	r3, #20
 800b666:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b668:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b66a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b66c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b66e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b670:	e841 2300 	strex	r3, r2, [r1]
 800b674:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d1e5      	bne.n	800b648 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b680:	2b01      	cmp	r3, #1
 800b682:	d119      	bne.n	800b6b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	330c      	adds	r3, #12
 800b68a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	e853 3f00 	ldrex	r3, [r3]
 800b692:	60bb      	str	r3, [r7, #8]
   return(result);
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	f023 0310 	bic.w	r3, r3, #16
 800b69a:	647b      	str	r3, [r7, #68]	; 0x44
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	330c      	adds	r3, #12
 800b6a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b6a4:	61ba      	str	r2, [r7, #24]
 800b6a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6a8:	6979      	ldr	r1, [r7, #20]
 800b6aa:	69ba      	ldr	r2, [r7, #24]
 800b6ac:	e841 2300 	strex	r3, r2, [r1]
 800b6b0:	613b      	str	r3, [r7, #16]
   return(result);
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d1e5      	bne.n	800b684 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2220      	movs	r2, #32
 800b6bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b6c6:	bf00      	nop
 800b6c8:	3754      	adds	r7, #84	; 0x54
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d0:	4770      	bx	lr

0800b6d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b6d2:	b580      	push	{r7, lr}
 800b6d4:	b084      	sub	sp, #16
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b6ec:	68f8      	ldr	r0, [r7, #12]
 800b6ee:	f7ff fd69 	bl	800b1c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6f2:	bf00      	nop
 800b6f4:	3710      	adds	r7, #16
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}

0800b6fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b6fa:	b480      	push	{r7}
 800b6fc:	b085      	sub	sp, #20
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b708:	b2db      	uxtb	r3, r3
 800b70a:	2b21      	cmp	r3, #33	; 0x21
 800b70c:	d13e      	bne.n	800b78c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	689b      	ldr	r3, [r3, #8]
 800b712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b716:	d114      	bne.n	800b742 <UART_Transmit_IT+0x48>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	691b      	ldr	r3, [r3, #16]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d110      	bne.n	800b742 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6a1b      	ldr	r3, [r3, #32]
 800b724:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	881b      	ldrh	r3, [r3, #0]
 800b72a:	461a      	mov	r2, r3
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b734:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6a1b      	ldr	r3, [r3, #32]
 800b73a:	1c9a      	adds	r2, r3, #2
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	621a      	str	r2, [r3, #32]
 800b740:	e008      	b.n	800b754 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6a1b      	ldr	r3, [r3, #32]
 800b746:	1c59      	adds	r1, r3, #1
 800b748:	687a      	ldr	r2, [r7, #4]
 800b74a:	6211      	str	r1, [r2, #32]
 800b74c:	781a      	ldrb	r2, [r3, #0]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b758:	b29b      	uxth	r3, r3
 800b75a:	3b01      	subs	r3, #1
 800b75c:	b29b      	uxth	r3, r3
 800b75e:	687a      	ldr	r2, [r7, #4]
 800b760:	4619      	mov	r1, r3
 800b762:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b764:	2b00      	cmp	r3, #0
 800b766:	d10f      	bne.n	800b788 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	68da      	ldr	r2, [r3, #12]
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b776:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	68da      	ldr	r2, [r3, #12]
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b786:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b788:	2300      	movs	r3, #0
 800b78a:	e000      	b.n	800b78e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b78c:	2302      	movs	r3, #2
  }
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3714      	adds	r7, #20
 800b792:	46bd      	mov	sp, r7
 800b794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b798:	4770      	bx	lr

0800b79a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b79a:	b580      	push	{r7, lr}
 800b79c:	b082      	sub	sp, #8
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	68da      	ldr	r2, [r3, #12]
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b7b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2220      	movs	r2, #32
 800b7b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f7ff fcda 	bl	800b174 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b7c0:	2300      	movs	r3, #0
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3708      	adds	r7, #8
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}

0800b7ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b7ca:	b580      	push	{r7, lr}
 800b7cc:	b08c      	sub	sp, #48	; 0x30
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b7d8:	b2db      	uxtb	r3, r3
 800b7da:	2b22      	cmp	r3, #34	; 0x22
 800b7dc:	f040 80ab 	bne.w	800b936 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	689b      	ldr	r3, [r3, #8]
 800b7e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7e8:	d117      	bne.n	800b81a <UART_Receive_IT+0x50>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	691b      	ldr	r3, [r3, #16]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d113      	bne.n	800b81a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7fa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	b29b      	uxth	r3, r3
 800b804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b808:	b29a      	uxth	r2, r3
 800b80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b80c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b812:	1c9a      	adds	r2, r3, #2
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	629a      	str	r2, [r3, #40]	; 0x28
 800b818:	e026      	b.n	800b868 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b81e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b820:	2300      	movs	r3, #0
 800b822:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	689b      	ldr	r3, [r3, #8]
 800b828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b82c:	d007      	beq.n	800b83e <UART_Receive_IT+0x74>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	689b      	ldr	r3, [r3, #8]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d10a      	bne.n	800b84c <UART_Receive_IT+0x82>
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	691b      	ldr	r3, [r3, #16]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d106      	bne.n	800b84c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	b2da      	uxtb	r2, r3
 800b846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b848:	701a      	strb	r2, [r3, #0]
 800b84a:	e008      	b.n	800b85e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	b2db      	uxtb	r3, r3
 800b854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b858:	b2da      	uxtb	r2, r3
 800b85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b85c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b862:	1c5a      	adds	r2, r3, #1
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	3b01      	subs	r3, #1
 800b870:	b29b      	uxth	r3, r3
 800b872:	687a      	ldr	r2, [r7, #4]
 800b874:	4619      	mov	r1, r3
 800b876:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d15a      	bne.n	800b932 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	68da      	ldr	r2, [r3, #12]
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f022 0220 	bic.w	r2, r2, #32
 800b88a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	68da      	ldr	r2, [r3, #12]
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b89a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	695a      	ldr	r2, [r3, #20]
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	f022 0201 	bic.w	r2, r2, #1
 800b8aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2220      	movs	r2, #32
 800b8b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8b8:	2b01      	cmp	r3, #1
 800b8ba:	d135      	bne.n	800b928 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	330c      	adds	r3, #12
 800b8c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	e853 3f00 	ldrex	r3, [r3]
 800b8d0:	613b      	str	r3, [r7, #16]
   return(result);
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	f023 0310 	bic.w	r3, r3, #16
 800b8d8:	627b      	str	r3, [r7, #36]	; 0x24
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	330c      	adds	r3, #12
 800b8e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8e2:	623a      	str	r2, [r7, #32]
 800b8e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8e6:	69f9      	ldr	r1, [r7, #28]
 800b8e8:	6a3a      	ldr	r2, [r7, #32]
 800b8ea:	e841 2300 	strex	r3, r2, [r1]
 800b8ee:	61bb      	str	r3, [r7, #24]
   return(result);
 800b8f0:	69bb      	ldr	r3, [r7, #24]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d1e5      	bne.n	800b8c2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f003 0310 	and.w	r3, r3, #16
 800b900:	2b10      	cmp	r3, #16
 800b902:	d10a      	bne.n	800b91a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b904:	2300      	movs	r3, #0
 800b906:	60fb      	str	r3, [r7, #12]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	60fb      	str	r3, [r7, #12]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	60fb      	str	r3, [r7, #12]
 800b918:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b91e:	4619      	mov	r1, r3
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f7f6 fbaf 	bl	8002084 <HAL_UARTEx_RxEventCallback>
 800b926:	e002      	b.n	800b92e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f7ff fc37 	bl	800b19c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b92e:	2300      	movs	r3, #0
 800b930:	e002      	b.n	800b938 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b932:	2300      	movs	r3, #0
 800b934:	e000      	b.n	800b938 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b936:	2302      	movs	r3, #2
  }
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3730      	adds	r7, #48	; 0x30
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b944:	b0c0      	sub	sp, #256	; 0x100
 800b946:	af00      	add	r7, sp, #0
 800b948:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b94c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	691b      	ldr	r3, [r3, #16]
 800b954:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b95c:	68d9      	ldr	r1, [r3, #12]
 800b95e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	ea40 0301 	orr.w	r3, r0, r1
 800b968:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b96a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b96e:	689a      	ldr	r2, [r3, #8]
 800b970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b974:	691b      	ldr	r3, [r3, #16]
 800b976:	431a      	orrs	r2, r3
 800b978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b97c:	695b      	ldr	r3, [r3, #20]
 800b97e:	431a      	orrs	r2, r3
 800b980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b984:	69db      	ldr	r3, [r3, #28]
 800b986:	4313      	orrs	r3, r2
 800b988:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b98c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	68db      	ldr	r3, [r3, #12]
 800b994:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b998:	f021 010c 	bic.w	r1, r1, #12
 800b99c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9a0:	681a      	ldr	r2, [r3, #0]
 800b9a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b9a6:	430b      	orrs	r3, r1
 800b9a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b9aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	695b      	ldr	r3, [r3, #20]
 800b9b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b9b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9ba:	6999      	ldr	r1, [r3, #24]
 800b9bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9c0:	681a      	ldr	r2, [r3, #0]
 800b9c2:	ea40 0301 	orr.w	r3, r0, r1
 800b9c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b9c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9cc:	681a      	ldr	r2, [r3, #0]
 800b9ce:	4b8f      	ldr	r3, [pc, #572]	; (800bc0c <UART_SetConfig+0x2cc>)
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	d005      	beq.n	800b9e0 <UART_SetConfig+0xa0>
 800b9d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9d8:	681a      	ldr	r2, [r3, #0]
 800b9da:	4b8d      	ldr	r3, [pc, #564]	; (800bc10 <UART_SetConfig+0x2d0>)
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d104      	bne.n	800b9ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b9e0:	f7fe fe88 	bl	800a6f4 <HAL_RCC_GetPCLK2Freq>
 800b9e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b9e8:	e003      	b.n	800b9f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b9ea:	f7fe fe6f 	bl	800a6cc <HAL_RCC_GetPCLK1Freq>
 800b9ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b9f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9f6:	69db      	ldr	r3, [r3, #28]
 800b9f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9fc:	f040 810c 	bne.w	800bc18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ba00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba04:	2200      	movs	r2, #0
 800ba06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ba0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ba0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ba12:	4622      	mov	r2, r4
 800ba14:	462b      	mov	r3, r5
 800ba16:	1891      	adds	r1, r2, r2
 800ba18:	65b9      	str	r1, [r7, #88]	; 0x58
 800ba1a:	415b      	adcs	r3, r3
 800ba1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ba1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ba22:	4621      	mov	r1, r4
 800ba24:	eb12 0801 	adds.w	r8, r2, r1
 800ba28:	4629      	mov	r1, r5
 800ba2a:	eb43 0901 	adc.w	r9, r3, r1
 800ba2e:	f04f 0200 	mov.w	r2, #0
 800ba32:	f04f 0300 	mov.w	r3, #0
 800ba36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ba3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ba3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ba42:	4690      	mov	r8, r2
 800ba44:	4699      	mov	r9, r3
 800ba46:	4623      	mov	r3, r4
 800ba48:	eb18 0303 	adds.w	r3, r8, r3
 800ba4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ba50:	462b      	mov	r3, r5
 800ba52:	eb49 0303 	adc.w	r3, r9, r3
 800ba56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ba5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	2200      	movs	r2, #0
 800ba62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ba66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ba6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ba6e:	460b      	mov	r3, r1
 800ba70:	18db      	adds	r3, r3, r3
 800ba72:	653b      	str	r3, [r7, #80]	; 0x50
 800ba74:	4613      	mov	r3, r2
 800ba76:	eb42 0303 	adc.w	r3, r2, r3
 800ba7a:	657b      	str	r3, [r7, #84]	; 0x54
 800ba7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ba80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ba84:	f7f5 f890 	bl	8000ba8 <__aeabi_uldivmod>
 800ba88:	4602      	mov	r2, r0
 800ba8a:	460b      	mov	r3, r1
 800ba8c:	4b61      	ldr	r3, [pc, #388]	; (800bc14 <UART_SetConfig+0x2d4>)
 800ba8e:	fba3 2302 	umull	r2, r3, r3, r2
 800ba92:	095b      	lsrs	r3, r3, #5
 800ba94:	011c      	lsls	r4, r3, #4
 800ba96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800baa0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800baa4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800baa8:	4642      	mov	r2, r8
 800baaa:	464b      	mov	r3, r9
 800baac:	1891      	adds	r1, r2, r2
 800baae:	64b9      	str	r1, [r7, #72]	; 0x48
 800bab0:	415b      	adcs	r3, r3
 800bab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bab4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bab8:	4641      	mov	r1, r8
 800baba:	eb12 0a01 	adds.w	sl, r2, r1
 800babe:	4649      	mov	r1, r9
 800bac0:	eb43 0b01 	adc.w	fp, r3, r1
 800bac4:	f04f 0200 	mov.w	r2, #0
 800bac8:	f04f 0300 	mov.w	r3, #0
 800bacc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bad0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bad4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bad8:	4692      	mov	sl, r2
 800bada:	469b      	mov	fp, r3
 800badc:	4643      	mov	r3, r8
 800bade:	eb1a 0303 	adds.w	r3, sl, r3
 800bae2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bae6:	464b      	mov	r3, r9
 800bae8:	eb4b 0303 	adc.w	r3, fp, r3
 800baec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800baf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baf4:	685b      	ldr	r3, [r3, #4]
 800baf6:	2200      	movs	r2, #0
 800baf8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bafc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800bb00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bb04:	460b      	mov	r3, r1
 800bb06:	18db      	adds	r3, r3, r3
 800bb08:	643b      	str	r3, [r7, #64]	; 0x40
 800bb0a:	4613      	mov	r3, r2
 800bb0c:	eb42 0303 	adc.w	r3, r2, r3
 800bb10:	647b      	str	r3, [r7, #68]	; 0x44
 800bb12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bb16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800bb1a:	f7f5 f845 	bl	8000ba8 <__aeabi_uldivmod>
 800bb1e:	4602      	mov	r2, r0
 800bb20:	460b      	mov	r3, r1
 800bb22:	4611      	mov	r1, r2
 800bb24:	4b3b      	ldr	r3, [pc, #236]	; (800bc14 <UART_SetConfig+0x2d4>)
 800bb26:	fba3 2301 	umull	r2, r3, r3, r1
 800bb2a:	095b      	lsrs	r3, r3, #5
 800bb2c:	2264      	movs	r2, #100	; 0x64
 800bb2e:	fb02 f303 	mul.w	r3, r2, r3
 800bb32:	1acb      	subs	r3, r1, r3
 800bb34:	00db      	lsls	r3, r3, #3
 800bb36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bb3a:	4b36      	ldr	r3, [pc, #216]	; (800bc14 <UART_SetConfig+0x2d4>)
 800bb3c:	fba3 2302 	umull	r2, r3, r3, r2
 800bb40:	095b      	lsrs	r3, r3, #5
 800bb42:	005b      	lsls	r3, r3, #1
 800bb44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bb48:	441c      	add	r4, r3
 800bb4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb4e:	2200      	movs	r2, #0
 800bb50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bb54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bb58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bb5c:	4642      	mov	r2, r8
 800bb5e:	464b      	mov	r3, r9
 800bb60:	1891      	adds	r1, r2, r2
 800bb62:	63b9      	str	r1, [r7, #56]	; 0x38
 800bb64:	415b      	adcs	r3, r3
 800bb66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bb6c:	4641      	mov	r1, r8
 800bb6e:	1851      	adds	r1, r2, r1
 800bb70:	6339      	str	r1, [r7, #48]	; 0x30
 800bb72:	4649      	mov	r1, r9
 800bb74:	414b      	adcs	r3, r1
 800bb76:	637b      	str	r3, [r7, #52]	; 0x34
 800bb78:	f04f 0200 	mov.w	r2, #0
 800bb7c:	f04f 0300 	mov.w	r3, #0
 800bb80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bb84:	4659      	mov	r1, fp
 800bb86:	00cb      	lsls	r3, r1, #3
 800bb88:	4651      	mov	r1, sl
 800bb8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bb8e:	4651      	mov	r1, sl
 800bb90:	00ca      	lsls	r2, r1, #3
 800bb92:	4610      	mov	r0, r2
 800bb94:	4619      	mov	r1, r3
 800bb96:	4603      	mov	r3, r0
 800bb98:	4642      	mov	r2, r8
 800bb9a:	189b      	adds	r3, r3, r2
 800bb9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bba0:	464b      	mov	r3, r9
 800bba2:	460a      	mov	r2, r1
 800bba4:	eb42 0303 	adc.w	r3, r2, r3
 800bba8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bbac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbb0:	685b      	ldr	r3, [r3, #4]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bbb8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bbbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bbc0:	460b      	mov	r3, r1
 800bbc2:	18db      	adds	r3, r3, r3
 800bbc4:	62bb      	str	r3, [r7, #40]	; 0x28
 800bbc6:	4613      	mov	r3, r2
 800bbc8:	eb42 0303 	adc.w	r3, r2, r3
 800bbcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bbce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bbd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bbd6:	f7f4 ffe7 	bl	8000ba8 <__aeabi_uldivmod>
 800bbda:	4602      	mov	r2, r0
 800bbdc:	460b      	mov	r3, r1
 800bbde:	4b0d      	ldr	r3, [pc, #52]	; (800bc14 <UART_SetConfig+0x2d4>)
 800bbe0:	fba3 1302 	umull	r1, r3, r3, r2
 800bbe4:	095b      	lsrs	r3, r3, #5
 800bbe6:	2164      	movs	r1, #100	; 0x64
 800bbe8:	fb01 f303 	mul.w	r3, r1, r3
 800bbec:	1ad3      	subs	r3, r2, r3
 800bbee:	00db      	lsls	r3, r3, #3
 800bbf0:	3332      	adds	r3, #50	; 0x32
 800bbf2:	4a08      	ldr	r2, [pc, #32]	; (800bc14 <UART_SetConfig+0x2d4>)
 800bbf4:	fba2 2303 	umull	r2, r3, r2, r3
 800bbf8:	095b      	lsrs	r3, r3, #5
 800bbfa:	f003 0207 	and.w	r2, r3, #7
 800bbfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	4422      	add	r2, r4
 800bc06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bc08:	e105      	b.n	800be16 <UART_SetConfig+0x4d6>
 800bc0a:	bf00      	nop
 800bc0c:	40011000 	.word	0x40011000
 800bc10:	40011400 	.word	0x40011400
 800bc14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bc18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bc22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bc26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bc2a:	4642      	mov	r2, r8
 800bc2c:	464b      	mov	r3, r9
 800bc2e:	1891      	adds	r1, r2, r2
 800bc30:	6239      	str	r1, [r7, #32]
 800bc32:	415b      	adcs	r3, r3
 800bc34:	627b      	str	r3, [r7, #36]	; 0x24
 800bc36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bc3a:	4641      	mov	r1, r8
 800bc3c:	1854      	adds	r4, r2, r1
 800bc3e:	4649      	mov	r1, r9
 800bc40:	eb43 0501 	adc.w	r5, r3, r1
 800bc44:	f04f 0200 	mov.w	r2, #0
 800bc48:	f04f 0300 	mov.w	r3, #0
 800bc4c:	00eb      	lsls	r3, r5, #3
 800bc4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bc52:	00e2      	lsls	r2, r4, #3
 800bc54:	4614      	mov	r4, r2
 800bc56:	461d      	mov	r5, r3
 800bc58:	4643      	mov	r3, r8
 800bc5a:	18e3      	adds	r3, r4, r3
 800bc5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bc60:	464b      	mov	r3, r9
 800bc62:	eb45 0303 	adc.w	r3, r5, r3
 800bc66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bc6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc6e:	685b      	ldr	r3, [r3, #4]
 800bc70:	2200      	movs	r2, #0
 800bc72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bc76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bc7a:	f04f 0200 	mov.w	r2, #0
 800bc7e:	f04f 0300 	mov.w	r3, #0
 800bc82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bc86:	4629      	mov	r1, r5
 800bc88:	008b      	lsls	r3, r1, #2
 800bc8a:	4621      	mov	r1, r4
 800bc8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bc90:	4621      	mov	r1, r4
 800bc92:	008a      	lsls	r2, r1, #2
 800bc94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bc98:	f7f4 ff86 	bl	8000ba8 <__aeabi_uldivmod>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	460b      	mov	r3, r1
 800bca0:	4b60      	ldr	r3, [pc, #384]	; (800be24 <UART_SetConfig+0x4e4>)
 800bca2:	fba3 2302 	umull	r2, r3, r3, r2
 800bca6:	095b      	lsrs	r3, r3, #5
 800bca8:	011c      	lsls	r4, r3, #4
 800bcaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bcae:	2200      	movs	r2, #0
 800bcb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bcb4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bcb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bcbc:	4642      	mov	r2, r8
 800bcbe:	464b      	mov	r3, r9
 800bcc0:	1891      	adds	r1, r2, r2
 800bcc2:	61b9      	str	r1, [r7, #24]
 800bcc4:	415b      	adcs	r3, r3
 800bcc6:	61fb      	str	r3, [r7, #28]
 800bcc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bccc:	4641      	mov	r1, r8
 800bcce:	1851      	adds	r1, r2, r1
 800bcd0:	6139      	str	r1, [r7, #16]
 800bcd2:	4649      	mov	r1, r9
 800bcd4:	414b      	adcs	r3, r1
 800bcd6:	617b      	str	r3, [r7, #20]
 800bcd8:	f04f 0200 	mov.w	r2, #0
 800bcdc:	f04f 0300 	mov.w	r3, #0
 800bce0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bce4:	4659      	mov	r1, fp
 800bce6:	00cb      	lsls	r3, r1, #3
 800bce8:	4651      	mov	r1, sl
 800bcea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bcee:	4651      	mov	r1, sl
 800bcf0:	00ca      	lsls	r2, r1, #3
 800bcf2:	4610      	mov	r0, r2
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	4642      	mov	r2, r8
 800bcfa:	189b      	adds	r3, r3, r2
 800bcfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bd00:	464b      	mov	r3, r9
 800bd02:	460a      	mov	r2, r1
 800bd04:	eb42 0303 	adc.w	r3, r2, r3
 800bd08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bd0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	2200      	movs	r2, #0
 800bd14:	67bb      	str	r3, [r7, #120]	; 0x78
 800bd16:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bd18:	f04f 0200 	mov.w	r2, #0
 800bd1c:	f04f 0300 	mov.w	r3, #0
 800bd20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bd24:	4649      	mov	r1, r9
 800bd26:	008b      	lsls	r3, r1, #2
 800bd28:	4641      	mov	r1, r8
 800bd2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bd2e:	4641      	mov	r1, r8
 800bd30:	008a      	lsls	r2, r1, #2
 800bd32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bd36:	f7f4 ff37 	bl	8000ba8 <__aeabi_uldivmod>
 800bd3a:	4602      	mov	r2, r0
 800bd3c:	460b      	mov	r3, r1
 800bd3e:	4b39      	ldr	r3, [pc, #228]	; (800be24 <UART_SetConfig+0x4e4>)
 800bd40:	fba3 1302 	umull	r1, r3, r3, r2
 800bd44:	095b      	lsrs	r3, r3, #5
 800bd46:	2164      	movs	r1, #100	; 0x64
 800bd48:	fb01 f303 	mul.w	r3, r1, r3
 800bd4c:	1ad3      	subs	r3, r2, r3
 800bd4e:	011b      	lsls	r3, r3, #4
 800bd50:	3332      	adds	r3, #50	; 0x32
 800bd52:	4a34      	ldr	r2, [pc, #208]	; (800be24 <UART_SetConfig+0x4e4>)
 800bd54:	fba2 2303 	umull	r2, r3, r2, r3
 800bd58:	095b      	lsrs	r3, r3, #5
 800bd5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd5e:	441c      	add	r4, r3
 800bd60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd64:	2200      	movs	r2, #0
 800bd66:	673b      	str	r3, [r7, #112]	; 0x70
 800bd68:	677a      	str	r2, [r7, #116]	; 0x74
 800bd6a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bd6e:	4642      	mov	r2, r8
 800bd70:	464b      	mov	r3, r9
 800bd72:	1891      	adds	r1, r2, r2
 800bd74:	60b9      	str	r1, [r7, #8]
 800bd76:	415b      	adcs	r3, r3
 800bd78:	60fb      	str	r3, [r7, #12]
 800bd7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bd7e:	4641      	mov	r1, r8
 800bd80:	1851      	adds	r1, r2, r1
 800bd82:	6039      	str	r1, [r7, #0]
 800bd84:	4649      	mov	r1, r9
 800bd86:	414b      	adcs	r3, r1
 800bd88:	607b      	str	r3, [r7, #4]
 800bd8a:	f04f 0200 	mov.w	r2, #0
 800bd8e:	f04f 0300 	mov.w	r3, #0
 800bd92:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bd96:	4659      	mov	r1, fp
 800bd98:	00cb      	lsls	r3, r1, #3
 800bd9a:	4651      	mov	r1, sl
 800bd9c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bda0:	4651      	mov	r1, sl
 800bda2:	00ca      	lsls	r2, r1, #3
 800bda4:	4610      	mov	r0, r2
 800bda6:	4619      	mov	r1, r3
 800bda8:	4603      	mov	r3, r0
 800bdaa:	4642      	mov	r2, r8
 800bdac:	189b      	adds	r3, r3, r2
 800bdae:	66bb      	str	r3, [r7, #104]	; 0x68
 800bdb0:	464b      	mov	r3, r9
 800bdb2:	460a      	mov	r2, r1
 800bdb4:	eb42 0303 	adc.w	r3, r2, r3
 800bdb8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bdba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdbe:	685b      	ldr	r3, [r3, #4]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	663b      	str	r3, [r7, #96]	; 0x60
 800bdc4:	667a      	str	r2, [r7, #100]	; 0x64
 800bdc6:	f04f 0200 	mov.w	r2, #0
 800bdca:	f04f 0300 	mov.w	r3, #0
 800bdce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bdd2:	4649      	mov	r1, r9
 800bdd4:	008b      	lsls	r3, r1, #2
 800bdd6:	4641      	mov	r1, r8
 800bdd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bddc:	4641      	mov	r1, r8
 800bdde:	008a      	lsls	r2, r1, #2
 800bde0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bde4:	f7f4 fee0 	bl	8000ba8 <__aeabi_uldivmod>
 800bde8:	4602      	mov	r2, r0
 800bdea:	460b      	mov	r3, r1
 800bdec:	4b0d      	ldr	r3, [pc, #52]	; (800be24 <UART_SetConfig+0x4e4>)
 800bdee:	fba3 1302 	umull	r1, r3, r3, r2
 800bdf2:	095b      	lsrs	r3, r3, #5
 800bdf4:	2164      	movs	r1, #100	; 0x64
 800bdf6:	fb01 f303 	mul.w	r3, r1, r3
 800bdfa:	1ad3      	subs	r3, r2, r3
 800bdfc:	011b      	lsls	r3, r3, #4
 800bdfe:	3332      	adds	r3, #50	; 0x32
 800be00:	4a08      	ldr	r2, [pc, #32]	; (800be24 <UART_SetConfig+0x4e4>)
 800be02:	fba2 2303 	umull	r2, r3, r2, r3
 800be06:	095b      	lsrs	r3, r3, #5
 800be08:	f003 020f 	and.w	r2, r3, #15
 800be0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	4422      	add	r2, r4
 800be14:	609a      	str	r2, [r3, #8]
}
 800be16:	bf00      	nop
 800be18:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800be1c:	46bd      	mov	sp, r7
 800be1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be22:	bf00      	nop
 800be24:	51eb851f 	.word	0x51eb851f

0800be28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800be28:	b084      	sub	sp, #16
 800be2a:	b580      	push	{r7, lr}
 800be2c:	b084      	sub	sp, #16
 800be2e:	af00      	add	r7, sp, #0
 800be30:	6078      	str	r0, [r7, #4]
 800be32:	f107 001c 	add.w	r0, r7, #28
 800be36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800be3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	d122      	bne.n	800be86 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	68db      	ldr	r3, [r3, #12]
 800be50:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800be54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	68db      	ldr	r3, [r3, #12]
 800be60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800be68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be6a:	2b01      	cmp	r3, #1
 800be6c:	d105      	bne.n	800be7a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	68db      	ldr	r3, [r3, #12]
 800be72:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 f9c0 	bl	800c200 <USB_CoreReset>
 800be80:	4603      	mov	r3, r0
 800be82:	73fb      	strb	r3, [r7, #15]
 800be84:	e01a      	b.n	800bebc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	68db      	ldr	r3, [r3, #12]
 800be8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f000 f9b4 	bl	800c200 <USB_CoreReset>
 800be98:	4603      	mov	r3, r0
 800be9a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800be9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d106      	bne.n	800beb0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bea6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	639a      	str	r2, [r3, #56]	; 0x38
 800beae:	e005      	b.n	800bebc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d10b      	bne.n	800beda <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	689b      	ldr	r3, [r3, #8]
 800bec6:	f043 0206 	orr.w	r2, r3, #6
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	689b      	ldr	r3, [r3, #8]
 800bed2:	f043 0220 	orr.w	r2, r3, #32
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800beda:	7bfb      	ldrb	r3, [r7, #15]
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3710      	adds	r7, #16
 800bee0:	46bd      	mov	sp, r7
 800bee2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bee6:	b004      	add	sp, #16
 800bee8:	4770      	bx	lr

0800beea <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800beea:	b480      	push	{r7}
 800beec:	b083      	sub	sp, #12
 800beee:	af00      	add	r7, sp, #0
 800bef0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	689b      	ldr	r3, [r3, #8]
 800bef6:	f043 0201 	orr.w	r2, r3, #1
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800befe:	2300      	movs	r3, #0
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	370c      	adds	r7, #12
 800bf04:	46bd      	mov	sp, r7
 800bf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0a:	4770      	bx	lr

0800bf0c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b083      	sub	sp, #12
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	689b      	ldr	r3, [r3, #8]
 800bf18:	f023 0201 	bic.w	r2, r3, #1
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bf20:	2300      	movs	r3, #0
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	370c      	adds	r7, #12
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr

0800bf2e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bf2e:	b580      	push	{r7, lr}
 800bf30:	b084      	sub	sp, #16
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	6078      	str	r0, [r7, #4]
 800bf36:	460b      	mov	r3, r1
 800bf38:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	68db      	ldr	r3, [r3, #12]
 800bf42:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bf4a:	78fb      	ldrb	r3, [r7, #3]
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	d115      	bne.n	800bf7c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	68db      	ldr	r3, [r3, #12]
 800bf54:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bf5c:	2001      	movs	r0, #1
 800bf5e:	f7f7 fa75 	bl	800344c <HAL_Delay>
      ms++;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	3301      	adds	r3, #1
 800bf66:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f000 f93a 	bl	800c1e2 <USB_GetMode>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	2b01      	cmp	r3, #1
 800bf72:	d01e      	beq.n	800bfb2 <USB_SetCurrentMode+0x84>
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	2b31      	cmp	r3, #49	; 0x31
 800bf78:	d9f0      	bls.n	800bf5c <USB_SetCurrentMode+0x2e>
 800bf7a:	e01a      	b.n	800bfb2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bf7c:	78fb      	ldrb	r3, [r7, #3]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d115      	bne.n	800bfae <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	68db      	ldr	r3, [r3, #12]
 800bf86:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bf8e:	2001      	movs	r0, #1
 800bf90:	f7f7 fa5c 	bl	800344c <HAL_Delay>
      ms++;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	3301      	adds	r3, #1
 800bf98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f000 f921 	bl	800c1e2 <USB_GetMode>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d005      	beq.n	800bfb2 <USB_SetCurrentMode+0x84>
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	2b31      	cmp	r3, #49	; 0x31
 800bfaa:	d9f0      	bls.n	800bf8e <USB_SetCurrentMode+0x60>
 800bfac:	e001      	b.n	800bfb2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bfae:	2301      	movs	r3, #1
 800bfb0:	e005      	b.n	800bfbe <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	2b32      	cmp	r3, #50	; 0x32
 800bfb6:	d101      	bne.n	800bfbc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bfb8:	2301      	movs	r3, #1
 800bfba:	e000      	b.n	800bfbe <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bfbc:	2300      	movs	r3, #0
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3710      	adds	r7, #16
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}
	...

0800bfc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b085      	sub	sp, #20
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	3301      	adds	r3, #1
 800bfda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	4a13      	ldr	r2, [pc, #76]	; (800c02c <USB_FlushTxFifo+0x64>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d901      	bls.n	800bfe8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bfe4:	2303      	movs	r3, #3
 800bfe6:	e01b      	b.n	800c020 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	691b      	ldr	r3, [r3, #16]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	daf2      	bge.n	800bfd6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bff0:	2300      	movs	r3, #0
 800bff2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	019b      	lsls	r3, r3, #6
 800bff8:	f043 0220 	orr.w	r2, r3, #32
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	3301      	adds	r3, #1
 800c004:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	4a08      	ldr	r2, [pc, #32]	; (800c02c <USB_FlushTxFifo+0x64>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d901      	bls.n	800c012 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c00e:	2303      	movs	r3, #3
 800c010:	e006      	b.n	800c020 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	691b      	ldr	r3, [r3, #16]
 800c016:	f003 0320 	and.w	r3, r3, #32
 800c01a:	2b20      	cmp	r3, #32
 800c01c:	d0f0      	beq.n	800c000 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c01e:	2300      	movs	r3, #0
}
 800c020:	4618      	mov	r0, r3
 800c022:	3714      	adds	r7, #20
 800c024:	46bd      	mov	sp, r7
 800c026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02a:	4770      	bx	lr
 800c02c:	00030d40 	.word	0x00030d40

0800c030 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c030:	b480      	push	{r7}
 800c032:	b085      	sub	sp, #20
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c038:	2300      	movs	r3, #0
 800c03a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	3301      	adds	r3, #1
 800c040:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	4a11      	ldr	r2, [pc, #68]	; (800c08c <USB_FlushRxFifo+0x5c>)
 800c046:	4293      	cmp	r3, r2
 800c048:	d901      	bls.n	800c04e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c04a:	2303      	movs	r3, #3
 800c04c:	e018      	b.n	800c080 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	691b      	ldr	r3, [r3, #16]
 800c052:	2b00      	cmp	r3, #0
 800c054:	daf2      	bge.n	800c03c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c056:	2300      	movs	r3, #0
 800c058:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2210      	movs	r2, #16
 800c05e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	3301      	adds	r3, #1
 800c064:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	4a08      	ldr	r2, [pc, #32]	; (800c08c <USB_FlushRxFifo+0x5c>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d901      	bls.n	800c072 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c06e:	2303      	movs	r3, #3
 800c070:	e006      	b.n	800c080 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	691b      	ldr	r3, [r3, #16]
 800c076:	f003 0310 	and.w	r3, r3, #16
 800c07a:	2b10      	cmp	r3, #16
 800c07c:	d0f0      	beq.n	800c060 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c07e:	2300      	movs	r3, #0
}
 800c080:	4618      	mov	r0, r3
 800c082:	3714      	adds	r7, #20
 800c084:	46bd      	mov	sp, r7
 800c086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08a:	4770      	bx	lr
 800c08c:	00030d40 	.word	0x00030d40

0800c090 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c090:	b480      	push	{r7}
 800c092:	b089      	sub	sp, #36	; 0x24
 800c094:	af00      	add	r7, sp, #0
 800c096:	60f8      	str	r0, [r7, #12]
 800c098:	60b9      	str	r1, [r7, #8]
 800c09a:	4611      	mov	r1, r2
 800c09c:	461a      	mov	r2, r3
 800c09e:	460b      	mov	r3, r1
 800c0a0:	71fb      	strb	r3, [r7, #7]
 800c0a2:	4613      	mov	r3, r2
 800c0a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c0ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d123      	bne.n	800c0fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c0b6:	88bb      	ldrh	r3, [r7, #4]
 800c0b8:	3303      	adds	r3, #3
 800c0ba:	089b      	lsrs	r3, r3, #2
 800c0bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c0be:	2300      	movs	r3, #0
 800c0c0:	61bb      	str	r3, [r7, #24]
 800c0c2:	e018      	b.n	800c0f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c0c4:	79fb      	ldrb	r3, [r7, #7]
 800c0c6:	031a      	lsls	r2, r3, #12
 800c0c8:	697b      	ldr	r3, [r7, #20]
 800c0ca:	4413      	add	r3, r2
 800c0cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0d0:	461a      	mov	r2, r3
 800c0d2:	69fb      	ldr	r3, [r7, #28]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c0d8:	69fb      	ldr	r3, [r7, #28]
 800c0da:	3301      	adds	r3, #1
 800c0dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c0de:	69fb      	ldr	r3, [r7, #28]
 800c0e0:	3301      	adds	r3, #1
 800c0e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c0e4:	69fb      	ldr	r3, [r7, #28]
 800c0e6:	3301      	adds	r3, #1
 800c0e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c0ea:	69fb      	ldr	r3, [r7, #28]
 800c0ec:	3301      	adds	r3, #1
 800c0ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c0f0:	69bb      	ldr	r3, [r7, #24]
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	61bb      	str	r3, [r7, #24]
 800c0f6:	69ba      	ldr	r2, [r7, #24]
 800c0f8:	693b      	ldr	r3, [r7, #16]
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	d3e2      	bcc.n	800c0c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c0fe:	2300      	movs	r3, #0
}
 800c100:	4618      	mov	r0, r3
 800c102:	3724      	adds	r7, #36	; 0x24
 800c104:	46bd      	mov	sp, r7
 800c106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10a:	4770      	bx	lr

0800c10c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c10c:	b480      	push	{r7}
 800c10e:	b08b      	sub	sp, #44	; 0x2c
 800c110:	af00      	add	r7, sp, #0
 800c112:	60f8      	str	r0, [r7, #12]
 800c114:	60b9      	str	r1, [r7, #8]
 800c116:	4613      	mov	r3, r2
 800c118:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c122:	88fb      	ldrh	r3, [r7, #6]
 800c124:	089b      	lsrs	r3, r3, #2
 800c126:	b29b      	uxth	r3, r3
 800c128:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c12a:	88fb      	ldrh	r3, [r7, #6]
 800c12c:	f003 0303 	and.w	r3, r3, #3
 800c130:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c132:	2300      	movs	r3, #0
 800c134:	623b      	str	r3, [r7, #32]
 800c136:	e014      	b.n	800c162 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c138:	69bb      	ldr	r3, [r7, #24]
 800c13a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c13e:	681a      	ldr	r2, [r3, #0]
 800c140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c142:	601a      	str	r2, [r3, #0]
    pDest++;
 800c144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c146:	3301      	adds	r3, #1
 800c148:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c14c:	3301      	adds	r3, #1
 800c14e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c152:	3301      	adds	r3, #1
 800c154:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c158:	3301      	adds	r3, #1
 800c15a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c15c:	6a3b      	ldr	r3, [r7, #32]
 800c15e:	3301      	adds	r3, #1
 800c160:	623b      	str	r3, [r7, #32]
 800c162:	6a3a      	ldr	r2, [r7, #32]
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	429a      	cmp	r2, r3
 800c168:	d3e6      	bcc.n	800c138 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c16a:	8bfb      	ldrh	r3, [r7, #30]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d01e      	beq.n	800c1ae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c170:	2300      	movs	r3, #0
 800c172:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c174:	69bb      	ldr	r3, [r7, #24]
 800c176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c17a:	461a      	mov	r2, r3
 800c17c:	f107 0310 	add.w	r3, r7, #16
 800c180:	6812      	ldr	r2, [r2, #0]
 800c182:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c184:	693a      	ldr	r2, [r7, #16]
 800c186:	6a3b      	ldr	r3, [r7, #32]
 800c188:	b2db      	uxtb	r3, r3
 800c18a:	00db      	lsls	r3, r3, #3
 800c18c:	fa22 f303 	lsr.w	r3, r2, r3
 800c190:	b2da      	uxtb	r2, r3
 800c192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c194:	701a      	strb	r2, [r3, #0]
      i++;
 800c196:	6a3b      	ldr	r3, [r7, #32]
 800c198:	3301      	adds	r3, #1
 800c19a:	623b      	str	r3, [r7, #32]
      pDest++;
 800c19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c19e:	3301      	adds	r3, #1
 800c1a0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c1a2:	8bfb      	ldrh	r3, [r7, #30]
 800c1a4:	3b01      	subs	r3, #1
 800c1a6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c1a8:	8bfb      	ldrh	r3, [r7, #30]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d1ea      	bne.n	800c184 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	372c      	adds	r7, #44	; 0x2c
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ba:	4770      	bx	lr

0800c1bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b085      	sub	sp, #20
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	695b      	ldr	r3, [r3, #20]
 800c1c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	699b      	ldr	r3, [r3, #24]
 800c1ce:	68fa      	ldr	r2, [r7, #12]
 800c1d0:	4013      	ands	r3, r2
 800c1d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	3714      	adds	r7, #20
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e0:	4770      	bx	lr

0800c1e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c1e2:	b480      	push	{r7}
 800c1e4:	b083      	sub	sp, #12
 800c1e6:	af00      	add	r7, sp, #0
 800c1e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	695b      	ldr	r3, [r3, #20]
 800c1ee:	f003 0301 	and.w	r3, r3, #1
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	370c      	adds	r7, #12
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fc:	4770      	bx	lr
	...

0800c200 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c200:	b480      	push	{r7}
 800c202:	b085      	sub	sp, #20
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c208:	2300      	movs	r3, #0
 800c20a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	3301      	adds	r3, #1
 800c210:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	4a13      	ldr	r2, [pc, #76]	; (800c264 <USB_CoreReset+0x64>)
 800c216:	4293      	cmp	r3, r2
 800c218:	d901      	bls.n	800c21e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c21a:	2303      	movs	r3, #3
 800c21c:	e01b      	b.n	800c256 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	691b      	ldr	r3, [r3, #16]
 800c222:	2b00      	cmp	r3, #0
 800c224:	daf2      	bge.n	800c20c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c226:	2300      	movs	r3, #0
 800c228:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	691b      	ldr	r3, [r3, #16]
 800c22e:	f043 0201 	orr.w	r2, r3, #1
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	3301      	adds	r3, #1
 800c23a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	4a09      	ldr	r2, [pc, #36]	; (800c264 <USB_CoreReset+0x64>)
 800c240:	4293      	cmp	r3, r2
 800c242:	d901      	bls.n	800c248 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c244:	2303      	movs	r3, #3
 800c246:	e006      	b.n	800c256 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	691b      	ldr	r3, [r3, #16]
 800c24c:	f003 0301 	and.w	r3, r3, #1
 800c250:	2b01      	cmp	r3, #1
 800c252:	d0f0      	beq.n	800c236 <USB_CoreReset+0x36>

  return HAL_OK;
 800c254:	2300      	movs	r3, #0
}
 800c256:	4618      	mov	r0, r3
 800c258:	3714      	adds	r7, #20
 800c25a:	46bd      	mov	sp, r7
 800c25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c260:	4770      	bx	lr
 800c262:	bf00      	nop
 800c264:	00030d40 	.word	0x00030d40

0800c268 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c268:	b084      	sub	sp, #16
 800c26a:	b580      	push	{r7, lr}
 800c26c:	b086      	sub	sp, #24
 800c26e:	af00      	add	r7, sp, #0
 800c270:	6078      	str	r0, [r7, #4]
 800c272:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c276:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c27a:	2300      	movs	r3, #0
 800c27c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c288:	461a      	mov	r2, r3
 800c28a:	2300      	movs	r3, #0
 800c28c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c292:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c29e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2aa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d018      	beq.n	800c2f0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800c2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c0:	2b01      	cmp	r3, #1
 800c2c2:	d10a      	bne.n	800c2da <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	68fa      	ldr	r2, [r7, #12]
 800c2ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c2d2:	f043 0304 	orr.w	r3, r3, #4
 800c2d6:	6013      	str	r3, [r2, #0]
 800c2d8:	e014      	b.n	800c304 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	68fa      	ldr	r2, [r7, #12]
 800c2e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c2e8:	f023 0304 	bic.w	r3, r3, #4
 800c2ec:	6013      	str	r3, [r2, #0]
 800c2ee:	e009      	b.n	800c304 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	68fa      	ldr	r2, [r7, #12]
 800c2fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c2fe:	f023 0304 	bic.w	r3, r3, #4
 800c302:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c304:	2110      	movs	r1, #16
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f7ff fe5e 	bl	800bfc8 <USB_FlushTxFifo>
 800c30c:	4603      	mov	r3, r0
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d001      	beq.n	800c316 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800c312:	2301      	movs	r3, #1
 800c314:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f7ff fe8a 	bl	800c030 <USB_FlushRxFifo>
 800c31c:	4603      	mov	r3, r0
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d001      	beq.n	800c326 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800c322:	2301      	movs	r3, #1
 800c324:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800c326:	2300      	movs	r3, #0
 800c328:	613b      	str	r3, [r7, #16]
 800c32a:	e015      	b.n	800c358 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	015a      	lsls	r2, r3, #5
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	4413      	add	r3, r2
 800c334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c338:	461a      	mov	r2, r3
 800c33a:	f04f 33ff 	mov.w	r3, #4294967295
 800c33e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	015a      	lsls	r2, r3, #5
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	4413      	add	r3, r2
 800c348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c34c:	461a      	mov	r2, r3
 800c34e:	2300      	movs	r3, #0
 800c350:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	3301      	adds	r3, #1
 800c356:	613b      	str	r3, [r7, #16]
 800c358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c35a:	693a      	ldr	r2, [r7, #16]
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d3e5      	bcc.n	800c32c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2200      	movs	r2, #0
 800c364:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f04f 32ff 	mov.w	r2, #4294967295
 800c36c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c376:	2b00      	cmp	r3, #0
 800c378:	d00b      	beq.n	800c392 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c380:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	4a13      	ldr	r2, [pc, #76]	; (800c3d4 <USB_HostInit+0x16c>)
 800c386:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	4a13      	ldr	r2, [pc, #76]	; (800c3d8 <USB_HostInit+0x170>)
 800c38c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800c390:	e009      	b.n	800c3a6 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2280      	movs	r2, #128	; 0x80
 800c396:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	4a10      	ldr	r2, [pc, #64]	; (800c3dc <USB_HostInit+0x174>)
 800c39c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	4a0f      	ldr	r2, [pc, #60]	; (800c3e0 <USB_HostInit+0x178>)
 800c3a2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d105      	bne.n	800c3b8 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	699b      	ldr	r3, [r3, #24]
 800c3b0:	f043 0210 	orr.w	r2, r3, #16
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	699a      	ldr	r2, [r3, #24]
 800c3bc:	4b09      	ldr	r3, [pc, #36]	; (800c3e4 <USB_HostInit+0x17c>)
 800c3be:	4313      	orrs	r3, r2
 800c3c0:	687a      	ldr	r2, [r7, #4]
 800c3c2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800c3c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3718      	adds	r7, #24
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c3d0:	b004      	add	sp, #16
 800c3d2:	4770      	bx	lr
 800c3d4:	01000200 	.word	0x01000200
 800c3d8:	00e00300 	.word	0x00e00300
 800c3dc:	00600080 	.word	0x00600080
 800c3e0:	004000e0 	.word	0x004000e0
 800c3e4:	a3200008 	.word	0xa3200008

0800c3e8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800c3e8:	b480      	push	{r7}
 800c3ea:	b085      	sub	sp, #20
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	68fa      	ldr	r2, [r7, #12]
 800c402:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c406:	f023 0303 	bic.w	r3, r3, #3
 800c40a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c412:	681a      	ldr	r2, [r3, #0]
 800c414:	78fb      	ldrb	r3, [r7, #3]
 800c416:	f003 0303 	and.w	r3, r3, #3
 800c41a:	68f9      	ldr	r1, [r7, #12]
 800c41c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c420:	4313      	orrs	r3, r2
 800c422:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800c424:	78fb      	ldrb	r3, [r7, #3]
 800c426:	2b01      	cmp	r3, #1
 800c428:	d107      	bne.n	800c43a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c430:	461a      	mov	r2, r3
 800c432:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800c436:	6053      	str	r3, [r2, #4]
 800c438:	e009      	b.n	800c44e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800c43a:	78fb      	ldrb	r3, [r7, #3]
 800c43c:	2b02      	cmp	r3, #2
 800c43e:	d106      	bne.n	800c44e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c446:	461a      	mov	r2, r3
 800c448:	f241 7370 	movw	r3, #6000	; 0x1770
 800c44c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800c44e:	2300      	movs	r3, #0
}
 800c450:	4618      	mov	r0, r3
 800c452:	3714      	adds	r7, #20
 800c454:	46bd      	mov	sp, r7
 800c456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45a:	4770      	bx	lr

0800c45c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b084      	sub	sp, #16
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800c468:	2300      	movs	r3, #0
 800c46a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c47c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	68fa      	ldr	r2, [r7, #12]
 800c482:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c48a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800c48c:	2064      	movs	r0, #100	; 0x64
 800c48e:	f7f6 ffdd 	bl	800344c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	68fa      	ldr	r2, [r7, #12]
 800c496:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c49a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c49e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800c4a0:	200a      	movs	r0, #10
 800c4a2:	f7f6 ffd3 	bl	800344c <HAL_Delay>

  return HAL_OK;
 800c4a6:	2300      	movs	r3, #0
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3710      	adds	r7, #16
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	b085      	sub	sp, #20
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	460b      	mov	r3, r1
 800c4ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c4d4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d109      	bne.n	800c4f4 <USB_DriveVbus+0x44>
 800c4e0:	78fb      	ldrb	r3, [r7, #3]
 800c4e2:	2b01      	cmp	r3, #1
 800c4e4:	d106      	bne.n	800c4f4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	68fa      	ldr	r2, [r7, #12]
 800c4ea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c4ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c4f2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c4fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4fe:	d109      	bne.n	800c514 <USB_DriveVbus+0x64>
 800c500:	78fb      	ldrb	r3, [r7, #3]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d106      	bne.n	800c514 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	68fa      	ldr	r2, [r7, #12]
 800c50a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c50e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c512:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800c514:	2300      	movs	r3, #0
}
 800c516:	4618      	mov	r0, r3
 800c518:	3714      	adds	r7, #20
 800c51a:	46bd      	mov	sp, r7
 800c51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c520:	4770      	bx	lr

0800c522 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c522:	b480      	push	{r7}
 800c524:	b085      	sub	sp, #20
 800c526:	af00      	add	r7, sp, #0
 800c528:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c52e:	2300      	movs	r3, #0
 800c530:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	0c5b      	lsrs	r3, r3, #17
 800c540:	f003 0303 	and.w	r3, r3, #3
}
 800c544:	4618      	mov	r0, r3
 800c546:	3714      	adds	r7, #20
 800c548:	46bd      	mov	sp, r7
 800c54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54e:	4770      	bx	lr

0800c550 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800c550:	b480      	push	{r7}
 800c552:	b085      	sub	sp, #20
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c562:	689b      	ldr	r3, [r3, #8]
 800c564:	b29b      	uxth	r3, r3
}
 800c566:	4618      	mov	r0, r3
 800c568:	3714      	adds	r7, #20
 800c56a:	46bd      	mov	sp, r7
 800c56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c570:	4770      	bx	lr
	...

0800c574 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b088      	sub	sp, #32
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
 800c57c:	4608      	mov	r0, r1
 800c57e:	4611      	mov	r1, r2
 800c580:	461a      	mov	r2, r3
 800c582:	4603      	mov	r3, r0
 800c584:	70fb      	strb	r3, [r7, #3]
 800c586:	460b      	mov	r3, r1
 800c588:	70bb      	strb	r3, [r7, #2]
 800c58a:	4613      	mov	r3, r2
 800c58c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800c58e:	2300      	movs	r3, #0
 800c590:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800c596:	78fb      	ldrb	r3, [r7, #3]
 800c598:	015a      	lsls	r2, r3, #5
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	4413      	add	r3, r2
 800c59e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c5a8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800c5aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c5ae:	2b03      	cmp	r3, #3
 800c5b0:	d87e      	bhi.n	800c6b0 <USB_HC_Init+0x13c>
 800c5b2:	a201      	add	r2, pc, #4	; (adr r2, 800c5b8 <USB_HC_Init+0x44>)
 800c5b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5b8:	0800c5c9 	.word	0x0800c5c9
 800c5bc:	0800c673 	.word	0x0800c673
 800c5c0:	0800c5c9 	.word	0x0800c5c9
 800c5c4:	0800c635 	.word	0x0800c635
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c5c8:	78fb      	ldrb	r3, [r7, #3]
 800c5ca:	015a      	lsls	r2, r3, #5
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	4413      	add	r3, r2
 800c5d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5d4:	461a      	mov	r2, r3
 800c5d6:	f240 439d 	movw	r3, #1181	; 0x49d
 800c5da:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800c5dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	da10      	bge.n	800c606 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c5e4:	78fb      	ldrb	r3, [r7, #3]
 800c5e6:	015a      	lsls	r2, r3, #5
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	4413      	add	r3, r2
 800c5ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5f0:	68db      	ldr	r3, [r3, #12]
 800c5f2:	78fa      	ldrb	r2, [r7, #3]
 800c5f4:	0151      	lsls	r1, r2, #5
 800c5f6:	693a      	ldr	r2, [r7, #16]
 800c5f8:	440a      	add	r2, r1
 800c5fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c5fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c602:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800c604:	e057      	b.n	800c6b6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c60a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d051      	beq.n	800c6b6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800c612:	78fb      	ldrb	r3, [r7, #3]
 800c614:	015a      	lsls	r2, r3, #5
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	4413      	add	r3, r2
 800c61a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c61e:	68db      	ldr	r3, [r3, #12]
 800c620:	78fa      	ldrb	r2, [r7, #3]
 800c622:	0151      	lsls	r1, r2, #5
 800c624:	693a      	ldr	r2, [r7, #16]
 800c626:	440a      	add	r2, r1
 800c628:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c62c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c630:	60d3      	str	r3, [r2, #12]
      break;
 800c632:	e040      	b.n	800c6b6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c634:	78fb      	ldrb	r3, [r7, #3]
 800c636:	015a      	lsls	r2, r3, #5
 800c638:	693b      	ldr	r3, [r7, #16]
 800c63a:	4413      	add	r3, r2
 800c63c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c640:	461a      	mov	r2, r3
 800c642:	f240 639d 	movw	r3, #1693	; 0x69d
 800c646:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c648:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	da34      	bge.n	800c6ba <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c650:	78fb      	ldrb	r3, [r7, #3]
 800c652:	015a      	lsls	r2, r3, #5
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	4413      	add	r3, r2
 800c658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c65c:	68db      	ldr	r3, [r3, #12]
 800c65e:	78fa      	ldrb	r2, [r7, #3]
 800c660:	0151      	lsls	r1, r2, #5
 800c662:	693a      	ldr	r2, [r7, #16]
 800c664:	440a      	add	r2, r1
 800c666:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c66a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c66e:	60d3      	str	r3, [r2, #12]
      }

      break;
 800c670:	e023      	b.n	800c6ba <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c672:	78fb      	ldrb	r3, [r7, #3]
 800c674:	015a      	lsls	r2, r3, #5
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	4413      	add	r3, r2
 800c67a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c67e:	461a      	mov	r2, r3
 800c680:	f240 2325 	movw	r3, #549	; 0x225
 800c684:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c686:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	da17      	bge.n	800c6be <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800c68e:	78fb      	ldrb	r3, [r7, #3]
 800c690:	015a      	lsls	r2, r3, #5
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	4413      	add	r3, r2
 800c696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c69a:	68db      	ldr	r3, [r3, #12]
 800c69c:	78fa      	ldrb	r2, [r7, #3]
 800c69e:	0151      	lsls	r1, r2, #5
 800c6a0:	693a      	ldr	r2, [r7, #16]
 800c6a2:	440a      	add	r2, r1
 800c6a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c6a8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800c6ac:	60d3      	str	r3, [r2, #12]
      }
      break;
 800c6ae:	e006      	b.n	800c6be <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	77fb      	strb	r3, [r7, #31]
      break;
 800c6b4:	e004      	b.n	800c6c0 <USB_HC_Init+0x14c>
      break;
 800c6b6:	bf00      	nop
 800c6b8:	e002      	b.n	800c6c0 <USB_HC_Init+0x14c>
      break;
 800c6ba:	bf00      	nop
 800c6bc:	e000      	b.n	800c6c0 <USB_HC_Init+0x14c>
      break;
 800c6be:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800c6c0:	78fb      	ldrb	r3, [r7, #3]
 800c6c2:	015a      	lsls	r2, r3, #5
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	4413      	add	r3, r2
 800c6c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6cc:	68db      	ldr	r3, [r3, #12]
 800c6ce:	78fa      	ldrb	r2, [r7, #3]
 800c6d0:	0151      	lsls	r1, r2, #5
 800c6d2:	693a      	ldr	r2, [r7, #16]
 800c6d4:	440a      	add	r2, r1
 800c6d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c6da:	f043 0302 	orr.w	r3, r3, #2
 800c6de:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c6e6:	699a      	ldr	r2, [r3, #24]
 800c6e8:	78fb      	ldrb	r3, [r7, #3]
 800c6ea:	f003 030f 	and.w	r3, r3, #15
 800c6ee:	2101      	movs	r1, #1
 800c6f0:	fa01 f303 	lsl.w	r3, r1, r3
 800c6f4:	6939      	ldr	r1, [r7, #16]
 800c6f6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c6fa:	4313      	orrs	r3, r2
 800c6fc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	699b      	ldr	r3, [r3, #24]
 800c702:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800c70a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	da03      	bge.n	800c71a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800c712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c716:	61bb      	str	r3, [r7, #24]
 800c718:	e001      	b.n	800c71e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800c71a:	2300      	movs	r3, #0
 800c71c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f7ff feff 	bl	800c522 <USB_GetHostSpeed>
 800c724:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800c726:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c72a:	2b02      	cmp	r3, #2
 800c72c:	d106      	bne.n	800c73c <USB_HC_Init+0x1c8>
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	2b02      	cmp	r3, #2
 800c732:	d003      	beq.n	800c73c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800c734:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c738:	617b      	str	r3, [r7, #20]
 800c73a:	e001      	b.n	800c740 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800c73c:	2300      	movs	r3, #0
 800c73e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c740:	787b      	ldrb	r3, [r7, #1]
 800c742:	059b      	lsls	r3, r3, #22
 800c744:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c748:	78bb      	ldrb	r3, [r7, #2]
 800c74a:	02db      	lsls	r3, r3, #11
 800c74c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c750:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c752:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c756:	049b      	lsls	r3, r3, #18
 800c758:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c75c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c75e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c760:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c764:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c766:	69bb      	ldr	r3, [r7, #24]
 800c768:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c76a:	78fb      	ldrb	r3, [r7, #3]
 800c76c:	0159      	lsls	r1, r3, #5
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	440b      	add	r3, r1
 800c772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c776:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c77c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800c77e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c782:	2b03      	cmp	r3, #3
 800c784:	d003      	beq.n	800c78e <USB_HC_Init+0x21a>
 800c786:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c78a:	2b01      	cmp	r3, #1
 800c78c:	d10f      	bne.n	800c7ae <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800c78e:	78fb      	ldrb	r3, [r7, #3]
 800c790:	015a      	lsls	r2, r3, #5
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	4413      	add	r3, r2
 800c796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	78fa      	ldrb	r2, [r7, #3]
 800c79e:	0151      	lsls	r1, r2, #5
 800c7a0:	693a      	ldr	r2, [r7, #16]
 800c7a2:	440a      	add	r2, r1
 800c7a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c7a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c7ac:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800c7ae:	7ffb      	ldrb	r3, [r7, #31]
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3720      	adds	r7, #32
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}

0800c7b8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b08c      	sub	sp, #48	; 0x30
 800c7bc:	af02      	add	r7, sp, #8
 800c7be:	60f8      	str	r0, [r7, #12]
 800c7c0:	60b9      	str	r1, [r7, #8]
 800c7c2:	4613      	mov	r3, r2
 800c7c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	785b      	ldrb	r3, [r3, #1]
 800c7ce:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800c7d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c7d4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d02d      	beq.n	800c83e <USB_HC_StartXfer+0x86>
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	791b      	ldrb	r3, [r3, #4]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d129      	bne.n	800c83e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800c7ea:	79fb      	ldrb	r3, [r7, #7]
 800c7ec:	2b01      	cmp	r3, #1
 800c7ee:	d117      	bne.n	800c820 <USB_HC_StartXfer+0x68>
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	79db      	ldrb	r3, [r3, #7]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d003      	beq.n	800c800 <USB_HC_StartXfer+0x48>
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	79db      	ldrb	r3, [r3, #7]
 800c7fc:	2b02      	cmp	r3, #2
 800c7fe:	d10f      	bne.n	800c820 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800c800:	69fb      	ldr	r3, [r7, #28]
 800c802:	015a      	lsls	r2, r3, #5
 800c804:	6a3b      	ldr	r3, [r7, #32]
 800c806:	4413      	add	r3, r2
 800c808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c80c:	68db      	ldr	r3, [r3, #12]
 800c80e:	69fa      	ldr	r2, [r7, #28]
 800c810:	0151      	lsls	r1, r2, #5
 800c812:	6a3a      	ldr	r2, [r7, #32]
 800c814:	440a      	add	r2, r1
 800c816:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c81a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c81e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800c820:	79fb      	ldrb	r3, [r7, #7]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d10b      	bne.n	800c83e <USB_HC_StartXfer+0x86>
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	795b      	ldrb	r3, [r3, #5]
 800c82a:	2b01      	cmp	r3, #1
 800c82c:	d107      	bne.n	800c83e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	785b      	ldrb	r3, [r3, #1]
 800c832:	4619      	mov	r1, r3
 800c834:	68f8      	ldr	r0, [r7, #12]
 800c836:	f000 fa0f 	bl	800cc58 <USB_DoPing>
      return HAL_OK;
 800c83a:	2300      	movs	r3, #0
 800c83c:	e0f8      	b.n	800ca30 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	695b      	ldr	r3, [r3, #20]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d018      	beq.n	800c878 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	695b      	ldr	r3, [r3, #20]
 800c84a:	68ba      	ldr	r2, [r7, #8]
 800c84c:	8912      	ldrh	r2, [r2, #8]
 800c84e:	4413      	add	r3, r2
 800c850:	3b01      	subs	r3, #1
 800c852:	68ba      	ldr	r2, [r7, #8]
 800c854:	8912      	ldrh	r2, [r2, #8]
 800c856:	fbb3 f3f2 	udiv	r3, r3, r2
 800c85a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800c85c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c85e:	8b7b      	ldrh	r3, [r7, #26]
 800c860:	429a      	cmp	r2, r3
 800c862:	d90b      	bls.n	800c87c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800c864:	8b7b      	ldrh	r3, [r7, #26]
 800c866:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c868:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c86a:	68ba      	ldr	r2, [r7, #8]
 800c86c:	8912      	ldrh	r2, [r2, #8]
 800c86e:	fb03 f202 	mul.w	r2, r3, r2
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	611a      	str	r2, [r3, #16]
 800c876:	e001      	b.n	800c87c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800c878:	2301      	movs	r3, #1
 800c87a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	78db      	ldrb	r3, [r3, #3]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d007      	beq.n	800c894 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c884:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c886:	68ba      	ldr	r2, [r7, #8]
 800c888:	8912      	ldrh	r2, [r2, #8]
 800c88a:	fb03 f202 	mul.w	r2, r3, r2
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	611a      	str	r2, [r3, #16]
 800c892:	e003      	b.n	800c89c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	695a      	ldr	r2, [r3, #20]
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	691b      	ldr	r3, [r3, #16]
 800c8a0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c8a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c8a6:	04d9      	lsls	r1, r3, #19
 800c8a8:	4b63      	ldr	r3, [pc, #396]	; (800ca38 <USB_HC_StartXfer+0x280>)
 800c8aa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c8ac:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	7a9b      	ldrb	r3, [r3, #10]
 800c8b2:	075b      	lsls	r3, r3, #29
 800c8b4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c8b8:	69f9      	ldr	r1, [r7, #28]
 800c8ba:	0148      	lsls	r0, r1, #5
 800c8bc:	6a39      	ldr	r1, [r7, #32]
 800c8be:	4401      	add	r1, r0
 800c8c0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c8c4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c8c6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800c8c8:	79fb      	ldrb	r3, [r7, #7]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d009      	beq.n	800c8e2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	68d9      	ldr	r1, [r3, #12]
 800c8d2:	69fb      	ldr	r3, [r7, #28]
 800c8d4:	015a      	lsls	r2, r3, #5
 800c8d6:	6a3b      	ldr	r3, [r7, #32]
 800c8d8:	4413      	add	r3, r2
 800c8da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8de:	460a      	mov	r2, r1
 800c8e0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800c8e2:	6a3b      	ldr	r3, [r7, #32]
 800c8e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c8e8:	689b      	ldr	r3, [r3, #8]
 800c8ea:	f003 0301 	and.w	r3, r3, #1
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	bf0c      	ite	eq
 800c8f2:	2301      	moveq	r3, #1
 800c8f4:	2300      	movne	r3, #0
 800c8f6:	b2db      	uxtb	r3, r3
 800c8f8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800c8fa:	69fb      	ldr	r3, [r7, #28]
 800c8fc:	015a      	lsls	r2, r3, #5
 800c8fe:	6a3b      	ldr	r3, [r7, #32]
 800c900:	4413      	add	r3, r2
 800c902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	69fa      	ldr	r2, [r7, #28]
 800c90a:	0151      	lsls	r1, r2, #5
 800c90c:	6a3a      	ldr	r2, [r7, #32]
 800c90e:	440a      	add	r2, r1
 800c910:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c914:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c918:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800c91a:	69fb      	ldr	r3, [r7, #28]
 800c91c:	015a      	lsls	r2, r3, #5
 800c91e:	6a3b      	ldr	r3, [r7, #32]
 800c920:	4413      	add	r3, r2
 800c922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c926:	681a      	ldr	r2, [r3, #0]
 800c928:	7e7b      	ldrb	r3, [r7, #25]
 800c92a:	075b      	lsls	r3, r3, #29
 800c92c:	69f9      	ldr	r1, [r7, #28]
 800c92e:	0148      	lsls	r0, r1, #5
 800c930:	6a39      	ldr	r1, [r7, #32]
 800c932:	4401      	add	r1, r0
 800c934:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800c938:	4313      	orrs	r3, r2
 800c93a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800c93c:	69fb      	ldr	r3, [r7, #28]
 800c93e:	015a      	lsls	r2, r3, #5
 800c940:	6a3b      	ldr	r3, [r7, #32]
 800c942:	4413      	add	r3, r2
 800c944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c94c:	693b      	ldr	r3, [r7, #16]
 800c94e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c952:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	78db      	ldrb	r3, [r3, #3]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d004      	beq.n	800c966 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c962:	613b      	str	r3, [r7, #16]
 800c964:	e003      	b.n	800c96e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c96c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c974:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800c976:	69fb      	ldr	r3, [r7, #28]
 800c978:	015a      	lsls	r2, r3, #5
 800c97a:	6a3b      	ldr	r3, [r7, #32]
 800c97c:	4413      	add	r3, r2
 800c97e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c982:	461a      	mov	r2, r3
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800c988:	79fb      	ldrb	r3, [r7, #7]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d001      	beq.n	800c992 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800c98e:	2300      	movs	r3, #0
 800c990:	e04e      	b.n	800ca30 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	78db      	ldrb	r3, [r3, #3]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d149      	bne.n	800ca2e <USB_HC_StartXfer+0x276>
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	695b      	ldr	r3, [r3, #20]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d045      	beq.n	800ca2e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	79db      	ldrb	r3, [r3, #7]
 800c9a6:	2b03      	cmp	r3, #3
 800c9a8:	d830      	bhi.n	800ca0c <USB_HC_StartXfer+0x254>
 800c9aa:	a201      	add	r2, pc, #4	; (adr r2, 800c9b0 <USB_HC_StartXfer+0x1f8>)
 800c9ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9b0:	0800c9c1 	.word	0x0800c9c1
 800c9b4:	0800c9e5 	.word	0x0800c9e5
 800c9b8:	0800c9c1 	.word	0x0800c9c1
 800c9bc:	0800c9e5 	.word	0x0800c9e5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	695b      	ldr	r3, [r3, #20]
 800c9c4:	3303      	adds	r3, #3
 800c9c6:	089b      	lsrs	r3, r3, #2
 800c9c8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800c9ca:	8afa      	ldrh	r2, [r7, #22]
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9d0:	b29b      	uxth	r3, r3
 800c9d2:	429a      	cmp	r2, r3
 800c9d4:	d91c      	bls.n	800ca10 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	699b      	ldr	r3, [r3, #24]
 800c9da:	f043 0220 	orr.w	r2, r3, #32
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	619a      	str	r2, [r3, #24]
        }
        break;
 800c9e2:	e015      	b.n	800ca10 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	695b      	ldr	r3, [r3, #20]
 800c9e8:	3303      	adds	r3, #3
 800c9ea:	089b      	lsrs	r3, r3, #2
 800c9ec:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800c9ee:	8afa      	ldrh	r2, [r7, #22]
 800c9f0:	6a3b      	ldr	r3, [r7, #32]
 800c9f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c9f6:	691b      	ldr	r3, [r3, #16]
 800c9f8:	b29b      	uxth	r3, r3
 800c9fa:	429a      	cmp	r2, r3
 800c9fc:	d90a      	bls.n	800ca14 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	699b      	ldr	r3, [r3, #24]
 800ca02:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	619a      	str	r2, [r3, #24]
        }
        break;
 800ca0a:	e003      	b.n	800ca14 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800ca0c:	bf00      	nop
 800ca0e:	e002      	b.n	800ca16 <USB_HC_StartXfer+0x25e>
        break;
 800ca10:	bf00      	nop
 800ca12:	e000      	b.n	800ca16 <USB_HC_StartXfer+0x25e>
        break;
 800ca14:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	68d9      	ldr	r1, [r3, #12]
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	785a      	ldrb	r2, [r3, #1]
 800ca1e:	68bb      	ldr	r3, [r7, #8]
 800ca20:	695b      	ldr	r3, [r3, #20]
 800ca22:	b29b      	uxth	r3, r3
 800ca24:	2000      	movs	r0, #0
 800ca26:	9000      	str	r0, [sp, #0]
 800ca28:	68f8      	ldr	r0, [r7, #12]
 800ca2a:	f7ff fb31 	bl	800c090 <USB_WritePacket>
  }

  return HAL_OK;
 800ca2e:	2300      	movs	r3, #0
}
 800ca30:	4618      	mov	r0, r3
 800ca32:	3728      	adds	r7, #40	; 0x28
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}
 800ca38:	1ff80000 	.word	0x1ff80000

0800ca3c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ca3c:	b480      	push	{r7}
 800ca3e:	b085      	sub	sp, #20
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ca4e:	695b      	ldr	r3, [r3, #20]
 800ca50:	b29b      	uxth	r3, r3
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	3714      	adds	r7, #20
 800ca56:	46bd      	mov	sp, r7
 800ca58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5c:	4770      	bx	lr

0800ca5e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ca5e:	b480      	push	{r7}
 800ca60:	b089      	sub	sp, #36	; 0x24
 800ca62:	af00      	add	r7, sp, #0
 800ca64:	6078      	str	r0, [r7, #4]
 800ca66:	460b      	mov	r3, r1
 800ca68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800ca6e:	78fb      	ldrb	r3, [r7, #3]
 800ca70:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800ca72:	2300      	movs	r3, #0
 800ca74:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ca76:	69bb      	ldr	r3, [r7, #24]
 800ca78:	015a      	lsls	r2, r3, #5
 800ca7a:	69fb      	ldr	r3, [r7, #28]
 800ca7c:	4413      	add	r3, r2
 800ca7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	0c9b      	lsrs	r3, r3, #18
 800ca86:	f003 0303 	and.w	r3, r3, #3
 800ca8a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800ca8c:	69bb      	ldr	r3, [r7, #24]
 800ca8e:	015a      	lsls	r2, r3, #5
 800ca90:	69fb      	ldr	r3, [r7, #28]
 800ca92:	4413      	add	r3, r2
 800ca94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	0fdb      	lsrs	r3, r3, #31
 800ca9c:	f003 0301 	and.w	r3, r3, #1
 800caa0:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	689b      	ldr	r3, [r3, #8]
 800caa6:	f003 0320 	and.w	r3, r3, #32
 800caaa:	2b20      	cmp	r3, #32
 800caac:	d104      	bne.n	800cab8 <USB_HC_Halt+0x5a>
 800caae:	693b      	ldr	r3, [r7, #16]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d101      	bne.n	800cab8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800cab4:	2300      	movs	r3, #0
 800cab6:	e0c8      	b.n	800cc4a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d002      	beq.n	800cac4 <USB_HC_Halt+0x66>
 800cabe:	697b      	ldr	r3, [r7, #20]
 800cac0:	2b02      	cmp	r3, #2
 800cac2:	d163      	bne.n	800cb8c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800cac4:	69bb      	ldr	r3, [r7, #24]
 800cac6:	015a      	lsls	r2, r3, #5
 800cac8:	69fb      	ldr	r3, [r7, #28]
 800caca:	4413      	add	r3, r2
 800cacc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	69ba      	ldr	r2, [r7, #24]
 800cad4:	0151      	lsls	r1, r2, #5
 800cad6:	69fa      	ldr	r2, [r7, #28]
 800cad8:	440a      	add	r2, r1
 800cada:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cade:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cae2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	689b      	ldr	r3, [r3, #8]
 800cae8:	f003 0320 	and.w	r3, r3, #32
 800caec:	2b00      	cmp	r3, #0
 800caee:	f040 80ab 	bne.w	800cc48 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caf6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d133      	bne.n	800cb66 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800cafe:	69bb      	ldr	r3, [r7, #24]
 800cb00:	015a      	lsls	r2, r3, #5
 800cb02:	69fb      	ldr	r3, [r7, #28]
 800cb04:	4413      	add	r3, r2
 800cb06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	69ba      	ldr	r2, [r7, #24]
 800cb0e:	0151      	lsls	r1, r2, #5
 800cb10:	69fa      	ldr	r2, [r7, #28]
 800cb12:	440a      	add	r2, r1
 800cb14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cb18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cb1c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cb1e:	69bb      	ldr	r3, [r7, #24]
 800cb20:	015a      	lsls	r2, r3, #5
 800cb22:	69fb      	ldr	r3, [r7, #28]
 800cb24:	4413      	add	r3, r2
 800cb26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	69ba      	ldr	r2, [r7, #24]
 800cb2e:	0151      	lsls	r1, r2, #5
 800cb30:	69fa      	ldr	r2, [r7, #28]
 800cb32:	440a      	add	r2, r1
 800cb34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cb38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cb3c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	3301      	adds	r3, #1
 800cb42:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cb4a:	d81d      	bhi.n	800cb88 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cb4c:	69bb      	ldr	r3, [r7, #24]
 800cb4e:	015a      	lsls	r2, r3, #5
 800cb50:	69fb      	ldr	r3, [r7, #28]
 800cb52:	4413      	add	r3, r2
 800cb54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb62:	d0ec      	beq.n	800cb3e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800cb64:	e070      	b.n	800cc48 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cb66:	69bb      	ldr	r3, [r7, #24]
 800cb68:	015a      	lsls	r2, r3, #5
 800cb6a:	69fb      	ldr	r3, [r7, #28]
 800cb6c:	4413      	add	r3, r2
 800cb6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	69ba      	ldr	r2, [r7, #24]
 800cb76:	0151      	lsls	r1, r2, #5
 800cb78:	69fa      	ldr	r2, [r7, #28]
 800cb7a:	440a      	add	r2, r1
 800cb7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cb80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cb84:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800cb86:	e05f      	b.n	800cc48 <USB_HC_Halt+0x1ea>
            break;
 800cb88:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800cb8a:	e05d      	b.n	800cc48 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800cb8c:	69bb      	ldr	r3, [r7, #24]
 800cb8e:	015a      	lsls	r2, r3, #5
 800cb90:	69fb      	ldr	r3, [r7, #28]
 800cb92:	4413      	add	r3, r2
 800cb94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	69ba      	ldr	r2, [r7, #24]
 800cb9c:	0151      	lsls	r1, r2, #5
 800cb9e:	69fa      	ldr	r2, [r7, #28]
 800cba0:	440a      	add	r2, r1
 800cba2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cba6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cbaa:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800cbac:	69fb      	ldr	r3, [r7, #28]
 800cbae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cbb2:	691b      	ldr	r3, [r3, #16]
 800cbb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d133      	bne.n	800cc24 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800cbbc:	69bb      	ldr	r3, [r7, #24]
 800cbbe:	015a      	lsls	r2, r3, #5
 800cbc0:	69fb      	ldr	r3, [r7, #28]
 800cbc2:	4413      	add	r3, r2
 800cbc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	69ba      	ldr	r2, [r7, #24]
 800cbcc:	0151      	lsls	r1, r2, #5
 800cbce:	69fa      	ldr	r2, [r7, #28]
 800cbd0:	440a      	add	r2, r1
 800cbd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cbd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cbda:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cbdc:	69bb      	ldr	r3, [r7, #24]
 800cbde:	015a      	lsls	r2, r3, #5
 800cbe0:	69fb      	ldr	r3, [r7, #28]
 800cbe2:	4413      	add	r3, r2
 800cbe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	69ba      	ldr	r2, [r7, #24]
 800cbec:	0151      	lsls	r1, r2, #5
 800cbee:	69fa      	ldr	r2, [r7, #28]
 800cbf0:	440a      	add	r2, r1
 800cbf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cbf6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cbfa:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	3301      	adds	r3, #1
 800cc00:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cc08:	d81d      	bhi.n	800cc46 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cc0a:	69bb      	ldr	r3, [r7, #24]
 800cc0c:	015a      	lsls	r2, r3, #5
 800cc0e:	69fb      	ldr	r3, [r7, #28]
 800cc10:	4413      	add	r3, r2
 800cc12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc20:	d0ec      	beq.n	800cbfc <USB_HC_Halt+0x19e>
 800cc22:	e011      	b.n	800cc48 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cc24:	69bb      	ldr	r3, [r7, #24]
 800cc26:	015a      	lsls	r2, r3, #5
 800cc28:	69fb      	ldr	r3, [r7, #28]
 800cc2a:	4413      	add	r3, r2
 800cc2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	69ba      	ldr	r2, [r7, #24]
 800cc34:	0151      	lsls	r1, r2, #5
 800cc36:	69fa      	ldr	r2, [r7, #28]
 800cc38:	440a      	add	r2, r1
 800cc3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cc3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cc42:	6013      	str	r3, [r2, #0]
 800cc44:	e000      	b.n	800cc48 <USB_HC_Halt+0x1ea>
          break;
 800cc46:	bf00      	nop
    }
  }

  return HAL_OK;
 800cc48:	2300      	movs	r3, #0
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3724      	adds	r7, #36	; 0x24
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc54:	4770      	bx	lr
	...

0800cc58 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b087      	sub	sp, #28
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	460b      	mov	r3, r1
 800cc62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800cc68:	78fb      	ldrb	r3, [r7, #3]
 800cc6a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	04da      	lsls	r2, r3, #19
 800cc74:	4b15      	ldr	r3, [pc, #84]	; (800cccc <USB_DoPing+0x74>)
 800cc76:	4013      	ands	r3, r2
 800cc78:	693a      	ldr	r2, [r7, #16]
 800cc7a:	0151      	lsls	r1, r2, #5
 800cc7c:	697a      	ldr	r2, [r7, #20]
 800cc7e:	440a      	add	r2, r1
 800cc80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cc84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cc88:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800cc8a:	693b      	ldr	r3, [r7, #16]
 800cc8c:	015a      	lsls	r2, r3, #5
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	4413      	add	r3, r2
 800cc92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cca0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cca8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800ccaa:	693b      	ldr	r3, [r7, #16]
 800ccac:	015a      	lsls	r2, r3, #5
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	4413      	add	r3, r2
 800ccb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ccb6:	461a      	mov	r2, r3
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800ccbc:	2300      	movs	r3, #0
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	371c      	adds	r7, #28
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc8:	4770      	bx	lr
 800ccca:	bf00      	nop
 800cccc:	1ff80000 	.word	0x1ff80000

0800ccd0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b088      	sub	sp, #32
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800cce0:	2300      	movs	r3, #0
 800cce2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f7ff f911 	bl	800bf0c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ccea:	2110      	movs	r1, #16
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f7ff f96b 	bl	800bfc8 <USB_FlushTxFifo>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d001      	beq.n	800ccfc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f7ff f997 	bl	800c030 <USB_FlushRxFifo>
 800cd02:	4603      	mov	r3, r0
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d001      	beq.n	800cd0c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800cd08:	2301      	movs	r3, #1
 800cd0a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	61bb      	str	r3, [r7, #24]
 800cd10:	e01f      	b.n	800cd52 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800cd12:	69bb      	ldr	r3, [r7, #24]
 800cd14:	015a      	lsls	r2, r3, #5
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	4413      	add	r3, r2
 800cd1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800cd22:	693b      	ldr	r3, [r7, #16]
 800cd24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cd28:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800cd2a:	693b      	ldr	r3, [r7, #16]
 800cd2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cd30:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cd38:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800cd3a:	69bb      	ldr	r3, [r7, #24]
 800cd3c:	015a      	lsls	r2, r3, #5
 800cd3e:	697b      	ldr	r3, [r7, #20]
 800cd40:	4413      	add	r3, r2
 800cd42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd46:	461a      	mov	r2, r3
 800cd48:	693b      	ldr	r3, [r7, #16]
 800cd4a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800cd4c:	69bb      	ldr	r3, [r7, #24]
 800cd4e:	3301      	adds	r3, #1
 800cd50:	61bb      	str	r3, [r7, #24]
 800cd52:	69bb      	ldr	r3, [r7, #24]
 800cd54:	2b0f      	cmp	r3, #15
 800cd56:	d9dc      	bls.n	800cd12 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800cd58:	2300      	movs	r3, #0
 800cd5a:	61bb      	str	r3, [r7, #24]
 800cd5c:	e034      	b.n	800cdc8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800cd5e:	69bb      	ldr	r3, [r7, #24]
 800cd60:	015a      	lsls	r2, r3, #5
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	4413      	add	r3, r2
 800cd66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cd74:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cd7c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800cd7e:	693b      	ldr	r3, [r7, #16]
 800cd80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cd84:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800cd86:	69bb      	ldr	r3, [r7, #24]
 800cd88:	015a      	lsls	r2, r3, #5
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	4413      	add	r3, r2
 800cd8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd92:	461a      	mov	r2, r3
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	3301      	adds	r3, #1
 800cd9c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cda4:	d80c      	bhi.n	800cdc0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cda6:	69bb      	ldr	r3, [r7, #24]
 800cda8:	015a      	lsls	r2, r3, #5
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	4413      	add	r3, r2
 800cdae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cdb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cdbc:	d0ec      	beq.n	800cd98 <USB_StopHost+0xc8>
 800cdbe:	e000      	b.n	800cdc2 <USB_StopHost+0xf2>
        break;
 800cdc0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800cdc2:	69bb      	ldr	r3, [r7, #24]
 800cdc4:	3301      	adds	r3, #1
 800cdc6:	61bb      	str	r3, [r7, #24]
 800cdc8:	69bb      	ldr	r3, [r7, #24]
 800cdca:	2b0f      	cmp	r3, #15
 800cdcc:	d9c7      	bls.n	800cd5e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800cdce:	697b      	ldr	r3, [r7, #20]
 800cdd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cdd4:	461a      	mov	r2, r3
 800cdd6:	f04f 33ff 	mov.w	r3, #4294967295
 800cdda:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f04f 32ff 	mov.w	r2, #4294967295
 800cde2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f7ff f880 	bl	800beea <USB_EnableGlobalInt>

  return ret;
 800cdea:	7ffb      	ldrb	r3, [r7, #31]
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3720      	adds	r7, #32
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800cdf8:	4904      	ldr	r1, [pc, #16]	; (800ce0c <MX_FATFS_Init+0x18>)
 800cdfa:	4805      	ldr	r0, [pc, #20]	; (800ce10 <MX_FATFS_Init+0x1c>)
 800cdfc:	f006 fb36 	bl	801346c <FATFS_LinkDriver>
 800ce00:	4603      	mov	r3, r0
 800ce02:	461a      	mov	r2, r3
 800ce04:	4b03      	ldr	r3, [pc, #12]	; (800ce14 <MX_FATFS_Init+0x20>)
 800ce06:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ce08:	bf00      	nop
 800ce0a:	bd80      	pop	{r7, pc}
 800ce0c:	20001c24 	.word	0x20001c24
 800ce10:	08016c54 	.word	0x08016c54
 800ce14:	20001c20 	.word	0x20001c20

0800ce18 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ce18:	b480      	push	{r7}
 800ce1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ce1c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	46bd      	mov	sp, r7
 800ce22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce26:	4770      	bx	lr

0800ce28 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800ce28:	b480      	push	{r7}
 800ce2a:	b083      	sub	sp, #12
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	4603      	mov	r3, r0
 800ce30:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800ce32:	2300      	movs	r3, #0
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	370c      	adds	r7, #12
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3e:	4770      	bx	lr

0800ce40 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b084      	sub	sp, #16
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	4603      	mov	r3, r0
 800ce48:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800ce4e:	79fb      	ldrb	r3, [r7, #7]
 800ce50:	4619      	mov	r1, r3
 800ce52:	4808      	ldr	r0, [pc, #32]	; (800ce74 <USBH_status+0x34>)
 800ce54:	f000 fe32 	bl	800dabc <USBH_MSC_UnitIsReady>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d002      	beq.n	800ce64 <USBH_status+0x24>
  {
    res = RES_OK;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	73fb      	strb	r3, [r7, #15]
 800ce62:	e001      	b.n	800ce68 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800ce64:	2301      	movs	r3, #1
 800ce66:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800ce68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3710      	adds	r7, #16
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
 800ce72:	bf00      	nop
 800ce74:	20002090 	.word	0x20002090

0800ce78 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b094      	sub	sp, #80	; 0x50
 800ce7c:	af02      	add	r7, sp, #8
 800ce7e:	60b9      	str	r1, [r7, #8]
 800ce80:	607a      	str	r2, [r7, #4]
 800ce82:	603b      	str	r3, [r7, #0]
 800ce84:	4603      	mov	r3, r0
 800ce86:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ce88:	2301      	movs	r3, #1
 800ce8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800ce8e:	7bf9      	ldrb	r1, [r7, #15]
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	9300      	str	r3, [sp, #0]
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	687a      	ldr	r2, [r7, #4]
 800ce98:	4813      	ldr	r0, [pc, #76]	; (800cee8 <USBH_read+0x70>)
 800ce9a:	f000 fe59 	bl	800db50 <USBH_MSC_Read>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d103      	bne.n	800ceac <USBH_read+0x34>
  {
    res = RES_OK;
 800cea4:	2300      	movs	r3, #0
 800cea6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ceaa:	e017      	b.n	800cedc <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800ceac:	f107 0210 	add.w	r2, r7, #16
 800ceb0:	7bfb      	ldrb	r3, [r7, #15]
 800ceb2:	4619      	mov	r1, r3
 800ceb4:	480c      	ldr	r0, [pc, #48]	; (800cee8 <USBH_read+0x70>)
 800ceb6:	f000 fe27 	bl	800db08 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800ceba:	7f7b      	ldrb	r3, [r7, #29]
 800cebc:	2b3a      	cmp	r3, #58	; 0x3a
 800cebe:	d005      	beq.n	800cecc <USBH_read+0x54>
 800cec0:	2b3a      	cmp	r3, #58	; 0x3a
 800cec2:	dc07      	bgt.n	800ced4 <USBH_read+0x5c>
 800cec4:	2b04      	cmp	r3, #4
 800cec6:	d001      	beq.n	800cecc <USBH_read+0x54>
 800cec8:	2b28      	cmp	r3, #40	; 0x28
 800ceca:	d103      	bne.n	800ced4 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800cecc:	2303      	movs	r3, #3
 800cece:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800ced2:	e003      	b.n	800cedc <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800ced4:	2301      	movs	r3, #1
 800ced6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800ceda:	bf00      	nop
    }
  }

  return res;
 800cedc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3748      	adds	r7, #72	; 0x48
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}
 800cee8:	20002090 	.word	0x20002090

0800ceec <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b094      	sub	sp, #80	; 0x50
 800cef0:	af02      	add	r7, sp, #8
 800cef2:	60b9      	str	r1, [r7, #8]
 800cef4:	607a      	str	r2, [r7, #4]
 800cef6:	603b      	str	r3, [r7, #0]
 800cef8:	4603      	mov	r3, r0
 800cefa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cefc:	2301      	movs	r3, #1
 800cefe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800cf02:	7bf9      	ldrb	r1, [r7, #15]
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	9300      	str	r3, [sp, #0]
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	687a      	ldr	r2, [r7, #4]
 800cf0c:	4817      	ldr	r0, [pc, #92]	; (800cf6c <USBH_write+0x80>)
 800cf0e:	f000 fe88 	bl	800dc22 <USBH_MSC_Write>
 800cf12:	4603      	mov	r3, r0
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d103      	bne.n	800cf20 <USBH_write+0x34>
  {
    res = RES_OK;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800cf1e:	e01f      	b.n	800cf60 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800cf20:	f107 0210 	add.w	r2, r7, #16
 800cf24:	7bfb      	ldrb	r3, [r7, #15]
 800cf26:	4619      	mov	r1, r3
 800cf28:	4810      	ldr	r0, [pc, #64]	; (800cf6c <USBH_write+0x80>)
 800cf2a:	f000 fded 	bl	800db08 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800cf2e:	7f7b      	ldrb	r3, [r7, #29]
 800cf30:	2b3a      	cmp	r3, #58	; 0x3a
 800cf32:	d00d      	beq.n	800cf50 <USBH_write+0x64>
 800cf34:	2b3a      	cmp	r3, #58	; 0x3a
 800cf36:	dc0f      	bgt.n	800cf58 <USBH_write+0x6c>
 800cf38:	2b28      	cmp	r3, #40	; 0x28
 800cf3a:	d009      	beq.n	800cf50 <USBH_write+0x64>
 800cf3c:	2b28      	cmp	r3, #40	; 0x28
 800cf3e:	dc0b      	bgt.n	800cf58 <USBH_write+0x6c>
 800cf40:	2b04      	cmp	r3, #4
 800cf42:	d005      	beq.n	800cf50 <USBH_write+0x64>
 800cf44:	2b27      	cmp	r3, #39	; 0x27
 800cf46:	d107      	bne.n	800cf58 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800cf48:	2302      	movs	r3, #2
 800cf4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800cf4e:	e007      	b.n	800cf60 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800cf50:	2303      	movs	r3, #3
 800cf52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800cf56:	e003      	b.n	800cf60 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800cf58:	2301      	movs	r3, #1
 800cf5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800cf5e:	bf00      	nop
    }
  }

  return res;
 800cf60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3748      	adds	r7, #72	; 0x48
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}
 800cf6c:	20002090 	.word	0x20002090

0800cf70 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b090      	sub	sp, #64	; 0x40
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	4603      	mov	r3, r0
 800cf78:	603a      	str	r2, [r7, #0]
 800cf7a:	71fb      	strb	r3, [r7, #7]
 800cf7c:	460b      	mov	r3, r1
 800cf7e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800cf80:	2301      	movs	r3, #1
 800cf82:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800cf86:	79bb      	ldrb	r3, [r7, #6]
 800cf88:	2b03      	cmp	r3, #3
 800cf8a:	d852      	bhi.n	800d032 <USBH_ioctl+0xc2>
 800cf8c:	a201      	add	r2, pc, #4	; (adr r2, 800cf94 <USBH_ioctl+0x24>)
 800cf8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf92:	bf00      	nop
 800cf94:	0800cfa5 	.word	0x0800cfa5
 800cf98:	0800cfad 	.word	0x0800cfad
 800cf9c:	0800cfd7 	.word	0x0800cfd7
 800cfa0:	0800d003 	.word	0x0800d003
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800cfaa:	e045      	b.n	800d038 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800cfac:	f107 0208 	add.w	r2, r7, #8
 800cfb0:	79fb      	ldrb	r3, [r7, #7]
 800cfb2:	4619      	mov	r1, r3
 800cfb4:	4823      	ldr	r0, [pc, #140]	; (800d044 <USBH_ioctl+0xd4>)
 800cfb6:	f000 fda7 	bl	800db08 <USBH_MSC_GetLUNInfo>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d106      	bne.n	800cfce <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800cfc0:	68fa      	ldr	r2, [r7, #12]
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800cfcc:	e034      	b.n	800d038 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800cfce:	2301      	movs	r3, #1
 800cfd0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800cfd4:	e030      	b.n	800d038 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800cfd6:	f107 0208 	add.w	r2, r7, #8
 800cfda:	79fb      	ldrb	r3, [r7, #7]
 800cfdc:	4619      	mov	r1, r3
 800cfde:	4819      	ldr	r0, [pc, #100]	; (800d044 <USBH_ioctl+0xd4>)
 800cfe0:	f000 fd92 	bl	800db08 <USBH_MSC_GetLUNInfo>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d107      	bne.n	800cffa <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800cfea:	8a3b      	ldrh	r3, [r7, #16]
 800cfec:	461a      	mov	r2, r3
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800cff2:	2300      	movs	r3, #0
 800cff4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800cff8:	e01e      	b.n	800d038 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800cffa:	2301      	movs	r3, #1
 800cffc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800d000:	e01a      	b.n	800d038 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800d002:	f107 0208 	add.w	r2, r7, #8
 800d006:	79fb      	ldrb	r3, [r7, #7]
 800d008:	4619      	mov	r1, r3
 800d00a:	480e      	ldr	r0, [pc, #56]	; (800d044 <USBH_ioctl+0xd4>)
 800d00c:	f000 fd7c 	bl	800db08 <USBH_MSC_GetLUNInfo>
 800d010:	4603      	mov	r3, r0
 800d012:	2b00      	cmp	r3, #0
 800d014:	d109      	bne.n	800d02a <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800d016:	8a3b      	ldrh	r3, [r7, #16]
 800d018:	0a5b      	lsrs	r3, r3, #9
 800d01a:	b29b      	uxth	r3, r3
 800d01c:	461a      	mov	r2, r3
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800d022:	2300      	movs	r3, #0
 800d024:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800d028:	e006      	b.n	800d038 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800d02a:	2301      	movs	r3, #1
 800d02c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800d030:	e002      	b.n	800d038 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800d032:	2304      	movs	r3, #4
 800d034:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800d038:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3740      	adds	r7, #64	; 0x40
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}
 800d044:	20002090 	.word	0x20002090

0800d048 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800d048:	b590      	push	{r4, r7, lr}
 800d04a:	b089      	sub	sp, #36	; 0x24
 800d04c:	af04      	add	r7, sp, #16
 800d04e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d056:	7919      	ldrb	r1, [r3, #4]
 800d058:	2350      	movs	r3, #80	; 0x50
 800d05a:	2206      	movs	r2, #6
 800d05c:	6878      	ldr	r0, [r7, #4]
 800d05e:	f001 fc6b 	bl	800e938 <USBH_FindInterface>
 800d062:	4603      	mov	r3, r0
 800d064:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800d066:	7bfb      	ldrb	r3, [r7, #15]
 800d068:	2bff      	cmp	r3, #255	; 0xff
 800d06a:	d002      	beq.n	800d072 <USBH_MSC_InterfaceInit+0x2a>
 800d06c:	7bfb      	ldrb	r3, [r7, #15]
 800d06e:	2b01      	cmp	r3, #1
 800d070:	d901      	bls.n	800d076 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800d072:	2302      	movs	r3, #2
 800d074:	e106      	b.n	800d284 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800d076:	7bfb      	ldrb	r3, [r7, #15]
 800d078:	4619      	mov	r1, r3
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f001 fc40 	bl	800e900 <USBH_SelectInterface>
 800d080:	4603      	mov	r3, r0
 800d082:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800d084:	7bbb      	ldrb	r3, [r7, #14]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d001      	beq.n	800d08e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800d08a:	2302      	movs	r3, #2
 800d08c:	e0fa      	b.n	800d284 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800d094:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d098:	f006 fe20 	bl	8013cdc <malloc>
 800d09c:	4603      	mov	r3, r0
 800d09e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d0a6:	69db      	ldr	r3, [r3, #28]
 800d0a8:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d101      	bne.n	800d0b4 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800d0b0:	2302      	movs	r3, #2
 800d0b2:	e0e7      	b.n	800d284 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800d0b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d0b8:	2100      	movs	r1, #0
 800d0ba:	68b8      	ldr	r0, [r7, #8]
 800d0bc:	f006 fe2c 	bl	8013d18 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800d0c0:	7bfb      	ldrb	r3, [r7, #15]
 800d0c2:	687a      	ldr	r2, [r7, #4]
 800d0c4:	211a      	movs	r1, #26
 800d0c6:	fb01 f303 	mul.w	r3, r1, r3
 800d0ca:	4413      	add	r3, r2
 800d0cc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d0d0:	781b      	ldrb	r3, [r3, #0]
 800d0d2:	b25b      	sxtb	r3, r3
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	da16      	bge.n	800d106 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800d0d8:	7bfb      	ldrb	r3, [r7, #15]
 800d0da:	687a      	ldr	r2, [r7, #4]
 800d0dc:	211a      	movs	r1, #26
 800d0de:	fb01 f303 	mul.w	r3, r1, r3
 800d0e2:	4413      	add	r3, r2
 800d0e4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d0e8:	781a      	ldrb	r2, [r3, #0]
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d0ee:	7bfb      	ldrb	r3, [r7, #15]
 800d0f0:	687a      	ldr	r2, [r7, #4]
 800d0f2:	211a      	movs	r1, #26
 800d0f4:	fb01 f303 	mul.w	r3, r1, r3
 800d0f8:	4413      	add	r3, r2
 800d0fa:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800d0fe:	881a      	ldrh	r2, [r3, #0]
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	815a      	strh	r2, [r3, #10]
 800d104:	e015      	b.n	800d132 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800d106:	7bfb      	ldrb	r3, [r7, #15]
 800d108:	687a      	ldr	r2, [r7, #4]
 800d10a:	211a      	movs	r1, #26
 800d10c:	fb01 f303 	mul.w	r3, r1, r3
 800d110:	4413      	add	r3, r2
 800d112:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d116:	781a      	ldrb	r2, [r3, #0]
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d11c:	7bfb      	ldrb	r3, [r7, #15]
 800d11e:	687a      	ldr	r2, [r7, #4]
 800d120:	211a      	movs	r1, #26
 800d122:	fb01 f303 	mul.w	r3, r1, r3
 800d126:	4413      	add	r3, r2
 800d128:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800d12c:	881a      	ldrh	r2, [r3, #0]
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800d132:	7bfb      	ldrb	r3, [r7, #15]
 800d134:	687a      	ldr	r2, [r7, #4]
 800d136:	211a      	movs	r1, #26
 800d138:	fb01 f303 	mul.w	r3, r1, r3
 800d13c:	4413      	add	r3, r2
 800d13e:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d142:	781b      	ldrb	r3, [r3, #0]
 800d144:	b25b      	sxtb	r3, r3
 800d146:	2b00      	cmp	r3, #0
 800d148:	da16      	bge.n	800d178 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800d14a:	7bfb      	ldrb	r3, [r7, #15]
 800d14c:	687a      	ldr	r2, [r7, #4]
 800d14e:	211a      	movs	r1, #26
 800d150:	fb01 f303 	mul.w	r3, r1, r3
 800d154:	4413      	add	r3, r2
 800d156:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d15a:	781a      	ldrb	r2, [r3, #0]
 800d15c:	68bb      	ldr	r3, [r7, #8]
 800d15e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800d160:	7bfb      	ldrb	r3, [r7, #15]
 800d162:	687a      	ldr	r2, [r7, #4]
 800d164:	211a      	movs	r1, #26
 800d166:	fb01 f303 	mul.w	r3, r1, r3
 800d16a:	4413      	add	r3, r2
 800d16c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800d170:	881a      	ldrh	r2, [r3, #0]
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	815a      	strh	r2, [r3, #10]
 800d176:	e015      	b.n	800d1a4 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800d178:	7bfb      	ldrb	r3, [r7, #15]
 800d17a:	687a      	ldr	r2, [r7, #4]
 800d17c:	211a      	movs	r1, #26
 800d17e:	fb01 f303 	mul.w	r3, r1, r3
 800d182:	4413      	add	r3, r2
 800d184:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d188:	781a      	ldrb	r2, [r3, #0]
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800d18e:	7bfb      	ldrb	r3, [r7, #15]
 800d190:	687a      	ldr	r2, [r7, #4]
 800d192:	211a      	movs	r1, #26
 800d194:	fb01 f303 	mul.w	r3, r1, r3
 800d198:	4413      	add	r3, r2
 800d19a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800d19e:	881a      	ldrh	r2, [r3, #0]
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	799b      	ldrb	r3, [r3, #6]
 800d1ba:	4619      	mov	r1, r3
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f002 fed6 	bl	800ff6e <USBH_AllocPipe>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	461a      	mov	r2, r3
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	79db      	ldrb	r3, [r3, #7]
 800d1ce:	4619      	mov	r1, r3
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f002 fecc 	bl	800ff6e <USBH_AllocPipe>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	461a      	mov	r2, r3
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f000 fdc4 	bl	800dd6c <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	799b      	ldrb	r3, [r3, #6]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d01e      	beq.n	800d22a <USBH_MSC_InterfaceInit+0x1e2>
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	891b      	ldrh	r3, [r3, #8]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d01a      	beq.n	800d22a <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	7959      	ldrb	r1, [r3, #5]
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	7998      	ldrb	r0, [r3, #6]
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d208:	68ba      	ldr	r2, [r7, #8]
 800d20a:	8912      	ldrh	r2, [r2, #8]
 800d20c:	9202      	str	r2, [sp, #8]
 800d20e:	2202      	movs	r2, #2
 800d210:	9201      	str	r2, [sp, #4]
 800d212:	9300      	str	r3, [sp, #0]
 800d214:	4623      	mov	r3, r4
 800d216:	4602      	mov	r2, r0
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f002 fe79 	bl	800ff10 <USBH_OpenPipe>
 800d21e:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	79db      	ldrb	r3, [r3, #7]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d02c      	beq.n	800d282 <USBH_MSC_InterfaceInit+0x23a>
 800d228:	e001      	b.n	800d22e <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 800d22a:	2303      	movs	r3, #3
 800d22c:	e02a      	b.n	800d284 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	895b      	ldrh	r3, [r3, #10]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d025      	beq.n	800d282 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	7919      	ldrb	r1, [r3, #4]
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	79d8      	ldrb	r0, [r3, #7]
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d24a:	68ba      	ldr	r2, [r7, #8]
 800d24c:	8952      	ldrh	r2, [r2, #10]
 800d24e:	9202      	str	r2, [sp, #8]
 800d250:	2202      	movs	r2, #2
 800d252:	9201      	str	r2, [sp, #4]
 800d254:	9300      	str	r3, [sp, #0]
 800d256:	4623      	mov	r3, r4
 800d258:	4602      	mov	r2, r0
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f002 fe58 	bl	800ff10 <USBH_OpenPipe>
 800d260:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800d262:	68bb      	ldr	r3, [r7, #8]
 800d264:	791b      	ldrb	r3, [r3, #4]
 800d266:	2200      	movs	r2, #0
 800d268:	4619      	mov	r1, r3
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f006 fc58 	bl	8013b20 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	795b      	ldrb	r3, [r3, #5]
 800d274:	2200      	movs	r2, #0
 800d276:	4619      	mov	r1, r3
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f006 fc51 	bl	8013b20 <USBH_LL_SetToggle>

  return USBH_OK;
 800d27e:	2300      	movs	r3, #0
 800d280:	e000      	b.n	800d284 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800d282:	2303      	movs	r3, #3
}
 800d284:	4618      	mov	r0, r3
 800d286:	3714      	adds	r7, #20
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd90      	pop	{r4, r7, pc}

0800d28c <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b084      	sub	sp, #16
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d29a:	69db      	ldr	r3, [r3, #28]
 800d29c:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	795b      	ldrb	r3, [r3, #5]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d00e      	beq.n	800d2c4 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	795b      	ldrb	r3, [r3, #5]
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	f002 fe4e 	bl	800ff4e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	795b      	ldrb	r3, [r3, #5]
 800d2b6:	4619      	mov	r1, r3
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f002 fe79 	bl	800ffb0 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	791b      	ldrb	r3, [r3, #4]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d00e      	beq.n	800d2ea <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	791b      	ldrb	r3, [r3, #4]
 800d2d0:	4619      	mov	r1, r3
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f002 fe3b 	bl	800ff4e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	791b      	ldrb	r3, [r3, #4]
 800d2dc:	4619      	mov	r1, r3
 800d2de:	6878      	ldr	r0, [r7, #4]
 800d2e0:	f002 fe66 	bl	800ffb0 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d2f0:	69db      	ldr	r3, [r3, #28]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d00b      	beq.n	800d30e <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d2fc:	69db      	ldr	r3, [r3, #28]
 800d2fe:	4618      	mov	r0, r3
 800d300:	f006 fcf4 	bl	8013cec <free>
    phost->pActiveClass->pData = 0U;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d30a:	2200      	movs	r2, #0
 800d30c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800d30e:	2300      	movs	r3, #0
}
 800d310:	4618      	mov	r0, r3
 800d312:	3710      	adds	r7, #16
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}

0800d318 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b084      	sub	sp, #16
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d326:	69db      	ldr	r3, [r3, #28]
 800d328:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800d32a:	2301      	movs	r3, #1
 800d32c:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	7b9b      	ldrb	r3, [r3, #14]
 800d332:	2b03      	cmp	r3, #3
 800d334:	d041      	beq.n	800d3ba <USBH_MSC_ClassRequest+0xa2>
 800d336:	2b03      	cmp	r3, #3
 800d338:	dc4b      	bgt.n	800d3d2 <USBH_MSC_ClassRequest+0xba>
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d001      	beq.n	800d342 <USBH_MSC_ClassRequest+0x2a>
 800d33e:	2b02      	cmp	r3, #2
 800d340:	d147      	bne.n	800d3d2 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	4619      	mov	r1, r3
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f000 fcf1 	bl	800dd2e <USBH_MSC_BOT_REQ_GetMaxLUN>
 800d34c:	4603      	mov	r3, r0
 800d34e:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800d350:	7bfb      	ldrb	r3, [r7, #15]
 800d352:	2b03      	cmp	r3, #3
 800d354:	d104      	bne.n	800d360 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	2200      	movs	r2, #0
 800d35a:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800d35c:	2300      	movs	r3, #0
 800d35e:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800d360:	7bfb      	ldrb	r3, [r7, #15]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d137      	bne.n	800d3d6 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	781b      	ldrb	r3, [r3, #0]
 800d36a:	2b02      	cmp	r3, #2
 800d36c:	d804      	bhi.n	800d378 <USBH_MSC_ClassRequest+0x60>
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	781b      	ldrb	r3, [r3, #0]
 800d372:	3301      	adds	r3, #1
 800d374:	b2da      	uxtb	r2, r3
 800d376:	e000      	b.n	800d37a <USBH_MSC_ClassRequest+0x62>
 800d378:	2202      	movs	r2, #2
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800d37e:	2300      	movs	r3, #0
 800d380:	73bb      	strb	r3, [r7, #14]
 800d382:	e014      	b.n	800d3ae <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800d384:	7bbb      	ldrb	r3, [r7, #14]
 800d386:	68ba      	ldr	r2, [r7, #8]
 800d388:	2134      	movs	r1, #52	; 0x34
 800d38a:	fb01 f303 	mul.w	r3, r1, r3
 800d38e:	4413      	add	r3, r2
 800d390:	3392      	adds	r3, #146	; 0x92
 800d392:	2202      	movs	r2, #2
 800d394:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800d396:	7bbb      	ldrb	r3, [r7, #14]
 800d398:	68ba      	ldr	r2, [r7, #8]
 800d39a:	2134      	movs	r1, #52	; 0x34
 800d39c:	fb01 f303 	mul.w	r3, r1, r3
 800d3a0:	4413      	add	r3, r2
 800d3a2:	33c1      	adds	r3, #193	; 0xc1
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800d3a8:	7bbb      	ldrb	r3, [r7, #14]
 800d3aa:	3301      	adds	r3, #1
 800d3ac:	73bb      	strb	r3, [r7, #14]
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	781b      	ldrb	r3, [r3, #0]
 800d3b2:	7bba      	ldrb	r2, [r7, #14]
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	d3e5      	bcc.n	800d384 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800d3b8:	e00d      	b.n	800d3d6 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800d3ba:	2100      	movs	r1, #0
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f002 f888 	bl	800f4d2 <USBH_ClrFeature>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d108      	bne.n	800d3da <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	7bda      	ldrb	r2, [r3, #15]
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	739a      	strb	r2, [r3, #14]
      }
      break;
 800d3d0:	e003      	b.n	800d3da <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800d3d2:	bf00      	nop
 800d3d4:	e002      	b.n	800d3dc <USBH_MSC_ClassRequest+0xc4>
      break;
 800d3d6:	bf00      	nop
 800d3d8:	e000      	b.n	800d3dc <USBH_MSC_ClassRequest+0xc4>
      break;
 800d3da:	bf00      	nop
  }

  return status;
 800d3dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3710      	adds	r7, #16
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}
	...

0800d3e8 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b086      	sub	sp, #24
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d3f6:	69db      	ldr	r3, [r3, #28]
 800d3f8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800d3fe:	2301      	movs	r3, #1
 800d400:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800d402:	2301      	movs	r3, #1
 800d404:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800d406:	693b      	ldr	r3, [r7, #16]
 800d408:	7b1b      	ldrb	r3, [r3, #12]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d003      	beq.n	800d416 <USBH_MSC_Process+0x2e>
 800d40e:	2b01      	cmp	r3, #1
 800d410:	f000 8271 	beq.w	800d8f6 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800d414:	e272      	b.n	800d8fc <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800d41c:	693b      	ldr	r3, [r7, #16]
 800d41e:	781b      	ldrb	r3, [r3, #0]
 800d420:	b29b      	uxth	r3, r3
 800d422:	429a      	cmp	r2, r3
 800d424:	f080 824f 	bcs.w	800d8c6 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800d428:	693b      	ldr	r3, [r7, #16]
 800d42a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d42e:	4619      	mov	r1, r3
 800d430:	693a      	ldr	r2, [r7, #16]
 800d432:	2334      	movs	r3, #52	; 0x34
 800d434:	fb01 f303 	mul.w	r3, r1, r3
 800d438:	4413      	add	r3, r2
 800d43a:	3391      	adds	r3, #145	; 0x91
 800d43c:	2201      	movs	r2, #1
 800d43e:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d446:	4619      	mov	r1, r3
 800d448:	693a      	ldr	r2, [r7, #16]
 800d44a:	2334      	movs	r3, #52	; 0x34
 800d44c:	fb01 f303 	mul.w	r3, r1, r3
 800d450:	4413      	add	r3, r2
 800d452:	3390      	adds	r3, #144	; 0x90
 800d454:	781b      	ldrb	r3, [r3, #0]
 800d456:	2b08      	cmp	r3, #8
 800d458:	f200 8243 	bhi.w	800d8e2 <USBH_MSC_Process+0x4fa>
 800d45c:	a201      	add	r2, pc, #4	; (adr r2, 800d464 <USBH_MSC_Process+0x7c>)
 800d45e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d462:	bf00      	nop
 800d464:	0800d489 	.word	0x0800d489
 800d468:	0800d8e3 	.word	0x0800d8e3
 800d46c:	0800d551 	.word	0x0800d551
 800d470:	0800d6d5 	.word	0x0800d6d5
 800d474:	0800d4af 	.word	0x0800d4af
 800d478:	0800d7a1 	.word	0x0800d7a1
 800d47c:	0800d8e3 	.word	0x0800d8e3
 800d480:	0800d8e3 	.word	0x0800d8e3
 800d484:	0800d8b5 	.word	0x0800d8b5
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d48e:	4619      	mov	r1, r3
 800d490:	693a      	ldr	r2, [r7, #16]
 800d492:	2334      	movs	r3, #52	; 0x34
 800d494:	fb01 f303 	mul.w	r3, r1, r3
 800d498:	4413      	add	r3, r2
 800d49a:	3390      	adds	r3, #144	; 0x90
 800d49c:	2204      	movs	r2, #4
 800d49e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800d4a6:	693b      	ldr	r3, [r7, #16]
 800d4a8:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800d4ac:	e222      	b.n	800d8f4 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d4b4:	b2d9      	uxtb	r1, r3
 800d4b6:	693b      	ldr	r3, [r7, #16]
 800d4b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d4bc:	461a      	mov	r2, r3
 800d4be:	2334      	movs	r3, #52	; 0x34
 800d4c0:	fb02 f303 	mul.w	r3, r2, r3
 800d4c4:	3398      	adds	r3, #152	; 0x98
 800d4c6:	693a      	ldr	r2, [r7, #16]
 800d4c8:	4413      	add	r3, r2
 800d4ca:	3307      	adds	r3, #7
 800d4cc:	461a      	mov	r2, r3
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f000 ff6a 	bl	800e3a8 <USBH_MSC_SCSI_Inquiry>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800d4d8:	7bfb      	ldrb	r3, [r7, #15]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d10b      	bne.n	800d4f6 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d4e4:	4619      	mov	r1, r3
 800d4e6:	693a      	ldr	r2, [r7, #16]
 800d4e8:	2334      	movs	r3, #52	; 0x34
 800d4ea:	fb01 f303 	mul.w	r3, r1, r3
 800d4ee:	4413      	add	r3, r2
 800d4f0:	3390      	adds	r3, #144	; 0x90
 800d4f2:	2202      	movs	r2, #2
 800d4f4:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800d4f6:	7bfb      	ldrb	r3, [r7, #15]
 800d4f8:	2b02      	cmp	r3, #2
 800d4fa:	d10c      	bne.n	800d516 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800d4fc:	693b      	ldr	r3, [r7, #16]
 800d4fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d502:	4619      	mov	r1, r3
 800d504:	693a      	ldr	r2, [r7, #16]
 800d506:	2334      	movs	r3, #52	; 0x34
 800d508:	fb01 f303 	mul.w	r3, r1, r3
 800d50c:	4413      	add	r3, r2
 800d50e:	3390      	adds	r3, #144	; 0x90
 800d510:	2205      	movs	r2, #5
 800d512:	701a      	strb	r2, [r3, #0]
            break;
 800d514:	e1e7      	b.n	800d8e6 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800d516:	7bfb      	ldrb	r3, [r7, #15]
 800d518:	2b04      	cmp	r3, #4
 800d51a:	f040 81e4 	bne.w	800d8e6 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800d51e:	693b      	ldr	r3, [r7, #16]
 800d520:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d524:	4619      	mov	r1, r3
 800d526:	693a      	ldr	r2, [r7, #16]
 800d528:	2334      	movs	r3, #52	; 0x34
 800d52a:	fb01 f303 	mul.w	r3, r1, r3
 800d52e:	4413      	add	r3, r2
 800d530:	3390      	adds	r3, #144	; 0x90
 800d532:	2201      	movs	r2, #1
 800d534:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800d536:	693b      	ldr	r3, [r7, #16]
 800d538:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d53c:	4619      	mov	r1, r3
 800d53e:	693a      	ldr	r2, [r7, #16]
 800d540:	2334      	movs	r3, #52	; 0x34
 800d542:	fb01 f303 	mul.w	r3, r1, r3
 800d546:	4413      	add	r3, r2
 800d548:	3391      	adds	r3, #145	; 0x91
 800d54a:	2202      	movs	r2, #2
 800d54c:	701a      	strb	r2, [r3, #0]
            break;
 800d54e:	e1ca      	b.n	800d8e6 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800d550:	693b      	ldr	r3, [r7, #16]
 800d552:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d556:	b2db      	uxtb	r3, r3
 800d558:	4619      	mov	r1, r3
 800d55a:	6878      	ldr	r0, [r7, #4]
 800d55c:	f000 fe66 	bl	800e22c <USBH_MSC_SCSI_TestUnitReady>
 800d560:	4603      	mov	r3, r0
 800d562:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800d564:	7bbb      	ldrb	r3, [r7, #14]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d149      	bne.n	800d5fe <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800d56a:	693b      	ldr	r3, [r7, #16]
 800d56c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d570:	4619      	mov	r1, r3
 800d572:	693a      	ldr	r2, [r7, #16]
 800d574:	2334      	movs	r3, #52	; 0x34
 800d576:	fb01 f303 	mul.w	r3, r1, r3
 800d57a:	4413      	add	r3, r2
 800d57c:	3392      	adds	r3, #146	; 0x92
 800d57e:	781b      	ldrb	r3, [r3, #0]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d00c      	beq.n	800d59e <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800d584:	693b      	ldr	r3, [r7, #16]
 800d586:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d58a:	4619      	mov	r1, r3
 800d58c:	693a      	ldr	r2, [r7, #16]
 800d58e:	2334      	movs	r3, #52	; 0x34
 800d590:	fb01 f303 	mul.w	r3, r1, r3
 800d594:	4413      	add	r3, r2
 800d596:	33c1      	adds	r3, #193	; 0xc1
 800d598:	2201      	movs	r2, #1
 800d59a:	701a      	strb	r2, [r3, #0]
 800d59c:	e00b      	b.n	800d5b6 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800d59e:	693b      	ldr	r3, [r7, #16]
 800d5a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d5a4:	4619      	mov	r1, r3
 800d5a6:	693a      	ldr	r2, [r7, #16]
 800d5a8:	2334      	movs	r3, #52	; 0x34
 800d5aa:	fb01 f303 	mul.w	r3, r1, r3
 800d5ae:	4413      	add	r3, r2
 800d5b0:	33c1      	adds	r3, #193	; 0xc1
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800d5b6:	693b      	ldr	r3, [r7, #16]
 800d5b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d5bc:	4619      	mov	r1, r3
 800d5be:	693a      	ldr	r2, [r7, #16]
 800d5c0:	2334      	movs	r3, #52	; 0x34
 800d5c2:	fb01 f303 	mul.w	r3, r1, r3
 800d5c6:	4413      	add	r3, r2
 800d5c8:	3390      	adds	r3, #144	; 0x90
 800d5ca:	2203      	movs	r2, #3
 800d5cc:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d5d4:	4619      	mov	r1, r3
 800d5d6:	693a      	ldr	r2, [r7, #16]
 800d5d8:	2334      	movs	r3, #52	; 0x34
 800d5da:	fb01 f303 	mul.w	r3, r1, r3
 800d5de:	4413      	add	r3, r2
 800d5e0:	3391      	adds	r3, #145	; 0x91
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d5ec:	4619      	mov	r1, r3
 800d5ee:	693a      	ldr	r2, [r7, #16]
 800d5f0:	2334      	movs	r3, #52	; 0x34
 800d5f2:	fb01 f303 	mul.w	r3, r1, r3
 800d5f6:	4413      	add	r3, r2
 800d5f8:	3392      	adds	r3, #146	; 0x92
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800d5fe:	7bbb      	ldrb	r3, [r7, #14]
 800d600:	2b02      	cmp	r3, #2
 800d602:	d14a      	bne.n	800d69a <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800d604:	693b      	ldr	r3, [r7, #16]
 800d606:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d60a:	4619      	mov	r1, r3
 800d60c:	693a      	ldr	r2, [r7, #16]
 800d60e:	2334      	movs	r3, #52	; 0x34
 800d610:	fb01 f303 	mul.w	r3, r1, r3
 800d614:	4413      	add	r3, r2
 800d616:	3392      	adds	r3, #146	; 0x92
 800d618:	781b      	ldrb	r3, [r3, #0]
 800d61a:	2b02      	cmp	r3, #2
 800d61c:	d00c      	beq.n	800d638 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800d61e:	693b      	ldr	r3, [r7, #16]
 800d620:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d624:	4619      	mov	r1, r3
 800d626:	693a      	ldr	r2, [r7, #16]
 800d628:	2334      	movs	r3, #52	; 0x34
 800d62a:	fb01 f303 	mul.w	r3, r1, r3
 800d62e:	4413      	add	r3, r2
 800d630:	33c1      	adds	r3, #193	; 0xc1
 800d632:	2201      	movs	r2, #1
 800d634:	701a      	strb	r2, [r3, #0]
 800d636:	e00b      	b.n	800d650 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800d638:	693b      	ldr	r3, [r7, #16]
 800d63a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d63e:	4619      	mov	r1, r3
 800d640:	693a      	ldr	r2, [r7, #16]
 800d642:	2334      	movs	r3, #52	; 0x34
 800d644:	fb01 f303 	mul.w	r3, r1, r3
 800d648:	4413      	add	r3, r2
 800d64a:	33c1      	adds	r3, #193	; 0xc1
 800d64c:	2200      	movs	r2, #0
 800d64e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d656:	4619      	mov	r1, r3
 800d658:	693a      	ldr	r2, [r7, #16]
 800d65a:	2334      	movs	r3, #52	; 0x34
 800d65c:	fb01 f303 	mul.w	r3, r1, r3
 800d660:	4413      	add	r3, r2
 800d662:	3390      	adds	r3, #144	; 0x90
 800d664:	2205      	movs	r2, #5
 800d666:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800d668:	693b      	ldr	r3, [r7, #16]
 800d66a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d66e:	4619      	mov	r1, r3
 800d670:	693a      	ldr	r2, [r7, #16]
 800d672:	2334      	movs	r3, #52	; 0x34
 800d674:	fb01 f303 	mul.w	r3, r1, r3
 800d678:	4413      	add	r3, r2
 800d67a:	3391      	adds	r3, #145	; 0x91
 800d67c:	2201      	movs	r2, #1
 800d67e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800d680:	693b      	ldr	r3, [r7, #16]
 800d682:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d686:	4619      	mov	r1, r3
 800d688:	693a      	ldr	r2, [r7, #16]
 800d68a:	2334      	movs	r3, #52	; 0x34
 800d68c:	fb01 f303 	mul.w	r3, r1, r3
 800d690:	4413      	add	r3, r2
 800d692:	3392      	adds	r3, #146	; 0x92
 800d694:	2202      	movs	r2, #2
 800d696:	701a      	strb	r2, [r3, #0]
            break;
 800d698:	e127      	b.n	800d8ea <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800d69a:	7bbb      	ldrb	r3, [r7, #14]
 800d69c:	2b04      	cmp	r3, #4
 800d69e:	f040 8124 	bne.w	800d8ea <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800d6a2:	693b      	ldr	r3, [r7, #16]
 800d6a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d6a8:	4619      	mov	r1, r3
 800d6aa:	693a      	ldr	r2, [r7, #16]
 800d6ac:	2334      	movs	r3, #52	; 0x34
 800d6ae:	fb01 f303 	mul.w	r3, r1, r3
 800d6b2:	4413      	add	r3, r2
 800d6b4:	3390      	adds	r3, #144	; 0x90
 800d6b6:	2201      	movs	r2, #1
 800d6b8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800d6ba:	693b      	ldr	r3, [r7, #16]
 800d6bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d6c0:	4619      	mov	r1, r3
 800d6c2:	693a      	ldr	r2, [r7, #16]
 800d6c4:	2334      	movs	r3, #52	; 0x34
 800d6c6:	fb01 f303 	mul.w	r3, r1, r3
 800d6ca:	4413      	add	r3, r2
 800d6cc:	3391      	adds	r3, #145	; 0x91
 800d6ce:	2202      	movs	r2, #2
 800d6d0:	701a      	strb	r2, [r3, #0]
            break;
 800d6d2:	e10a      	b.n	800d8ea <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d6da:	b2d9      	uxtb	r1, r3
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d6e2:	461a      	mov	r2, r3
 800d6e4:	2334      	movs	r3, #52	; 0x34
 800d6e6:	fb02 f303 	mul.w	r3, r2, r3
 800d6ea:	3390      	adds	r3, #144	; 0x90
 800d6ec:	693a      	ldr	r2, [r7, #16]
 800d6ee:	4413      	add	r3, r2
 800d6f0:	3304      	adds	r3, #4
 800d6f2:	461a      	mov	r2, r3
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f000 fddc 	bl	800e2b2 <USBH_MSC_SCSI_ReadCapacity>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800d6fe:	7bfb      	ldrb	r3, [r7, #15]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d120      	bne.n	800d746 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800d704:	693b      	ldr	r3, [r7, #16]
 800d706:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d70a:	4619      	mov	r1, r3
 800d70c:	693a      	ldr	r2, [r7, #16]
 800d70e:	2334      	movs	r3, #52	; 0x34
 800d710:	fb01 f303 	mul.w	r3, r1, r3
 800d714:	4413      	add	r3, r2
 800d716:	3390      	adds	r3, #144	; 0x90
 800d718:	2201      	movs	r2, #1
 800d71a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d722:	4619      	mov	r1, r3
 800d724:	693a      	ldr	r2, [r7, #16]
 800d726:	2334      	movs	r3, #52	; 0x34
 800d728:	fb01 f303 	mul.w	r3, r1, r3
 800d72c:	4413      	add	r3, r2
 800d72e:	3391      	adds	r3, #145	; 0x91
 800d730:	2200      	movs	r2, #0
 800d732:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800d734:	693b      	ldr	r3, [r7, #16]
 800d736:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d73a:	3301      	adds	r3, #1
 800d73c:	b29a      	uxth	r2, r3
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800d744:	e0d3      	b.n	800d8ee <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800d746:	7bfb      	ldrb	r3, [r7, #15]
 800d748:	2b02      	cmp	r3, #2
 800d74a:	d10c      	bne.n	800d766 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d752:	4619      	mov	r1, r3
 800d754:	693a      	ldr	r2, [r7, #16]
 800d756:	2334      	movs	r3, #52	; 0x34
 800d758:	fb01 f303 	mul.w	r3, r1, r3
 800d75c:	4413      	add	r3, r2
 800d75e:	3390      	adds	r3, #144	; 0x90
 800d760:	2205      	movs	r2, #5
 800d762:	701a      	strb	r2, [r3, #0]
            break;
 800d764:	e0c3      	b.n	800d8ee <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800d766:	7bfb      	ldrb	r3, [r7, #15]
 800d768:	2b04      	cmp	r3, #4
 800d76a:	f040 80c0 	bne.w	800d8ee <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d774:	4619      	mov	r1, r3
 800d776:	693a      	ldr	r2, [r7, #16]
 800d778:	2334      	movs	r3, #52	; 0x34
 800d77a:	fb01 f303 	mul.w	r3, r1, r3
 800d77e:	4413      	add	r3, r2
 800d780:	3390      	adds	r3, #144	; 0x90
 800d782:	2201      	movs	r2, #1
 800d784:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800d786:	693b      	ldr	r3, [r7, #16]
 800d788:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d78c:	4619      	mov	r1, r3
 800d78e:	693a      	ldr	r2, [r7, #16]
 800d790:	2334      	movs	r3, #52	; 0x34
 800d792:	fb01 f303 	mul.w	r3, r1, r3
 800d796:	4413      	add	r3, r2
 800d798:	3391      	adds	r3, #145	; 0x91
 800d79a:	2202      	movs	r2, #2
 800d79c:	701a      	strb	r2, [r3, #0]
            break;
 800d79e:	e0a6      	b.n	800d8ee <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800d7a0:	693b      	ldr	r3, [r7, #16]
 800d7a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d7a6:	b2d9      	uxtb	r1, r3
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d7ae:	461a      	mov	r2, r3
 800d7b0:	2334      	movs	r3, #52	; 0x34
 800d7b2:	fb02 f303 	mul.w	r3, r2, r3
 800d7b6:	3398      	adds	r3, #152	; 0x98
 800d7b8:	693a      	ldr	r2, [r7, #16]
 800d7ba:	4413      	add	r3, r2
 800d7bc:	3304      	adds	r3, #4
 800d7be:	461a      	mov	r2, r3
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	f000 fe96 	bl	800e4f2 <USBH_MSC_SCSI_RequestSense>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800d7ca:	7bfb      	ldrb	r3, [r7, #15]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d145      	bne.n	800d85c <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800d7d0:	693b      	ldr	r3, [r7, #16]
 800d7d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d7d6:	4619      	mov	r1, r3
 800d7d8:	693a      	ldr	r2, [r7, #16]
 800d7da:	2334      	movs	r3, #52	; 0x34
 800d7dc:	fb01 f303 	mul.w	r3, r1, r3
 800d7e0:	4413      	add	r3, r2
 800d7e2:	339c      	adds	r3, #156	; 0x9c
 800d7e4:	781b      	ldrb	r3, [r3, #0]
 800d7e6:	2b06      	cmp	r3, #6
 800d7e8:	d00c      	beq.n	800d804 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800d7ea:	693b      	ldr	r3, [r7, #16]
 800d7ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d7f0:	4619      	mov	r1, r3
 800d7f2:	693a      	ldr	r2, [r7, #16]
 800d7f4:	2334      	movs	r3, #52	; 0x34
 800d7f6:	fb01 f303 	mul.w	r3, r1, r3
 800d7fa:	4413      	add	r3, r2
 800d7fc:	339c      	adds	r3, #156	; 0x9c
 800d7fe:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800d800:	2b02      	cmp	r3, #2
 800d802:	d117      	bne.n	800d834 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800d80a:	693b      	ldr	r3, [r7, #16]
 800d80c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800d810:	1ad3      	subs	r3, r2, r3
 800d812:	f242 720f 	movw	r2, #9999	; 0x270f
 800d816:	4293      	cmp	r3, r2
 800d818:	d80c      	bhi.n	800d834 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800d81a:	693b      	ldr	r3, [r7, #16]
 800d81c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d820:	4619      	mov	r1, r3
 800d822:	693a      	ldr	r2, [r7, #16]
 800d824:	2334      	movs	r3, #52	; 0x34
 800d826:	fb01 f303 	mul.w	r3, r1, r3
 800d82a:	4413      	add	r3, r2
 800d82c:	3390      	adds	r3, #144	; 0x90
 800d82e:	2202      	movs	r2, #2
 800d830:	701a      	strb	r2, [r3, #0]
                  break;
 800d832:	e05f      	b.n	800d8f4 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800d834:	693b      	ldr	r3, [r7, #16]
 800d836:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d83a:	4619      	mov	r1, r3
 800d83c:	693a      	ldr	r2, [r7, #16]
 800d83e:	2334      	movs	r3, #52	; 0x34
 800d840:	fb01 f303 	mul.w	r3, r1, r3
 800d844:	4413      	add	r3, r2
 800d846:	3390      	adds	r3, #144	; 0x90
 800d848:	2201      	movs	r2, #1
 800d84a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800d84c:	693b      	ldr	r3, [r7, #16]
 800d84e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d852:	3301      	adds	r3, #1
 800d854:	b29a      	uxth	r2, r3
 800d856:	693b      	ldr	r3, [r7, #16]
 800d858:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800d85c:	7bfb      	ldrb	r3, [r7, #15]
 800d85e:	2b02      	cmp	r3, #2
 800d860:	d10c      	bne.n	800d87c <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800d862:	693b      	ldr	r3, [r7, #16]
 800d864:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d868:	4619      	mov	r1, r3
 800d86a:	693a      	ldr	r2, [r7, #16]
 800d86c:	2334      	movs	r3, #52	; 0x34
 800d86e:	fb01 f303 	mul.w	r3, r1, r3
 800d872:	4413      	add	r3, r2
 800d874:	3390      	adds	r3, #144	; 0x90
 800d876:	2208      	movs	r2, #8
 800d878:	701a      	strb	r2, [r3, #0]
            break;
 800d87a:	e03a      	b.n	800d8f2 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800d87c:	7bfb      	ldrb	r3, [r7, #15]
 800d87e:	2b04      	cmp	r3, #4
 800d880:	d137      	bne.n	800d8f2 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800d882:	693b      	ldr	r3, [r7, #16]
 800d884:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d888:	4619      	mov	r1, r3
 800d88a:	693a      	ldr	r2, [r7, #16]
 800d88c:	2334      	movs	r3, #52	; 0x34
 800d88e:	fb01 f303 	mul.w	r3, r1, r3
 800d892:	4413      	add	r3, r2
 800d894:	3390      	adds	r3, #144	; 0x90
 800d896:	2201      	movs	r2, #1
 800d898:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800d89a:	693b      	ldr	r3, [r7, #16]
 800d89c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d8a0:	4619      	mov	r1, r3
 800d8a2:	693a      	ldr	r2, [r7, #16]
 800d8a4:	2334      	movs	r3, #52	; 0x34
 800d8a6:	fb01 f303 	mul.w	r3, r1, r3
 800d8aa:	4413      	add	r3, r2
 800d8ac:	3391      	adds	r3, #145	; 0x91
 800d8ae:	2202      	movs	r2, #2
 800d8b0:	701a      	strb	r2, [r3, #0]
            break;
 800d8b2:	e01e      	b.n	800d8f2 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800d8b4:	693b      	ldr	r3, [r7, #16]
 800d8b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d8ba:	3301      	adds	r3, #1
 800d8bc:	b29a      	uxth	r2, r3
 800d8be:	693b      	ldr	r3, [r7, #16]
 800d8c0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800d8c4:	e016      	b.n	800d8f4 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800d8c6:	693b      	ldr	r3, [r7, #16]
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800d8ce:	693b      	ldr	r3, [r7, #16]
 800d8d0:	2201      	movs	r2, #1
 800d8d2:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d8da:	2102      	movs	r1, #2
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	4798      	blx	r3
      break;
 800d8e0:	e00c      	b.n	800d8fc <USBH_MSC_Process+0x514>
            break;
 800d8e2:	bf00      	nop
 800d8e4:	e00a      	b.n	800d8fc <USBH_MSC_Process+0x514>
            break;
 800d8e6:	bf00      	nop
 800d8e8:	e008      	b.n	800d8fc <USBH_MSC_Process+0x514>
            break;
 800d8ea:	bf00      	nop
 800d8ec:	e006      	b.n	800d8fc <USBH_MSC_Process+0x514>
            break;
 800d8ee:	bf00      	nop
 800d8f0:	e004      	b.n	800d8fc <USBH_MSC_Process+0x514>
            break;
 800d8f2:	bf00      	nop
      break;
 800d8f4:	e002      	b.n	800d8fc <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	75fb      	strb	r3, [r7, #23]
      break;
 800d8fa:	bf00      	nop
  }
  return error;
 800d8fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	3718      	adds	r7, #24
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}
 800d906:	bf00      	nop

0800d908 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800d908:	b480      	push	{r7}
 800d90a:	b083      	sub	sp, #12
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800d910:	2300      	movs	r3, #0
}
 800d912:	4618      	mov	r0, r3
 800d914:	370c      	adds	r7, #12
 800d916:	46bd      	mov	sp, r7
 800d918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91c:	4770      	bx	lr

0800d91e <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800d91e:	b580      	push	{r7, lr}
 800d920:	b088      	sub	sp, #32
 800d922:	af02      	add	r7, sp, #8
 800d924:	6078      	str	r0, [r7, #4]
 800d926:	460b      	mov	r3, r1
 800d928:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d930:	69db      	ldr	r3, [r3, #28]
 800d932:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800d934:	2301      	movs	r3, #1
 800d936:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800d938:	2301      	movs	r3, #1
 800d93a:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800d93c:	78fb      	ldrb	r3, [r7, #3]
 800d93e:	693a      	ldr	r2, [r7, #16]
 800d940:	2134      	movs	r1, #52	; 0x34
 800d942:	fb01 f303 	mul.w	r3, r1, r3
 800d946:	4413      	add	r3, r2
 800d948:	3390      	adds	r3, #144	; 0x90
 800d94a:	781b      	ldrb	r3, [r3, #0]
 800d94c:	2b07      	cmp	r3, #7
 800d94e:	d03c      	beq.n	800d9ca <USBH_MSC_RdWrProcess+0xac>
 800d950:	2b07      	cmp	r3, #7
 800d952:	f300 80a7 	bgt.w	800daa4 <USBH_MSC_RdWrProcess+0x186>
 800d956:	2b05      	cmp	r3, #5
 800d958:	d06c      	beq.n	800da34 <USBH_MSC_RdWrProcess+0x116>
 800d95a:	2b06      	cmp	r3, #6
 800d95c:	f040 80a2 	bne.w	800daa4 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800d960:	78f9      	ldrb	r1, [r7, #3]
 800d962:	2300      	movs	r3, #0
 800d964:	9300      	str	r3, [sp, #0]
 800d966:	2300      	movs	r3, #0
 800d968:	2200      	movs	r2, #0
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	f000 fea5 	bl	800e6ba <USBH_MSC_SCSI_Read>
 800d970:	4603      	mov	r3, r0
 800d972:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800d974:	7bfb      	ldrb	r3, [r7, #15]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d10b      	bne.n	800d992 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800d97a:	78fb      	ldrb	r3, [r7, #3]
 800d97c:	693a      	ldr	r2, [r7, #16]
 800d97e:	2134      	movs	r1, #52	; 0x34
 800d980:	fb01 f303 	mul.w	r3, r1, r3
 800d984:	4413      	add	r3, r2
 800d986:	3390      	adds	r3, #144	; 0x90
 800d988:	2201      	movs	r2, #1
 800d98a:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800d98c:	2300      	movs	r3, #0
 800d98e:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d990:	e08a      	b.n	800daa8 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800d992:	7bfb      	ldrb	r3, [r7, #15]
 800d994:	2b02      	cmp	r3, #2
 800d996:	d109      	bne.n	800d9ac <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800d998:	78fb      	ldrb	r3, [r7, #3]
 800d99a:	693a      	ldr	r2, [r7, #16]
 800d99c:	2134      	movs	r1, #52	; 0x34
 800d99e:	fb01 f303 	mul.w	r3, r1, r3
 800d9a2:	4413      	add	r3, r2
 800d9a4:	3390      	adds	r3, #144	; 0x90
 800d9a6:	2205      	movs	r2, #5
 800d9a8:	701a      	strb	r2, [r3, #0]
      break;
 800d9aa:	e07d      	b.n	800daa8 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800d9ac:	7bfb      	ldrb	r3, [r7, #15]
 800d9ae:	2b04      	cmp	r3, #4
 800d9b0:	d17a      	bne.n	800daa8 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800d9b2:	78fb      	ldrb	r3, [r7, #3]
 800d9b4:	693a      	ldr	r2, [r7, #16]
 800d9b6:	2134      	movs	r1, #52	; 0x34
 800d9b8:	fb01 f303 	mul.w	r3, r1, r3
 800d9bc:	4413      	add	r3, r2
 800d9be:	3390      	adds	r3, #144	; 0x90
 800d9c0:	2208      	movs	r2, #8
 800d9c2:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800d9c4:	2302      	movs	r3, #2
 800d9c6:	75fb      	strb	r3, [r7, #23]
      break;
 800d9c8:	e06e      	b.n	800daa8 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800d9ca:	78f9      	ldrb	r1, [r7, #3]
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	9300      	str	r3, [sp, #0]
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f000 fe05 	bl	800e5e4 <USBH_MSC_SCSI_Write>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800d9de:	7bfb      	ldrb	r3, [r7, #15]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d10b      	bne.n	800d9fc <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800d9e4:	78fb      	ldrb	r3, [r7, #3]
 800d9e6:	693a      	ldr	r2, [r7, #16]
 800d9e8:	2134      	movs	r1, #52	; 0x34
 800d9ea:	fb01 f303 	mul.w	r3, r1, r3
 800d9ee:	4413      	add	r3, r2
 800d9f0:	3390      	adds	r3, #144	; 0x90
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d9fa:	e057      	b.n	800daac <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800d9fc:	7bfb      	ldrb	r3, [r7, #15]
 800d9fe:	2b02      	cmp	r3, #2
 800da00:	d109      	bne.n	800da16 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800da02:	78fb      	ldrb	r3, [r7, #3]
 800da04:	693a      	ldr	r2, [r7, #16]
 800da06:	2134      	movs	r1, #52	; 0x34
 800da08:	fb01 f303 	mul.w	r3, r1, r3
 800da0c:	4413      	add	r3, r2
 800da0e:	3390      	adds	r3, #144	; 0x90
 800da10:	2205      	movs	r2, #5
 800da12:	701a      	strb	r2, [r3, #0]
      break;
 800da14:	e04a      	b.n	800daac <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800da16:	7bfb      	ldrb	r3, [r7, #15]
 800da18:	2b04      	cmp	r3, #4
 800da1a:	d147      	bne.n	800daac <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800da1c:	78fb      	ldrb	r3, [r7, #3]
 800da1e:	693a      	ldr	r2, [r7, #16]
 800da20:	2134      	movs	r1, #52	; 0x34
 800da22:	fb01 f303 	mul.w	r3, r1, r3
 800da26:	4413      	add	r3, r2
 800da28:	3390      	adds	r3, #144	; 0x90
 800da2a:	2208      	movs	r2, #8
 800da2c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800da2e:	2302      	movs	r3, #2
 800da30:	75fb      	strb	r3, [r7, #23]
      break;
 800da32:	e03b      	b.n	800daac <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800da34:	78fb      	ldrb	r3, [r7, #3]
 800da36:	2234      	movs	r2, #52	; 0x34
 800da38:	fb02 f303 	mul.w	r3, r2, r3
 800da3c:	3398      	adds	r3, #152	; 0x98
 800da3e:	693a      	ldr	r2, [r7, #16]
 800da40:	4413      	add	r3, r2
 800da42:	1d1a      	adds	r2, r3, #4
 800da44:	78fb      	ldrb	r3, [r7, #3]
 800da46:	4619      	mov	r1, r3
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f000 fd52 	bl	800e4f2 <USBH_MSC_SCSI_RequestSense>
 800da4e:	4603      	mov	r3, r0
 800da50:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800da52:	7bfb      	ldrb	r3, [r7, #15]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d113      	bne.n	800da80 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800da58:	78fb      	ldrb	r3, [r7, #3]
 800da5a:	693a      	ldr	r2, [r7, #16]
 800da5c:	2134      	movs	r1, #52	; 0x34
 800da5e:	fb01 f303 	mul.w	r3, r1, r3
 800da62:	4413      	add	r3, r2
 800da64:	3390      	adds	r3, #144	; 0x90
 800da66:	2201      	movs	r2, #1
 800da68:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800da6a:	78fb      	ldrb	r3, [r7, #3]
 800da6c:	693a      	ldr	r2, [r7, #16]
 800da6e:	2134      	movs	r1, #52	; 0x34
 800da70:	fb01 f303 	mul.w	r3, r1, r3
 800da74:	4413      	add	r3, r2
 800da76:	3391      	adds	r3, #145	; 0x91
 800da78:	2202      	movs	r2, #2
 800da7a:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800da7c:	2302      	movs	r3, #2
 800da7e:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800da80:	7bfb      	ldrb	r3, [r7, #15]
 800da82:	2b02      	cmp	r3, #2
 800da84:	d014      	beq.n	800dab0 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800da86:	7bfb      	ldrb	r3, [r7, #15]
 800da88:	2b04      	cmp	r3, #4
 800da8a:	d111      	bne.n	800dab0 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800da8c:	78fb      	ldrb	r3, [r7, #3]
 800da8e:	693a      	ldr	r2, [r7, #16]
 800da90:	2134      	movs	r1, #52	; 0x34
 800da92:	fb01 f303 	mul.w	r3, r1, r3
 800da96:	4413      	add	r3, r2
 800da98:	3390      	adds	r3, #144	; 0x90
 800da9a:	2208      	movs	r2, #8
 800da9c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800da9e:	2302      	movs	r3, #2
 800daa0:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800daa2:	e005      	b.n	800dab0 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800daa4:	bf00      	nop
 800daa6:	e004      	b.n	800dab2 <USBH_MSC_RdWrProcess+0x194>
      break;
 800daa8:	bf00      	nop
 800daaa:	e002      	b.n	800dab2 <USBH_MSC_RdWrProcess+0x194>
      break;
 800daac:	bf00      	nop
 800daae:	e000      	b.n	800dab2 <USBH_MSC_RdWrProcess+0x194>
      break;
 800dab0:	bf00      	nop

  }
  return error;
 800dab2:	7dfb      	ldrb	r3, [r7, #23]
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	3718      	adds	r7, #24
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}

0800dabc <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800dabc:	b480      	push	{r7}
 800dabe:	b085      	sub	sp, #20
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
 800dac4:	460b      	mov	r3, r1
 800dac6:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dace:	69db      	ldr	r3, [r3, #28]
 800dad0:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	781b      	ldrb	r3, [r3, #0]
 800dad6:	b2db      	uxtb	r3, r3
 800dad8:	2b0b      	cmp	r3, #11
 800dada:	d10c      	bne.n	800daf6 <USBH_MSC_UnitIsReady+0x3a>
 800dadc:	78fb      	ldrb	r3, [r7, #3]
 800dade:	68ba      	ldr	r2, [r7, #8]
 800dae0:	2134      	movs	r1, #52	; 0x34
 800dae2:	fb01 f303 	mul.w	r3, r1, r3
 800dae6:	4413      	add	r3, r2
 800dae8:	3391      	adds	r3, #145	; 0x91
 800daea:	781b      	ldrb	r3, [r3, #0]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d102      	bne.n	800daf6 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800daf0:	2301      	movs	r3, #1
 800daf2:	73fb      	strb	r3, [r7, #15]
 800daf4:	e001      	b.n	800dafa <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800daf6:	2300      	movs	r3, #0
 800daf8:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800dafa:	7bfb      	ldrb	r3, [r7, #15]
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3714      	adds	r7, #20
 800db00:	46bd      	mov	sp, r7
 800db02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db06:	4770      	bx	lr

0800db08 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b086      	sub	sp, #24
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	60f8      	str	r0, [r7, #12]
 800db10:	460b      	mov	r3, r1
 800db12:	607a      	str	r2, [r7, #4]
 800db14:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800db1c:	69db      	ldr	r3, [r3, #28]
 800db1e:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	781b      	ldrb	r3, [r3, #0]
 800db24:	b2db      	uxtb	r3, r3
 800db26:	2b0b      	cmp	r3, #11
 800db28:	d10d      	bne.n	800db46 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800db2a:	7afb      	ldrb	r3, [r7, #11]
 800db2c:	2234      	movs	r2, #52	; 0x34
 800db2e:	fb02 f303 	mul.w	r3, r2, r3
 800db32:	3390      	adds	r3, #144	; 0x90
 800db34:	697a      	ldr	r2, [r7, #20]
 800db36:	4413      	add	r3, r2
 800db38:	2234      	movs	r2, #52	; 0x34
 800db3a:	4619      	mov	r1, r3
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f006 f8dd 	bl	8013cfc <memcpy>
    return USBH_OK;
 800db42:	2300      	movs	r3, #0
 800db44:	e000      	b.n	800db48 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800db46:	2302      	movs	r3, #2
  }
}
 800db48:	4618      	mov	r0, r3
 800db4a:	3718      	adds	r7, #24
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}

0800db50 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b088      	sub	sp, #32
 800db54:	af02      	add	r7, sp, #8
 800db56:	60f8      	str	r0, [r7, #12]
 800db58:	607a      	str	r2, [r7, #4]
 800db5a:	603b      	str	r3, [r7, #0]
 800db5c:	460b      	mov	r3, r1
 800db5e:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800db66:	69db      	ldr	r3, [r3, #28]
 800db68:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800db70:	b2db      	uxtb	r3, r3
 800db72:	2b00      	cmp	r3, #0
 800db74:	d00e      	beq.n	800db94 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	781b      	ldrb	r3, [r3, #0]
 800db7a:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800db7c:	2b0b      	cmp	r3, #11
 800db7e:	d109      	bne.n	800db94 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800db80:	7afb      	ldrb	r3, [r7, #11]
 800db82:	697a      	ldr	r2, [r7, #20]
 800db84:	2134      	movs	r1, #52	; 0x34
 800db86:	fb01 f303 	mul.w	r3, r1, r3
 800db8a:	4413      	add	r3, r2
 800db8c:	3390      	adds	r3, #144	; 0x90
 800db8e:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800db90:	2b01      	cmp	r3, #1
 800db92:	d001      	beq.n	800db98 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800db94:	2302      	movs	r3, #2
 800db96:	e040      	b.n	800dc1a <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	2206      	movs	r2, #6
 800db9c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800db9e:	7afb      	ldrb	r3, [r7, #11]
 800dba0:	697a      	ldr	r2, [r7, #20]
 800dba2:	2134      	movs	r1, #52	; 0x34
 800dba4:	fb01 f303 	mul.w	r3, r1, r3
 800dba8:	4413      	add	r3, r2
 800dbaa:	3390      	adds	r3, #144	; 0x90
 800dbac:	2206      	movs	r2, #6
 800dbae:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800dbb0:	7afb      	ldrb	r3, [r7, #11]
 800dbb2:	b29a      	uxth	r2, r3
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800dbba:	7af9      	ldrb	r1, [r7, #11]
 800dbbc:	6a3b      	ldr	r3, [r7, #32]
 800dbbe:	9300      	str	r3, [sp, #0]
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	687a      	ldr	r2, [r7, #4]
 800dbc4:	68f8      	ldr	r0, [r7, #12]
 800dbc6:	f000 fd78 	bl	800e6ba <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800dbd0:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800dbd2:	e016      	b.n	800dc02 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800dbda:	693b      	ldr	r3, [r7, #16]
 800dbdc:	1ad2      	subs	r2, r2, r3
 800dbde:	6a3b      	ldr	r3, [r7, #32]
 800dbe0:	f242 7110 	movw	r1, #10000	; 0x2710
 800dbe4:	fb01 f303 	mul.w	r3, r1, r3
 800dbe8:	429a      	cmp	r2, r3
 800dbea:	d805      	bhi.n	800dbf8 <USBH_MSC_Read+0xa8>
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800dbf2:	b2db      	uxtb	r3, r3
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d104      	bne.n	800dc02 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800dbf8:	697b      	ldr	r3, [r7, #20]
 800dbfa:	2201      	movs	r2, #1
 800dbfc:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800dbfe:	2302      	movs	r3, #2
 800dc00:	e00b      	b.n	800dc1a <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800dc02:	7afb      	ldrb	r3, [r7, #11]
 800dc04:	4619      	mov	r1, r3
 800dc06:	68f8      	ldr	r0, [r7, #12]
 800dc08:	f7ff fe89 	bl	800d91e <USBH_MSC_RdWrProcess>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	2b01      	cmp	r3, #1
 800dc10:	d0e0      	beq.n	800dbd4 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	2201      	movs	r2, #1
 800dc16:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800dc18:	2300      	movs	r3, #0
}
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	3718      	adds	r7, #24
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	bd80      	pop	{r7, pc}

0800dc22 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800dc22:	b580      	push	{r7, lr}
 800dc24:	b088      	sub	sp, #32
 800dc26:	af02      	add	r7, sp, #8
 800dc28:	60f8      	str	r0, [r7, #12]
 800dc2a:	607a      	str	r2, [r7, #4]
 800dc2c:	603b      	str	r3, [r7, #0]
 800dc2e:	460b      	mov	r3, r1
 800dc30:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dc38:	69db      	ldr	r3, [r3, #28]
 800dc3a:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800dc42:	b2db      	uxtb	r3, r3
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d00e      	beq.n	800dc66 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	781b      	ldrb	r3, [r3, #0]
 800dc4c:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800dc4e:	2b0b      	cmp	r3, #11
 800dc50:	d109      	bne.n	800dc66 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800dc52:	7afb      	ldrb	r3, [r7, #11]
 800dc54:	697a      	ldr	r2, [r7, #20]
 800dc56:	2134      	movs	r1, #52	; 0x34
 800dc58:	fb01 f303 	mul.w	r3, r1, r3
 800dc5c:	4413      	add	r3, r2
 800dc5e:	3390      	adds	r3, #144	; 0x90
 800dc60:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800dc62:	2b01      	cmp	r3, #1
 800dc64:	d001      	beq.n	800dc6a <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800dc66:	2302      	movs	r3, #2
 800dc68:	e040      	b.n	800dcec <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	2207      	movs	r2, #7
 800dc6e:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800dc70:	7afb      	ldrb	r3, [r7, #11]
 800dc72:	697a      	ldr	r2, [r7, #20]
 800dc74:	2134      	movs	r1, #52	; 0x34
 800dc76:	fb01 f303 	mul.w	r3, r1, r3
 800dc7a:	4413      	add	r3, r2
 800dc7c:	3390      	adds	r3, #144	; 0x90
 800dc7e:	2207      	movs	r2, #7
 800dc80:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800dc82:	7afb      	ldrb	r3, [r7, #11]
 800dc84:	b29a      	uxth	r2, r3
 800dc86:	697b      	ldr	r3, [r7, #20]
 800dc88:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800dc8c:	7af9      	ldrb	r1, [r7, #11]
 800dc8e:	6a3b      	ldr	r3, [r7, #32]
 800dc90:	9300      	str	r3, [sp, #0]
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	687a      	ldr	r2, [r7, #4]
 800dc96:	68f8      	ldr	r0, [r7, #12]
 800dc98:	f000 fca4 	bl	800e5e4 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800dca2:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800dca4:	e016      	b.n	800dcd4 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	1ad2      	subs	r2, r2, r3
 800dcb0:	6a3b      	ldr	r3, [r7, #32]
 800dcb2:	f242 7110 	movw	r1, #10000	; 0x2710
 800dcb6:	fb01 f303 	mul.w	r3, r1, r3
 800dcba:	429a      	cmp	r2, r3
 800dcbc:	d805      	bhi.n	800dcca <USBH_MSC_Write+0xa8>
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800dcc4:	b2db      	uxtb	r3, r3
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d104      	bne.n	800dcd4 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	2201      	movs	r2, #1
 800dcce:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800dcd0:	2302      	movs	r3, #2
 800dcd2:	e00b      	b.n	800dcec <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800dcd4:	7afb      	ldrb	r3, [r7, #11]
 800dcd6:	4619      	mov	r1, r3
 800dcd8:	68f8      	ldr	r0, [r7, #12]
 800dcda:	f7ff fe20 	bl	800d91e <USBH_MSC_RdWrProcess>
 800dcde:	4603      	mov	r3, r0
 800dce0:	2b01      	cmp	r3, #1
 800dce2:	d0e0      	beq.n	800dca6 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800dce4:	697b      	ldr	r3, [r7, #20]
 800dce6:	2201      	movs	r2, #1
 800dce8:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800dcea:	2300      	movs	r3, #0
}
 800dcec:	4618      	mov	r0, r3
 800dcee:	3718      	adds	r7, #24
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bd80      	pop	{r7, pc}

0800dcf4 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b082      	sub	sp, #8
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2221      	movs	r2, #33	; 0x21
 800dd00:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	22ff      	movs	r2, #255	; 0xff
 800dd06:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2200      	movs	r2, #0
 800dd12:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2200      	movs	r2, #0
 800dd18:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	2100      	movs	r1, #0
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f001 fea4 	bl	800fa6c <USBH_CtlReq>
 800dd24:	4603      	mov	r3, r0
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3708      	adds	r7, #8
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}

0800dd2e <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800dd2e:	b580      	push	{r7, lr}
 800dd30:	b082      	sub	sp, #8
 800dd32:	af00      	add	r7, sp, #0
 800dd34:	6078      	str	r0, [r7, #4]
 800dd36:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	22a1      	movs	r2, #161	; 0xa1
 800dd3c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	22fe      	movs	r2, #254	; 0xfe
 800dd42:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	2200      	movs	r2, #0
 800dd48:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2201      	movs	r2, #1
 800dd54:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800dd56:	2201      	movs	r2, #1
 800dd58:	6839      	ldr	r1, [r7, #0]
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f001 fe86 	bl	800fa6c <USBH_CtlReq>
 800dd60:	4603      	mov	r3, r0
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3708      	adds	r7, #8
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}
	...

0800dd6c <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800dd6c:	b480      	push	{r7}
 800dd6e:	b085      	sub	sp, #20
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dd7a:	69db      	ldr	r3, [r3, #28]
 800dd7c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	4a09      	ldr	r2, [pc, #36]	; (800dda8 <USBH_MSC_BOT_Init+0x3c>)
 800dd82:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	4a09      	ldr	r2, [pc, #36]	; (800ddac <USBH_MSC_BOT_Init+0x40>)
 800dd88:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	2201      	movs	r2, #1
 800dd8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	2201      	movs	r2, #1
 800dd96:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800dd9a:	2300      	movs	r3, #0
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3714      	adds	r7, #20
 800dda0:	46bd      	mov	sp, r7
 800dda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda6:	4770      	bx	lr
 800dda8:	43425355 	.word	0x43425355
 800ddac:	20304050 	.word	0x20304050

0800ddb0 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b088      	sub	sp, #32
 800ddb4:	af02      	add	r7, sp, #8
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	460b      	mov	r3, r1
 800ddba:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800ddc4:	2301      	movs	r3, #1
 800ddc6:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ddc8:	2300      	movs	r3, #0
 800ddca:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ddd2:	69db      	ldr	r3, [r3, #28]
 800ddd4:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800ddda:	693b      	ldr	r3, [r7, #16]
 800dddc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800dde0:	3b01      	subs	r3, #1
 800dde2:	2b0a      	cmp	r3, #10
 800dde4:	f200 819e 	bhi.w	800e124 <USBH_MSC_BOT_Process+0x374>
 800dde8:	a201      	add	r2, pc, #4	; (adr r2, 800ddf0 <USBH_MSC_BOT_Process+0x40>)
 800ddea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddee:	bf00      	nop
 800ddf0:	0800de1d 	.word	0x0800de1d
 800ddf4:	0800de45 	.word	0x0800de45
 800ddf8:	0800deaf 	.word	0x0800deaf
 800ddfc:	0800decd 	.word	0x0800decd
 800de00:	0800df51 	.word	0x0800df51
 800de04:	0800df73 	.word	0x0800df73
 800de08:	0800e00b 	.word	0x0800e00b
 800de0c:	0800e027 	.word	0x0800e027
 800de10:	0800e079 	.word	0x0800e079
 800de14:	0800e0a9 	.word	0x0800e0a9
 800de18:	0800e10b 	.word	0x0800e10b
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800de1c:	693b      	ldr	r3, [r7, #16]
 800de1e:	78fa      	ldrb	r2, [r7, #3]
 800de20:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800de24:	693b      	ldr	r3, [r7, #16]
 800de26:	2202      	movs	r2, #2
 800de28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800de32:	693b      	ldr	r3, [r7, #16]
 800de34:	795b      	ldrb	r3, [r3, #5]
 800de36:	2201      	movs	r2, #1
 800de38:	9200      	str	r2, [sp, #0]
 800de3a:	221f      	movs	r2, #31
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f002 f824 	bl	800fe8a <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800de42:	e17e      	b.n	800e142 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800de44:	693b      	ldr	r3, [r7, #16]
 800de46:	795b      	ldrb	r3, [r3, #5]
 800de48:	4619      	mov	r1, r3
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f005 fe3e 	bl	8013acc <USBH_LL_GetURBState>
 800de50:	4603      	mov	r3, r0
 800de52:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800de54:	7d3b      	ldrb	r3, [r7, #20]
 800de56:	2b01      	cmp	r3, #1
 800de58:	d118      	bne.n	800de8c <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800de5a:	693b      	ldr	r3, [r7, #16]
 800de5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d00f      	beq.n	800de82 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800de62:	693b      	ldr	r3, [r7, #16]
 800de64:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800de68:	b25b      	sxtb	r3, r3
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	da04      	bge.n	800de78 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800de6e:	693b      	ldr	r3, [r7, #16]
 800de70:	2203      	movs	r2, #3
 800de72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800de76:	e157      	b.n	800e128 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800de78:	693b      	ldr	r3, [r7, #16]
 800de7a:	2205      	movs	r2, #5
 800de7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800de80:	e152      	b.n	800e128 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800de82:	693b      	ldr	r3, [r7, #16]
 800de84:	2207      	movs	r2, #7
 800de86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800de8a:	e14d      	b.n	800e128 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800de8c:	7d3b      	ldrb	r3, [r7, #20]
 800de8e:	2b02      	cmp	r3, #2
 800de90:	d104      	bne.n	800de9c <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800de92:	693b      	ldr	r3, [r7, #16]
 800de94:	2201      	movs	r2, #1
 800de96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800de9a:	e145      	b.n	800e128 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800de9c:	7d3b      	ldrb	r3, [r7, #20]
 800de9e:	2b05      	cmp	r3, #5
 800dea0:	f040 8142 	bne.w	800e128 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800dea4:	693b      	ldr	r3, [r7, #16]
 800dea6:	220a      	movs	r2, #10
 800dea8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800deac:	e13c      	b.n	800e128 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800deb4:	693b      	ldr	r3, [r7, #16]
 800deb6:	895a      	ldrh	r2, [r3, #10]
 800deb8:	693b      	ldr	r3, [r7, #16]
 800deba:	791b      	ldrb	r3, [r3, #4]
 800debc:	6878      	ldr	r0, [r7, #4]
 800debe:	f002 f809 	bl	800fed4 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800dec2:	693b      	ldr	r3, [r7, #16]
 800dec4:	2204      	movs	r2, #4
 800dec6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800deca:	e13a      	b.n	800e142 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800decc:	693b      	ldr	r3, [r7, #16]
 800dece:	791b      	ldrb	r3, [r3, #4]
 800ded0:	4619      	mov	r1, r3
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f005 fdfa 	bl	8013acc <USBH_LL_GetURBState>
 800ded8:	4603      	mov	r3, r0
 800deda:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800dedc:	7d3b      	ldrb	r3, [r7, #20]
 800dede:	2b01      	cmp	r3, #1
 800dee0:	d12d      	bne.n	800df3e <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800dee2:	693b      	ldr	r3, [r7, #16]
 800dee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dee6:	693a      	ldr	r2, [r7, #16]
 800dee8:	8952      	ldrh	r2, [r2, #10]
 800deea:	4293      	cmp	r3, r2
 800deec:	d910      	bls.n	800df10 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800deee:	693b      	ldr	r3, [r7, #16]
 800def0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800def4:	693a      	ldr	r2, [r7, #16]
 800def6:	8952      	ldrh	r2, [r2, #10]
 800def8:	441a      	add	r2, r3
 800defa:	693b      	ldr	r3, [r7, #16]
 800defc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800df00:	693b      	ldr	r3, [r7, #16]
 800df02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df04:	693a      	ldr	r2, [r7, #16]
 800df06:	8952      	ldrh	r2, [r2, #10]
 800df08:	1a9a      	subs	r2, r3, r2
 800df0a:	693b      	ldr	r3, [r7, #16]
 800df0c:	65da      	str	r2, [r3, #92]	; 0x5c
 800df0e:	e002      	b.n	800df16 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800df10:	693b      	ldr	r3, [r7, #16]
 800df12:	2200      	movs	r2, #0
 800df14:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800df16:	693b      	ldr	r3, [r7, #16]
 800df18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d00a      	beq.n	800df34 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800df1e:	693b      	ldr	r3, [r7, #16]
 800df20:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800df24:	693b      	ldr	r3, [r7, #16]
 800df26:	895a      	ldrh	r2, [r3, #10]
 800df28:	693b      	ldr	r3, [r7, #16]
 800df2a:	791b      	ldrb	r3, [r3, #4]
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f001 ffd1 	bl	800fed4 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800df32:	e0fb      	b.n	800e12c <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	2207      	movs	r2, #7
 800df38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800df3c:	e0f6      	b.n	800e12c <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800df3e:	7d3b      	ldrb	r3, [r7, #20]
 800df40:	2b05      	cmp	r3, #5
 800df42:	f040 80f3 	bne.w	800e12c <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800df46:	693b      	ldr	r3, [r7, #16]
 800df48:	2209      	movs	r2, #9
 800df4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800df4e:	e0ed      	b.n	800e12c <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800df50:	693b      	ldr	r3, [r7, #16]
 800df52:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800df56:	693b      	ldr	r3, [r7, #16]
 800df58:	891a      	ldrh	r2, [r3, #8]
 800df5a:	693b      	ldr	r3, [r7, #16]
 800df5c:	795b      	ldrb	r3, [r3, #5]
 800df5e:	2001      	movs	r0, #1
 800df60:	9000      	str	r0, [sp, #0]
 800df62:	6878      	ldr	r0, [r7, #4]
 800df64:	f001 ff91 	bl	800fe8a <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800df68:	693b      	ldr	r3, [r7, #16]
 800df6a:	2206      	movs	r2, #6
 800df6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800df70:	e0e7      	b.n	800e142 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	795b      	ldrb	r3, [r3, #5]
 800df76:	4619      	mov	r1, r3
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f005 fda7 	bl	8013acc <USBH_LL_GetURBState>
 800df7e:	4603      	mov	r3, r0
 800df80:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800df82:	7d3b      	ldrb	r3, [r7, #20]
 800df84:	2b01      	cmp	r3, #1
 800df86:	d12f      	bne.n	800dfe8 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800df88:	693b      	ldr	r3, [r7, #16]
 800df8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df8c:	693a      	ldr	r2, [r7, #16]
 800df8e:	8912      	ldrh	r2, [r2, #8]
 800df90:	4293      	cmp	r3, r2
 800df92:	d910      	bls.n	800dfb6 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800df94:	693b      	ldr	r3, [r7, #16]
 800df96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df9a:	693a      	ldr	r2, [r7, #16]
 800df9c:	8912      	ldrh	r2, [r2, #8]
 800df9e:	441a      	add	r2, r3
 800dfa0:	693b      	ldr	r3, [r7, #16]
 800dfa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800dfa6:	693b      	ldr	r3, [r7, #16]
 800dfa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dfaa:	693a      	ldr	r2, [r7, #16]
 800dfac:	8912      	ldrh	r2, [r2, #8]
 800dfae:	1a9a      	subs	r2, r3, r2
 800dfb0:	693b      	ldr	r3, [r7, #16]
 800dfb2:	65da      	str	r2, [r3, #92]	; 0x5c
 800dfb4:	e002      	b.n	800dfbc <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800dfb6:	693b      	ldr	r3, [r7, #16]
 800dfb8:	2200      	movs	r2, #0
 800dfba:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800dfbc:	693b      	ldr	r3, [r7, #16]
 800dfbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d00c      	beq.n	800dfde <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800dfc4:	693b      	ldr	r3, [r7, #16]
 800dfc6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800dfca:	693b      	ldr	r3, [r7, #16]
 800dfcc:	891a      	ldrh	r2, [r3, #8]
 800dfce:	693b      	ldr	r3, [r7, #16]
 800dfd0:	795b      	ldrb	r3, [r3, #5]
 800dfd2:	2001      	movs	r0, #1
 800dfd4:	9000      	str	r0, [sp, #0]
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	f001 ff57 	bl	800fe8a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800dfdc:	e0a8      	b.n	800e130 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800dfde:	693b      	ldr	r3, [r7, #16]
 800dfe0:	2207      	movs	r2, #7
 800dfe2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800dfe6:	e0a3      	b.n	800e130 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800dfe8:	7d3b      	ldrb	r3, [r7, #20]
 800dfea:	2b02      	cmp	r3, #2
 800dfec:	d104      	bne.n	800dff8 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	2205      	movs	r2, #5
 800dff2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800dff6:	e09b      	b.n	800e130 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800dff8:	7d3b      	ldrb	r3, [r7, #20]
 800dffa:	2b05      	cmp	r3, #5
 800dffc:	f040 8098 	bne.w	800e130 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800e000:	693b      	ldr	r3, [r7, #16]
 800e002:	220a      	movs	r2, #10
 800e004:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800e008:	e092      	b.n	800e130 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800e00a:	693b      	ldr	r3, [r7, #16]
 800e00c:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800e010:	693b      	ldr	r3, [r7, #16]
 800e012:	791b      	ldrb	r3, [r3, #4]
 800e014:	220d      	movs	r2, #13
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f001 ff5c 	bl	800fed4 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	2208      	movs	r2, #8
 800e020:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800e024:	e08d      	b.n	800e142 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800e026:	693b      	ldr	r3, [r7, #16]
 800e028:	791b      	ldrb	r3, [r3, #4]
 800e02a:	4619      	mov	r1, r3
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f005 fd4d 	bl	8013acc <USBH_LL_GetURBState>
 800e032:	4603      	mov	r3, r0
 800e034:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800e036:	7d3b      	ldrb	r3, [r7, #20]
 800e038:	2b01      	cmp	r3, #1
 800e03a:	d115      	bne.n	800e068 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e03c:	693b      	ldr	r3, [r7, #16]
 800e03e:	2201      	movs	r2, #1
 800e040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	2201      	movs	r2, #1
 800e048:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f000 f8a9 	bl	800e1a4 <USBH_MSC_DecodeCSW>
 800e052:	4603      	mov	r3, r0
 800e054:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800e056:	7d7b      	ldrb	r3, [r7, #21]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d102      	bne.n	800e062 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800e05c:	2300      	movs	r3, #0
 800e05e:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800e060:	e068      	b.n	800e134 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800e062:	2302      	movs	r3, #2
 800e064:	75fb      	strb	r3, [r7, #23]
      break;
 800e066:	e065      	b.n	800e134 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800e068:	7d3b      	ldrb	r3, [r7, #20]
 800e06a:	2b05      	cmp	r3, #5
 800e06c:	d162      	bne.n	800e134 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800e06e:	693b      	ldr	r3, [r7, #16]
 800e070:	2209      	movs	r2, #9
 800e072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800e076:	e05d      	b.n	800e134 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800e078:	78fb      	ldrb	r3, [r7, #3]
 800e07a:	2200      	movs	r2, #0
 800e07c:	4619      	mov	r1, r3
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	f000 f864 	bl	800e14c <USBH_MSC_BOT_Abort>
 800e084:	4603      	mov	r3, r0
 800e086:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800e088:	7dbb      	ldrb	r3, [r7, #22]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d104      	bne.n	800e098 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800e08e:	693b      	ldr	r3, [r7, #16]
 800e090:	2207      	movs	r2, #7
 800e092:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800e096:	e04f      	b.n	800e138 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800e098:	7dbb      	ldrb	r3, [r7, #22]
 800e09a:	2b04      	cmp	r3, #4
 800e09c:	d14c      	bne.n	800e138 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800e09e:	693b      	ldr	r3, [r7, #16]
 800e0a0:	220b      	movs	r2, #11
 800e0a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800e0a6:	e047      	b.n	800e138 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800e0a8:	78fb      	ldrb	r3, [r7, #3]
 800e0aa:	2201      	movs	r2, #1
 800e0ac:	4619      	mov	r1, r3
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f000 f84c 	bl	800e14c <USBH_MSC_BOT_Abort>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800e0b8:	7dbb      	ldrb	r3, [r7, #22]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d11d      	bne.n	800e0fa <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800e0be:	693b      	ldr	r3, [r7, #16]
 800e0c0:	795b      	ldrb	r3, [r3, #5]
 800e0c2:	4619      	mov	r1, r3
 800e0c4:	6878      	ldr	r0, [r7, #4]
 800e0c6:	f005 fd5b 	bl	8013b80 <USBH_LL_GetToggle>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800e0ce:	693b      	ldr	r3, [r7, #16]
 800e0d0:	7959      	ldrb	r1, [r3, #5]
 800e0d2:	7bfb      	ldrb	r3, [r7, #15]
 800e0d4:	f1c3 0301 	rsb	r3, r3, #1
 800e0d8:	b2db      	uxtb	r3, r3
 800e0da:	461a      	mov	r2, r3
 800e0dc:	6878      	ldr	r0, [r7, #4]
 800e0de:	f005 fd1f 	bl	8013b20 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800e0e2:	693b      	ldr	r3, [r7, #16]
 800e0e4:	791b      	ldrb	r3, [r3, #4]
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	4619      	mov	r1, r3
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f005 fd18 	bl	8013b20 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800e0f0:	693b      	ldr	r3, [r7, #16]
 800e0f2:	2209      	movs	r2, #9
 800e0f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800e0f8:	e020      	b.n	800e13c <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800e0fa:	7dbb      	ldrb	r3, [r7, #22]
 800e0fc:	2b04      	cmp	r3, #4
 800e0fe:	d11d      	bne.n	800e13c <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800e100:	693b      	ldr	r3, [r7, #16]
 800e102:	220b      	movs	r2, #11
 800e104:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800e108:	e018      	b.n	800e13c <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	f7ff fdf2 	bl	800dcf4 <USBH_MSC_BOT_REQ_Reset>
 800e110:	4603      	mov	r3, r0
 800e112:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800e114:	7dfb      	ldrb	r3, [r7, #23]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d112      	bne.n	800e140 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e11a:	693b      	ldr	r3, [r7, #16]
 800e11c:	2201      	movs	r2, #1
 800e11e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800e122:	e00d      	b.n	800e140 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800e124:	bf00      	nop
 800e126:	e00c      	b.n	800e142 <USBH_MSC_BOT_Process+0x392>
      break;
 800e128:	bf00      	nop
 800e12a:	e00a      	b.n	800e142 <USBH_MSC_BOT_Process+0x392>
      break;
 800e12c:	bf00      	nop
 800e12e:	e008      	b.n	800e142 <USBH_MSC_BOT_Process+0x392>
      break;
 800e130:	bf00      	nop
 800e132:	e006      	b.n	800e142 <USBH_MSC_BOT_Process+0x392>
      break;
 800e134:	bf00      	nop
 800e136:	e004      	b.n	800e142 <USBH_MSC_BOT_Process+0x392>
      break;
 800e138:	bf00      	nop
 800e13a:	e002      	b.n	800e142 <USBH_MSC_BOT_Process+0x392>
      break;
 800e13c:	bf00      	nop
 800e13e:	e000      	b.n	800e142 <USBH_MSC_BOT_Process+0x392>
      break;
 800e140:	bf00      	nop
  }
  return status;
 800e142:	7dfb      	ldrb	r3, [r7, #23]
}
 800e144:	4618      	mov	r0, r3
 800e146:	3718      	adds	r7, #24
 800e148:	46bd      	mov	sp, r7
 800e14a:	bd80      	pop	{r7, pc}

0800e14c <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b084      	sub	sp, #16
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
 800e154:	460b      	mov	r3, r1
 800e156:	70fb      	strb	r3, [r7, #3]
 800e158:	4613      	mov	r3, r2
 800e15a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800e15c:	2302      	movs	r3, #2
 800e15e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e166:	69db      	ldr	r3, [r3, #28]
 800e168:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800e16a:	78bb      	ldrb	r3, [r7, #2]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d002      	beq.n	800e176 <USBH_MSC_BOT_Abort+0x2a>
 800e170:	2b01      	cmp	r3, #1
 800e172:	d009      	beq.n	800e188 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800e174:	e011      	b.n	800e19a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	79db      	ldrb	r3, [r3, #7]
 800e17a:	4619      	mov	r1, r3
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f001 f9a8 	bl	800f4d2 <USBH_ClrFeature>
 800e182:	4603      	mov	r3, r0
 800e184:	73fb      	strb	r3, [r7, #15]
      break;
 800e186:	e008      	b.n	800e19a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800e188:	68bb      	ldr	r3, [r7, #8]
 800e18a:	799b      	ldrb	r3, [r3, #6]
 800e18c:	4619      	mov	r1, r3
 800e18e:	6878      	ldr	r0, [r7, #4]
 800e190:	f001 f99f 	bl	800f4d2 <USBH_ClrFeature>
 800e194:	4603      	mov	r3, r0
 800e196:	73fb      	strb	r3, [r7, #15]
      break;
 800e198:	bf00      	nop
  }
  return status;
 800e19a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e19c:	4618      	mov	r0, r3
 800e19e:	3710      	adds	r7, #16
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}

0800e1a4 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b084      	sub	sp, #16
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e1b2:	69db      	ldr	r3, [r3, #28]
 800e1b4:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800e1b6:	2301      	movs	r3, #1
 800e1b8:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800e1ba:	68bb      	ldr	r3, [r7, #8]
 800e1bc:	791b      	ldrb	r3, [r3, #4]
 800e1be:	4619      	mov	r1, r3
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f005 fbf1 	bl	80139a8 <USBH_LL_GetLastXferSize>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	2b0d      	cmp	r3, #13
 800e1ca:	d002      	beq.n	800e1d2 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800e1cc:	2302      	movs	r3, #2
 800e1ce:	73fb      	strb	r3, [r7, #15]
 800e1d0:	e024      	b.n	800e21c <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800e1d2:	68bb      	ldr	r3, [r7, #8]
 800e1d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e1d6:	4a14      	ldr	r2, [pc, #80]	; (800e228 <USBH_MSC_DecodeCSW+0x84>)
 800e1d8:	4293      	cmp	r3, r2
 800e1da:	d11d      	bne.n	800e218 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800e1e0:	68bb      	ldr	r3, [r7, #8]
 800e1e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e1e4:	429a      	cmp	r2, r3
 800e1e6:	d119      	bne.n	800e21c <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d102      	bne.n	800e1f8 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	73fb      	strb	r3, [r7, #15]
 800e1f6:	e011      	b.n	800e21c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800e1f8:	68bb      	ldr	r3, [r7, #8]
 800e1fa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e1fe:	2b01      	cmp	r3, #1
 800e200:	d102      	bne.n	800e208 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800e202:	2301      	movs	r3, #1
 800e204:	73fb      	strb	r3, [r7, #15]
 800e206:	e009      	b.n	800e21c <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800e208:	68bb      	ldr	r3, [r7, #8]
 800e20a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e20e:	2b02      	cmp	r3, #2
 800e210:	d104      	bne.n	800e21c <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800e212:	2302      	movs	r3, #2
 800e214:	73fb      	strb	r3, [r7, #15]
 800e216:	e001      	b.n	800e21c <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800e218:	2302      	movs	r3, #2
 800e21a:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800e21c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e21e:	4618      	mov	r0, r3
 800e220:	3710      	adds	r7, #16
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
 800e226:	bf00      	nop
 800e228:	53425355 	.word	0x53425355

0800e22c <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b084      	sub	sp, #16
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
 800e234:	460b      	mov	r3, r1
 800e236:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800e238:	2302      	movs	r3, #2
 800e23a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e242:	69db      	ldr	r3, [r3, #28]
 800e244:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800e24c:	2b01      	cmp	r3, #1
 800e24e:	d002      	beq.n	800e256 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800e250:	2b02      	cmp	r3, #2
 800e252:	d021      	beq.n	800e298 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800e254:	e028      	b.n	800e2a8 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	2200      	movs	r2, #0
 800e25a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	2200      	movs	r2, #0
 800e260:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800e264:	68bb      	ldr	r3, [r7, #8]
 800e266:	220a      	movs	r2, #10
 800e268:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800e26c:	68bb      	ldr	r3, [r7, #8]
 800e26e:	3363      	adds	r3, #99	; 0x63
 800e270:	2210      	movs	r2, #16
 800e272:	2100      	movs	r1, #0
 800e274:	4618      	mov	r0, r3
 800e276:	f005 fd4f 	bl	8013d18 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800e27a:	68bb      	ldr	r3, [r7, #8]
 800e27c:	2200      	movs	r2, #0
 800e27e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e282:	68bb      	ldr	r3, [r7, #8]
 800e284:	2201      	movs	r2, #1
 800e286:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800e28a:	68bb      	ldr	r3, [r7, #8]
 800e28c:	2202      	movs	r2, #2
 800e28e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800e292:	2301      	movs	r3, #1
 800e294:	73fb      	strb	r3, [r7, #15]
      break;
 800e296:	e007      	b.n	800e2a8 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800e298:	78fb      	ldrb	r3, [r7, #3]
 800e29a:	4619      	mov	r1, r3
 800e29c:	6878      	ldr	r0, [r7, #4]
 800e29e:	f7ff fd87 	bl	800ddb0 <USBH_MSC_BOT_Process>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	73fb      	strb	r3, [r7, #15]
      break;
 800e2a6:	bf00      	nop
  }

  return error;
 800e2a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	3710      	adds	r7, #16
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bd80      	pop	{r7, pc}

0800e2b2 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800e2b2:	b580      	push	{r7, lr}
 800e2b4:	b086      	sub	sp, #24
 800e2b6:	af00      	add	r7, sp, #0
 800e2b8:	60f8      	str	r0, [r7, #12]
 800e2ba:	460b      	mov	r3, r1
 800e2bc:	607a      	str	r2, [r7, #4]
 800e2be:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800e2c0:	2301      	movs	r3, #1
 800e2c2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e2ca:	69db      	ldr	r3, [r3, #28]
 800e2cc:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800e2d4:	2b01      	cmp	r3, #1
 800e2d6:	d002      	beq.n	800e2de <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800e2d8:	2b02      	cmp	r3, #2
 800e2da:	d027      	beq.n	800e32c <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800e2dc:	e05f      	b.n	800e39e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800e2de:	693b      	ldr	r3, [r7, #16]
 800e2e0:	2208      	movs	r2, #8
 800e2e2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800e2e4:	693b      	ldr	r3, [r7, #16]
 800e2e6:	2280      	movs	r2, #128	; 0x80
 800e2e8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800e2ec:	693b      	ldr	r3, [r7, #16]
 800e2ee:	220a      	movs	r2, #10
 800e2f0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800e2f4:	693b      	ldr	r3, [r7, #16]
 800e2f6:	3363      	adds	r3, #99	; 0x63
 800e2f8:	2210      	movs	r2, #16
 800e2fa:	2100      	movs	r1, #0
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	f005 fd0b 	bl	8013d18 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800e302:	693b      	ldr	r3, [r7, #16]
 800e304:	2225      	movs	r2, #37	; 0x25
 800e306:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e30a:	693b      	ldr	r3, [r7, #16]
 800e30c:	2201      	movs	r2, #1
 800e30e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800e312:	693b      	ldr	r3, [r7, #16]
 800e314:	2202      	movs	r2, #2
 800e316:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800e31a:	693b      	ldr	r3, [r7, #16]
 800e31c:	f103 0210 	add.w	r2, r3, #16
 800e320:	693b      	ldr	r3, [r7, #16]
 800e322:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800e326:	2301      	movs	r3, #1
 800e328:	75fb      	strb	r3, [r7, #23]
      break;
 800e32a:	e038      	b.n	800e39e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800e32c:	7afb      	ldrb	r3, [r7, #11]
 800e32e:	4619      	mov	r1, r3
 800e330:	68f8      	ldr	r0, [r7, #12]
 800e332:	f7ff fd3d 	bl	800ddb0 <USBH_MSC_BOT_Process>
 800e336:	4603      	mov	r3, r0
 800e338:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800e33a:	7dfb      	ldrb	r3, [r7, #23]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d12d      	bne.n	800e39c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800e340:	693b      	ldr	r3, [r7, #16]
 800e342:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e346:	3303      	adds	r3, #3
 800e348:	781b      	ldrb	r3, [r3, #0]
 800e34a:	461a      	mov	r2, r3
 800e34c:	693b      	ldr	r3, [r7, #16]
 800e34e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e352:	3302      	adds	r3, #2
 800e354:	781b      	ldrb	r3, [r3, #0]
 800e356:	021b      	lsls	r3, r3, #8
 800e358:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800e35a:	693b      	ldr	r3, [r7, #16]
 800e35c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e360:	3301      	adds	r3, #1
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800e366:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800e368:	693b      	ldr	r3, [r7, #16]
 800e36a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e36e:	781b      	ldrb	r3, [r3, #0]
 800e370:	061b      	lsls	r3, r3, #24
 800e372:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800e378:	693b      	ldr	r3, [r7, #16]
 800e37a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e37e:	3307      	adds	r3, #7
 800e380:	781b      	ldrb	r3, [r3, #0]
 800e382:	b29a      	uxth	r2, r3
 800e384:	693b      	ldr	r3, [r7, #16]
 800e386:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e38a:	3306      	adds	r3, #6
 800e38c:	781b      	ldrb	r3, [r3, #0]
 800e38e:	b29b      	uxth	r3, r3
 800e390:	021b      	lsls	r3, r3, #8
 800e392:	b29b      	uxth	r3, r3
 800e394:	4313      	orrs	r3, r2
 800e396:	b29a      	uxth	r2, r3
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	809a      	strh	r2, [r3, #4]
      break;
 800e39c:	bf00      	nop
  }

  return error;
 800e39e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	3718      	adds	r7, #24
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}

0800e3a8 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b086      	sub	sp, #24
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	60f8      	str	r0, [r7, #12]
 800e3b0:	460b      	mov	r3, r1
 800e3b2:	607a      	str	r2, [r7, #4]
 800e3b4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800e3b6:	2302      	movs	r3, #2
 800e3b8:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e3c0:	69db      	ldr	r3, [r3, #28]
 800e3c2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800e3c4:	693b      	ldr	r3, [r7, #16]
 800e3c6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800e3ca:	2b01      	cmp	r3, #1
 800e3cc:	d002      	beq.n	800e3d4 <USBH_MSC_SCSI_Inquiry+0x2c>
 800e3ce:	2b02      	cmp	r3, #2
 800e3d0:	d03d      	beq.n	800e44e <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800e3d2:	e089      	b.n	800e4e8 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	2224      	movs	r2, #36	; 0x24
 800e3d8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800e3da:	693b      	ldr	r3, [r7, #16]
 800e3dc:	2280      	movs	r2, #128	; 0x80
 800e3de:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800e3e2:	693b      	ldr	r3, [r7, #16]
 800e3e4:	220a      	movs	r2, #10
 800e3e6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800e3ea:	693b      	ldr	r3, [r7, #16]
 800e3ec:	3363      	adds	r3, #99	; 0x63
 800e3ee:	220a      	movs	r2, #10
 800e3f0:	2100      	movs	r1, #0
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	f005 fc90 	bl	8013d18 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800e3f8:	693b      	ldr	r3, [r7, #16]
 800e3fa:	2212      	movs	r2, #18
 800e3fc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800e400:	7afb      	ldrb	r3, [r7, #11]
 800e402:	015b      	lsls	r3, r3, #5
 800e404:	b2da      	uxtb	r2, r3
 800e406:	693b      	ldr	r3, [r7, #16]
 800e408:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800e40c:	693b      	ldr	r3, [r7, #16]
 800e40e:	2200      	movs	r2, #0
 800e410:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800e414:	693b      	ldr	r3, [r7, #16]
 800e416:	2200      	movs	r2, #0
 800e418:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800e41c:	693b      	ldr	r3, [r7, #16]
 800e41e:	2224      	movs	r2, #36	; 0x24
 800e420:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800e424:	693b      	ldr	r3, [r7, #16]
 800e426:	2200      	movs	r2, #0
 800e428:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e42c:	693b      	ldr	r3, [r7, #16]
 800e42e:	2201      	movs	r2, #1
 800e430:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800e434:	693b      	ldr	r3, [r7, #16]
 800e436:	2202      	movs	r2, #2
 800e438:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800e43c:	693b      	ldr	r3, [r7, #16]
 800e43e:	f103 0210 	add.w	r2, r3, #16
 800e442:	693b      	ldr	r3, [r7, #16]
 800e444:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800e448:	2301      	movs	r3, #1
 800e44a:	75fb      	strb	r3, [r7, #23]
      break;
 800e44c:	e04c      	b.n	800e4e8 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800e44e:	7afb      	ldrb	r3, [r7, #11]
 800e450:	4619      	mov	r1, r3
 800e452:	68f8      	ldr	r0, [r7, #12]
 800e454:	f7ff fcac 	bl	800ddb0 <USBH_MSC_BOT_Process>
 800e458:	4603      	mov	r3, r0
 800e45a:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800e45c:	7dfb      	ldrb	r3, [r7, #23]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d141      	bne.n	800e4e6 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800e462:	2222      	movs	r2, #34	; 0x22
 800e464:	2100      	movs	r1, #0
 800e466:	6878      	ldr	r0, [r7, #4]
 800e468:	f005 fc56 	bl	8013d18 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800e46c:	693b      	ldr	r3, [r7, #16]
 800e46e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e472:	781b      	ldrb	r3, [r3, #0]
 800e474:	f003 031f 	and.w	r3, r3, #31
 800e478:	b2da      	uxtb	r2, r3
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800e47e:	693b      	ldr	r3, [r7, #16]
 800e480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e484:	781b      	ldrb	r3, [r3, #0]
 800e486:	095b      	lsrs	r3, r3, #5
 800e488:	b2da      	uxtb	r2, r3
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800e48e:	693b      	ldr	r3, [r7, #16]
 800e490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e494:	3301      	adds	r3, #1
 800e496:	781b      	ldrb	r3, [r3, #0]
 800e498:	b25b      	sxtb	r3, r3
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	da03      	bge.n	800e4a6 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	2201      	movs	r2, #1
 800e4a2:	709a      	strb	r2, [r3, #2]
 800e4a4:	e002      	b.n	800e4ac <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	1cd8      	adds	r0, r3, #3
 800e4b0:	693b      	ldr	r3, [r7, #16]
 800e4b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e4b6:	3308      	adds	r3, #8
 800e4b8:	2208      	movs	r2, #8
 800e4ba:	4619      	mov	r1, r3
 800e4bc:	f005 fc1e 	bl	8013cfc <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f103 000c 	add.w	r0, r3, #12
 800e4c6:	693b      	ldr	r3, [r7, #16]
 800e4c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e4cc:	3310      	adds	r3, #16
 800e4ce:	2210      	movs	r2, #16
 800e4d0:	4619      	mov	r1, r3
 800e4d2:	f005 fc13 	bl	8013cfc <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	331d      	adds	r3, #29
 800e4da:	693a      	ldr	r2, [r7, #16]
 800e4dc:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800e4e0:	3220      	adds	r2, #32
 800e4e2:	6812      	ldr	r2, [r2, #0]
 800e4e4:	601a      	str	r2, [r3, #0]
      break;
 800e4e6:	bf00      	nop
  }

  return error;
 800e4e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	3718      	adds	r7, #24
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	bd80      	pop	{r7, pc}

0800e4f2 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800e4f2:	b580      	push	{r7, lr}
 800e4f4:	b086      	sub	sp, #24
 800e4f6:	af00      	add	r7, sp, #0
 800e4f8:	60f8      	str	r0, [r7, #12]
 800e4fa:	460b      	mov	r3, r1
 800e4fc:	607a      	str	r2, [r7, #4]
 800e4fe:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800e500:	2302      	movs	r3, #2
 800e502:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e50a:	69db      	ldr	r3, [r3, #28]
 800e50c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800e50e:	693b      	ldr	r3, [r7, #16]
 800e510:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800e514:	2b01      	cmp	r3, #1
 800e516:	d002      	beq.n	800e51e <USBH_MSC_SCSI_RequestSense+0x2c>
 800e518:	2b02      	cmp	r3, #2
 800e51a:	d03d      	beq.n	800e598 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800e51c:	e05d      	b.n	800e5da <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800e51e:	693b      	ldr	r3, [r7, #16]
 800e520:	220e      	movs	r2, #14
 800e522:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800e524:	693b      	ldr	r3, [r7, #16]
 800e526:	2280      	movs	r2, #128	; 0x80
 800e528:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800e52c:	693b      	ldr	r3, [r7, #16]
 800e52e:	220a      	movs	r2, #10
 800e530:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800e534:	693b      	ldr	r3, [r7, #16]
 800e536:	3363      	adds	r3, #99	; 0x63
 800e538:	2210      	movs	r2, #16
 800e53a:	2100      	movs	r1, #0
 800e53c:	4618      	mov	r0, r3
 800e53e:	f005 fbeb 	bl	8013d18 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800e542:	693b      	ldr	r3, [r7, #16]
 800e544:	2203      	movs	r2, #3
 800e546:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800e54a:	7afb      	ldrb	r3, [r7, #11]
 800e54c:	015b      	lsls	r3, r3, #5
 800e54e:	b2da      	uxtb	r2, r3
 800e550:	693b      	ldr	r3, [r7, #16]
 800e552:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800e556:	693b      	ldr	r3, [r7, #16]
 800e558:	2200      	movs	r2, #0
 800e55a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800e55e:	693b      	ldr	r3, [r7, #16]
 800e560:	2200      	movs	r2, #0
 800e562:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800e566:	693b      	ldr	r3, [r7, #16]
 800e568:	220e      	movs	r2, #14
 800e56a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	2200      	movs	r2, #0
 800e572:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e576:	693b      	ldr	r3, [r7, #16]
 800e578:	2201      	movs	r2, #1
 800e57a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800e57e:	693b      	ldr	r3, [r7, #16]
 800e580:	2202      	movs	r2, #2
 800e582:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800e586:	693b      	ldr	r3, [r7, #16]
 800e588:	f103 0210 	add.w	r2, r3, #16
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800e592:	2301      	movs	r3, #1
 800e594:	75fb      	strb	r3, [r7, #23]
      break;
 800e596:	e020      	b.n	800e5da <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800e598:	7afb      	ldrb	r3, [r7, #11]
 800e59a:	4619      	mov	r1, r3
 800e59c:	68f8      	ldr	r0, [r7, #12]
 800e59e:	f7ff fc07 	bl	800ddb0 <USBH_MSC_BOT_Process>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800e5a6:	7dfb      	ldrb	r3, [r7, #23]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d115      	bne.n	800e5d8 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800e5ac:	693b      	ldr	r3, [r7, #16]
 800e5ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e5b2:	3302      	adds	r3, #2
 800e5b4:	781b      	ldrb	r3, [r3, #0]
 800e5b6:	f003 030f 	and.w	r3, r3, #15
 800e5ba:	b2da      	uxtb	r2, r3
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800e5c0:	693b      	ldr	r3, [r7, #16]
 800e5c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e5c6:	7b1a      	ldrb	r2, [r3, #12]
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800e5cc:	693b      	ldr	r3, [r7, #16]
 800e5ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e5d2:	7b5a      	ldrb	r2, [r3, #13]
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	709a      	strb	r2, [r3, #2]
      break;
 800e5d8:	bf00      	nop
  }

  return error;
 800e5da:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3718      	adds	r7, #24
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}

0800e5e4 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b086      	sub	sp, #24
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	60f8      	str	r0, [r7, #12]
 800e5ec:	607a      	str	r2, [r7, #4]
 800e5ee:	603b      	str	r3, [r7, #0]
 800e5f0:	460b      	mov	r3, r1
 800e5f2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800e5f4:	2302      	movs	r3, #2
 800e5f6:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e5fe:	69db      	ldr	r3, [r3, #28]
 800e600:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800e602:	693b      	ldr	r3, [r7, #16]
 800e604:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800e608:	2b01      	cmp	r3, #1
 800e60a:	d002      	beq.n	800e612 <USBH_MSC_SCSI_Write+0x2e>
 800e60c:	2b02      	cmp	r3, #2
 800e60e:	d047      	beq.n	800e6a0 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800e610:	e04e      	b.n	800e6b0 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800e612:	693b      	ldr	r3, [r7, #16]
 800e614:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800e618:	461a      	mov	r2, r3
 800e61a:	6a3b      	ldr	r3, [r7, #32]
 800e61c:	fb03 f202 	mul.w	r2, r3, r2
 800e620:	693b      	ldr	r3, [r7, #16]
 800e622:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800e624:	693b      	ldr	r3, [r7, #16]
 800e626:	2200      	movs	r2, #0
 800e628:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	220a      	movs	r2, #10
 800e630:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800e634:	693b      	ldr	r3, [r7, #16]
 800e636:	3363      	adds	r3, #99	; 0x63
 800e638:	2210      	movs	r2, #16
 800e63a:	2100      	movs	r1, #0
 800e63c:	4618      	mov	r0, r3
 800e63e:	f005 fb6b 	bl	8013d18 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800e642:	693b      	ldr	r3, [r7, #16]
 800e644:	222a      	movs	r2, #42	; 0x2a
 800e646:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800e64a:	79fa      	ldrb	r2, [r7, #7]
 800e64c:	693b      	ldr	r3, [r7, #16]
 800e64e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800e652:	79ba      	ldrb	r2, [r7, #6]
 800e654:	693b      	ldr	r3, [r7, #16]
 800e656:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800e65a:	797a      	ldrb	r2, [r7, #5]
 800e65c:	693b      	ldr	r3, [r7, #16]
 800e65e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800e662:	1d3b      	adds	r3, r7, #4
 800e664:	781a      	ldrb	r2, [r3, #0]
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800e66c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800e670:	693b      	ldr	r3, [r7, #16]
 800e672:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800e676:	f107 0320 	add.w	r3, r7, #32
 800e67a:	781a      	ldrb	r2, [r3, #0]
 800e67c:	693b      	ldr	r3, [r7, #16]
 800e67e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e682:	693b      	ldr	r3, [r7, #16]
 800e684:	2201      	movs	r2, #1
 800e686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800e68a:	693b      	ldr	r3, [r7, #16]
 800e68c:	2202      	movs	r2, #2
 800e68e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800e692:	693b      	ldr	r3, [r7, #16]
 800e694:	683a      	ldr	r2, [r7, #0]
 800e696:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800e69a:	2301      	movs	r3, #1
 800e69c:	75fb      	strb	r3, [r7, #23]
      break;
 800e69e:	e007      	b.n	800e6b0 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800e6a0:	7afb      	ldrb	r3, [r7, #11]
 800e6a2:	4619      	mov	r1, r3
 800e6a4:	68f8      	ldr	r0, [r7, #12]
 800e6a6:	f7ff fb83 	bl	800ddb0 <USBH_MSC_BOT_Process>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	75fb      	strb	r3, [r7, #23]
      break;
 800e6ae:	bf00      	nop
  }

  return error;
 800e6b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	3718      	adds	r7, #24
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}

0800e6ba <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800e6ba:	b580      	push	{r7, lr}
 800e6bc:	b086      	sub	sp, #24
 800e6be:	af00      	add	r7, sp, #0
 800e6c0:	60f8      	str	r0, [r7, #12]
 800e6c2:	607a      	str	r2, [r7, #4]
 800e6c4:	603b      	str	r3, [r7, #0]
 800e6c6:	460b      	mov	r3, r1
 800e6c8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800e6ca:	2302      	movs	r3, #2
 800e6cc:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e6d4:	69db      	ldr	r3, [r3, #28]
 800e6d6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800e6d8:	693b      	ldr	r3, [r7, #16]
 800e6da:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800e6de:	2b01      	cmp	r3, #1
 800e6e0:	d002      	beq.n	800e6e8 <USBH_MSC_SCSI_Read+0x2e>
 800e6e2:	2b02      	cmp	r3, #2
 800e6e4:	d047      	beq.n	800e776 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800e6e6:	e04e      	b.n	800e786 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800e6e8:	693b      	ldr	r3, [r7, #16]
 800e6ea:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800e6ee:	461a      	mov	r2, r3
 800e6f0:	6a3b      	ldr	r3, [r7, #32]
 800e6f2:	fb03 f202 	mul.w	r2, r3, r2
 800e6f6:	693b      	ldr	r3, [r7, #16]
 800e6f8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	2280      	movs	r2, #128	; 0x80
 800e6fe:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800e702:	693b      	ldr	r3, [r7, #16]
 800e704:	220a      	movs	r2, #10
 800e706:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800e70a:	693b      	ldr	r3, [r7, #16]
 800e70c:	3363      	adds	r3, #99	; 0x63
 800e70e:	2210      	movs	r2, #16
 800e710:	2100      	movs	r1, #0
 800e712:	4618      	mov	r0, r3
 800e714:	f005 fb00 	bl	8013d18 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800e718:	693b      	ldr	r3, [r7, #16]
 800e71a:	2228      	movs	r2, #40	; 0x28
 800e71c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800e720:	79fa      	ldrb	r2, [r7, #7]
 800e722:	693b      	ldr	r3, [r7, #16]
 800e724:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800e728:	79ba      	ldrb	r2, [r7, #6]
 800e72a:	693b      	ldr	r3, [r7, #16]
 800e72c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800e730:	797a      	ldrb	r2, [r7, #5]
 800e732:	693b      	ldr	r3, [r7, #16]
 800e734:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800e738:	1d3b      	adds	r3, r7, #4
 800e73a:	781a      	ldrb	r2, [r3, #0]
 800e73c:	693b      	ldr	r3, [r7, #16]
 800e73e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800e742:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800e746:	693b      	ldr	r3, [r7, #16]
 800e748:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800e74c:	f107 0320 	add.w	r3, r7, #32
 800e750:	781a      	ldrb	r2, [r3, #0]
 800e752:	693b      	ldr	r3, [r7, #16]
 800e754:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e758:	693b      	ldr	r3, [r7, #16]
 800e75a:	2201      	movs	r2, #1
 800e75c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800e760:	693b      	ldr	r3, [r7, #16]
 800e762:	2202      	movs	r2, #2
 800e764:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800e768:	693b      	ldr	r3, [r7, #16]
 800e76a:	683a      	ldr	r2, [r7, #0]
 800e76c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800e770:	2301      	movs	r3, #1
 800e772:	75fb      	strb	r3, [r7, #23]
      break;
 800e774:	e007      	b.n	800e786 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800e776:	7afb      	ldrb	r3, [r7, #11]
 800e778:	4619      	mov	r1, r3
 800e77a:	68f8      	ldr	r0, [r7, #12]
 800e77c:	f7ff fb18 	bl	800ddb0 <USBH_MSC_BOT_Process>
 800e780:	4603      	mov	r3, r0
 800e782:	75fb      	strb	r3, [r7, #23]
      break;
 800e784:	bf00      	nop
  }

  return error;
 800e786:	7dfb      	ldrb	r3, [r7, #23]
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3718      	adds	r7, #24
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}

0800e790 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b084      	sub	sp, #16
 800e794:	af00      	add	r7, sp, #0
 800e796:	60f8      	str	r0, [r7, #12]
 800e798:	60b9      	str	r1, [r7, #8]
 800e79a:	4613      	mov	r3, r2
 800e79c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d101      	bne.n	800e7a8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800e7a4:	2302      	movs	r3, #2
 800e7a6:	e029      	b.n	800e7fc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	79fa      	ldrb	r2, [r7, #7]
 800e7ac:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800e7c0:	68f8      	ldr	r0, [r7, #12]
 800e7c2:	f000 f81f 	bl	800e804 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	2200      	movs	r2, #0
 800e7da:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d003      	beq.n	800e7f4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	68ba      	ldr	r2, [r7, #8]
 800e7f0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800e7f4:	68f8      	ldr	r0, [r7, #12]
 800e7f6:	f005 f823 	bl	8013840 <USBH_LL_Init>

  return USBH_OK;
 800e7fa:	2300      	movs	r3, #0
}
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	3710      	adds	r7, #16
 800e800:	46bd      	mov	sp, r7
 800e802:	bd80      	pop	{r7, pc}

0800e804 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800e804:	b480      	push	{r7}
 800e806:	b085      	sub	sp, #20
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800e80c:	2300      	movs	r3, #0
 800e80e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e810:	2300      	movs	r3, #0
 800e812:	60fb      	str	r3, [r7, #12]
 800e814:	e009      	b.n	800e82a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800e816:	687a      	ldr	r2, [r7, #4]
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	33e0      	adds	r3, #224	; 0xe0
 800e81c:	009b      	lsls	r3, r3, #2
 800e81e:	4413      	add	r3, r2
 800e820:	2200      	movs	r2, #0
 800e822:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	3301      	adds	r3, #1
 800e828:	60fb      	str	r3, [r7, #12]
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	2b0f      	cmp	r3, #15
 800e82e:	d9f2      	bls.n	800e816 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e830:	2300      	movs	r3, #0
 800e832:	60fb      	str	r3, [r7, #12]
 800e834:	e009      	b.n	800e84a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800e836:	687a      	ldr	r2, [r7, #4]
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	4413      	add	r3, r2
 800e83c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e840:	2200      	movs	r2, #0
 800e842:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	3301      	adds	r3, #1
 800e848:	60fb      	str	r3, [r7, #12]
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e850:	d3f1      	bcc.n	800e836 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2200      	movs	r2, #0
 800e856:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2200      	movs	r2, #0
 800e85c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	2201      	movs	r2, #1
 800e862:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2200      	movs	r2, #0
 800e868:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2201      	movs	r2, #1
 800e870:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	2240      	movs	r2, #64	; 0x40
 800e876:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2200      	movs	r2, #0
 800e87c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2200      	movs	r2, #0
 800e882:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	2201      	movs	r2, #1
 800e88a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2200      	movs	r2, #0
 800e892:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	2200      	movs	r2, #0
 800e89a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800e89e:	2300      	movs	r3, #0
}
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	3714      	adds	r7, #20
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8aa:	4770      	bx	lr

0800e8ac <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800e8ac:	b480      	push	{r7}
 800e8ae:	b085      	sub	sp, #20
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
 800e8b4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d016      	beq.n	800e8ee <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d10e      	bne.n	800e8e8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e8d0:	1c59      	adds	r1, r3, #1
 800e8d2:	687a      	ldr	r2, [r7, #4]
 800e8d4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800e8d8:	687a      	ldr	r2, [r7, #4]
 800e8da:	33de      	adds	r3, #222	; 0xde
 800e8dc:	6839      	ldr	r1, [r7, #0]
 800e8de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	73fb      	strb	r3, [r7, #15]
 800e8e6:	e004      	b.n	800e8f2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800e8e8:	2302      	movs	r3, #2
 800e8ea:	73fb      	strb	r3, [r7, #15]
 800e8ec:	e001      	b.n	800e8f2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800e8ee:	2302      	movs	r3, #2
 800e8f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e8f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	3714      	adds	r7, #20
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr

0800e900 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800e900:	b480      	push	{r7}
 800e902:	b085      	sub	sp, #20
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
 800e908:	460b      	mov	r3, r1
 800e90a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800e90c:	2300      	movs	r3, #0
 800e90e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800e916:	78fa      	ldrb	r2, [r7, #3]
 800e918:	429a      	cmp	r2, r3
 800e91a:	d204      	bcs.n	800e926 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	78fa      	ldrb	r2, [r7, #3]
 800e920:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800e924:	e001      	b.n	800e92a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800e926:	2302      	movs	r3, #2
 800e928:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e92a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e92c:	4618      	mov	r0, r3
 800e92e:	3714      	adds	r7, #20
 800e930:	46bd      	mov	sp, r7
 800e932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e936:	4770      	bx	lr

0800e938 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800e938:	b480      	push	{r7}
 800e93a:	b087      	sub	sp, #28
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
 800e940:	4608      	mov	r0, r1
 800e942:	4611      	mov	r1, r2
 800e944:	461a      	mov	r2, r3
 800e946:	4603      	mov	r3, r0
 800e948:	70fb      	strb	r3, [r7, #3]
 800e94a:	460b      	mov	r3, r1
 800e94c:	70bb      	strb	r3, [r7, #2]
 800e94e:	4613      	mov	r3, r2
 800e950:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800e952:	2300      	movs	r3, #0
 800e954:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800e956:	2300      	movs	r3, #0
 800e958:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800e960:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e962:	e025      	b.n	800e9b0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800e964:	7dfb      	ldrb	r3, [r7, #23]
 800e966:	221a      	movs	r2, #26
 800e968:	fb02 f303 	mul.w	r3, r2, r3
 800e96c:	3308      	adds	r3, #8
 800e96e:	68fa      	ldr	r2, [r7, #12]
 800e970:	4413      	add	r3, r2
 800e972:	3302      	adds	r3, #2
 800e974:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e976:	693b      	ldr	r3, [r7, #16]
 800e978:	795b      	ldrb	r3, [r3, #5]
 800e97a:	78fa      	ldrb	r2, [r7, #3]
 800e97c:	429a      	cmp	r2, r3
 800e97e:	d002      	beq.n	800e986 <USBH_FindInterface+0x4e>
 800e980:	78fb      	ldrb	r3, [r7, #3]
 800e982:	2bff      	cmp	r3, #255	; 0xff
 800e984:	d111      	bne.n	800e9aa <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e986:	693b      	ldr	r3, [r7, #16]
 800e988:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e98a:	78ba      	ldrb	r2, [r7, #2]
 800e98c:	429a      	cmp	r2, r3
 800e98e:	d002      	beq.n	800e996 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e990:	78bb      	ldrb	r3, [r7, #2]
 800e992:	2bff      	cmp	r3, #255	; 0xff
 800e994:	d109      	bne.n	800e9aa <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e996:	693b      	ldr	r3, [r7, #16]
 800e998:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e99a:	787a      	ldrb	r2, [r7, #1]
 800e99c:	429a      	cmp	r2, r3
 800e99e:	d002      	beq.n	800e9a6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e9a0:	787b      	ldrb	r3, [r7, #1]
 800e9a2:	2bff      	cmp	r3, #255	; 0xff
 800e9a4:	d101      	bne.n	800e9aa <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800e9a6:	7dfb      	ldrb	r3, [r7, #23]
 800e9a8:	e006      	b.n	800e9b8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800e9aa:	7dfb      	ldrb	r3, [r7, #23]
 800e9ac:	3301      	adds	r3, #1
 800e9ae:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e9b0:	7dfb      	ldrb	r3, [r7, #23]
 800e9b2:	2b01      	cmp	r3, #1
 800e9b4:	d9d6      	bls.n	800e964 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800e9b6:	23ff      	movs	r3, #255	; 0xff
}
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	371c      	adds	r7, #28
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c2:	4770      	bx	lr

0800e9c4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b082      	sub	sp, #8
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800e9cc:	6878      	ldr	r0, [r7, #4]
 800e9ce:	f004 ff73 	bl	80138b8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800e9d2:	2101      	movs	r1, #1
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f005 f88c 	bl	8013af2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800e9da:	2300      	movs	r3, #0
}
 800e9dc:	4618      	mov	r0, r3
 800e9de:	3708      	adds	r7, #8
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	bd80      	pop	{r7, pc}

0800e9e4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b088      	sub	sp, #32
 800e9e8:	af04      	add	r7, sp, #16
 800e9ea:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800e9ec:	2302      	movs	r3, #2
 800e9ee:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800e9fa:	b2db      	uxtb	r3, r3
 800e9fc:	2b01      	cmp	r3, #1
 800e9fe:	d102      	bne.n	800ea06 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2203      	movs	r2, #3
 800ea04:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	781b      	ldrb	r3, [r3, #0]
 800ea0a:	b2db      	uxtb	r3, r3
 800ea0c:	2b0b      	cmp	r3, #11
 800ea0e:	f200 81be 	bhi.w	800ed8e <USBH_Process+0x3aa>
 800ea12:	a201      	add	r2, pc, #4	; (adr r2, 800ea18 <USBH_Process+0x34>)
 800ea14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea18:	0800ea49 	.word	0x0800ea49
 800ea1c:	0800ea7b 	.word	0x0800ea7b
 800ea20:	0800eae3 	.word	0x0800eae3
 800ea24:	0800ed29 	.word	0x0800ed29
 800ea28:	0800ed8f 	.word	0x0800ed8f
 800ea2c:	0800eb87 	.word	0x0800eb87
 800ea30:	0800eccf 	.word	0x0800eccf
 800ea34:	0800ebbd 	.word	0x0800ebbd
 800ea38:	0800ebdd 	.word	0x0800ebdd
 800ea3c:	0800ebfd 	.word	0x0800ebfd
 800ea40:	0800ec41 	.word	0x0800ec41
 800ea44:	0800ed11 	.word	0x0800ed11
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ea4e:	b2db      	uxtb	r3, r3
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	f000 819e 	beq.w	800ed92 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	2201      	movs	r2, #1
 800ea5a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800ea5c:	20c8      	movs	r0, #200	; 0xc8
 800ea5e:	f005 f8bf 	bl	8013be0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f004 ff85 	bl	8013972 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2200      	movs	r2, #0
 800ea74:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ea78:	e18b      	b.n	800ed92 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800ea80:	2b01      	cmp	r3, #1
 800ea82:	d107      	bne.n	800ea94 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2200      	movs	r2, #0
 800ea88:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2202      	movs	r2, #2
 800ea90:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ea92:	e18d      	b.n	800edb0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ea9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ea9e:	d914      	bls.n	800eaca <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800eaa6:	3301      	adds	r3, #1
 800eaa8:	b2da      	uxtb	r2, r3
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800eab6:	2b03      	cmp	r3, #3
 800eab8:	d903      	bls.n	800eac2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	220d      	movs	r2, #13
 800eabe:	701a      	strb	r2, [r3, #0]
      break;
 800eac0:	e176      	b.n	800edb0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2200      	movs	r2, #0
 800eac6:	701a      	strb	r2, [r3, #0]
      break;
 800eac8:	e172      	b.n	800edb0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ead0:	f103 020a 	add.w	r2, r3, #10
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800eada:	200a      	movs	r0, #10
 800eadc:	f005 f880 	bl	8013be0 <USBH_Delay>
      break;
 800eae0:	e166      	b.n	800edb0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d005      	beq.n	800eaf8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800eaf2:	2104      	movs	r1, #4
 800eaf4:	6878      	ldr	r0, [r7, #4]
 800eaf6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800eaf8:	2064      	movs	r0, #100	; 0x64
 800eafa:	f005 f871 	bl	8013be0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800eafe:	6878      	ldr	r0, [r7, #4]
 800eb00:	f004 ff10 	bl	8013924 <USBH_LL_GetSpeed>
 800eb04:	4603      	mov	r3, r0
 800eb06:	461a      	mov	r2, r3
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2205      	movs	r2, #5
 800eb12:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800eb14:	2100      	movs	r1, #0
 800eb16:	6878      	ldr	r0, [r7, #4]
 800eb18:	f001 fa29 	bl	800ff6e <USBH_AllocPipe>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	461a      	mov	r2, r3
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800eb24:	2180      	movs	r1, #128	; 0x80
 800eb26:	6878      	ldr	r0, [r7, #4]
 800eb28:	f001 fa21 	bl	800ff6e <USBH_AllocPipe>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	461a      	mov	r2, r3
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	7919      	ldrb	r1, [r3, #4]
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800eb44:	687a      	ldr	r2, [r7, #4]
 800eb46:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800eb48:	b292      	uxth	r2, r2
 800eb4a:	9202      	str	r2, [sp, #8]
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	9201      	str	r2, [sp, #4]
 800eb50:	9300      	str	r3, [sp, #0]
 800eb52:	4603      	mov	r3, r0
 800eb54:	2280      	movs	r2, #128	; 0x80
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	f001 f9da 	bl	800ff10 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	7959      	ldrb	r1, [r3, #5]
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800eb6c:	687a      	ldr	r2, [r7, #4]
 800eb6e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800eb70:	b292      	uxth	r2, r2
 800eb72:	9202      	str	r2, [sp, #8]
 800eb74:	2200      	movs	r2, #0
 800eb76:	9201      	str	r2, [sp, #4]
 800eb78:	9300      	str	r3, [sp, #0]
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	6878      	ldr	r0, [r7, #4]
 800eb80:	f001 f9c6 	bl	800ff10 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800eb84:	e114      	b.n	800edb0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	f000 f918 	bl	800edbc <USBH_HandleEnum>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800eb90:	7bbb      	ldrb	r3, [r7, #14]
 800eb92:	b2db      	uxtb	r3, r3
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	f040 80fe 	bne.w	800ed96 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800eba8:	2b01      	cmp	r3, #1
 800ebaa:	d103      	bne.n	800ebb4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2208      	movs	r2, #8
 800ebb0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ebb2:	e0f0      	b.n	800ed96 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2207      	movs	r2, #7
 800ebb8:	701a      	strb	r2, [r3, #0]
      break;
 800ebba:	e0ec      	b.n	800ed96 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	f000 80e9 	beq.w	800ed9a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ebce:	2101      	movs	r1, #1
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2208      	movs	r2, #8
 800ebd8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800ebda:	e0de      	b.n	800ed9a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800ebe2:	b29b      	uxth	r3, r3
 800ebe4:	4619      	mov	r1, r3
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f000 fc2c 	bl	800f444 <USBH_SetCfg>
 800ebec:	4603      	mov	r3, r0
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	f040 80d5 	bne.w	800ed9e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2209      	movs	r2, #9
 800ebf8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ebfa:	e0d0      	b.n	800ed9e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ec02:	f003 0320 	and.w	r3, r3, #32
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d016      	beq.n	800ec38 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800ec0a:	2101      	movs	r1, #1
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f000 fc3c 	bl	800f48a <USBH_SetFeature>
 800ec12:	4603      	mov	r3, r0
 800ec14:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ec16:	7bbb      	ldrb	r3, [r7, #14]
 800ec18:	b2db      	uxtb	r3, r3
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d103      	bne.n	800ec26 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	220a      	movs	r2, #10
 800ec22:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ec24:	e0bd      	b.n	800eda2 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800ec26:	7bbb      	ldrb	r3, [r7, #14]
 800ec28:	b2db      	uxtb	r3, r3
 800ec2a:	2b03      	cmp	r3, #3
 800ec2c:	f040 80b9 	bne.w	800eda2 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	220a      	movs	r2, #10
 800ec34:	701a      	strb	r2, [r3, #0]
      break;
 800ec36:	e0b4      	b.n	800eda2 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	220a      	movs	r2, #10
 800ec3c:	701a      	strb	r2, [r3, #0]
      break;
 800ec3e:	e0b0      	b.n	800eda2 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	f000 80ad 	beq.w	800eda6 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2200      	movs	r2, #0
 800ec50:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ec54:	2300      	movs	r3, #0
 800ec56:	73fb      	strb	r3, [r7, #15]
 800ec58:	e016      	b.n	800ec88 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800ec5a:	7bfa      	ldrb	r2, [r7, #15]
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	32de      	adds	r2, #222	; 0xde
 800ec60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec64:	791a      	ldrb	r2, [r3, #4]
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800ec6c:	429a      	cmp	r2, r3
 800ec6e:	d108      	bne.n	800ec82 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800ec70:	7bfa      	ldrb	r2, [r7, #15]
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	32de      	adds	r2, #222	; 0xde
 800ec76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800ec80:	e005      	b.n	800ec8e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ec82:	7bfb      	ldrb	r3, [r7, #15]
 800ec84:	3301      	adds	r3, #1
 800ec86:	73fb      	strb	r3, [r7, #15]
 800ec88:	7bfb      	ldrb	r3, [r7, #15]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d0e5      	beq.n	800ec5a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d016      	beq.n	800ecc6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ec9e:	689b      	ldr	r3, [r3, #8]
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	4798      	blx	r3
 800eca4:	4603      	mov	r3, r0
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d109      	bne.n	800ecbe <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2206      	movs	r2, #6
 800ecae:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ecb6:	2103      	movs	r1, #3
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ecbc:	e073      	b.n	800eda6 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	220d      	movs	r2, #13
 800ecc2:	701a      	strb	r2, [r3, #0]
      break;
 800ecc4:	e06f      	b.n	800eda6 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	220d      	movs	r2, #13
 800ecca:	701a      	strb	r2, [r3, #0]
      break;
 800eccc:	e06b      	b.n	800eda6 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d017      	beq.n	800ed08 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ecde:	691b      	ldr	r3, [r3, #16]
 800ece0:	6878      	ldr	r0, [r7, #4]
 800ece2:	4798      	blx	r3
 800ece4:	4603      	mov	r3, r0
 800ece6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ece8:	7bbb      	ldrb	r3, [r7, #14]
 800ecea:	b2db      	uxtb	r3, r3
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d103      	bne.n	800ecf8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	220b      	movs	r2, #11
 800ecf4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ecf6:	e058      	b.n	800edaa <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800ecf8:	7bbb      	ldrb	r3, [r7, #14]
 800ecfa:	b2db      	uxtb	r3, r3
 800ecfc:	2b02      	cmp	r3, #2
 800ecfe:	d154      	bne.n	800edaa <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	220d      	movs	r2, #13
 800ed04:	701a      	strb	r2, [r3, #0]
      break;
 800ed06:	e050      	b.n	800edaa <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	220d      	movs	r2, #13
 800ed0c:	701a      	strb	r2, [r3, #0]
      break;
 800ed0e:	e04c      	b.n	800edaa <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d049      	beq.n	800edae <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ed20:	695b      	ldr	r3, [r3, #20]
 800ed22:	6878      	ldr	r0, [r7, #4]
 800ed24:	4798      	blx	r3
      }
      break;
 800ed26:	e042      	b.n	800edae <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800ed30:	6878      	ldr	r0, [r7, #4]
 800ed32:	f7ff fd67 	bl	800e804 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d009      	beq.n	800ed54 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ed46:	68db      	ldr	r3, [r3, #12]
 800ed48:	6878      	ldr	r0, [r7, #4]
 800ed4a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2200      	movs	r2, #0
 800ed50:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d005      	beq.n	800ed6a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ed64:	2105      	movs	r1, #5
 800ed66:	6878      	ldr	r0, [r7, #4]
 800ed68:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800ed70:	b2db      	uxtb	r3, r3
 800ed72:	2b01      	cmp	r3, #1
 800ed74:	d107      	bne.n	800ed86 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	2200      	movs	r2, #0
 800ed7a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800ed7e:	6878      	ldr	r0, [r7, #4]
 800ed80:	f7ff fe20 	bl	800e9c4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ed84:	e014      	b.n	800edb0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800ed86:	6878      	ldr	r0, [r7, #4]
 800ed88:	f004 fd96 	bl	80138b8 <USBH_LL_Start>
      break;
 800ed8c:	e010      	b.n	800edb0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800ed8e:	bf00      	nop
 800ed90:	e00e      	b.n	800edb0 <USBH_Process+0x3cc>
      break;
 800ed92:	bf00      	nop
 800ed94:	e00c      	b.n	800edb0 <USBH_Process+0x3cc>
      break;
 800ed96:	bf00      	nop
 800ed98:	e00a      	b.n	800edb0 <USBH_Process+0x3cc>
    break;
 800ed9a:	bf00      	nop
 800ed9c:	e008      	b.n	800edb0 <USBH_Process+0x3cc>
      break;
 800ed9e:	bf00      	nop
 800eda0:	e006      	b.n	800edb0 <USBH_Process+0x3cc>
      break;
 800eda2:	bf00      	nop
 800eda4:	e004      	b.n	800edb0 <USBH_Process+0x3cc>
      break;
 800eda6:	bf00      	nop
 800eda8:	e002      	b.n	800edb0 <USBH_Process+0x3cc>
      break;
 800edaa:	bf00      	nop
 800edac:	e000      	b.n	800edb0 <USBH_Process+0x3cc>
      break;
 800edae:	bf00      	nop
  }
  return USBH_OK;
 800edb0:	2300      	movs	r3, #0
}
 800edb2:	4618      	mov	r0, r3
 800edb4:	3710      	adds	r7, #16
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd80      	pop	{r7, pc}
 800edba:	bf00      	nop

0800edbc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b088      	sub	sp, #32
 800edc0:	af04      	add	r7, sp, #16
 800edc2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800edc4:	2301      	movs	r3, #1
 800edc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800edc8:	2301      	movs	r3, #1
 800edca:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	785b      	ldrb	r3, [r3, #1]
 800edd0:	2b07      	cmp	r3, #7
 800edd2:	f200 81c1 	bhi.w	800f158 <USBH_HandleEnum+0x39c>
 800edd6:	a201      	add	r2, pc, #4	; (adr r2, 800eddc <USBH_HandleEnum+0x20>)
 800edd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eddc:	0800edfd 	.word	0x0800edfd
 800ede0:	0800eebb 	.word	0x0800eebb
 800ede4:	0800ef25 	.word	0x0800ef25
 800ede8:	0800efb3 	.word	0x0800efb3
 800edec:	0800f01d 	.word	0x0800f01d
 800edf0:	0800f08d 	.word	0x0800f08d
 800edf4:	0800f0d3 	.word	0x0800f0d3
 800edf8:	0800f119 	.word	0x0800f119
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800edfc:	2108      	movs	r1, #8
 800edfe:	6878      	ldr	r0, [r7, #4]
 800ee00:	f000 fa50 	bl	800f2a4 <USBH_Get_DevDesc>
 800ee04:	4603      	mov	r3, r0
 800ee06:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ee08:	7bbb      	ldrb	r3, [r7, #14]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d130      	bne.n	800ee70 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2201      	movs	r2, #1
 800ee1c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	7919      	ldrb	r1, [r3, #4]
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ee2e:	687a      	ldr	r2, [r7, #4]
 800ee30:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ee32:	b292      	uxth	r2, r2
 800ee34:	9202      	str	r2, [sp, #8]
 800ee36:	2200      	movs	r2, #0
 800ee38:	9201      	str	r2, [sp, #4]
 800ee3a:	9300      	str	r3, [sp, #0]
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	2280      	movs	r2, #128	; 0x80
 800ee40:	6878      	ldr	r0, [r7, #4]
 800ee42:	f001 f865 	bl	800ff10 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	7959      	ldrb	r1, [r3, #5]
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ee56:	687a      	ldr	r2, [r7, #4]
 800ee58:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ee5a:	b292      	uxth	r2, r2
 800ee5c:	9202      	str	r2, [sp, #8]
 800ee5e:	2200      	movs	r2, #0
 800ee60:	9201      	str	r2, [sp, #4]
 800ee62:	9300      	str	r3, [sp, #0]
 800ee64:	4603      	mov	r3, r0
 800ee66:	2200      	movs	r2, #0
 800ee68:	6878      	ldr	r0, [r7, #4]
 800ee6a:	f001 f851 	bl	800ff10 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ee6e:	e175      	b.n	800f15c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ee70:	7bbb      	ldrb	r3, [r7, #14]
 800ee72:	2b03      	cmp	r3, #3
 800ee74:	f040 8172 	bne.w	800f15c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ee7e:	3301      	adds	r3, #1
 800ee80:	b2da      	uxtb	r2, r3
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ee8e:	2b03      	cmp	r3, #3
 800ee90:	d903      	bls.n	800ee9a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	220d      	movs	r2, #13
 800ee96:	701a      	strb	r2, [r3, #0]
      break;
 800ee98:	e160      	b.n	800f15c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	795b      	ldrb	r3, [r3, #5]
 800ee9e:	4619      	mov	r1, r3
 800eea0:	6878      	ldr	r0, [r7, #4]
 800eea2:	f001 f885 	bl	800ffb0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	791b      	ldrb	r3, [r3, #4]
 800eeaa:	4619      	mov	r1, r3
 800eeac:	6878      	ldr	r0, [r7, #4]
 800eeae:	f001 f87f 	bl	800ffb0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	701a      	strb	r2, [r3, #0]
      break;
 800eeb8:	e150      	b.n	800f15c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800eeba:	2112      	movs	r1, #18
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	f000 f9f1 	bl	800f2a4 <USBH_Get_DevDesc>
 800eec2:	4603      	mov	r3, r0
 800eec4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800eec6:	7bbb      	ldrb	r3, [r7, #14]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d103      	bne.n	800eed4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2202      	movs	r2, #2
 800eed0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800eed2:	e145      	b.n	800f160 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800eed4:	7bbb      	ldrb	r3, [r7, #14]
 800eed6:	2b03      	cmp	r3, #3
 800eed8:	f040 8142 	bne.w	800f160 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800eee2:	3301      	adds	r3, #1
 800eee4:	b2da      	uxtb	r2, r3
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800eef2:	2b03      	cmp	r3, #3
 800eef4:	d903      	bls.n	800eefe <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	220d      	movs	r2, #13
 800eefa:	701a      	strb	r2, [r3, #0]
      break;
 800eefc:	e130      	b.n	800f160 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	795b      	ldrb	r3, [r3, #5]
 800ef02:	4619      	mov	r1, r3
 800ef04:	6878      	ldr	r0, [r7, #4]
 800ef06:	f001 f853 	bl	800ffb0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	791b      	ldrb	r3, [r3, #4]
 800ef0e:	4619      	mov	r1, r3
 800ef10:	6878      	ldr	r0, [r7, #4]
 800ef12:	f001 f84d 	bl	800ffb0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	2200      	movs	r2, #0
 800ef1a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	2200      	movs	r2, #0
 800ef20:	701a      	strb	r2, [r3, #0]
      break;
 800ef22:	e11d      	b.n	800f160 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ef24:	2101      	movs	r1, #1
 800ef26:	6878      	ldr	r0, [r7, #4]
 800ef28:	f000 fa68 	bl	800f3fc <USBH_SetAddress>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ef30:	7bbb      	ldrb	r3, [r7, #14]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d132      	bne.n	800ef9c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800ef36:	2002      	movs	r0, #2
 800ef38:	f004 fe52 	bl	8013be0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2201      	movs	r2, #1
 800ef40:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2203      	movs	r2, #3
 800ef48:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	7919      	ldrb	r1, [r3, #4]
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ef5a:	687a      	ldr	r2, [r7, #4]
 800ef5c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ef5e:	b292      	uxth	r2, r2
 800ef60:	9202      	str	r2, [sp, #8]
 800ef62:	2200      	movs	r2, #0
 800ef64:	9201      	str	r2, [sp, #4]
 800ef66:	9300      	str	r3, [sp, #0]
 800ef68:	4603      	mov	r3, r0
 800ef6a:	2280      	movs	r2, #128	; 0x80
 800ef6c:	6878      	ldr	r0, [r7, #4]
 800ef6e:	f000 ffcf 	bl	800ff10 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	7959      	ldrb	r1, [r3, #5]
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ef82:	687a      	ldr	r2, [r7, #4]
 800ef84:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ef86:	b292      	uxth	r2, r2
 800ef88:	9202      	str	r2, [sp, #8]
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	9201      	str	r2, [sp, #4]
 800ef8e:	9300      	str	r3, [sp, #0]
 800ef90:	4603      	mov	r3, r0
 800ef92:	2200      	movs	r2, #0
 800ef94:	6878      	ldr	r0, [r7, #4]
 800ef96:	f000 ffbb 	bl	800ff10 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ef9a:	e0e3      	b.n	800f164 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ef9c:	7bbb      	ldrb	r3, [r7, #14]
 800ef9e:	2b03      	cmp	r3, #3
 800efa0:	f040 80e0 	bne.w	800f164 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	220d      	movs	r2, #13
 800efa8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2200      	movs	r2, #0
 800efae:	705a      	strb	r2, [r3, #1]
      break;
 800efb0:	e0d8      	b.n	800f164 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800efb2:	2109      	movs	r1, #9
 800efb4:	6878      	ldr	r0, [r7, #4]
 800efb6:	f000 f99d 	bl	800f2f4 <USBH_Get_CfgDesc>
 800efba:	4603      	mov	r3, r0
 800efbc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800efbe:	7bbb      	ldrb	r3, [r7, #14]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d103      	bne.n	800efcc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2204      	movs	r2, #4
 800efc8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800efca:	e0cd      	b.n	800f168 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800efcc:	7bbb      	ldrb	r3, [r7, #14]
 800efce:	2b03      	cmp	r3, #3
 800efd0:	f040 80ca 	bne.w	800f168 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800efda:	3301      	adds	r3, #1
 800efdc:	b2da      	uxtb	r2, r3
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800efea:	2b03      	cmp	r3, #3
 800efec:	d903      	bls.n	800eff6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	220d      	movs	r2, #13
 800eff2:	701a      	strb	r2, [r3, #0]
      break;
 800eff4:	e0b8      	b.n	800f168 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	795b      	ldrb	r3, [r3, #5]
 800effa:	4619      	mov	r1, r3
 800effc:	6878      	ldr	r0, [r7, #4]
 800effe:	f000 ffd7 	bl	800ffb0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	791b      	ldrb	r3, [r3, #4]
 800f006:	4619      	mov	r1, r3
 800f008:	6878      	ldr	r0, [r7, #4]
 800f00a:	f000 ffd1 	bl	800ffb0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	2200      	movs	r2, #0
 800f012:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2200      	movs	r2, #0
 800f018:	701a      	strb	r2, [r3, #0]
      break;
 800f01a:	e0a5      	b.n	800f168 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800f022:	4619      	mov	r1, r3
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f000 f965 	bl	800f2f4 <USBH_Get_CfgDesc>
 800f02a:	4603      	mov	r3, r0
 800f02c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f02e:	7bbb      	ldrb	r3, [r7, #14]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d103      	bne.n	800f03c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2205      	movs	r2, #5
 800f038:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f03a:	e097      	b.n	800f16c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f03c:	7bbb      	ldrb	r3, [r7, #14]
 800f03e:	2b03      	cmp	r3, #3
 800f040:	f040 8094 	bne.w	800f16c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f04a:	3301      	adds	r3, #1
 800f04c:	b2da      	uxtb	r2, r3
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f05a:	2b03      	cmp	r3, #3
 800f05c:	d903      	bls.n	800f066 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	220d      	movs	r2, #13
 800f062:	701a      	strb	r2, [r3, #0]
      break;
 800f064:	e082      	b.n	800f16c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	795b      	ldrb	r3, [r3, #5]
 800f06a:	4619      	mov	r1, r3
 800f06c:	6878      	ldr	r0, [r7, #4]
 800f06e:	f000 ff9f 	bl	800ffb0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	791b      	ldrb	r3, [r3, #4]
 800f076:	4619      	mov	r1, r3
 800f078:	6878      	ldr	r0, [r7, #4]
 800f07a:	f000 ff99 	bl	800ffb0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	2200      	movs	r2, #0
 800f082:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2200      	movs	r2, #0
 800f088:	701a      	strb	r2, [r3, #0]
      break;
 800f08a:	e06f      	b.n	800f16c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800f092:	2b00      	cmp	r3, #0
 800f094:	d019      	beq.n	800f0ca <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f0a2:	23ff      	movs	r3, #255	; 0xff
 800f0a4:	6878      	ldr	r0, [r7, #4]
 800f0a6:	f000 f949 	bl	800f33c <USBH_Get_StringDesc>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f0ae:	7bbb      	ldrb	r3, [r7, #14]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d103      	bne.n	800f0bc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2206      	movs	r2, #6
 800f0b8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800f0ba:	e059      	b.n	800f170 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f0bc:	7bbb      	ldrb	r3, [r7, #14]
 800f0be:	2b03      	cmp	r3, #3
 800f0c0:	d156      	bne.n	800f170 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2206      	movs	r2, #6
 800f0c6:	705a      	strb	r2, [r3, #1]
      break;
 800f0c8:	e052      	b.n	800f170 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	2206      	movs	r2, #6
 800f0ce:	705a      	strb	r2, [r3, #1]
      break;
 800f0d0:	e04e      	b.n	800f170 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d019      	beq.n	800f110 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f0e8:	23ff      	movs	r3, #255	; 0xff
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	f000 f926 	bl	800f33c <USBH_Get_StringDesc>
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f0f4:	7bbb      	ldrb	r3, [r7, #14]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d103      	bne.n	800f102 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	2207      	movs	r2, #7
 800f0fe:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800f100:	e038      	b.n	800f174 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f102:	7bbb      	ldrb	r3, [r7, #14]
 800f104:	2b03      	cmp	r3, #3
 800f106:	d135      	bne.n	800f174 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2207      	movs	r2, #7
 800f10c:	705a      	strb	r2, [r3, #1]
      break;
 800f10e:	e031      	b.n	800f174 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2207      	movs	r2, #7
 800f114:	705a      	strb	r2, [r3, #1]
      break;
 800f116:	e02d      	b.n	800f174 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d017      	beq.n	800f152 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f12e:	23ff      	movs	r3, #255	; 0xff
 800f130:	6878      	ldr	r0, [r7, #4]
 800f132:	f000 f903 	bl	800f33c <USBH_Get_StringDesc>
 800f136:	4603      	mov	r3, r0
 800f138:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f13a:	7bbb      	ldrb	r3, [r7, #14]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d102      	bne.n	800f146 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800f140:	2300      	movs	r3, #0
 800f142:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800f144:	e018      	b.n	800f178 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f146:	7bbb      	ldrb	r3, [r7, #14]
 800f148:	2b03      	cmp	r3, #3
 800f14a:	d115      	bne.n	800f178 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800f14c:	2300      	movs	r3, #0
 800f14e:	73fb      	strb	r3, [r7, #15]
      break;
 800f150:	e012      	b.n	800f178 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800f152:	2300      	movs	r3, #0
 800f154:	73fb      	strb	r3, [r7, #15]
      break;
 800f156:	e00f      	b.n	800f178 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800f158:	bf00      	nop
 800f15a:	e00e      	b.n	800f17a <USBH_HandleEnum+0x3be>
      break;
 800f15c:	bf00      	nop
 800f15e:	e00c      	b.n	800f17a <USBH_HandleEnum+0x3be>
      break;
 800f160:	bf00      	nop
 800f162:	e00a      	b.n	800f17a <USBH_HandleEnum+0x3be>
      break;
 800f164:	bf00      	nop
 800f166:	e008      	b.n	800f17a <USBH_HandleEnum+0x3be>
      break;
 800f168:	bf00      	nop
 800f16a:	e006      	b.n	800f17a <USBH_HandleEnum+0x3be>
      break;
 800f16c:	bf00      	nop
 800f16e:	e004      	b.n	800f17a <USBH_HandleEnum+0x3be>
      break;
 800f170:	bf00      	nop
 800f172:	e002      	b.n	800f17a <USBH_HandleEnum+0x3be>
      break;
 800f174:	bf00      	nop
 800f176:	e000      	b.n	800f17a <USBH_HandleEnum+0x3be>
      break;
 800f178:	bf00      	nop
  }
  return Status;
 800f17a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	3710      	adds	r7, #16
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}

0800f184 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800f184:	b480      	push	{r7}
 800f186:	b083      	sub	sp, #12
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
 800f18c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	683a      	ldr	r2, [r7, #0]
 800f192:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800f196:	bf00      	nop
 800f198:	370c      	adds	r7, #12
 800f19a:	46bd      	mov	sp, r7
 800f19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a0:	4770      	bx	lr

0800f1a2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800f1a2:	b580      	push	{r7, lr}
 800f1a4:	b082      	sub	sp, #8
 800f1a6:	af00      	add	r7, sp, #0
 800f1a8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f1b0:	1c5a      	adds	r2, r3, #1
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800f1b8:	6878      	ldr	r0, [r7, #4]
 800f1ba:	f000 f804 	bl	800f1c6 <USBH_HandleSof>
}
 800f1be:	bf00      	nop
 800f1c0:	3708      	adds	r7, #8
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}

0800f1c6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800f1c6:	b580      	push	{r7, lr}
 800f1c8:	b082      	sub	sp, #8
 800f1ca:	af00      	add	r7, sp, #0
 800f1cc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	781b      	ldrb	r3, [r3, #0]
 800f1d2:	b2db      	uxtb	r3, r3
 800f1d4:	2b0b      	cmp	r3, #11
 800f1d6:	d10a      	bne.n	800f1ee <USBH_HandleSof+0x28>
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d005      	beq.n	800f1ee <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f1e8:	699b      	ldr	r3, [r3, #24]
 800f1ea:	6878      	ldr	r0, [r7, #4]
 800f1ec:	4798      	blx	r3
  }
}
 800f1ee:	bf00      	nop
 800f1f0:	3708      	adds	r7, #8
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bd80      	pop	{r7, pc}

0800f1f6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800f1f6:	b480      	push	{r7}
 800f1f8:	b083      	sub	sp, #12
 800f1fa:	af00      	add	r7, sp, #0
 800f1fc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	2201      	movs	r2, #1
 800f202:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800f206:	bf00      	nop
}
 800f208:	370c      	adds	r7, #12
 800f20a:	46bd      	mov	sp, r7
 800f20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f210:	4770      	bx	lr

0800f212 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800f212:	b480      	push	{r7}
 800f214:	b083      	sub	sp, #12
 800f216:	af00      	add	r7, sp, #0
 800f218:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	2200      	movs	r2, #0
 800f21e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800f222:	bf00      	nop
}
 800f224:	370c      	adds	r7, #12
 800f226:	46bd      	mov	sp, r7
 800f228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22c:	4770      	bx	lr

0800f22e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800f22e:	b480      	push	{r7}
 800f230:	b083      	sub	sp, #12
 800f232:	af00      	add	r7, sp, #0
 800f234:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	2201      	movs	r2, #1
 800f23a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	2200      	movs	r2, #0
 800f242:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	2200      	movs	r2, #0
 800f24a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800f24e:	2300      	movs	r3, #0
}
 800f250:	4618      	mov	r0, r3
 800f252:	370c      	adds	r7, #12
 800f254:	46bd      	mov	sp, r7
 800f256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25a:	4770      	bx	lr

0800f25c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b082      	sub	sp, #8
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2201      	movs	r2, #1
 800f268:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	2200      	movs	r2, #0
 800f270:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	2200      	movs	r2, #0
 800f278:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800f27c:	6878      	ldr	r0, [r7, #4]
 800f27e:	f004 fb36 	bl	80138ee <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	791b      	ldrb	r3, [r3, #4]
 800f286:	4619      	mov	r1, r3
 800f288:	6878      	ldr	r0, [r7, #4]
 800f28a:	f000 fe91 	bl	800ffb0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	795b      	ldrb	r3, [r3, #5]
 800f292:	4619      	mov	r1, r3
 800f294:	6878      	ldr	r0, [r7, #4]
 800f296:	f000 fe8b 	bl	800ffb0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800f29a:	2300      	movs	r3, #0
}
 800f29c:	4618      	mov	r0, r3
 800f29e:	3708      	adds	r7, #8
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bd80      	pop	{r7, pc}

0800f2a4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b086      	sub	sp, #24
 800f2a8:	af02      	add	r7, sp, #8
 800f2aa:	6078      	str	r0, [r7, #4]
 800f2ac:	460b      	mov	r3, r1
 800f2ae:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800f2b6:	78fb      	ldrb	r3, [r7, #3]
 800f2b8:	b29b      	uxth	r3, r3
 800f2ba:	9300      	str	r3, [sp, #0]
 800f2bc:	4613      	mov	r3, r2
 800f2be:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f2c2:	2100      	movs	r1, #0
 800f2c4:	6878      	ldr	r0, [r7, #4]
 800f2c6:	f000 f864 	bl	800f392 <USBH_GetDescriptor>
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800f2ce:	7bfb      	ldrb	r3, [r7, #15]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d10a      	bne.n	800f2ea <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	f203 3026 	addw	r0, r3, #806	; 0x326
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f2e0:	78fa      	ldrb	r2, [r7, #3]
 800f2e2:	b292      	uxth	r2, r2
 800f2e4:	4619      	mov	r1, r3
 800f2e6:	f000 f918 	bl	800f51a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800f2ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	3710      	adds	r7, #16
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}

0800f2f4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b086      	sub	sp, #24
 800f2f8:	af02      	add	r7, sp, #8
 800f2fa:	6078      	str	r0, [r7, #4]
 800f2fc:	460b      	mov	r3, r1
 800f2fe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	331c      	adds	r3, #28
 800f304:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800f306:	887b      	ldrh	r3, [r7, #2]
 800f308:	9300      	str	r3, [sp, #0]
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f310:	2100      	movs	r1, #0
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f000 f83d 	bl	800f392 <USBH_GetDescriptor>
 800f318:	4603      	mov	r3, r0
 800f31a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800f31c:	7bfb      	ldrb	r3, [r7, #15]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d107      	bne.n	800f332 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800f322:	887b      	ldrh	r3, [r7, #2]
 800f324:	461a      	mov	r2, r3
 800f326:	68b9      	ldr	r1, [r7, #8]
 800f328:	6878      	ldr	r0, [r7, #4]
 800f32a:	f000 f987 	bl	800f63c <USBH_ParseCfgDesc>
 800f32e:	4603      	mov	r3, r0
 800f330:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f332:	7bfb      	ldrb	r3, [r7, #15]
}
 800f334:	4618      	mov	r0, r3
 800f336:	3710      	adds	r7, #16
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd80      	pop	{r7, pc}

0800f33c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b088      	sub	sp, #32
 800f340:	af02      	add	r7, sp, #8
 800f342:	60f8      	str	r0, [r7, #12]
 800f344:	607a      	str	r2, [r7, #4]
 800f346:	461a      	mov	r2, r3
 800f348:	460b      	mov	r3, r1
 800f34a:	72fb      	strb	r3, [r7, #11]
 800f34c:	4613      	mov	r3, r2
 800f34e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800f350:	7afb      	ldrb	r3, [r7, #11]
 800f352:	b29b      	uxth	r3, r3
 800f354:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800f358:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800f360:	893b      	ldrh	r3, [r7, #8]
 800f362:	9300      	str	r3, [sp, #0]
 800f364:	460b      	mov	r3, r1
 800f366:	2100      	movs	r1, #0
 800f368:	68f8      	ldr	r0, [r7, #12]
 800f36a:	f000 f812 	bl	800f392 <USBH_GetDescriptor>
 800f36e:	4603      	mov	r3, r0
 800f370:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800f372:	7dfb      	ldrb	r3, [r7, #23]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d107      	bne.n	800f388 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f37e:	893a      	ldrh	r2, [r7, #8]
 800f380:	6879      	ldr	r1, [r7, #4]
 800f382:	4618      	mov	r0, r3
 800f384:	f000 fb24 	bl	800f9d0 <USBH_ParseStringDesc>
  }

  return status;
 800f388:	7dfb      	ldrb	r3, [r7, #23]
}
 800f38a:	4618      	mov	r0, r3
 800f38c:	3718      	adds	r7, #24
 800f38e:	46bd      	mov	sp, r7
 800f390:	bd80      	pop	{r7, pc}

0800f392 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800f392:	b580      	push	{r7, lr}
 800f394:	b084      	sub	sp, #16
 800f396:	af00      	add	r7, sp, #0
 800f398:	60f8      	str	r0, [r7, #12]
 800f39a:	607b      	str	r3, [r7, #4]
 800f39c:	460b      	mov	r3, r1
 800f39e:	72fb      	strb	r3, [r7, #11]
 800f3a0:	4613      	mov	r3, r2
 800f3a2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	789b      	ldrb	r3, [r3, #2]
 800f3a8:	2b01      	cmp	r3, #1
 800f3aa:	d11c      	bne.n	800f3e6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800f3ac:	7afb      	ldrb	r3, [r7, #11]
 800f3ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f3b2:	b2da      	uxtb	r2, r3
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	2206      	movs	r2, #6
 800f3bc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	893a      	ldrh	r2, [r7, #8]
 800f3c2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800f3c4:	893b      	ldrh	r3, [r7, #8]
 800f3c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f3ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f3ce:	d104      	bne.n	800f3da <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	f240 4209 	movw	r2, #1033	; 0x409
 800f3d6:	829a      	strh	r2, [r3, #20]
 800f3d8:	e002      	b.n	800f3e0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	2200      	movs	r2, #0
 800f3de:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	8b3a      	ldrh	r2, [r7, #24]
 800f3e4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800f3e6:	8b3b      	ldrh	r3, [r7, #24]
 800f3e8:	461a      	mov	r2, r3
 800f3ea:	6879      	ldr	r1, [r7, #4]
 800f3ec:	68f8      	ldr	r0, [r7, #12]
 800f3ee:	f000 fb3d 	bl	800fa6c <USBH_CtlReq>
 800f3f2:	4603      	mov	r3, r0
}
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	3710      	adds	r7, #16
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bd80      	pop	{r7, pc}

0800f3fc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b082      	sub	sp, #8
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
 800f404:	460b      	mov	r3, r1
 800f406:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	789b      	ldrb	r3, [r3, #2]
 800f40c:	2b01      	cmp	r3, #1
 800f40e:	d10f      	bne.n	800f430 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2200      	movs	r2, #0
 800f414:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2205      	movs	r2, #5
 800f41a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800f41c:	78fb      	ldrb	r3, [r7, #3]
 800f41e:	b29a      	uxth	r2, r3
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2200      	movs	r2, #0
 800f428:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	2200      	movs	r2, #0
 800f42e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800f430:	2200      	movs	r2, #0
 800f432:	2100      	movs	r1, #0
 800f434:	6878      	ldr	r0, [r7, #4]
 800f436:	f000 fb19 	bl	800fa6c <USBH_CtlReq>
 800f43a:	4603      	mov	r3, r0
}
 800f43c:	4618      	mov	r0, r3
 800f43e:	3708      	adds	r7, #8
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}

0800f444 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800f444:	b580      	push	{r7, lr}
 800f446:	b082      	sub	sp, #8
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
 800f44c:	460b      	mov	r3, r1
 800f44e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	789b      	ldrb	r3, [r3, #2]
 800f454:	2b01      	cmp	r3, #1
 800f456:	d10e      	bne.n	800f476 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	2200      	movs	r2, #0
 800f45c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	2209      	movs	r2, #9
 800f462:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	887a      	ldrh	r2, [r7, #2]
 800f468:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	2200      	movs	r2, #0
 800f46e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	2200      	movs	r2, #0
 800f474:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800f476:	2200      	movs	r2, #0
 800f478:	2100      	movs	r1, #0
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f000 faf6 	bl	800fa6c <USBH_CtlReq>
 800f480:	4603      	mov	r3, r0
}
 800f482:	4618      	mov	r0, r3
 800f484:	3708      	adds	r7, #8
 800f486:	46bd      	mov	sp, r7
 800f488:	bd80      	pop	{r7, pc}

0800f48a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800f48a:	b580      	push	{r7, lr}
 800f48c:	b082      	sub	sp, #8
 800f48e:	af00      	add	r7, sp, #0
 800f490:	6078      	str	r0, [r7, #4]
 800f492:	460b      	mov	r3, r1
 800f494:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	789b      	ldrb	r3, [r3, #2]
 800f49a:	2b01      	cmp	r3, #1
 800f49c:	d10f      	bne.n	800f4be <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2203      	movs	r2, #3
 800f4a8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800f4aa:	78fb      	ldrb	r3, [r7, #3]
 800f4ac:	b29a      	uxth	r2, r3
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800f4be:	2200      	movs	r2, #0
 800f4c0:	2100      	movs	r1, #0
 800f4c2:	6878      	ldr	r0, [r7, #4]
 800f4c4:	f000 fad2 	bl	800fa6c <USBH_CtlReq>
 800f4c8:	4603      	mov	r3, r0
}
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	3708      	adds	r7, #8
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bd80      	pop	{r7, pc}

0800f4d2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800f4d2:	b580      	push	{r7, lr}
 800f4d4:	b082      	sub	sp, #8
 800f4d6:	af00      	add	r7, sp, #0
 800f4d8:	6078      	str	r0, [r7, #4]
 800f4da:	460b      	mov	r3, r1
 800f4dc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	789b      	ldrb	r3, [r3, #2]
 800f4e2:	2b01      	cmp	r3, #1
 800f4e4:	d10f      	bne.n	800f506 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	2202      	movs	r2, #2
 800f4ea:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	2201      	movs	r2, #1
 800f4f0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800f4f8:	78fb      	ldrb	r3, [r7, #3]
 800f4fa:	b29a      	uxth	r2, r3
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	2200      	movs	r2, #0
 800f504:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800f506:	2200      	movs	r2, #0
 800f508:	2100      	movs	r1, #0
 800f50a:	6878      	ldr	r0, [r7, #4]
 800f50c:	f000 faae 	bl	800fa6c <USBH_CtlReq>
 800f510:	4603      	mov	r3, r0
}
 800f512:	4618      	mov	r0, r3
 800f514:	3708      	adds	r7, #8
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}

0800f51a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800f51a:	b480      	push	{r7}
 800f51c:	b085      	sub	sp, #20
 800f51e:	af00      	add	r7, sp, #0
 800f520:	60f8      	str	r0, [r7, #12]
 800f522:	60b9      	str	r1, [r7, #8]
 800f524:	4613      	mov	r3, r2
 800f526:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	781a      	ldrb	r2, [r3, #0]
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	785a      	ldrb	r2, [r3, #1]
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800f538:	68bb      	ldr	r3, [r7, #8]
 800f53a:	3302      	adds	r3, #2
 800f53c:	781b      	ldrb	r3, [r3, #0]
 800f53e:	b29a      	uxth	r2, r3
 800f540:	68bb      	ldr	r3, [r7, #8]
 800f542:	3303      	adds	r3, #3
 800f544:	781b      	ldrb	r3, [r3, #0]
 800f546:	b29b      	uxth	r3, r3
 800f548:	021b      	lsls	r3, r3, #8
 800f54a:	b29b      	uxth	r3, r3
 800f54c:	4313      	orrs	r3, r2
 800f54e:	b29a      	uxth	r2, r3
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800f554:	68bb      	ldr	r3, [r7, #8]
 800f556:	791a      	ldrb	r2, [r3, #4]
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800f55c:	68bb      	ldr	r3, [r7, #8]
 800f55e:	795a      	ldrb	r2, [r3, #5]
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	799a      	ldrb	r2, [r3, #6]
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800f56c:	68bb      	ldr	r3, [r7, #8]
 800f56e:	79da      	ldrb	r2, [r3, #7]
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	79db      	ldrb	r3, [r3, #7]
 800f578:	2b20      	cmp	r3, #32
 800f57a:	dc11      	bgt.n	800f5a0 <USBH_ParseDevDesc+0x86>
 800f57c:	2b08      	cmp	r3, #8
 800f57e:	db16      	blt.n	800f5ae <USBH_ParseDevDesc+0x94>
 800f580:	3b08      	subs	r3, #8
 800f582:	2201      	movs	r2, #1
 800f584:	fa02 f303 	lsl.w	r3, r2, r3
 800f588:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800f58c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f590:	2b00      	cmp	r3, #0
 800f592:	bf14      	ite	ne
 800f594:	2301      	movne	r3, #1
 800f596:	2300      	moveq	r3, #0
 800f598:	b2db      	uxtb	r3, r3
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d102      	bne.n	800f5a4 <USBH_ParseDevDesc+0x8a>
 800f59e:	e006      	b.n	800f5ae <USBH_ParseDevDesc+0x94>
 800f5a0:	2b40      	cmp	r3, #64	; 0x40
 800f5a2:	d104      	bne.n	800f5ae <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	79da      	ldrb	r2, [r3, #7]
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	71da      	strb	r2, [r3, #7]
      break;
 800f5ac:	e003      	b.n	800f5b6 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	2240      	movs	r2, #64	; 0x40
 800f5b2:	71da      	strb	r2, [r3, #7]
      break;
 800f5b4:	bf00      	nop
  }

  if (length > 8U)
 800f5b6:	88fb      	ldrh	r3, [r7, #6]
 800f5b8:	2b08      	cmp	r3, #8
 800f5ba:	d939      	bls.n	800f630 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800f5bc:	68bb      	ldr	r3, [r7, #8]
 800f5be:	3308      	adds	r3, #8
 800f5c0:	781b      	ldrb	r3, [r3, #0]
 800f5c2:	b29a      	uxth	r2, r3
 800f5c4:	68bb      	ldr	r3, [r7, #8]
 800f5c6:	3309      	adds	r3, #9
 800f5c8:	781b      	ldrb	r3, [r3, #0]
 800f5ca:	b29b      	uxth	r3, r3
 800f5cc:	021b      	lsls	r3, r3, #8
 800f5ce:	b29b      	uxth	r3, r3
 800f5d0:	4313      	orrs	r3, r2
 800f5d2:	b29a      	uxth	r2, r3
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800f5d8:	68bb      	ldr	r3, [r7, #8]
 800f5da:	330a      	adds	r3, #10
 800f5dc:	781b      	ldrb	r3, [r3, #0]
 800f5de:	b29a      	uxth	r2, r3
 800f5e0:	68bb      	ldr	r3, [r7, #8]
 800f5e2:	330b      	adds	r3, #11
 800f5e4:	781b      	ldrb	r3, [r3, #0]
 800f5e6:	b29b      	uxth	r3, r3
 800f5e8:	021b      	lsls	r3, r3, #8
 800f5ea:	b29b      	uxth	r3, r3
 800f5ec:	4313      	orrs	r3, r2
 800f5ee:	b29a      	uxth	r2, r3
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800f5f4:	68bb      	ldr	r3, [r7, #8]
 800f5f6:	330c      	adds	r3, #12
 800f5f8:	781b      	ldrb	r3, [r3, #0]
 800f5fa:	b29a      	uxth	r2, r3
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	330d      	adds	r3, #13
 800f600:	781b      	ldrb	r3, [r3, #0]
 800f602:	b29b      	uxth	r3, r3
 800f604:	021b      	lsls	r3, r3, #8
 800f606:	b29b      	uxth	r3, r3
 800f608:	4313      	orrs	r3, r2
 800f60a:	b29a      	uxth	r2, r3
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800f610:	68bb      	ldr	r3, [r7, #8]
 800f612:	7b9a      	ldrb	r2, [r3, #14]
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800f618:	68bb      	ldr	r3, [r7, #8]
 800f61a:	7bda      	ldrb	r2, [r3, #15]
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800f620:	68bb      	ldr	r3, [r7, #8]
 800f622:	7c1a      	ldrb	r2, [r3, #16]
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800f628:	68bb      	ldr	r3, [r7, #8]
 800f62a:	7c5a      	ldrb	r2, [r3, #17]
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	745a      	strb	r2, [r3, #17]
  }
}
 800f630:	bf00      	nop
 800f632:	3714      	adds	r7, #20
 800f634:	46bd      	mov	sp, r7
 800f636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63a:	4770      	bx	lr

0800f63c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b08c      	sub	sp, #48	; 0x30
 800f640:	af00      	add	r7, sp, #0
 800f642:	60f8      	str	r0, [r7, #12]
 800f644:	60b9      	str	r1, [r7, #8]
 800f646:	4613      	mov	r3, r2
 800f648:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800f650:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800f652:	2300      	movs	r3, #0
 800f654:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800f65c:	2300      	movs	r3, #0
 800f65e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800f662:	2300      	movs	r3, #0
 800f664:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800f668:	68bb      	ldr	r3, [r7, #8]
 800f66a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	781a      	ldrb	r2, [r3, #0]
 800f670:	6a3b      	ldr	r3, [r7, #32]
 800f672:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	785a      	ldrb	r2, [r3, #1]
 800f678:	6a3b      	ldr	r3, [r7, #32]
 800f67a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800f67c:	68bb      	ldr	r3, [r7, #8]
 800f67e:	3302      	adds	r3, #2
 800f680:	781b      	ldrb	r3, [r3, #0]
 800f682:	b29a      	uxth	r2, r3
 800f684:	68bb      	ldr	r3, [r7, #8]
 800f686:	3303      	adds	r3, #3
 800f688:	781b      	ldrb	r3, [r3, #0]
 800f68a:	b29b      	uxth	r3, r3
 800f68c:	021b      	lsls	r3, r3, #8
 800f68e:	b29b      	uxth	r3, r3
 800f690:	4313      	orrs	r3, r2
 800f692:	b29b      	uxth	r3, r3
 800f694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f698:	bf28      	it	cs
 800f69a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800f69e:	b29a      	uxth	r2, r3
 800f6a0:	6a3b      	ldr	r3, [r7, #32]
 800f6a2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800f6a4:	68bb      	ldr	r3, [r7, #8]
 800f6a6:	791a      	ldrb	r2, [r3, #4]
 800f6a8:	6a3b      	ldr	r3, [r7, #32]
 800f6aa:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800f6ac:	68bb      	ldr	r3, [r7, #8]
 800f6ae:	795a      	ldrb	r2, [r3, #5]
 800f6b0:	6a3b      	ldr	r3, [r7, #32]
 800f6b2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800f6b4:	68bb      	ldr	r3, [r7, #8]
 800f6b6:	799a      	ldrb	r2, [r3, #6]
 800f6b8:	6a3b      	ldr	r3, [r7, #32]
 800f6ba:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800f6bc:	68bb      	ldr	r3, [r7, #8]
 800f6be:	79da      	ldrb	r2, [r3, #7]
 800f6c0:	6a3b      	ldr	r3, [r7, #32]
 800f6c2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800f6c4:	68bb      	ldr	r3, [r7, #8]
 800f6c6:	7a1a      	ldrb	r2, [r3, #8]
 800f6c8:	6a3b      	ldr	r3, [r7, #32]
 800f6ca:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800f6cc:	6a3b      	ldr	r3, [r7, #32]
 800f6ce:	781b      	ldrb	r3, [r3, #0]
 800f6d0:	2b09      	cmp	r3, #9
 800f6d2:	d002      	beq.n	800f6da <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800f6d4:	6a3b      	ldr	r3, [r7, #32]
 800f6d6:	2209      	movs	r2, #9
 800f6d8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800f6da:	88fb      	ldrh	r3, [r7, #6]
 800f6dc:	2b09      	cmp	r3, #9
 800f6de:	f240 809d 	bls.w	800f81c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800f6e2:	2309      	movs	r3, #9
 800f6e4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f6ea:	e081      	b.n	800f7f0 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f6ec:	f107 0316 	add.w	r3, r7, #22
 800f6f0:	4619      	mov	r1, r3
 800f6f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f6f4:	f000 f99f 	bl	800fa36 <USBH_GetNextDesc>
 800f6f8:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800f6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6fc:	785b      	ldrb	r3, [r3, #1]
 800f6fe:	2b04      	cmp	r3, #4
 800f700:	d176      	bne.n	800f7f0 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800f702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f704:	781b      	ldrb	r3, [r3, #0]
 800f706:	2b09      	cmp	r3, #9
 800f708:	d002      	beq.n	800f710 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800f70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f70c:	2209      	movs	r2, #9
 800f70e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800f710:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f714:	221a      	movs	r2, #26
 800f716:	fb02 f303 	mul.w	r3, r2, r3
 800f71a:	3308      	adds	r3, #8
 800f71c:	6a3a      	ldr	r2, [r7, #32]
 800f71e:	4413      	add	r3, r2
 800f720:	3302      	adds	r3, #2
 800f722:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800f724:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f726:	69f8      	ldr	r0, [r7, #28]
 800f728:	f000 f87e 	bl	800f828 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800f72c:	2300      	movs	r3, #0
 800f72e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800f732:	2300      	movs	r3, #0
 800f734:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f736:	e043      	b.n	800f7c0 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f738:	f107 0316 	add.w	r3, r7, #22
 800f73c:	4619      	mov	r1, r3
 800f73e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f740:	f000 f979 	bl	800fa36 <USBH_GetNextDesc>
 800f744:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f748:	785b      	ldrb	r3, [r3, #1]
 800f74a:	2b05      	cmp	r3, #5
 800f74c:	d138      	bne.n	800f7c0 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800f74e:	69fb      	ldr	r3, [r7, #28]
 800f750:	795b      	ldrb	r3, [r3, #5]
 800f752:	2b01      	cmp	r3, #1
 800f754:	d10f      	bne.n	800f776 <USBH_ParseCfgDesc+0x13a>
 800f756:	69fb      	ldr	r3, [r7, #28]
 800f758:	799b      	ldrb	r3, [r3, #6]
 800f75a:	2b02      	cmp	r3, #2
 800f75c:	d10b      	bne.n	800f776 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800f75e:	69fb      	ldr	r3, [r7, #28]
 800f760:	79db      	ldrb	r3, [r3, #7]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d10f      	bne.n	800f786 <USBH_ParseCfgDesc+0x14a>
 800f766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f768:	781b      	ldrb	r3, [r3, #0]
 800f76a:	2b09      	cmp	r3, #9
 800f76c:	d00b      	beq.n	800f786 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800f76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f770:	2209      	movs	r2, #9
 800f772:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800f774:	e007      	b.n	800f786 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800f776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f778:	781b      	ldrb	r3, [r3, #0]
 800f77a:	2b07      	cmp	r3, #7
 800f77c:	d004      	beq.n	800f788 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800f77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f780:	2207      	movs	r2, #7
 800f782:	701a      	strb	r2, [r3, #0]
 800f784:	e000      	b.n	800f788 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800f786:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800f788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f78c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800f790:	3201      	adds	r2, #1
 800f792:	00d2      	lsls	r2, r2, #3
 800f794:	211a      	movs	r1, #26
 800f796:	fb01 f303 	mul.w	r3, r1, r3
 800f79a:	4413      	add	r3, r2
 800f79c:	3308      	adds	r3, #8
 800f79e:	6a3a      	ldr	r2, [r7, #32]
 800f7a0:	4413      	add	r3, r2
 800f7a2:	3304      	adds	r3, #4
 800f7a4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800f7a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f7a8:	69b9      	ldr	r1, [r7, #24]
 800f7aa:	68f8      	ldr	r0, [r7, #12]
 800f7ac:	f000 f86b 	bl	800f886 <USBH_ParseEPDesc>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800f7b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f7ba:	3301      	adds	r3, #1
 800f7bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f7c0:	69fb      	ldr	r3, [r7, #28]
 800f7c2:	791b      	ldrb	r3, [r3, #4]
 800f7c4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800f7c8:	429a      	cmp	r2, r3
 800f7ca:	d204      	bcs.n	800f7d6 <USBH_ParseCfgDesc+0x19a>
 800f7cc:	6a3b      	ldr	r3, [r7, #32]
 800f7ce:	885a      	ldrh	r2, [r3, #2]
 800f7d0:	8afb      	ldrh	r3, [r7, #22]
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d8b0      	bhi.n	800f738 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800f7d6:	69fb      	ldr	r3, [r7, #28]
 800f7d8:	791b      	ldrb	r3, [r3, #4]
 800f7da:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800f7de:	429a      	cmp	r2, r3
 800f7e0:	d201      	bcs.n	800f7e6 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800f7e2:	2303      	movs	r3, #3
 800f7e4:	e01c      	b.n	800f820 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800f7e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7ea:	3301      	adds	r3, #1
 800f7ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f7f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7f4:	2b01      	cmp	r3, #1
 800f7f6:	d805      	bhi.n	800f804 <USBH_ParseCfgDesc+0x1c8>
 800f7f8:	6a3b      	ldr	r3, [r7, #32]
 800f7fa:	885a      	ldrh	r2, [r3, #2]
 800f7fc:	8afb      	ldrh	r3, [r7, #22]
 800f7fe:	429a      	cmp	r2, r3
 800f800:	f63f af74 	bhi.w	800f6ec <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800f804:	6a3b      	ldr	r3, [r7, #32]
 800f806:	791b      	ldrb	r3, [r3, #4]
 800f808:	2b02      	cmp	r3, #2
 800f80a:	bf28      	it	cs
 800f80c:	2302      	movcs	r3, #2
 800f80e:	b2db      	uxtb	r3, r3
 800f810:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f814:	429a      	cmp	r2, r3
 800f816:	d201      	bcs.n	800f81c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800f818:	2303      	movs	r3, #3
 800f81a:	e001      	b.n	800f820 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800f81c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f820:	4618      	mov	r0, r3
 800f822:	3730      	adds	r7, #48	; 0x30
 800f824:	46bd      	mov	sp, r7
 800f826:	bd80      	pop	{r7, pc}

0800f828 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800f828:	b480      	push	{r7}
 800f82a:	b083      	sub	sp, #12
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
 800f830:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800f832:	683b      	ldr	r3, [r7, #0]
 800f834:	781a      	ldrb	r2, [r3, #0]
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800f83a:	683b      	ldr	r3, [r7, #0]
 800f83c:	785a      	ldrb	r2, [r3, #1]
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	789a      	ldrb	r2, [r3, #2]
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	78da      	ldrb	r2, [r3, #3]
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800f852:	683b      	ldr	r3, [r7, #0]
 800f854:	791a      	ldrb	r2, [r3, #4]
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	795a      	ldrb	r2, [r3, #5]
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800f862:	683b      	ldr	r3, [r7, #0]
 800f864:	799a      	ldrb	r2, [r3, #6]
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800f86a:	683b      	ldr	r3, [r7, #0]
 800f86c:	79da      	ldrb	r2, [r3, #7]
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	7a1a      	ldrb	r2, [r3, #8]
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	721a      	strb	r2, [r3, #8]
}
 800f87a:	bf00      	nop
 800f87c:	370c      	adds	r7, #12
 800f87e:	46bd      	mov	sp, r7
 800f880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f884:	4770      	bx	lr

0800f886 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800f886:	b480      	push	{r7}
 800f888:	b087      	sub	sp, #28
 800f88a:	af00      	add	r7, sp, #0
 800f88c:	60f8      	str	r0, [r7, #12]
 800f88e:	60b9      	str	r1, [r7, #8]
 800f890:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800f892:	2300      	movs	r3, #0
 800f894:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	781a      	ldrb	r2, [r3, #0]
 800f89a:	68bb      	ldr	r3, [r7, #8]
 800f89c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	785a      	ldrb	r2, [r3, #1]
 800f8a2:	68bb      	ldr	r3, [r7, #8]
 800f8a4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	789a      	ldrb	r2, [r3, #2]
 800f8aa:	68bb      	ldr	r3, [r7, #8]
 800f8ac:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	78da      	ldrb	r2, [r3, #3]
 800f8b2:	68bb      	ldr	r3, [r7, #8]
 800f8b4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	3304      	adds	r3, #4
 800f8ba:	781b      	ldrb	r3, [r3, #0]
 800f8bc:	b29a      	uxth	r2, r3
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	3305      	adds	r3, #5
 800f8c2:	781b      	ldrb	r3, [r3, #0]
 800f8c4:	b29b      	uxth	r3, r3
 800f8c6:	021b      	lsls	r3, r3, #8
 800f8c8:	b29b      	uxth	r3, r3
 800f8ca:	4313      	orrs	r3, r2
 800f8cc:	b29a      	uxth	r2, r3
 800f8ce:	68bb      	ldr	r3, [r7, #8]
 800f8d0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	799a      	ldrb	r2, [r3, #6]
 800f8d6:	68bb      	ldr	r3, [r7, #8]
 800f8d8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800f8da:	68bb      	ldr	r3, [r7, #8]
 800f8dc:	889b      	ldrh	r3, [r3, #4]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d102      	bne.n	800f8e8 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800f8e2:	2303      	movs	r3, #3
 800f8e4:	75fb      	strb	r3, [r7, #23]
 800f8e6:	e033      	b.n	800f950 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800f8e8:	68bb      	ldr	r3, [r7, #8]
 800f8ea:	889b      	ldrh	r3, [r3, #4]
 800f8ec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800f8f0:	f023 0307 	bic.w	r3, r3, #7
 800f8f4:	b29a      	uxth	r2, r3
 800f8f6:	68bb      	ldr	r3, [r7, #8]
 800f8f8:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	889b      	ldrh	r3, [r3, #4]
 800f8fe:	b21a      	sxth	r2, r3
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	3304      	adds	r3, #4
 800f904:	781b      	ldrb	r3, [r3, #0]
 800f906:	b299      	uxth	r1, r3
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	3305      	adds	r3, #5
 800f90c:	781b      	ldrb	r3, [r3, #0]
 800f90e:	b29b      	uxth	r3, r3
 800f910:	021b      	lsls	r3, r3, #8
 800f912:	b29b      	uxth	r3, r3
 800f914:	430b      	orrs	r3, r1
 800f916:	b29b      	uxth	r3, r3
 800f918:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d110      	bne.n	800f942 <USBH_ParseEPDesc+0xbc>
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	3304      	adds	r3, #4
 800f924:	781b      	ldrb	r3, [r3, #0]
 800f926:	b299      	uxth	r1, r3
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	3305      	adds	r3, #5
 800f92c:	781b      	ldrb	r3, [r3, #0]
 800f92e:	b29b      	uxth	r3, r3
 800f930:	021b      	lsls	r3, r3, #8
 800f932:	b29b      	uxth	r3, r3
 800f934:	430b      	orrs	r3, r1
 800f936:	b29b      	uxth	r3, r3
 800f938:	b21b      	sxth	r3, r3
 800f93a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f93e:	b21b      	sxth	r3, r3
 800f940:	e001      	b.n	800f946 <USBH_ParseEPDesc+0xc0>
 800f942:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f946:	4313      	orrs	r3, r2
 800f948:	b21b      	sxth	r3, r3
 800f94a:	b29a      	uxth	r2, r3
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f956:	2b00      	cmp	r3, #0
 800f958:	d116      	bne.n	800f988 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800f95a:	68bb      	ldr	r3, [r7, #8]
 800f95c:	78db      	ldrb	r3, [r3, #3]
 800f95e:	f003 0303 	and.w	r3, r3, #3
 800f962:	2b01      	cmp	r3, #1
 800f964:	d005      	beq.n	800f972 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800f966:	68bb      	ldr	r3, [r7, #8]
 800f968:	78db      	ldrb	r3, [r3, #3]
 800f96a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800f96e:	2b03      	cmp	r3, #3
 800f970:	d127      	bne.n	800f9c2 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800f972:	68bb      	ldr	r3, [r7, #8]
 800f974:	799b      	ldrb	r3, [r3, #6]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d003      	beq.n	800f982 <USBH_ParseEPDesc+0xfc>
 800f97a:	68bb      	ldr	r3, [r7, #8]
 800f97c:	799b      	ldrb	r3, [r3, #6]
 800f97e:	2b10      	cmp	r3, #16
 800f980:	d91f      	bls.n	800f9c2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800f982:	2303      	movs	r3, #3
 800f984:	75fb      	strb	r3, [r7, #23]
 800f986:	e01c      	b.n	800f9c2 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800f988:	68bb      	ldr	r3, [r7, #8]
 800f98a:	78db      	ldrb	r3, [r3, #3]
 800f98c:	f003 0303 	and.w	r3, r3, #3
 800f990:	2b01      	cmp	r3, #1
 800f992:	d10a      	bne.n	800f9aa <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800f994:	68bb      	ldr	r3, [r7, #8]
 800f996:	799b      	ldrb	r3, [r3, #6]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d003      	beq.n	800f9a4 <USBH_ParseEPDesc+0x11e>
 800f99c:	68bb      	ldr	r3, [r7, #8]
 800f99e:	799b      	ldrb	r3, [r3, #6]
 800f9a0:	2b10      	cmp	r3, #16
 800f9a2:	d90e      	bls.n	800f9c2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800f9a4:	2303      	movs	r3, #3
 800f9a6:	75fb      	strb	r3, [r7, #23]
 800f9a8:	e00b      	b.n	800f9c2 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800f9aa:	68bb      	ldr	r3, [r7, #8]
 800f9ac:	78db      	ldrb	r3, [r3, #3]
 800f9ae:	f003 0303 	and.w	r3, r3, #3
 800f9b2:	2b03      	cmp	r3, #3
 800f9b4:	d105      	bne.n	800f9c2 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800f9b6:	68bb      	ldr	r3, [r7, #8]
 800f9b8:	799b      	ldrb	r3, [r3, #6]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d101      	bne.n	800f9c2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800f9be:	2303      	movs	r3, #3
 800f9c0:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800f9c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	371c      	adds	r7, #28
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ce:	4770      	bx	lr

0800f9d0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800f9d0:	b480      	push	{r7}
 800f9d2:	b087      	sub	sp, #28
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	60f8      	str	r0, [r7, #12]
 800f9d8:	60b9      	str	r1, [r7, #8]
 800f9da:	4613      	mov	r3, r2
 800f9dc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	3301      	adds	r3, #1
 800f9e2:	781b      	ldrb	r3, [r3, #0]
 800f9e4:	2b03      	cmp	r3, #3
 800f9e6:	d120      	bne.n	800fa2a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	781b      	ldrb	r3, [r3, #0]
 800f9ec:	1e9a      	subs	r2, r3, #2
 800f9ee:	88fb      	ldrh	r3, [r7, #6]
 800f9f0:	4293      	cmp	r3, r2
 800f9f2:	bf28      	it	cs
 800f9f4:	4613      	movcs	r3, r2
 800f9f6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	3302      	adds	r3, #2
 800f9fc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800f9fe:	2300      	movs	r3, #0
 800fa00:	82fb      	strh	r3, [r7, #22]
 800fa02:	e00b      	b.n	800fa1c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800fa04:	8afb      	ldrh	r3, [r7, #22]
 800fa06:	68fa      	ldr	r2, [r7, #12]
 800fa08:	4413      	add	r3, r2
 800fa0a:	781a      	ldrb	r2, [r3, #0]
 800fa0c:	68bb      	ldr	r3, [r7, #8]
 800fa0e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800fa10:	68bb      	ldr	r3, [r7, #8]
 800fa12:	3301      	adds	r3, #1
 800fa14:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800fa16:	8afb      	ldrh	r3, [r7, #22]
 800fa18:	3302      	adds	r3, #2
 800fa1a:	82fb      	strh	r3, [r7, #22]
 800fa1c:	8afa      	ldrh	r2, [r7, #22]
 800fa1e:	8abb      	ldrh	r3, [r7, #20]
 800fa20:	429a      	cmp	r2, r3
 800fa22:	d3ef      	bcc.n	800fa04 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800fa24:	68bb      	ldr	r3, [r7, #8]
 800fa26:	2200      	movs	r2, #0
 800fa28:	701a      	strb	r2, [r3, #0]
  }
}
 800fa2a:	bf00      	nop
 800fa2c:	371c      	adds	r7, #28
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa34:	4770      	bx	lr

0800fa36 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800fa36:	b480      	push	{r7}
 800fa38:	b085      	sub	sp, #20
 800fa3a:	af00      	add	r7, sp, #0
 800fa3c:	6078      	str	r0, [r7, #4]
 800fa3e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800fa40:	683b      	ldr	r3, [r7, #0]
 800fa42:	881a      	ldrh	r2, [r3, #0]
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	781b      	ldrb	r3, [r3, #0]
 800fa48:	b29b      	uxth	r3, r3
 800fa4a:	4413      	add	r3, r2
 800fa4c:	b29a      	uxth	r2, r3
 800fa4e:	683b      	ldr	r3, [r7, #0]
 800fa50:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	781b      	ldrb	r3, [r3, #0]
 800fa56:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	4413      	add	r3, r2
 800fa5c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800fa5e:	68fb      	ldr	r3, [r7, #12]
}
 800fa60:	4618      	mov	r0, r3
 800fa62:	3714      	adds	r7, #20
 800fa64:	46bd      	mov	sp, r7
 800fa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6a:	4770      	bx	lr

0800fa6c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b086      	sub	sp, #24
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	60f8      	str	r0, [r7, #12]
 800fa74:	60b9      	str	r1, [r7, #8]
 800fa76:	4613      	mov	r3, r2
 800fa78:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800fa7a:	2301      	movs	r3, #1
 800fa7c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	789b      	ldrb	r3, [r3, #2]
 800fa82:	2b01      	cmp	r3, #1
 800fa84:	d002      	beq.n	800fa8c <USBH_CtlReq+0x20>
 800fa86:	2b02      	cmp	r3, #2
 800fa88:	d00f      	beq.n	800faaa <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800fa8a:	e027      	b.n	800fadc <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	68ba      	ldr	r2, [r7, #8]
 800fa90:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	88fa      	ldrh	r2, [r7, #6]
 800fa96:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	2201      	movs	r2, #1
 800fa9c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	2202      	movs	r2, #2
 800faa2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800faa4:	2301      	movs	r3, #1
 800faa6:	75fb      	strb	r3, [r7, #23]
      break;
 800faa8:	e018      	b.n	800fadc <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800faaa:	68f8      	ldr	r0, [r7, #12]
 800faac:	f000 f81c 	bl	800fae8 <USBH_HandleControl>
 800fab0:	4603      	mov	r3, r0
 800fab2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800fab4:	7dfb      	ldrb	r3, [r7, #23]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d002      	beq.n	800fac0 <USBH_CtlReq+0x54>
 800faba:	7dfb      	ldrb	r3, [r7, #23]
 800fabc:	2b03      	cmp	r3, #3
 800fabe:	d106      	bne.n	800face <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	2201      	movs	r2, #1
 800fac4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	2200      	movs	r2, #0
 800faca:	761a      	strb	r2, [r3, #24]
      break;
 800facc:	e005      	b.n	800fada <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800face:	7dfb      	ldrb	r3, [r7, #23]
 800fad0:	2b02      	cmp	r3, #2
 800fad2:	d102      	bne.n	800fada <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	2201      	movs	r2, #1
 800fad8:	709a      	strb	r2, [r3, #2]
      break;
 800fada:	bf00      	nop
  }
  return status;
 800fadc:	7dfb      	ldrb	r3, [r7, #23]
}
 800fade:	4618      	mov	r0, r3
 800fae0:	3718      	adds	r7, #24
 800fae2:	46bd      	mov	sp, r7
 800fae4:	bd80      	pop	{r7, pc}
	...

0800fae8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b086      	sub	sp, #24
 800faec:	af02      	add	r7, sp, #8
 800faee:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800faf0:	2301      	movs	r3, #1
 800faf2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800faf4:	2300      	movs	r3, #0
 800faf6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	7e1b      	ldrb	r3, [r3, #24]
 800fafc:	3b01      	subs	r3, #1
 800fafe:	2b0a      	cmp	r3, #10
 800fb00:	f200 8156 	bhi.w	800fdb0 <USBH_HandleControl+0x2c8>
 800fb04:	a201      	add	r2, pc, #4	; (adr r2, 800fb0c <USBH_HandleControl+0x24>)
 800fb06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb0a:	bf00      	nop
 800fb0c:	0800fb39 	.word	0x0800fb39
 800fb10:	0800fb53 	.word	0x0800fb53
 800fb14:	0800fbbd 	.word	0x0800fbbd
 800fb18:	0800fbe3 	.word	0x0800fbe3
 800fb1c:	0800fc1b 	.word	0x0800fc1b
 800fb20:	0800fc45 	.word	0x0800fc45
 800fb24:	0800fc97 	.word	0x0800fc97
 800fb28:	0800fcb9 	.word	0x0800fcb9
 800fb2c:	0800fcf5 	.word	0x0800fcf5
 800fb30:	0800fd1b 	.word	0x0800fd1b
 800fb34:	0800fd59 	.word	0x0800fd59
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f103 0110 	add.w	r1, r3, #16
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	795b      	ldrb	r3, [r3, #5]
 800fb42:	461a      	mov	r2, r3
 800fb44:	6878      	ldr	r0, [r7, #4]
 800fb46:	f000 f943 	bl	800fdd0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	2202      	movs	r2, #2
 800fb4e:	761a      	strb	r2, [r3, #24]
      break;
 800fb50:	e139      	b.n	800fdc6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	795b      	ldrb	r3, [r3, #5]
 800fb56:	4619      	mov	r1, r3
 800fb58:	6878      	ldr	r0, [r7, #4]
 800fb5a:	f003 ffb7 	bl	8013acc <USBH_LL_GetURBState>
 800fb5e:	4603      	mov	r3, r0
 800fb60:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800fb62:	7bbb      	ldrb	r3, [r7, #14]
 800fb64:	2b01      	cmp	r3, #1
 800fb66:	d11e      	bne.n	800fba6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	7c1b      	ldrb	r3, [r3, #16]
 800fb6c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fb70:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	8adb      	ldrh	r3, [r3, #22]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d00a      	beq.n	800fb90 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800fb7a:	7b7b      	ldrb	r3, [r7, #13]
 800fb7c:	2b80      	cmp	r3, #128	; 0x80
 800fb7e:	d103      	bne.n	800fb88 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	2203      	movs	r2, #3
 800fb84:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800fb86:	e115      	b.n	800fdb4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	2205      	movs	r2, #5
 800fb8c:	761a      	strb	r2, [r3, #24]
      break;
 800fb8e:	e111      	b.n	800fdb4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800fb90:	7b7b      	ldrb	r3, [r7, #13]
 800fb92:	2b80      	cmp	r3, #128	; 0x80
 800fb94:	d103      	bne.n	800fb9e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	2209      	movs	r2, #9
 800fb9a:	761a      	strb	r2, [r3, #24]
      break;
 800fb9c:	e10a      	b.n	800fdb4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	2207      	movs	r2, #7
 800fba2:	761a      	strb	r2, [r3, #24]
      break;
 800fba4:	e106      	b.n	800fdb4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800fba6:	7bbb      	ldrb	r3, [r7, #14]
 800fba8:	2b04      	cmp	r3, #4
 800fbaa:	d003      	beq.n	800fbb4 <USBH_HandleControl+0xcc>
 800fbac:	7bbb      	ldrb	r3, [r7, #14]
 800fbae:	2b02      	cmp	r3, #2
 800fbb0:	f040 8100 	bne.w	800fdb4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	220b      	movs	r2, #11
 800fbb8:	761a      	strb	r2, [r3, #24]
      break;
 800fbba:	e0fb      	b.n	800fdb4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fbc2:	b29a      	uxth	r2, r3
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	6899      	ldr	r1, [r3, #8]
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	899a      	ldrh	r2, [r3, #12]
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	791b      	ldrb	r3, [r3, #4]
 800fbd4:	6878      	ldr	r0, [r7, #4]
 800fbd6:	f000 f93a 	bl	800fe4e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	2204      	movs	r2, #4
 800fbde:	761a      	strb	r2, [r3, #24]
      break;
 800fbe0:	e0f1      	b.n	800fdc6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	791b      	ldrb	r3, [r3, #4]
 800fbe6:	4619      	mov	r1, r3
 800fbe8:	6878      	ldr	r0, [r7, #4]
 800fbea:	f003 ff6f 	bl	8013acc <USBH_LL_GetURBState>
 800fbee:	4603      	mov	r3, r0
 800fbf0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800fbf2:	7bbb      	ldrb	r3, [r7, #14]
 800fbf4:	2b01      	cmp	r3, #1
 800fbf6:	d102      	bne.n	800fbfe <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	2209      	movs	r2, #9
 800fbfc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800fbfe:	7bbb      	ldrb	r3, [r7, #14]
 800fc00:	2b05      	cmp	r3, #5
 800fc02:	d102      	bne.n	800fc0a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800fc04:	2303      	movs	r3, #3
 800fc06:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800fc08:	e0d6      	b.n	800fdb8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800fc0a:	7bbb      	ldrb	r3, [r7, #14]
 800fc0c:	2b04      	cmp	r3, #4
 800fc0e:	f040 80d3 	bne.w	800fdb8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	220b      	movs	r2, #11
 800fc16:	761a      	strb	r2, [r3, #24]
      break;
 800fc18:	e0ce      	b.n	800fdb8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	6899      	ldr	r1, [r3, #8]
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	899a      	ldrh	r2, [r3, #12]
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	795b      	ldrb	r3, [r3, #5]
 800fc26:	2001      	movs	r0, #1
 800fc28:	9000      	str	r0, [sp, #0]
 800fc2a:	6878      	ldr	r0, [r7, #4]
 800fc2c:	f000 f8ea 	bl	800fe04 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fc36:	b29a      	uxth	r2, r3
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	2206      	movs	r2, #6
 800fc40:	761a      	strb	r2, [r3, #24]
      break;
 800fc42:	e0c0      	b.n	800fdc6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	795b      	ldrb	r3, [r3, #5]
 800fc48:	4619      	mov	r1, r3
 800fc4a:	6878      	ldr	r0, [r7, #4]
 800fc4c:	f003 ff3e 	bl	8013acc <USBH_LL_GetURBState>
 800fc50:	4603      	mov	r3, r0
 800fc52:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800fc54:	7bbb      	ldrb	r3, [r7, #14]
 800fc56:	2b01      	cmp	r3, #1
 800fc58:	d103      	bne.n	800fc62 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	2207      	movs	r2, #7
 800fc5e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800fc60:	e0ac      	b.n	800fdbc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800fc62:	7bbb      	ldrb	r3, [r7, #14]
 800fc64:	2b05      	cmp	r3, #5
 800fc66:	d105      	bne.n	800fc74 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	220c      	movs	r2, #12
 800fc6c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800fc6e:	2303      	movs	r3, #3
 800fc70:	73fb      	strb	r3, [r7, #15]
      break;
 800fc72:	e0a3      	b.n	800fdbc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800fc74:	7bbb      	ldrb	r3, [r7, #14]
 800fc76:	2b02      	cmp	r3, #2
 800fc78:	d103      	bne.n	800fc82 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	2205      	movs	r2, #5
 800fc7e:	761a      	strb	r2, [r3, #24]
      break;
 800fc80:	e09c      	b.n	800fdbc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800fc82:	7bbb      	ldrb	r3, [r7, #14]
 800fc84:	2b04      	cmp	r3, #4
 800fc86:	f040 8099 	bne.w	800fdbc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	220b      	movs	r2, #11
 800fc8e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800fc90:	2302      	movs	r3, #2
 800fc92:	73fb      	strb	r3, [r7, #15]
      break;
 800fc94:	e092      	b.n	800fdbc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	791b      	ldrb	r3, [r3, #4]
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	2100      	movs	r1, #0
 800fc9e:	6878      	ldr	r0, [r7, #4]
 800fca0:	f000 f8d5 	bl	800fe4e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fcaa:	b29a      	uxth	r2, r3
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2208      	movs	r2, #8
 800fcb4:	761a      	strb	r2, [r3, #24]

      break;
 800fcb6:	e086      	b.n	800fdc6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	791b      	ldrb	r3, [r3, #4]
 800fcbc:	4619      	mov	r1, r3
 800fcbe:	6878      	ldr	r0, [r7, #4]
 800fcc0:	f003 ff04 	bl	8013acc <USBH_LL_GetURBState>
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800fcc8:	7bbb      	ldrb	r3, [r7, #14]
 800fcca:	2b01      	cmp	r3, #1
 800fccc:	d105      	bne.n	800fcda <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	220d      	movs	r2, #13
 800fcd2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800fcd8:	e072      	b.n	800fdc0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800fcda:	7bbb      	ldrb	r3, [r7, #14]
 800fcdc:	2b04      	cmp	r3, #4
 800fcde:	d103      	bne.n	800fce8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	220b      	movs	r2, #11
 800fce4:	761a      	strb	r2, [r3, #24]
      break;
 800fce6:	e06b      	b.n	800fdc0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800fce8:	7bbb      	ldrb	r3, [r7, #14]
 800fcea:	2b05      	cmp	r3, #5
 800fcec:	d168      	bne.n	800fdc0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800fcee:	2303      	movs	r3, #3
 800fcf0:	73fb      	strb	r3, [r7, #15]
      break;
 800fcf2:	e065      	b.n	800fdc0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	795b      	ldrb	r3, [r3, #5]
 800fcf8:	2201      	movs	r2, #1
 800fcfa:	9200      	str	r2, [sp, #0]
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	2100      	movs	r1, #0
 800fd00:	6878      	ldr	r0, [r7, #4]
 800fd02:	f000 f87f 	bl	800fe04 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fd0c:	b29a      	uxth	r2, r3
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	220a      	movs	r2, #10
 800fd16:	761a      	strb	r2, [r3, #24]
      break;
 800fd18:	e055      	b.n	800fdc6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	795b      	ldrb	r3, [r3, #5]
 800fd1e:	4619      	mov	r1, r3
 800fd20:	6878      	ldr	r0, [r7, #4]
 800fd22:	f003 fed3 	bl	8013acc <USBH_LL_GetURBState>
 800fd26:	4603      	mov	r3, r0
 800fd28:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800fd2a:	7bbb      	ldrb	r3, [r7, #14]
 800fd2c:	2b01      	cmp	r3, #1
 800fd2e:	d105      	bne.n	800fd3c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800fd30:	2300      	movs	r3, #0
 800fd32:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	220d      	movs	r2, #13
 800fd38:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800fd3a:	e043      	b.n	800fdc4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800fd3c:	7bbb      	ldrb	r3, [r7, #14]
 800fd3e:	2b02      	cmp	r3, #2
 800fd40:	d103      	bne.n	800fd4a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	2209      	movs	r2, #9
 800fd46:	761a      	strb	r2, [r3, #24]
      break;
 800fd48:	e03c      	b.n	800fdc4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800fd4a:	7bbb      	ldrb	r3, [r7, #14]
 800fd4c:	2b04      	cmp	r3, #4
 800fd4e:	d139      	bne.n	800fdc4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	220b      	movs	r2, #11
 800fd54:	761a      	strb	r2, [r3, #24]
      break;
 800fd56:	e035      	b.n	800fdc4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	7e5b      	ldrb	r3, [r3, #25]
 800fd5c:	3301      	adds	r3, #1
 800fd5e:	b2da      	uxtb	r2, r3
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	765a      	strb	r2, [r3, #25]
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	7e5b      	ldrb	r3, [r3, #25]
 800fd68:	2b02      	cmp	r3, #2
 800fd6a:	d806      	bhi.n	800fd7a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	2201      	movs	r2, #1
 800fd70:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	2201      	movs	r2, #1
 800fd76:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800fd78:	e025      	b.n	800fdc6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fd80:	2106      	movs	r1, #6
 800fd82:	6878      	ldr	r0, [r7, #4]
 800fd84:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	2200      	movs	r2, #0
 800fd8a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	795b      	ldrb	r3, [r3, #5]
 800fd90:	4619      	mov	r1, r3
 800fd92:	6878      	ldr	r0, [r7, #4]
 800fd94:	f000 f90c 	bl	800ffb0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	791b      	ldrb	r3, [r3, #4]
 800fd9c:	4619      	mov	r1, r3
 800fd9e:	6878      	ldr	r0, [r7, #4]
 800fda0:	f000 f906 	bl	800ffb0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	2200      	movs	r2, #0
 800fda8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800fdaa:	2302      	movs	r3, #2
 800fdac:	73fb      	strb	r3, [r7, #15]
      break;
 800fdae:	e00a      	b.n	800fdc6 <USBH_HandleControl+0x2de>

    default:
      break;
 800fdb0:	bf00      	nop
 800fdb2:	e008      	b.n	800fdc6 <USBH_HandleControl+0x2de>
      break;
 800fdb4:	bf00      	nop
 800fdb6:	e006      	b.n	800fdc6 <USBH_HandleControl+0x2de>
      break;
 800fdb8:	bf00      	nop
 800fdba:	e004      	b.n	800fdc6 <USBH_HandleControl+0x2de>
      break;
 800fdbc:	bf00      	nop
 800fdbe:	e002      	b.n	800fdc6 <USBH_HandleControl+0x2de>
      break;
 800fdc0:	bf00      	nop
 800fdc2:	e000      	b.n	800fdc6 <USBH_HandleControl+0x2de>
      break;
 800fdc4:	bf00      	nop
  }

  return status;
 800fdc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdc8:	4618      	mov	r0, r3
 800fdca:	3710      	adds	r7, #16
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	bd80      	pop	{r7, pc}

0800fdd0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b088      	sub	sp, #32
 800fdd4:	af04      	add	r7, sp, #16
 800fdd6:	60f8      	str	r0, [r7, #12]
 800fdd8:	60b9      	str	r1, [r7, #8]
 800fdda:	4613      	mov	r3, r2
 800fddc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800fdde:	79f9      	ldrb	r1, [r7, #7]
 800fde0:	2300      	movs	r3, #0
 800fde2:	9303      	str	r3, [sp, #12]
 800fde4:	2308      	movs	r3, #8
 800fde6:	9302      	str	r3, [sp, #8]
 800fde8:	68bb      	ldr	r3, [r7, #8]
 800fdea:	9301      	str	r3, [sp, #4]
 800fdec:	2300      	movs	r3, #0
 800fdee:	9300      	str	r3, [sp, #0]
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	68f8      	ldr	r0, [r7, #12]
 800fdf6:	f003 fe38 	bl	8013a6a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800fdfa:	2300      	movs	r3, #0
}
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	3710      	adds	r7, #16
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bd80      	pop	{r7, pc}

0800fe04 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b088      	sub	sp, #32
 800fe08:	af04      	add	r7, sp, #16
 800fe0a:	60f8      	str	r0, [r7, #12]
 800fe0c:	60b9      	str	r1, [r7, #8]
 800fe0e:	4611      	mov	r1, r2
 800fe10:	461a      	mov	r2, r3
 800fe12:	460b      	mov	r3, r1
 800fe14:	80fb      	strh	r3, [r7, #6]
 800fe16:	4613      	mov	r3, r2
 800fe18:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d001      	beq.n	800fe28 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800fe24:	2300      	movs	r3, #0
 800fe26:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800fe28:	7979      	ldrb	r1, [r7, #5]
 800fe2a:	7e3b      	ldrb	r3, [r7, #24]
 800fe2c:	9303      	str	r3, [sp, #12]
 800fe2e:	88fb      	ldrh	r3, [r7, #6]
 800fe30:	9302      	str	r3, [sp, #8]
 800fe32:	68bb      	ldr	r3, [r7, #8]
 800fe34:	9301      	str	r3, [sp, #4]
 800fe36:	2301      	movs	r3, #1
 800fe38:	9300      	str	r3, [sp, #0]
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	68f8      	ldr	r0, [r7, #12]
 800fe40:	f003 fe13 	bl	8013a6a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800fe44:	2300      	movs	r3, #0
}
 800fe46:	4618      	mov	r0, r3
 800fe48:	3710      	adds	r7, #16
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	bd80      	pop	{r7, pc}

0800fe4e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800fe4e:	b580      	push	{r7, lr}
 800fe50:	b088      	sub	sp, #32
 800fe52:	af04      	add	r7, sp, #16
 800fe54:	60f8      	str	r0, [r7, #12]
 800fe56:	60b9      	str	r1, [r7, #8]
 800fe58:	4611      	mov	r1, r2
 800fe5a:	461a      	mov	r2, r3
 800fe5c:	460b      	mov	r3, r1
 800fe5e:	80fb      	strh	r3, [r7, #6]
 800fe60:	4613      	mov	r3, r2
 800fe62:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800fe64:	7979      	ldrb	r1, [r7, #5]
 800fe66:	2300      	movs	r3, #0
 800fe68:	9303      	str	r3, [sp, #12]
 800fe6a:	88fb      	ldrh	r3, [r7, #6]
 800fe6c:	9302      	str	r3, [sp, #8]
 800fe6e:	68bb      	ldr	r3, [r7, #8]
 800fe70:	9301      	str	r3, [sp, #4]
 800fe72:	2301      	movs	r3, #1
 800fe74:	9300      	str	r3, [sp, #0]
 800fe76:	2300      	movs	r3, #0
 800fe78:	2201      	movs	r2, #1
 800fe7a:	68f8      	ldr	r0, [r7, #12]
 800fe7c:	f003 fdf5 	bl	8013a6a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800fe80:	2300      	movs	r3, #0

}
 800fe82:	4618      	mov	r0, r3
 800fe84:	3710      	adds	r7, #16
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bd80      	pop	{r7, pc}

0800fe8a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800fe8a:	b580      	push	{r7, lr}
 800fe8c:	b088      	sub	sp, #32
 800fe8e:	af04      	add	r7, sp, #16
 800fe90:	60f8      	str	r0, [r7, #12]
 800fe92:	60b9      	str	r1, [r7, #8]
 800fe94:	4611      	mov	r1, r2
 800fe96:	461a      	mov	r2, r3
 800fe98:	460b      	mov	r3, r1
 800fe9a:	80fb      	strh	r3, [r7, #6]
 800fe9c:	4613      	mov	r3, r2
 800fe9e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d001      	beq.n	800feae <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800feaa:	2300      	movs	r3, #0
 800feac:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800feae:	7979      	ldrb	r1, [r7, #5]
 800feb0:	7e3b      	ldrb	r3, [r7, #24]
 800feb2:	9303      	str	r3, [sp, #12]
 800feb4:	88fb      	ldrh	r3, [r7, #6]
 800feb6:	9302      	str	r3, [sp, #8]
 800feb8:	68bb      	ldr	r3, [r7, #8]
 800feba:	9301      	str	r3, [sp, #4]
 800febc:	2301      	movs	r3, #1
 800febe:	9300      	str	r3, [sp, #0]
 800fec0:	2302      	movs	r3, #2
 800fec2:	2200      	movs	r2, #0
 800fec4:	68f8      	ldr	r0, [r7, #12]
 800fec6:	f003 fdd0 	bl	8013a6a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800feca:	2300      	movs	r3, #0
}
 800fecc:	4618      	mov	r0, r3
 800fece:	3710      	adds	r7, #16
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}

0800fed4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b088      	sub	sp, #32
 800fed8:	af04      	add	r7, sp, #16
 800feda:	60f8      	str	r0, [r7, #12]
 800fedc:	60b9      	str	r1, [r7, #8]
 800fede:	4611      	mov	r1, r2
 800fee0:	461a      	mov	r2, r3
 800fee2:	460b      	mov	r3, r1
 800fee4:	80fb      	strh	r3, [r7, #6]
 800fee6:	4613      	mov	r3, r2
 800fee8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800feea:	7979      	ldrb	r1, [r7, #5]
 800feec:	2300      	movs	r3, #0
 800feee:	9303      	str	r3, [sp, #12]
 800fef0:	88fb      	ldrh	r3, [r7, #6]
 800fef2:	9302      	str	r3, [sp, #8]
 800fef4:	68bb      	ldr	r3, [r7, #8]
 800fef6:	9301      	str	r3, [sp, #4]
 800fef8:	2301      	movs	r3, #1
 800fefa:	9300      	str	r3, [sp, #0]
 800fefc:	2302      	movs	r3, #2
 800fefe:	2201      	movs	r2, #1
 800ff00:	68f8      	ldr	r0, [r7, #12]
 800ff02:	f003 fdb2 	bl	8013a6a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ff06:	2300      	movs	r3, #0
}
 800ff08:	4618      	mov	r0, r3
 800ff0a:	3710      	adds	r7, #16
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	bd80      	pop	{r7, pc}

0800ff10 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b086      	sub	sp, #24
 800ff14:	af04      	add	r7, sp, #16
 800ff16:	6078      	str	r0, [r7, #4]
 800ff18:	4608      	mov	r0, r1
 800ff1a:	4611      	mov	r1, r2
 800ff1c:	461a      	mov	r2, r3
 800ff1e:	4603      	mov	r3, r0
 800ff20:	70fb      	strb	r3, [r7, #3]
 800ff22:	460b      	mov	r3, r1
 800ff24:	70bb      	strb	r3, [r7, #2]
 800ff26:	4613      	mov	r3, r2
 800ff28:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ff2a:	7878      	ldrb	r0, [r7, #1]
 800ff2c:	78ba      	ldrb	r2, [r7, #2]
 800ff2e:	78f9      	ldrb	r1, [r7, #3]
 800ff30:	8b3b      	ldrh	r3, [r7, #24]
 800ff32:	9302      	str	r3, [sp, #8]
 800ff34:	7d3b      	ldrb	r3, [r7, #20]
 800ff36:	9301      	str	r3, [sp, #4]
 800ff38:	7c3b      	ldrb	r3, [r7, #16]
 800ff3a:	9300      	str	r3, [sp, #0]
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	6878      	ldr	r0, [r7, #4]
 800ff40:	f003 fd45 	bl	80139ce <USBH_LL_OpenPipe>

  return USBH_OK;
 800ff44:	2300      	movs	r3, #0
}
 800ff46:	4618      	mov	r0, r3
 800ff48:	3708      	adds	r7, #8
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bd80      	pop	{r7, pc}

0800ff4e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ff4e:	b580      	push	{r7, lr}
 800ff50:	b082      	sub	sp, #8
 800ff52:	af00      	add	r7, sp, #0
 800ff54:	6078      	str	r0, [r7, #4]
 800ff56:	460b      	mov	r3, r1
 800ff58:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800ff5a:	78fb      	ldrb	r3, [r7, #3]
 800ff5c:	4619      	mov	r1, r3
 800ff5e:	6878      	ldr	r0, [r7, #4]
 800ff60:	f003 fd64 	bl	8013a2c <USBH_LL_ClosePipe>

  return USBH_OK;
 800ff64:	2300      	movs	r3, #0
}
 800ff66:	4618      	mov	r0, r3
 800ff68:	3708      	adds	r7, #8
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	bd80      	pop	{r7, pc}

0800ff6e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ff6e:	b580      	push	{r7, lr}
 800ff70:	b084      	sub	sp, #16
 800ff72:	af00      	add	r7, sp, #0
 800ff74:	6078      	str	r0, [r7, #4]
 800ff76:	460b      	mov	r3, r1
 800ff78:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ff7a:	6878      	ldr	r0, [r7, #4]
 800ff7c:	f000 f836 	bl	800ffec <USBH_GetFreePipe>
 800ff80:	4603      	mov	r3, r0
 800ff82:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ff84:	89fb      	ldrh	r3, [r7, #14]
 800ff86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ff8a:	4293      	cmp	r3, r2
 800ff8c:	d00a      	beq.n	800ffa4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ff8e:	78fa      	ldrb	r2, [r7, #3]
 800ff90:	89fb      	ldrh	r3, [r7, #14]
 800ff92:	f003 030f 	and.w	r3, r3, #15
 800ff96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ff9a:	6879      	ldr	r1, [r7, #4]
 800ff9c:	33e0      	adds	r3, #224	; 0xe0
 800ff9e:	009b      	lsls	r3, r3, #2
 800ffa0:	440b      	add	r3, r1
 800ffa2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ffa4:	89fb      	ldrh	r3, [r7, #14]
 800ffa6:	b2db      	uxtb	r3, r3
}
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	3710      	adds	r7, #16
 800ffac:	46bd      	mov	sp, r7
 800ffae:	bd80      	pop	{r7, pc}

0800ffb0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b083      	sub	sp, #12
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
 800ffb8:	460b      	mov	r3, r1
 800ffba:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800ffbc:	78fb      	ldrb	r3, [r7, #3]
 800ffbe:	2b0f      	cmp	r3, #15
 800ffc0:	d80d      	bhi.n	800ffde <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ffc2:	78fb      	ldrb	r3, [r7, #3]
 800ffc4:	687a      	ldr	r2, [r7, #4]
 800ffc6:	33e0      	adds	r3, #224	; 0xe0
 800ffc8:	009b      	lsls	r3, r3, #2
 800ffca:	4413      	add	r3, r2
 800ffcc:	685a      	ldr	r2, [r3, #4]
 800ffce:	78fb      	ldrb	r3, [r7, #3]
 800ffd0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ffd4:	6879      	ldr	r1, [r7, #4]
 800ffd6:	33e0      	adds	r3, #224	; 0xe0
 800ffd8:	009b      	lsls	r3, r3, #2
 800ffda:	440b      	add	r3, r1
 800ffdc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ffde:	2300      	movs	r3, #0
}
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	370c      	adds	r7, #12
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffea:	4770      	bx	lr

0800ffec <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ffec:	b480      	push	{r7}
 800ffee:	b085      	sub	sp, #20
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800fff4:	2300      	movs	r3, #0
 800fff6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800fff8:	2300      	movs	r3, #0
 800fffa:	73fb      	strb	r3, [r7, #15]
 800fffc:	e00f      	b.n	801001e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800fffe:	7bfb      	ldrb	r3, [r7, #15]
 8010000:	687a      	ldr	r2, [r7, #4]
 8010002:	33e0      	adds	r3, #224	; 0xe0
 8010004:	009b      	lsls	r3, r3, #2
 8010006:	4413      	add	r3, r2
 8010008:	685b      	ldr	r3, [r3, #4]
 801000a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801000e:	2b00      	cmp	r3, #0
 8010010:	d102      	bne.n	8010018 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8010012:	7bfb      	ldrb	r3, [r7, #15]
 8010014:	b29b      	uxth	r3, r3
 8010016:	e007      	b.n	8010028 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8010018:	7bfb      	ldrb	r3, [r7, #15]
 801001a:	3301      	adds	r3, #1
 801001c:	73fb      	strb	r3, [r7, #15]
 801001e:	7bfb      	ldrb	r3, [r7, #15]
 8010020:	2b0f      	cmp	r3, #15
 8010022:	d9ec      	bls.n	800fffe <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8010024:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8010028:	4618      	mov	r0, r3
 801002a:	3714      	adds	r7, #20
 801002c:	46bd      	mov	sp, r7
 801002e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010032:	4770      	bx	lr

08010034 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b084      	sub	sp, #16
 8010038:	af00      	add	r7, sp, #0
 801003a:	4603      	mov	r3, r0
 801003c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801003e:	79fb      	ldrb	r3, [r7, #7]
 8010040:	4a08      	ldr	r2, [pc, #32]	; (8010064 <disk_status+0x30>)
 8010042:	009b      	lsls	r3, r3, #2
 8010044:	4413      	add	r3, r2
 8010046:	685b      	ldr	r3, [r3, #4]
 8010048:	685b      	ldr	r3, [r3, #4]
 801004a:	79fa      	ldrb	r2, [r7, #7]
 801004c:	4905      	ldr	r1, [pc, #20]	; (8010064 <disk_status+0x30>)
 801004e:	440a      	add	r2, r1
 8010050:	7a12      	ldrb	r2, [r2, #8]
 8010052:	4610      	mov	r0, r2
 8010054:	4798      	blx	r3
 8010056:	4603      	mov	r3, r0
 8010058:	73fb      	strb	r3, [r7, #15]
  return stat;
 801005a:	7bfb      	ldrb	r3, [r7, #15]
}
 801005c:	4618      	mov	r0, r3
 801005e:	3710      	adds	r7, #16
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}
 8010064:	20002084 	.word	0x20002084

08010068 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010068:	b580      	push	{r7, lr}
 801006a:	b084      	sub	sp, #16
 801006c:	af00      	add	r7, sp, #0
 801006e:	4603      	mov	r3, r0
 8010070:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010072:	2300      	movs	r3, #0
 8010074:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010076:	79fb      	ldrb	r3, [r7, #7]
 8010078:	4a0d      	ldr	r2, [pc, #52]	; (80100b0 <disk_initialize+0x48>)
 801007a:	5cd3      	ldrb	r3, [r2, r3]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d111      	bne.n	80100a4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010080:	79fb      	ldrb	r3, [r7, #7]
 8010082:	4a0b      	ldr	r2, [pc, #44]	; (80100b0 <disk_initialize+0x48>)
 8010084:	2101      	movs	r1, #1
 8010086:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010088:	79fb      	ldrb	r3, [r7, #7]
 801008a:	4a09      	ldr	r2, [pc, #36]	; (80100b0 <disk_initialize+0x48>)
 801008c:	009b      	lsls	r3, r3, #2
 801008e:	4413      	add	r3, r2
 8010090:	685b      	ldr	r3, [r3, #4]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	79fa      	ldrb	r2, [r7, #7]
 8010096:	4906      	ldr	r1, [pc, #24]	; (80100b0 <disk_initialize+0x48>)
 8010098:	440a      	add	r2, r1
 801009a:	7a12      	ldrb	r2, [r2, #8]
 801009c:	4610      	mov	r0, r2
 801009e:	4798      	blx	r3
 80100a0:	4603      	mov	r3, r0
 80100a2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80100a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80100a6:	4618      	mov	r0, r3
 80100a8:	3710      	adds	r7, #16
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bd80      	pop	{r7, pc}
 80100ae:	bf00      	nop
 80100b0:	20002084 	.word	0x20002084

080100b4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80100b4:	b590      	push	{r4, r7, lr}
 80100b6:	b087      	sub	sp, #28
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	60b9      	str	r1, [r7, #8]
 80100bc:	607a      	str	r2, [r7, #4]
 80100be:	603b      	str	r3, [r7, #0]
 80100c0:	4603      	mov	r3, r0
 80100c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80100c4:	7bfb      	ldrb	r3, [r7, #15]
 80100c6:	4a0a      	ldr	r2, [pc, #40]	; (80100f0 <disk_read+0x3c>)
 80100c8:	009b      	lsls	r3, r3, #2
 80100ca:	4413      	add	r3, r2
 80100cc:	685b      	ldr	r3, [r3, #4]
 80100ce:	689c      	ldr	r4, [r3, #8]
 80100d0:	7bfb      	ldrb	r3, [r7, #15]
 80100d2:	4a07      	ldr	r2, [pc, #28]	; (80100f0 <disk_read+0x3c>)
 80100d4:	4413      	add	r3, r2
 80100d6:	7a18      	ldrb	r0, [r3, #8]
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	687a      	ldr	r2, [r7, #4]
 80100dc:	68b9      	ldr	r1, [r7, #8]
 80100de:	47a0      	blx	r4
 80100e0:	4603      	mov	r3, r0
 80100e2:	75fb      	strb	r3, [r7, #23]
  return res;
 80100e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80100e6:	4618      	mov	r0, r3
 80100e8:	371c      	adds	r7, #28
 80100ea:	46bd      	mov	sp, r7
 80100ec:	bd90      	pop	{r4, r7, pc}
 80100ee:	bf00      	nop
 80100f0:	20002084 	.word	0x20002084

080100f4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80100f4:	b590      	push	{r4, r7, lr}
 80100f6:	b087      	sub	sp, #28
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	60b9      	str	r1, [r7, #8]
 80100fc:	607a      	str	r2, [r7, #4]
 80100fe:	603b      	str	r3, [r7, #0]
 8010100:	4603      	mov	r3, r0
 8010102:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010104:	7bfb      	ldrb	r3, [r7, #15]
 8010106:	4a0a      	ldr	r2, [pc, #40]	; (8010130 <disk_write+0x3c>)
 8010108:	009b      	lsls	r3, r3, #2
 801010a:	4413      	add	r3, r2
 801010c:	685b      	ldr	r3, [r3, #4]
 801010e:	68dc      	ldr	r4, [r3, #12]
 8010110:	7bfb      	ldrb	r3, [r7, #15]
 8010112:	4a07      	ldr	r2, [pc, #28]	; (8010130 <disk_write+0x3c>)
 8010114:	4413      	add	r3, r2
 8010116:	7a18      	ldrb	r0, [r3, #8]
 8010118:	683b      	ldr	r3, [r7, #0]
 801011a:	687a      	ldr	r2, [r7, #4]
 801011c:	68b9      	ldr	r1, [r7, #8]
 801011e:	47a0      	blx	r4
 8010120:	4603      	mov	r3, r0
 8010122:	75fb      	strb	r3, [r7, #23]
  return res;
 8010124:	7dfb      	ldrb	r3, [r7, #23]
}
 8010126:	4618      	mov	r0, r3
 8010128:	371c      	adds	r7, #28
 801012a:	46bd      	mov	sp, r7
 801012c:	bd90      	pop	{r4, r7, pc}
 801012e:	bf00      	nop
 8010130:	20002084 	.word	0x20002084

08010134 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010134:	b580      	push	{r7, lr}
 8010136:	b084      	sub	sp, #16
 8010138:	af00      	add	r7, sp, #0
 801013a:	4603      	mov	r3, r0
 801013c:	603a      	str	r2, [r7, #0]
 801013e:	71fb      	strb	r3, [r7, #7]
 8010140:	460b      	mov	r3, r1
 8010142:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010144:	79fb      	ldrb	r3, [r7, #7]
 8010146:	4a09      	ldr	r2, [pc, #36]	; (801016c <disk_ioctl+0x38>)
 8010148:	009b      	lsls	r3, r3, #2
 801014a:	4413      	add	r3, r2
 801014c:	685b      	ldr	r3, [r3, #4]
 801014e:	691b      	ldr	r3, [r3, #16]
 8010150:	79fa      	ldrb	r2, [r7, #7]
 8010152:	4906      	ldr	r1, [pc, #24]	; (801016c <disk_ioctl+0x38>)
 8010154:	440a      	add	r2, r1
 8010156:	7a10      	ldrb	r0, [r2, #8]
 8010158:	79b9      	ldrb	r1, [r7, #6]
 801015a:	683a      	ldr	r2, [r7, #0]
 801015c:	4798      	blx	r3
 801015e:	4603      	mov	r3, r0
 8010160:	73fb      	strb	r3, [r7, #15]
  return res;
 8010162:	7bfb      	ldrb	r3, [r7, #15]
}
 8010164:	4618      	mov	r0, r3
 8010166:	3710      	adds	r7, #16
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}
 801016c:	20002084 	.word	0x20002084

08010170 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010170:	b480      	push	{r7}
 8010172:	b085      	sub	sp, #20
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	3301      	adds	r3, #1
 801017c:	781b      	ldrb	r3, [r3, #0]
 801017e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010180:	89fb      	ldrh	r3, [r7, #14]
 8010182:	021b      	lsls	r3, r3, #8
 8010184:	b21a      	sxth	r2, r3
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	781b      	ldrb	r3, [r3, #0]
 801018a:	b21b      	sxth	r3, r3
 801018c:	4313      	orrs	r3, r2
 801018e:	b21b      	sxth	r3, r3
 8010190:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010192:	89fb      	ldrh	r3, [r7, #14]
}
 8010194:	4618      	mov	r0, r3
 8010196:	3714      	adds	r7, #20
 8010198:	46bd      	mov	sp, r7
 801019a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019e:	4770      	bx	lr

080101a0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80101a0:	b480      	push	{r7}
 80101a2:	b085      	sub	sp, #20
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	3303      	adds	r3, #3
 80101ac:	781b      	ldrb	r3, [r3, #0]
 80101ae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	021b      	lsls	r3, r3, #8
 80101b4:	687a      	ldr	r2, [r7, #4]
 80101b6:	3202      	adds	r2, #2
 80101b8:	7812      	ldrb	r2, [r2, #0]
 80101ba:	4313      	orrs	r3, r2
 80101bc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	021b      	lsls	r3, r3, #8
 80101c2:	687a      	ldr	r2, [r7, #4]
 80101c4:	3201      	adds	r2, #1
 80101c6:	7812      	ldrb	r2, [r2, #0]
 80101c8:	4313      	orrs	r3, r2
 80101ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	021b      	lsls	r3, r3, #8
 80101d0:	687a      	ldr	r2, [r7, #4]
 80101d2:	7812      	ldrb	r2, [r2, #0]
 80101d4:	4313      	orrs	r3, r2
 80101d6:	60fb      	str	r3, [r7, #12]
	return rv;
 80101d8:	68fb      	ldr	r3, [r7, #12]
}
 80101da:	4618      	mov	r0, r3
 80101dc:	3714      	adds	r7, #20
 80101de:	46bd      	mov	sp, r7
 80101e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e4:	4770      	bx	lr

080101e6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80101e6:	b480      	push	{r7}
 80101e8:	b083      	sub	sp, #12
 80101ea:	af00      	add	r7, sp, #0
 80101ec:	6078      	str	r0, [r7, #4]
 80101ee:	460b      	mov	r3, r1
 80101f0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	1c5a      	adds	r2, r3, #1
 80101f6:	607a      	str	r2, [r7, #4]
 80101f8:	887a      	ldrh	r2, [r7, #2]
 80101fa:	b2d2      	uxtb	r2, r2
 80101fc:	701a      	strb	r2, [r3, #0]
 80101fe:	887b      	ldrh	r3, [r7, #2]
 8010200:	0a1b      	lsrs	r3, r3, #8
 8010202:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	1c5a      	adds	r2, r3, #1
 8010208:	607a      	str	r2, [r7, #4]
 801020a:	887a      	ldrh	r2, [r7, #2]
 801020c:	b2d2      	uxtb	r2, r2
 801020e:	701a      	strb	r2, [r3, #0]
}
 8010210:	bf00      	nop
 8010212:	370c      	adds	r7, #12
 8010214:	46bd      	mov	sp, r7
 8010216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021a:	4770      	bx	lr

0801021c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801021c:	b480      	push	{r7}
 801021e:	b083      	sub	sp, #12
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
 8010224:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	1c5a      	adds	r2, r3, #1
 801022a:	607a      	str	r2, [r7, #4]
 801022c:	683a      	ldr	r2, [r7, #0]
 801022e:	b2d2      	uxtb	r2, r2
 8010230:	701a      	strb	r2, [r3, #0]
 8010232:	683b      	ldr	r3, [r7, #0]
 8010234:	0a1b      	lsrs	r3, r3, #8
 8010236:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	1c5a      	adds	r2, r3, #1
 801023c:	607a      	str	r2, [r7, #4]
 801023e:	683a      	ldr	r2, [r7, #0]
 8010240:	b2d2      	uxtb	r2, r2
 8010242:	701a      	strb	r2, [r3, #0]
 8010244:	683b      	ldr	r3, [r7, #0]
 8010246:	0a1b      	lsrs	r3, r3, #8
 8010248:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	1c5a      	adds	r2, r3, #1
 801024e:	607a      	str	r2, [r7, #4]
 8010250:	683a      	ldr	r2, [r7, #0]
 8010252:	b2d2      	uxtb	r2, r2
 8010254:	701a      	strb	r2, [r3, #0]
 8010256:	683b      	ldr	r3, [r7, #0]
 8010258:	0a1b      	lsrs	r3, r3, #8
 801025a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	1c5a      	adds	r2, r3, #1
 8010260:	607a      	str	r2, [r7, #4]
 8010262:	683a      	ldr	r2, [r7, #0]
 8010264:	b2d2      	uxtb	r2, r2
 8010266:	701a      	strb	r2, [r3, #0]
}
 8010268:	bf00      	nop
 801026a:	370c      	adds	r7, #12
 801026c:	46bd      	mov	sp, r7
 801026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010272:	4770      	bx	lr

08010274 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010274:	b480      	push	{r7}
 8010276:	b087      	sub	sp, #28
 8010278:	af00      	add	r7, sp, #0
 801027a:	60f8      	str	r0, [r7, #12]
 801027c:	60b9      	str	r1, [r7, #8]
 801027e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010284:	68bb      	ldr	r3, [r7, #8]
 8010286:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d00d      	beq.n	80102aa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801028e:	693a      	ldr	r2, [r7, #16]
 8010290:	1c53      	adds	r3, r2, #1
 8010292:	613b      	str	r3, [r7, #16]
 8010294:	697b      	ldr	r3, [r7, #20]
 8010296:	1c59      	adds	r1, r3, #1
 8010298:	6179      	str	r1, [r7, #20]
 801029a:	7812      	ldrb	r2, [r2, #0]
 801029c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	3b01      	subs	r3, #1
 80102a2:	607b      	str	r3, [r7, #4]
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d1f1      	bne.n	801028e <mem_cpy+0x1a>
	}
}
 80102aa:	bf00      	nop
 80102ac:	371c      	adds	r7, #28
 80102ae:	46bd      	mov	sp, r7
 80102b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b4:	4770      	bx	lr

080102b6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80102b6:	b480      	push	{r7}
 80102b8:	b087      	sub	sp, #28
 80102ba:	af00      	add	r7, sp, #0
 80102bc:	60f8      	str	r0, [r7, #12]
 80102be:	60b9      	str	r1, [r7, #8]
 80102c0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80102c6:	697b      	ldr	r3, [r7, #20]
 80102c8:	1c5a      	adds	r2, r3, #1
 80102ca:	617a      	str	r2, [r7, #20]
 80102cc:	68ba      	ldr	r2, [r7, #8]
 80102ce:	b2d2      	uxtb	r2, r2
 80102d0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	3b01      	subs	r3, #1
 80102d6:	607b      	str	r3, [r7, #4]
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d1f3      	bne.n	80102c6 <mem_set+0x10>
}
 80102de:	bf00      	nop
 80102e0:	bf00      	nop
 80102e2:	371c      	adds	r7, #28
 80102e4:	46bd      	mov	sp, r7
 80102e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ea:	4770      	bx	lr

080102ec <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80102ec:	b480      	push	{r7}
 80102ee:	b089      	sub	sp, #36	; 0x24
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	60f8      	str	r0, [r7, #12]
 80102f4:	60b9      	str	r1, [r7, #8]
 80102f6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	61fb      	str	r3, [r7, #28]
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010300:	2300      	movs	r3, #0
 8010302:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010304:	69fb      	ldr	r3, [r7, #28]
 8010306:	1c5a      	adds	r2, r3, #1
 8010308:	61fa      	str	r2, [r7, #28]
 801030a:	781b      	ldrb	r3, [r3, #0]
 801030c:	4619      	mov	r1, r3
 801030e:	69bb      	ldr	r3, [r7, #24]
 8010310:	1c5a      	adds	r2, r3, #1
 8010312:	61ba      	str	r2, [r7, #24]
 8010314:	781b      	ldrb	r3, [r3, #0]
 8010316:	1acb      	subs	r3, r1, r3
 8010318:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	3b01      	subs	r3, #1
 801031e:	607b      	str	r3, [r7, #4]
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d002      	beq.n	801032c <mem_cmp+0x40>
 8010326:	697b      	ldr	r3, [r7, #20]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d0eb      	beq.n	8010304 <mem_cmp+0x18>

	return r;
 801032c:	697b      	ldr	r3, [r7, #20]
}
 801032e:	4618      	mov	r0, r3
 8010330:	3724      	adds	r7, #36	; 0x24
 8010332:	46bd      	mov	sp, r7
 8010334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010338:	4770      	bx	lr

0801033a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801033a:	b480      	push	{r7}
 801033c:	b083      	sub	sp, #12
 801033e:	af00      	add	r7, sp, #0
 8010340:	6078      	str	r0, [r7, #4]
 8010342:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010344:	e002      	b.n	801034c <chk_chr+0x12>
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	3301      	adds	r3, #1
 801034a:	607b      	str	r3, [r7, #4]
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	781b      	ldrb	r3, [r3, #0]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d005      	beq.n	8010360 <chk_chr+0x26>
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	781b      	ldrb	r3, [r3, #0]
 8010358:	461a      	mov	r2, r3
 801035a:	683b      	ldr	r3, [r7, #0]
 801035c:	4293      	cmp	r3, r2
 801035e:	d1f2      	bne.n	8010346 <chk_chr+0xc>
	return *str;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	781b      	ldrb	r3, [r3, #0]
}
 8010364:	4618      	mov	r0, r3
 8010366:	370c      	adds	r7, #12
 8010368:	46bd      	mov	sp, r7
 801036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036e:	4770      	bx	lr

08010370 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010370:	b480      	push	{r7}
 8010372:	b085      	sub	sp, #20
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
 8010378:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801037a:	2300      	movs	r3, #0
 801037c:	60bb      	str	r3, [r7, #8]
 801037e:	68bb      	ldr	r3, [r7, #8]
 8010380:	60fb      	str	r3, [r7, #12]
 8010382:	e029      	b.n	80103d8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010384:	4a27      	ldr	r2, [pc, #156]	; (8010424 <chk_lock+0xb4>)
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	011b      	lsls	r3, r3, #4
 801038a:	4413      	add	r3, r2
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d01d      	beq.n	80103ce <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010392:	4a24      	ldr	r2, [pc, #144]	; (8010424 <chk_lock+0xb4>)
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	011b      	lsls	r3, r3, #4
 8010398:	4413      	add	r3, r2
 801039a:	681a      	ldr	r2, [r3, #0]
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	429a      	cmp	r2, r3
 80103a2:	d116      	bne.n	80103d2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80103a4:	4a1f      	ldr	r2, [pc, #124]	; (8010424 <chk_lock+0xb4>)
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	011b      	lsls	r3, r3, #4
 80103aa:	4413      	add	r3, r2
 80103ac:	3304      	adds	r3, #4
 80103ae:	681a      	ldr	r2, [r3, #0]
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80103b4:	429a      	cmp	r2, r3
 80103b6:	d10c      	bne.n	80103d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80103b8:	4a1a      	ldr	r2, [pc, #104]	; (8010424 <chk_lock+0xb4>)
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	011b      	lsls	r3, r3, #4
 80103be:	4413      	add	r3, r2
 80103c0:	3308      	adds	r3, #8
 80103c2:	681a      	ldr	r2, [r3, #0]
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80103c8:	429a      	cmp	r2, r3
 80103ca:	d102      	bne.n	80103d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80103cc:	e007      	b.n	80103de <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80103ce:	2301      	movs	r3, #1
 80103d0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	3301      	adds	r3, #1
 80103d6:	60fb      	str	r3, [r7, #12]
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	2b01      	cmp	r3, #1
 80103dc:	d9d2      	bls.n	8010384 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	2b02      	cmp	r3, #2
 80103e2:	d109      	bne.n	80103f8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80103e4:	68bb      	ldr	r3, [r7, #8]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d102      	bne.n	80103f0 <chk_lock+0x80>
 80103ea:	683b      	ldr	r3, [r7, #0]
 80103ec:	2b02      	cmp	r3, #2
 80103ee:	d101      	bne.n	80103f4 <chk_lock+0x84>
 80103f0:	2300      	movs	r3, #0
 80103f2:	e010      	b.n	8010416 <chk_lock+0xa6>
 80103f4:	2312      	movs	r3, #18
 80103f6:	e00e      	b.n	8010416 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80103f8:	683b      	ldr	r3, [r7, #0]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d108      	bne.n	8010410 <chk_lock+0xa0>
 80103fe:	4a09      	ldr	r2, [pc, #36]	; (8010424 <chk_lock+0xb4>)
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	011b      	lsls	r3, r3, #4
 8010404:	4413      	add	r3, r2
 8010406:	330c      	adds	r3, #12
 8010408:	881b      	ldrh	r3, [r3, #0]
 801040a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801040e:	d101      	bne.n	8010414 <chk_lock+0xa4>
 8010410:	2310      	movs	r3, #16
 8010412:	e000      	b.n	8010416 <chk_lock+0xa6>
 8010414:	2300      	movs	r3, #0
}
 8010416:	4618      	mov	r0, r3
 8010418:	3714      	adds	r7, #20
 801041a:	46bd      	mov	sp, r7
 801041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010420:	4770      	bx	lr
 8010422:	bf00      	nop
 8010424:	20001e64 	.word	0x20001e64

08010428 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010428:	b480      	push	{r7}
 801042a:	b083      	sub	sp, #12
 801042c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801042e:	2300      	movs	r3, #0
 8010430:	607b      	str	r3, [r7, #4]
 8010432:	e002      	b.n	801043a <enq_lock+0x12>
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	3301      	adds	r3, #1
 8010438:	607b      	str	r3, [r7, #4]
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	2b01      	cmp	r3, #1
 801043e:	d806      	bhi.n	801044e <enq_lock+0x26>
 8010440:	4a09      	ldr	r2, [pc, #36]	; (8010468 <enq_lock+0x40>)
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	011b      	lsls	r3, r3, #4
 8010446:	4413      	add	r3, r2
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d1f2      	bne.n	8010434 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	2b02      	cmp	r3, #2
 8010452:	bf14      	ite	ne
 8010454:	2301      	movne	r3, #1
 8010456:	2300      	moveq	r3, #0
 8010458:	b2db      	uxtb	r3, r3
}
 801045a:	4618      	mov	r0, r3
 801045c:	370c      	adds	r7, #12
 801045e:	46bd      	mov	sp, r7
 8010460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010464:	4770      	bx	lr
 8010466:	bf00      	nop
 8010468:	20001e64 	.word	0x20001e64

0801046c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801046c:	b480      	push	{r7}
 801046e:	b085      	sub	sp, #20
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
 8010474:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010476:	2300      	movs	r3, #0
 8010478:	60fb      	str	r3, [r7, #12]
 801047a:	e01f      	b.n	80104bc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801047c:	4a41      	ldr	r2, [pc, #260]	; (8010584 <inc_lock+0x118>)
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	011b      	lsls	r3, r3, #4
 8010482:	4413      	add	r3, r2
 8010484:	681a      	ldr	r2, [r3, #0]
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	429a      	cmp	r2, r3
 801048c:	d113      	bne.n	80104b6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801048e:	4a3d      	ldr	r2, [pc, #244]	; (8010584 <inc_lock+0x118>)
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	011b      	lsls	r3, r3, #4
 8010494:	4413      	add	r3, r2
 8010496:	3304      	adds	r3, #4
 8010498:	681a      	ldr	r2, [r3, #0]
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801049e:	429a      	cmp	r2, r3
 80104a0:	d109      	bne.n	80104b6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80104a2:	4a38      	ldr	r2, [pc, #224]	; (8010584 <inc_lock+0x118>)
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	011b      	lsls	r3, r3, #4
 80104a8:	4413      	add	r3, r2
 80104aa:	3308      	adds	r3, #8
 80104ac:	681a      	ldr	r2, [r3, #0]
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80104b2:	429a      	cmp	r2, r3
 80104b4:	d006      	beq.n	80104c4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	3301      	adds	r3, #1
 80104ba:	60fb      	str	r3, [r7, #12]
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	2b01      	cmp	r3, #1
 80104c0:	d9dc      	bls.n	801047c <inc_lock+0x10>
 80104c2:	e000      	b.n	80104c6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80104c4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	2b02      	cmp	r3, #2
 80104ca:	d132      	bne.n	8010532 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80104cc:	2300      	movs	r3, #0
 80104ce:	60fb      	str	r3, [r7, #12]
 80104d0:	e002      	b.n	80104d8 <inc_lock+0x6c>
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	3301      	adds	r3, #1
 80104d6:	60fb      	str	r3, [r7, #12]
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	2b01      	cmp	r3, #1
 80104dc:	d806      	bhi.n	80104ec <inc_lock+0x80>
 80104de:	4a29      	ldr	r2, [pc, #164]	; (8010584 <inc_lock+0x118>)
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	011b      	lsls	r3, r3, #4
 80104e4:	4413      	add	r3, r2
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d1f2      	bne.n	80104d2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	2b02      	cmp	r3, #2
 80104f0:	d101      	bne.n	80104f6 <inc_lock+0x8a>
 80104f2:	2300      	movs	r3, #0
 80104f4:	e040      	b.n	8010578 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	681a      	ldr	r2, [r3, #0]
 80104fa:	4922      	ldr	r1, [pc, #136]	; (8010584 <inc_lock+0x118>)
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	011b      	lsls	r3, r3, #4
 8010500:	440b      	add	r3, r1
 8010502:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	689a      	ldr	r2, [r3, #8]
 8010508:	491e      	ldr	r1, [pc, #120]	; (8010584 <inc_lock+0x118>)
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	011b      	lsls	r3, r3, #4
 801050e:	440b      	add	r3, r1
 8010510:	3304      	adds	r3, #4
 8010512:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	695a      	ldr	r2, [r3, #20]
 8010518:	491a      	ldr	r1, [pc, #104]	; (8010584 <inc_lock+0x118>)
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	011b      	lsls	r3, r3, #4
 801051e:	440b      	add	r3, r1
 8010520:	3308      	adds	r3, #8
 8010522:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8010524:	4a17      	ldr	r2, [pc, #92]	; (8010584 <inc_lock+0x118>)
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	011b      	lsls	r3, r3, #4
 801052a:	4413      	add	r3, r2
 801052c:	330c      	adds	r3, #12
 801052e:	2200      	movs	r2, #0
 8010530:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010532:	683b      	ldr	r3, [r7, #0]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d009      	beq.n	801054c <inc_lock+0xe0>
 8010538:	4a12      	ldr	r2, [pc, #72]	; (8010584 <inc_lock+0x118>)
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	011b      	lsls	r3, r3, #4
 801053e:	4413      	add	r3, r2
 8010540:	330c      	adds	r3, #12
 8010542:	881b      	ldrh	r3, [r3, #0]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d001      	beq.n	801054c <inc_lock+0xe0>
 8010548:	2300      	movs	r3, #0
 801054a:	e015      	b.n	8010578 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801054c:	683b      	ldr	r3, [r7, #0]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d108      	bne.n	8010564 <inc_lock+0xf8>
 8010552:	4a0c      	ldr	r2, [pc, #48]	; (8010584 <inc_lock+0x118>)
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	011b      	lsls	r3, r3, #4
 8010558:	4413      	add	r3, r2
 801055a:	330c      	adds	r3, #12
 801055c:	881b      	ldrh	r3, [r3, #0]
 801055e:	3301      	adds	r3, #1
 8010560:	b29a      	uxth	r2, r3
 8010562:	e001      	b.n	8010568 <inc_lock+0xfc>
 8010564:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010568:	4906      	ldr	r1, [pc, #24]	; (8010584 <inc_lock+0x118>)
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	011b      	lsls	r3, r3, #4
 801056e:	440b      	add	r3, r1
 8010570:	330c      	adds	r3, #12
 8010572:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	3301      	adds	r3, #1
}
 8010578:	4618      	mov	r0, r3
 801057a:	3714      	adds	r7, #20
 801057c:	46bd      	mov	sp, r7
 801057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010582:	4770      	bx	lr
 8010584:	20001e64 	.word	0x20001e64

08010588 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8010588:	b480      	push	{r7}
 801058a:	b085      	sub	sp, #20
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	3b01      	subs	r3, #1
 8010594:	607b      	str	r3, [r7, #4]
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	2b01      	cmp	r3, #1
 801059a:	d825      	bhi.n	80105e8 <dec_lock+0x60>
		n = Files[i].ctr;
 801059c:	4a17      	ldr	r2, [pc, #92]	; (80105fc <dec_lock+0x74>)
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	011b      	lsls	r3, r3, #4
 80105a2:	4413      	add	r3, r2
 80105a4:	330c      	adds	r3, #12
 80105a6:	881b      	ldrh	r3, [r3, #0]
 80105a8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80105aa:	89fb      	ldrh	r3, [r7, #14]
 80105ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80105b0:	d101      	bne.n	80105b6 <dec_lock+0x2e>
 80105b2:	2300      	movs	r3, #0
 80105b4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80105b6:	89fb      	ldrh	r3, [r7, #14]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d002      	beq.n	80105c2 <dec_lock+0x3a>
 80105bc:	89fb      	ldrh	r3, [r7, #14]
 80105be:	3b01      	subs	r3, #1
 80105c0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80105c2:	4a0e      	ldr	r2, [pc, #56]	; (80105fc <dec_lock+0x74>)
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	011b      	lsls	r3, r3, #4
 80105c8:	4413      	add	r3, r2
 80105ca:	330c      	adds	r3, #12
 80105cc:	89fa      	ldrh	r2, [r7, #14]
 80105ce:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80105d0:	89fb      	ldrh	r3, [r7, #14]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d105      	bne.n	80105e2 <dec_lock+0x5a>
 80105d6:	4a09      	ldr	r2, [pc, #36]	; (80105fc <dec_lock+0x74>)
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	011b      	lsls	r3, r3, #4
 80105dc:	4413      	add	r3, r2
 80105de:	2200      	movs	r2, #0
 80105e0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80105e2:	2300      	movs	r3, #0
 80105e4:	737b      	strb	r3, [r7, #13]
 80105e6:	e001      	b.n	80105ec <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80105e8:	2302      	movs	r3, #2
 80105ea:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80105ec:	7b7b      	ldrb	r3, [r7, #13]
}
 80105ee:	4618      	mov	r0, r3
 80105f0:	3714      	adds	r7, #20
 80105f2:	46bd      	mov	sp, r7
 80105f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f8:	4770      	bx	lr
 80105fa:	bf00      	nop
 80105fc:	20001e64 	.word	0x20001e64

08010600 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010600:	b480      	push	{r7}
 8010602:	b085      	sub	sp, #20
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010608:	2300      	movs	r3, #0
 801060a:	60fb      	str	r3, [r7, #12]
 801060c:	e010      	b.n	8010630 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801060e:	4a0d      	ldr	r2, [pc, #52]	; (8010644 <clear_lock+0x44>)
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	011b      	lsls	r3, r3, #4
 8010614:	4413      	add	r3, r2
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	687a      	ldr	r2, [r7, #4]
 801061a:	429a      	cmp	r2, r3
 801061c:	d105      	bne.n	801062a <clear_lock+0x2a>
 801061e:	4a09      	ldr	r2, [pc, #36]	; (8010644 <clear_lock+0x44>)
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	011b      	lsls	r3, r3, #4
 8010624:	4413      	add	r3, r2
 8010626:	2200      	movs	r2, #0
 8010628:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	3301      	adds	r3, #1
 801062e:	60fb      	str	r3, [r7, #12]
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	2b01      	cmp	r3, #1
 8010634:	d9eb      	bls.n	801060e <clear_lock+0xe>
	}
}
 8010636:	bf00      	nop
 8010638:	bf00      	nop
 801063a:	3714      	adds	r7, #20
 801063c:	46bd      	mov	sp, r7
 801063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010642:	4770      	bx	lr
 8010644:	20001e64 	.word	0x20001e64

08010648 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b086      	sub	sp, #24
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010650:	2300      	movs	r3, #0
 8010652:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	78db      	ldrb	r3, [r3, #3]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d034      	beq.n	80106c6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010660:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	7858      	ldrb	r0, [r3, #1]
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801066c:	2301      	movs	r3, #1
 801066e:	697a      	ldr	r2, [r7, #20]
 8010670:	f7ff fd40 	bl	80100f4 <disk_write>
 8010674:	4603      	mov	r3, r0
 8010676:	2b00      	cmp	r3, #0
 8010678:	d002      	beq.n	8010680 <sync_window+0x38>
			res = FR_DISK_ERR;
 801067a:	2301      	movs	r3, #1
 801067c:	73fb      	strb	r3, [r7, #15]
 801067e:	e022      	b.n	80106c6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	2200      	movs	r2, #0
 8010684:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801068a:	697a      	ldr	r2, [r7, #20]
 801068c:	1ad2      	subs	r2, r2, r3
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	69db      	ldr	r3, [r3, #28]
 8010692:	429a      	cmp	r2, r3
 8010694:	d217      	bcs.n	80106c6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	789b      	ldrb	r3, [r3, #2]
 801069a:	613b      	str	r3, [r7, #16]
 801069c:	e010      	b.n	80106c0 <sync_window+0x78>
					wsect += fs->fsize;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	69db      	ldr	r3, [r3, #28]
 80106a2:	697a      	ldr	r2, [r7, #20]
 80106a4:	4413      	add	r3, r2
 80106a6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	7858      	ldrb	r0, [r3, #1]
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80106b2:	2301      	movs	r3, #1
 80106b4:	697a      	ldr	r2, [r7, #20]
 80106b6:	f7ff fd1d 	bl	80100f4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80106ba:	693b      	ldr	r3, [r7, #16]
 80106bc:	3b01      	subs	r3, #1
 80106be:	613b      	str	r3, [r7, #16]
 80106c0:	693b      	ldr	r3, [r7, #16]
 80106c2:	2b01      	cmp	r3, #1
 80106c4:	d8eb      	bhi.n	801069e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80106c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80106c8:	4618      	mov	r0, r3
 80106ca:	3718      	adds	r7, #24
 80106cc:	46bd      	mov	sp, r7
 80106ce:	bd80      	pop	{r7, pc}

080106d0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b084      	sub	sp, #16
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
 80106d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80106da:	2300      	movs	r3, #0
 80106dc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106e2:	683a      	ldr	r2, [r7, #0]
 80106e4:	429a      	cmp	r2, r3
 80106e6:	d01b      	beq.n	8010720 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80106e8:	6878      	ldr	r0, [r7, #4]
 80106ea:	f7ff ffad 	bl	8010648 <sync_window>
 80106ee:	4603      	mov	r3, r0
 80106f0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80106f2:	7bfb      	ldrb	r3, [r7, #15]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d113      	bne.n	8010720 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	7858      	ldrb	r0, [r3, #1]
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010702:	2301      	movs	r3, #1
 8010704:	683a      	ldr	r2, [r7, #0]
 8010706:	f7ff fcd5 	bl	80100b4 <disk_read>
 801070a:	4603      	mov	r3, r0
 801070c:	2b00      	cmp	r3, #0
 801070e:	d004      	beq.n	801071a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010710:	f04f 33ff 	mov.w	r3, #4294967295
 8010714:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010716:	2301      	movs	r3, #1
 8010718:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	683a      	ldr	r2, [r7, #0]
 801071e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8010720:	7bfb      	ldrb	r3, [r7, #15]
}
 8010722:	4618      	mov	r0, r3
 8010724:	3710      	adds	r7, #16
 8010726:	46bd      	mov	sp, r7
 8010728:	bd80      	pop	{r7, pc}
	...

0801072c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801072c:	b580      	push	{r7, lr}
 801072e:	b084      	sub	sp, #16
 8010730:	af00      	add	r7, sp, #0
 8010732:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010734:	6878      	ldr	r0, [r7, #4]
 8010736:	f7ff ff87 	bl	8010648 <sync_window>
 801073a:	4603      	mov	r3, r0
 801073c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801073e:	7bfb      	ldrb	r3, [r7, #15]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d158      	bne.n	80107f6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	781b      	ldrb	r3, [r3, #0]
 8010748:	2b03      	cmp	r3, #3
 801074a:	d148      	bne.n	80107de <sync_fs+0xb2>
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	791b      	ldrb	r3, [r3, #4]
 8010750:	2b01      	cmp	r3, #1
 8010752:	d144      	bne.n	80107de <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	3334      	adds	r3, #52	; 0x34
 8010758:	f44f 7200 	mov.w	r2, #512	; 0x200
 801075c:	2100      	movs	r1, #0
 801075e:	4618      	mov	r0, r3
 8010760:	f7ff fda9 	bl	80102b6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	3334      	adds	r3, #52	; 0x34
 8010768:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801076c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010770:	4618      	mov	r0, r3
 8010772:	f7ff fd38 	bl	80101e6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	3334      	adds	r3, #52	; 0x34
 801077a:	4921      	ldr	r1, [pc, #132]	; (8010800 <sync_fs+0xd4>)
 801077c:	4618      	mov	r0, r3
 801077e:	f7ff fd4d 	bl	801021c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	3334      	adds	r3, #52	; 0x34
 8010786:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801078a:	491e      	ldr	r1, [pc, #120]	; (8010804 <sync_fs+0xd8>)
 801078c:	4618      	mov	r0, r3
 801078e:	f7ff fd45 	bl	801021c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	3334      	adds	r3, #52	; 0x34
 8010796:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	695b      	ldr	r3, [r3, #20]
 801079e:	4619      	mov	r1, r3
 80107a0:	4610      	mov	r0, r2
 80107a2:	f7ff fd3b 	bl	801021c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	3334      	adds	r3, #52	; 0x34
 80107aa:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	691b      	ldr	r3, [r3, #16]
 80107b2:	4619      	mov	r1, r3
 80107b4:	4610      	mov	r0, r2
 80107b6:	f7ff fd31 	bl	801021c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	6a1b      	ldr	r3, [r3, #32]
 80107be:	1c5a      	adds	r2, r3, #1
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	7858      	ldrb	r0, [r3, #1]
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80107d2:	2301      	movs	r3, #1
 80107d4:	f7ff fc8e 	bl	80100f4 <disk_write>
			fs->fsi_flag = 0;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	2200      	movs	r2, #0
 80107dc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	785b      	ldrb	r3, [r3, #1]
 80107e2:	2200      	movs	r2, #0
 80107e4:	2100      	movs	r1, #0
 80107e6:	4618      	mov	r0, r3
 80107e8:	f7ff fca4 	bl	8010134 <disk_ioctl>
 80107ec:	4603      	mov	r3, r0
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d001      	beq.n	80107f6 <sync_fs+0xca>
 80107f2:	2301      	movs	r3, #1
 80107f4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80107f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80107f8:	4618      	mov	r0, r3
 80107fa:	3710      	adds	r7, #16
 80107fc:	46bd      	mov	sp, r7
 80107fe:	bd80      	pop	{r7, pc}
 8010800:	41615252 	.word	0x41615252
 8010804:	61417272 	.word	0x61417272

08010808 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010808:	b480      	push	{r7}
 801080a:	b083      	sub	sp, #12
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
 8010810:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010812:	683b      	ldr	r3, [r7, #0]
 8010814:	3b02      	subs	r3, #2
 8010816:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	699b      	ldr	r3, [r3, #24]
 801081c:	3b02      	subs	r3, #2
 801081e:	683a      	ldr	r2, [r7, #0]
 8010820:	429a      	cmp	r2, r3
 8010822:	d301      	bcc.n	8010828 <clust2sect+0x20>
 8010824:	2300      	movs	r3, #0
 8010826:	e008      	b.n	801083a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	895b      	ldrh	r3, [r3, #10]
 801082c:	461a      	mov	r2, r3
 801082e:	683b      	ldr	r3, [r7, #0]
 8010830:	fb03 f202 	mul.w	r2, r3, r2
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010838:	4413      	add	r3, r2
}
 801083a:	4618      	mov	r0, r3
 801083c:	370c      	adds	r7, #12
 801083e:	46bd      	mov	sp, r7
 8010840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010844:	4770      	bx	lr

08010846 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010846:	b580      	push	{r7, lr}
 8010848:	b086      	sub	sp, #24
 801084a:	af00      	add	r7, sp, #0
 801084c:	6078      	str	r0, [r7, #4]
 801084e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010856:	683b      	ldr	r3, [r7, #0]
 8010858:	2b01      	cmp	r3, #1
 801085a:	d904      	bls.n	8010866 <get_fat+0x20>
 801085c:	693b      	ldr	r3, [r7, #16]
 801085e:	699b      	ldr	r3, [r3, #24]
 8010860:	683a      	ldr	r2, [r7, #0]
 8010862:	429a      	cmp	r2, r3
 8010864:	d302      	bcc.n	801086c <get_fat+0x26>
		val = 1;	/* Internal error */
 8010866:	2301      	movs	r3, #1
 8010868:	617b      	str	r3, [r7, #20]
 801086a:	e08f      	b.n	801098c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801086c:	f04f 33ff 	mov.w	r3, #4294967295
 8010870:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010872:	693b      	ldr	r3, [r7, #16]
 8010874:	781b      	ldrb	r3, [r3, #0]
 8010876:	2b03      	cmp	r3, #3
 8010878:	d062      	beq.n	8010940 <get_fat+0xfa>
 801087a:	2b03      	cmp	r3, #3
 801087c:	dc7c      	bgt.n	8010978 <get_fat+0x132>
 801087e:	2b01      	cmp	r3, #1
 8010880:	d002      	beq.n	8010888 <get_fat+0x42>
 8010882:	2b02      	cmp	r3, #2
 8010884:	d042      	beq.n	801090c <get_fat+0xc6>
 8010886:	e077      	b.n	8010978 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010888:	683b      	ldr	r3, [r7, #0]
 801088a:	60fb      	str	r3, [r7, #12]
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	085b      	lsrs	r3, r3, #1
 8010890:	68fa      	ldr	r2, [r7, #12]
 8010892:	4413      	add	r3, r2
 8010894:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010896:	693b      	ldr	r3, [r7, #16]
 8010898:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	0a5b      	lsrs	r3, r3, #9
 801089e:	4413      	add	r3, r2
 80108a0:	4619      	mov	r1, r3
 80108a2:	6938      	ldr	r0, [r7, #16]
 80108a4:	f7ff ff14 	bl	80106d0 <move_window>
 80108a8:	4603      	mov	r3, r0
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d167      	bne.n	801097e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	1c5a      	adds	r2, r3, #1
 80108b2:	60fa      	str	r2, [r7, #12]
 80108b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80108b8:	693a      	ldr	r2, [r7, #16]
 80108ba:	4413      	add	r3, r2
 80108bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80108c0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80108c2:	693b      	ldr	r3, [r7, #16]
 80108c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	0a5b      	lsrs	r3, r3, #9
 80108ca:	4413      	add	r3, r2
 80108cc:	4619      	mov	r1, r3
 80108ce:	6938      	ldr	r0, [r7, #16]
 80108d0:	f7ff fefe 	bl	80106d0 <move_window>
 80108d4:	4603      	mov	r3, r0
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d153      	bne.n	8010982 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80108e0:	693a      	ldr	r2, [r7, #16]
 80108e2:	4413      	add	r3, r2
 80108e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80108e8:	021b      	lsls	r3, r3, #8
 80108ea:	461a      	mov	r2, r3
 80108ec:	68bb      	ldr	r3, [r7, #8]
 80108ee:	4313      	orrs	r3, r2
 80108f0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80108f2:	683b      	ldr	r3, [r7, #0]
 80108f4:	f003 0301 	and.w	r3, r3, #1
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d002      	beq.n	8010902 <get_fat+0xbc>
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	091b      	lsrs	r3, r3, #4
 8010900:	e002      	b.n	8010908 <get_fat+0xc2>
 8010902:	68bb      	ldr	r3, [r7, #8]
 8010904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010908:	617b      	str	r3, [r7, #20]
			break;
 801090a:	e03f      	b.n	801098c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801090c:	693b      	ldr	r3, [r7, #16]
 801090e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010910:	683b      	ldr	r3, [r7, #0]
 8010912:	0a1b      	lsrs	r3, r3, #8
 8010914:	4413      	add	r3, r2
 8010916:	4619      	mov	r1, r3
 8010918:	6938      	ldr	r0, [r7, #16]
 801091a:	f7ff fed9 	bl	80106d0 <move_window>
 801091e:	4603      	mov	r3, r0
 8010920:	2b00      	cmp	r3, #0
 8010922:	d130      	bne.n	8010986 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010924:	693b      	ldr	r3, [r7, #16]
 8010926:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801092a:	683b      	ldr	r3, [r7, #0]
 801092c:	005b      	lsls	r3, r3, #1
 801092e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010932:	4413      	add	r3, r2
 8010934:	4618      	mov	r0, r3
 8010936:	f7ff fc1b 	bl	8010170 <ld_word>
 801093a:	4603      	mov	r3, r0
 801093c:	617b      	str	r3, [r7, #20]
			break;
 801093e:	e025      	b.n	801098c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010940:	693b      	ldr	r3, [r7, #16]
 8010942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010944:	683b      	ldr	r3, [r7, #0]
 8010946:	09db      	lsrs	r3, r3, #7
 8010948:	4413      	add	r3, r2
 801094a:	4619      	mov	r1, r3
 801094c:	6938      	ldr	r0, [r7, #16]
 801094e:	f7ff febf 	bl	80106d0 <move_window>
 8010952:	4603      	mov	r3, r0
 8010954:	2b00      	cmp	r3, #0
 8010956:	d118      	bne.n	801098a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010958:	693b      	ldr	r3, [r7, #16]
 801095a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801095e:	683b      	ldr	r3, [r7, #0]
 8010960:	009b      	lsls	r3, r3, #2
 8010962:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010966:	4413      	add	r3, r2
 8010968:	4618      	mov	r0, r3
 801096a:	f7ff fc19 	bl	80101a0 <ld_dword>
 801096e:	4603      	mov	r3, r0
 8010970:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010974:	617b      	str	r3, [r7, #20]
			break;
 8010976:	e009      	b.n	801098c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010978:	2301      	movs	r3, #1
 801097a:	617b      	str	r3, [r7, #20]
 801097c:	e006      	b.n	801098c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801097e:	bf00      	nop
 8010980:	e004      	b.n	801098c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010982:	bf00      	nop
 8010984:	e002      	b.n	801098c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010986:	bf00      	nop
 8010988:	e000      	b.n	801098c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801098a:	bf00      	nop
		}
	}

	return val;
 801098c:	697b      	ldr	r3, [r7, #20]
}
 801098e:	4618      	mov	r0, r3
 8010990:	3718      	adds	r7, #24
 8010992:	46bd      	mov	sp, r7
 8010994:	bd80      	pop	{r7, pc}

08010996 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010996:	b590      	push	{r4, r7, lr}
 8010998:	b089      	sub	sp, #36	; 0x24
 801099a:	af00      	add	r7, sp, #0
 801099c:	60f8      	str	r0, [r7, #12]
 801099e:	60b9      	str	r1, [r7, #8]
 80109a0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80109a2:	2302      	movs	r3, #2
 80109a4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80109a6:	68bb      	ldr	r3, [r7, #8]
 80109a8:	2b01      	cmp	r3, #1
 80109aa:	f240 80d2 	bls.w	8010b52 <put_fat+0x1bc>
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	699b      	ldr	r3, [r3, #24]
 80109b2:	68ba      	ldr	r2, [r7, #8]
 80109b4:	429a      	cmp	r2, r3
 80109b6:	f080 80cc 	bcs.w	8010b52 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	781b      	ldrb	r3, [r3, #0]
 80109be:	2b03      	cmp	r3, #3
 80109c0:	f000 8096 	beq.w	8010af0 <put_fat+0x15a>
 80109c4:	2b03      	cmp	r3, #3
 80109c6:	f300 80cd 	bgt.w	8010b64 <put_fat+0x1ce>
 80109ca:	2b01      	cmp	r3, #1
 80109cc:	d002      	beq.n	80109d4 <put_fat+0x3e>
 80109ce:	2b02      	cmp	r3, #2
 80109d0:	d06e      	beq.n	8010ab0 <put_fat+0x11a>
 80109d2:	e0c7      	b.n	8010b64 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80109d4:	68bb      	ldr	r3, [r7, #8]
 80109d6:	61bb      	str	r3, [r7, #24]
 80109d8:	69bb      	ldr	r3, [r7, #24]
 80109da:	085b      	lsrs	r3, r3, #1
 80109dc:	69ba      	ldr	r2, [r7, #24]
 80109de:	4413      	add	r3, r2
 80109e0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80109e6:	69bb      	ldr	r3, [r7, #24]
 80109e8:	0a5b      	lsrs	r3, r3, #9
 80109ea:	4413      	add	r3, r2
 80109ec:	4619      	mov	r1, r3
 80109ee:	68f8      	ldr	r0, [r7, #12]
 80109f0:	f7ff fe6e 	bl	80106d0 <move_window>
 80109f4:	4603      	mov	r3, r0
 80109f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80109f8:	7ffb      	ldrb	r3, [r7, #31]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	f040 80ab 	bne.w	8010b56 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010a06:	69bb      	ldr	r3, [r7, #24]
 8010a08:	1c59      	adds	r1, r3, #1
 8010a0a:	61b9      	str	r1, [r7, #24]
 8010a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a10:	4413      	add	r3, r2
 8010a12:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010a14:	68bb      	ldr	r3, [r7, #8]
 8010a16:	f003 0301 	and.w	r3, r3, #1
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d00d      	beq.n	8010a3a <put_fat+0xa4>
 8010a1e:	697b      	ldr	r3, [r7, #20]
 8010a20:	781b      	ldrb	r3, [r3, #0]
 8010a22:	b25b      	sxtb	r3, r3
 8010a24:	f003 030f 	and.w	r3, r3, #15
 8010a28:	b25a      	sxtb	r2, r3
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	b2db      	uxtb	r3, r3
 8010a2e:	011b      	lsls	r3, r3, #4
 8010a30:	b25b      	sxtb	r3, r3
 8010a32:	4313      	orrs	r3, r2
 8010a34:	b25b      	sxtb	r3, r3
 8010a36:	b2db      	uxtb	r3, r3
 8010a38:	e001      	b.n	8010a3e <put_fat+0xa8>
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	b2db      	uxtb	r3, r3
 8010a3e:	697a      	ldr	r2, [r7, #20]
 8010a40:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	2201      	movs	r2, #1
 8010a46:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010a4c:	69bb      	ldr	r3, [r7, #24]
 8010a4e:	0a5b      	lsrs	r3, r3, #9
 8010a50:	4413      	add	r3, r2
 8010a52:	4619      	mov	r1, r3
 8010a54:	68f8      	ldr	r0, [r7, #12]
 8010a56:	f7ff fe3b 	bl	80106d0 <move_window>
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010a5e:	7ffb      	ldrb	r3, [r7, #31]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d17a      	bne.n	8010b5a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010a6a:	69bb      	ldr	r3, [r7, #24]
 8010a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a70:	4413      	add	r3, r2
 8010a72:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010a74:	68bb      	ldr	r3, [r7, #8]
 8010a76:	f003 0301 	and.w	r3, r3, #1
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d003      	beq.n	8010a86 <put_fat+0xf0>
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	091b      	lsrs	r3, r3, #4
 8010a82:	b2db      	uxtb	r3, r3
 8010a84:	e00e      	b.n	8010aa4 <put_fat+0x10e>
 8010a86:	697b      	ldr	r3, [r7, #20]
 8010a88:	781b      	ldrb	r3, [r3, #0]
 8010a8a:	b25b      	sxtb	r3, r3
 8010a8c:	f023 030f 	bic.w	r3, r3, #15
 8010a90:	b25a      	sxtb	r2, r3
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	0a1b      	lsrs	r3, r3, #8
 8010a96:	b25b      	sxtb	r3, r3
 8010a98:	f003 030f 	and.w	r3, r3, #15
 8010a9c:	b25b      	sxtb	r3, r3
 8010a9e:	4313      	orrs	r3, r2
 8010aa0:	b25b      	sxtb	r3, r3
 8010aa2:	b2db      	uxtb	r3, r3
 8010aa4:	697a      	ldr	r2, [r7, #20]
 8010aa6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	2201      	movs	r2, #1
 8010aac:	70da      	strb	r2, [r3, #3]
			break;
 8010aae:	e059      	b.n	8010b64 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ab4:	68bb      	ldr	r3, [r7, #8]
 8010ab6:	0a1b      	lsrs	r3, r3, #8
 8010ab8:	4413      	add	r3, r2
 8010aba:	4619      	mov	r1, r3
 8010abc:	68f8      	ldr	r0, [r7, #12]
 8010abe:	f7ff fe07 	bl	80106d0 <move_window>
 8010ac2:	4603      	mov	r3, r0
 8010ac4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010ac6:	7ffb      	ldrb	r3, [r7, #31]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d148      	bne.n	8010b5e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010ad2:	68bb      	ldr	r3, [r7, #8]
 8010ad4:	005b      	lsls	r3, r3, #1
 8010ad6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010ada:	4413      	add	r3, r2
 8010adc:	687a      	ldr	r2, [r7, #4]
 8010ade:	b292      	uxth	r2, r2
 8010ae0:	4611      	mov	r1, r2
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f7ff fb7f 	bl	80101e6 <st_word>
			fs->wflag = 1;
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	2201      	movs	r2, #1
 8010aec:	70da      	strb	r2, [r3, #3]
			break;
 8010aee:	e039      	b.n	8010b64 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010af4:	68bb      	ldr	r3, [r7, #8]
 8010af6:	09db      	lsrs	r3, r3, #7
 8010af8:	4413      	add	r3, r2
 8010afa:	4619      	mov	r1, r3
 8010afc:	68f8      	ldr	r0, [r7, #12]
 8010afe:	f7ff fde7 	bl	80106d0 <move_window>
 8010b02:	4603      	mov	r3, r0
 8010b04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010b06:	7ffb      	ldrb	r3, [r7, #31]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d12a      	bne.n	8010b62 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010b18:	68bb      	ldr	r3, [r7, #8]
 8010b1a:	009b      	lsls	r3, r3, #2
 8010b1c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010b20:	4413      	add	r3, r2
 8010b22:	4618      	mov	r0, r3
 8010b24:	f7ff fb3c 	bl	80101a0 <ld_dword>
 8010b28:	4603      	mov	r3, r0
 8010b2a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010b2e:	4323      	orrs	r3, r4
 8010b30:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010b38:	68bb      	ldr	r3, [r7, #8]
 8010b3a:	009b      	lsls	r3, r3, #2
 8010b3c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010b40:	4413      	add	r3, r2
 8010b42:	6879      	ldr	r1, [r7, #4]
 8010b44:	4618      	mov	r0, r3
 8010b46:	f7ff fb69 	bl	801021c <st_dword>
			fs->wflag = 1;
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	2201      	movs	r2, #1
 8010b4e:	70da      	strb	r2, [r3, #3]
			break;
 8010b50:	e008      	b.n	8010b64 <put_fat+0x1ce>
		}
	}
 8010b52:	bf00      	nop
 8010b54:	e006      	b.n	8010b64 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8010b56:	bf00      	nop
 8010b58:	e004      	b.n	8010b64 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8010b5a:	bf00      	nop
 8010b5c:	e002      	b.n	8010b64 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8010b5e:	bf00      	nop
 8010b60:	e000      	b.n	8010b64 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8010b62:	bf00      	nop
	return res;
 8010b64:	7ffb      	ldrb	r3, [r7, #31]
}
 8010b66:	4618      	mov	r0, r3
 8010b68:	3724      	adds	r7, #36	; 0x24
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	bd90      	pop	{r4, r7, pc}

08010b6e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010b6e:	b580      	push	{r7, lr}
 8010b70:	b088      	sub	sp, #32
 8010b72:	af00      	add	r7, sp, #0
 8010b74:	60f8      	str	r0, [r7, #12]
 8010b76:	60b9      	str	r1, [r7, #8]
 8010b78:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	2b01      	cmp	r3, #1
 8010b88:	d904      	bls.n	8010b94 <remove_chain+0x26>
 8010b8a:	69bb      	ldr	r3, [r7, #24]
 8010b8c:	699b      	ldr	r3, [r3, #24]
 8010b8e:	68ba      	ldr	r2, [r7, #8]
 8010b90:	429a      	cmp	r2, r3
 8010b92:	d301      	bcc.n	8010b98 <remove_chain+0x2a>
 8010b94:	2302      	movs	r3, #2
 8010b96:	e04b      	b.n	8010c30 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d00c      	beq.n	8010bb8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8010ba2:	6879      	ldr	r1, [r7, #4]
 8010ba4:	69b8      	ldr	r0, [r7, #24]
 8010ba6:	f7ff fef6 	bl	8010996 <put_fat>
 8010baa:	4603      	mov	r3, r0
 8010bac:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010bae:	7ffb      	ldrb	r3, [r7, #31]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d001      	beq.n	8010bb8 <remove_chain+0x4a>
 8010bb4:	7ffb      	ldrb	r3, [r7, #31]
 8010bb6:	e03b      	b.n	8010c30 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8010bb8:	68b9      	ldr	r1, [r7, #8]
 8010bba:	68f8      	ldr	r0, [r7, #12]
 8010bbc:	f7ff fe43 	bl	8010846 <get_fat>
 8010bc0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010bc2:	697b      	ldr	r3, [r7, #20]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d031      	beq.n	8010c2c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8010bc8:	697b      	ldr	r3, [r7, #20]
 8010bca:	2b01      	cmp	r3, #1
 8010bcc:	d101      	bne.n	8010bd2 <remove_chain+0x64>
 8010bce:	2302      	movs	r3, #2
 8010bd0:	e02e      	b.n	8010c30 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010bd2:	697b      	ldr	r3, [r7, #20]
 8010bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bd8:	d101      	bne.n	8010bde <remove_chain+0x70>
 8010bda:	2301      	movs	r3, #1
 8010bdc:	e028      	b.n	8010c30 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010bde:	2200      	movs	r2, #0
 8010be0:	68b9      	ldr	r1, [r7, #8]
 8010be2:	69b8      	ldr	r0, [r7, #24]
 8010be4:	f7ff fed7 	bl	8010996 <put_fat>
 8010be8:	4603      	mov	r3, r0
 8010bea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010bec:	7ffb      	ldrb	r3, [r7, #31]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d001      	beq.n	8010bf6 <remove_chain+0x88>
 8010bf2:	7ffb      	ldrb	r3, [r7, #31]
 8010bf4:	e01c      	b.n	8010c30 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010bf6:	69bb      	ldr	r3, [r7, #24]
 8010bf8:	695a      	ldr	r2, [r3, #20]
 8010bfa:	69bb      	ldr	r3, [r7, #24]
 8010bfc:	699b      	ldr	r3, [r3, #24]
 8010bfe:	3b02      	subs	r3, #2
 8010c00:	429a      	cmp	r2, r3
 8010c02:	d20b      	bcs.n	8010c1c <remove_chain+0xae>
			fs->free_clst++;
 8010c04:	69bb      	ldr	r3, [r7, #24]
 8010c06:	695b      	ldr	r3, [r3, #20]
 8010c08:	1c5a      	adds	r2, r3, #1
 8010c0a:	69bb      	ldr	r3, [r7, #24]
 8010c0c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8010c0e:	69bb      	ldr	r3, [r7, #24]
 8010c10:	791b      	ldrb	r3, [r3, #4]
 8010c12:	f043 0301 	orr.w	r3, r3, #1
 8010c16:	b2da      	uxtb	r2, r3
 8010c18:	69bb      	ldr	r3, [r7, #24]
 8010c1a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010c1c:	697b      	ldr	r3, [r7, #20]
 8010c1e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010c20:	69bb      	ldr	r3, [r7, #24]
 8010c22:	699b      	ldr	r3, [r3, #24]
 8010c24:	68ba      	ldr	r2, [r7, #8]
 8010c26:	429a      	cmp	r2, r3
 8010c28:	d3c6      	bcc.n	8010bb8 <remove_chain+0x4a>
 8010c2a:	e000      	b.n	8010c2e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010c2c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010c2e:	2300      	movs	r3, #0
}
 8010c30:	4618      	mov	r0, r3
 8010c32:	3720      	adds	r7, #32
 8010c34:	46bd      	mov	sp, r7
 8010c36:	bd80      	pop	{r7, pc}

08010c38 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b088      	sub	sp, #32
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
 8010c40:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010c48:	683b      	ldr	r3, [r7, #0]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d10d      	bne.n	8010c6a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010c4e:	693b      	ldr	r3, [r7, #16]
 8010c50:	691b      	ldr	r3, [r3, #16]
 8010c52:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010c54:	69bb      	ldr	r3, [r7, #24]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d004      	beq.n	8010c64 <create_chain+0x2c>
 8010c5a:	693b      	ldr	r3, [r7, #16]
 8010c5c:	699b      	ldr	r3, [r3, #24]
 8010c5e:	69ba      	ldr	r2, [r7, #24]
 8010c60:	429a      	cmp	r2, r3
 8010c62:	d31b      	bcc.n	8010c9c <create_chain+0x64>
 8010c64:	2301      	movs	r3, #1
 8010c66:	61bb      	str	r3, [r7, #24]
 8010c68:	e018      	b.n	8010c9c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010c6a:	6839      	ldr	r1, [r7, #0]
 8010c6c:	6878      	ldr	r0, [r7, #4]
 8010c6e:	f7ff fdea 	bl	8010846 <get_fat>
 8010c72:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	2b01      	cmp	r3, #1
 8010c78:	d801      	bhi.n	8010c7e <create_chain+0x46>
 8010c7a:	2301      	movs	r3, #1
 8010c7c:	e070      	b.n	8010d60 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c84:	d101      	bne.n	8010c8a <create_chain+0x52>
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	e06a      	b.n	8010d60 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010c8a:	693b      	ldr	r3, [r7, #16]
 8010c8c:	699b      	ldr	r3, [r3, #24]
 8010c8e:	68fa      	ldr	r2, [r7, #12]
 8010c90:	429a      	cmp	r2, r3
 8010c92:	d201      	bcs.n	8010c98 <create_chain+0x60>
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	e063      	b.n	8010d60 <create_chain+0x128>
		scl = clst;
 8010c98:	683b      	ldr	r3, [r7, #0]
 8010c9a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010c9c:	69bb      	ldr	r3, [r7, #24]
 8010c9e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010ca0:	69fb      	ldr	r3, [r7, #28]
 8010ca2:	3301      	adds	r3, #1
 8010ca4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8010ca6:	693b      	ldr	r3, [r7, #16]
 8010ca8:	699b      	ldr	r3, [r3, #24]
 8010caa:	69fa      	ldr	r2, [r7, #28]
 8010cac:	429a      	cmp	r2, r3
 8010cae:	d307      	bcc.n	8010cc0 <create_chain+0x88>
				ncl = 2;
 8010cb0:	2302      	movs	r3, #2
 8010cb2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8010cb4:	69fa      	ldr	r2, [r7, #28]
 8010cb6:	69bb      	ldr	r3, [r7, #24]
 8010cb8:	429a      	cmp	r2, r3
 8010cba:	d901      	bls.n	8010cc0 <create_chain+0x88>
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	e04f      	b.n	8010d60 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010cc0:	69f9      	ldr	r1, [r7, #28]
 8010cc2:	6878      	ldr	r0, [r7, #4]
 8010cc4:	f7ff fdbf 	bl	8010846 <get_fat>
 8010cc8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d00e      	beq.n	8010cee <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	2b01      	cmp	r3, #1
 8010cd4:	d003      	beq.n	8010cde <create_chain+0xa6>
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cdc:	d101      	bne.n	8010ce2 <create_chain+0xaa>
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	e03e      	b.n	8010d60 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010ce2:	69fa      	ldr	r2, [r7, #28]
 8010ce4:	69bb      	ldr	r3, [r7, #24]
 8010ce6:	429a      	cmp	r2, r3
 8010ce8:	d1da      	bne.n	8010ca0 <create_chain+0x68>
 8010cea:	2300      	movs	r3, #0
 8010cec:	e038      	b.n	8010d60 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010cee:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8010cf4:	69f9      	ldr	r1, [r7, #28]
 8010cf6:	6938      	ldr	r0, [r7, #16]
 8010cf8:	f7ff fe4d 	bl	8010996 <put_fat>
 8010cfc:	4603      	mov	r3, r0
 8010cfe:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010d00:	7dfb      	ldrb	r3, [r7, #23]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d109      	bne.n	8010d1a <create_chain+0xe2>
 8010d06:	683b      	ldr	r3, [r7, #0]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d006      	beq.n	8010d1a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010d0c:	69fa      	ldr	r2, [r7, #28]
 8010d0e:	6839      	ldr	r1, [r7, #0]
 8010d10:	6938      	ldr	r0, [r7, #16]
 8010d12:	f7ff fe40 	bl	8010996 <put_fat>
 8010d16:	4603      	mov	r3, r0
 8010d18:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010d1a:	7dfb      	ldrb	r3, [r7, #23]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d116      	bne.n	8010d4e <create_chain+0x116>
		fs->last_clst = ncl;
 8010d20:	693b      	ldr	r3, [r7, #16]
 8010d22:	69fa      	ldr	r2, [r7, #28]
 8010d24:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010d26:	693b      	ldr	r3, [r7, #16]
 8010d28:	695a      	ldr	r2, [r3, #20]
 8010d2a:	693b      	ldr	r3, [r7, #16]
 8010d2c:	699b      	ldr	r3, [r3, #24]
 8010d2e:	3b02      	subs	r3, #2
 8010d30:	429a      	cmp	r2, r3
 8010d32:	d804      	bhi.n	8010d3e <create_chain+0x106>
 8010d34:	693b      	ldr	r3, [r7, #16]
 8010d36:	695b      	ldr	r3, [r3, #20]
 8010d38:	1e5a      	subs	r2, r3, #1
 8010d3a:	693b      	ldr	r3, [r7, #16]
 8010d3c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8010d3e:	693b      	ldr	r3, [r7, #16]
 8010d40:	791b      	ldrb	r3, [r3, #4]
 8010d42:	f043 0301 	orr.w	r3, r3, #1
 8010d46:	b2da      	uxtb	r2, r3
 8010d48:	693b      	ldr	r3, [r7, #16]
 8010d4a:	711a      	strb	r2, [r3, #4]
 8010d4c:	e007      	b.n	8010d5e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010d4e:	7dfb      	ldrb	r3, [r7, #23]
 8010d50:	2b01      	cmp	r3, #1
 8010d52:	d102      	bne.n	8010d5a <create_chain+0x122>
 8010d54:	f04f 33ff 	mov.w	r3, #4294967295
 8010d58:	e000      	b.n	8010d5c <create_chain+0x124>
 8010d5a:	2301      	movs	r3, #1
 8010d5c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010d5e:	69fb      	ldr	r3, [r7, #28]
}
 8010d60:	4618      	mov	r0, r3
 8010d62:	3720      	adds	r7, #32
 8010d64:	46bd      	mov	sp, r7
 8010d66:	bd80      	pop	{r7, pc}

08010d68 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010d68:	b480      	push	{r7}
 8010d6a:	b087      	sub	sp, #28
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
 8010d70:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d7c:	3304      	adds	r3, #4
 8010d7e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8010d80:	683b      	ldr	r3, [r7, #0]
 8010d82:	0a5b      	lsrs	r3, r3, #9
 8010d84:	68fa      	ldr	r2, [r7, #12]
 8010d86:	8952      	ldrh	r2, [r2, #10]
 8010d88:	fbb3 f3f2 	udiv	r3, r3, r2
 8010d8c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010d8e:	693b      	ldr	r3, [r7, #16]
 8010d90:	1d1a      	adds	r2, r3, #4
 8010d92:	613a      	str	r2, [r7, #16]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010d98:	68bb      	ldr	r3, [r7, #8]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d101      	bne.n	8010da2 <clmt_clust+0x3a>
 8010d9e:	2300      	movs	r3, #0
 8010da0:	e010      	b.n	8010dc4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8010da2:	697a      	ldr	r2, [r7, #20]
 8010da4:	68bb      	ldr	r3, [r7, #8]
 8010da6:	429a      	cmp	r2, r3
 8010da8:	d307      	bcc.n	8010dba <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8010daa:	697a      	ldr	r2, [r7, #20]
 8010dac:	68bb      	ldr	r3, [r7, #8]
 8010dae:	1ad3      	subs	r3, r2, r3
 8010db0:	617b      	str	r3, [r7, #20]
 8010db2:	693b      	ldr	r3, [r7, #16]
 8010db4:	3304      	adds	r3, #4
 8010db6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010db8:	e7e9      	b.n	8010d8e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8010dba:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010dbc:	693b      	ldr	r3, [r7, #16]
 8010dbe:	681a      	ldr	r2, [r3, #0]
 8010dc0:	697b      	ldr	r3, [r7, #20]
 8010dc2:	4413      	add	r3, r2
}
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	371c      	adds	r7, #28
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dce:	4770      	bx	lr

08010dd0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b086      	sub	sp, #24
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
 8010dd8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010de0:	683b      	ldr	r3, [r7, #0]
 8010de2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010de6:	d204      	bcs.n	8010df2 <dir_sdi+0x22>
 8010de8:	683b      	ldr	r3, [r7, #0]
 8010dea:	f003 031f 	and.w	r3, r3, #31
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d001      	beq.n	8010df6 <dir_sdi+0x26>
		return FR_INT_ERR;
 8010df2:	2302      	movs	r3, #2
 8010df4:	e063      	b.n	8010ebe <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	683a      	ldr	r2, [r7, #0]
 8010dfa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	689b      	ldr	r3, [r3, #8]
 8010e00:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010e02:	697b      	ldr	r3, [r7, #20]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d106      	bne.n	8010e16 <dir_sdi+0x46>
 8010e08:	693b      	ldr	r3, [r7, #16]
 8010e0a:	781b      	ldrb	r3, [r3, #0]
 8010e0c:	2b02      	cmp	r3, #2
 8010e0e:	d902      	bls.n	8010e16 <dir_sdi+0x46>
		clst = fs->dirbase;
 8010e10:	693b      	ldr	r3, [r7, #16]
 8010e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e14:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010e16:	697b      	ldr	r3, [r7, #20]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d10c      	bne.n	8010e36 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010e1c:	683b      	ldr	r3, [r7, #0]
 8010e1e:	095b      	lsrs	r3, r3, #5
 8010e20:	693a      	ldr	r2, [r7, #16]
 8010e22:	8912      	ldrh	r2, [r2, #8]
 8010e24:	4293      	cmp	r3, r2
 8010e26:	d301      	bcc.n	8010e2c <dir_sdi+0x5c>
 8010e28:	2302      	movs	r3, #2
 8010e2a:	e048      	b.n	8010ebe <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8010e2c:	693b      	ldr	r3, [r7, #16]
 8010e2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	61da      	str	r2, [r3, #28]
 8010e34:	e029      	b.n	8010e8a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010e36:	693b      	ldr	r3, [r7, #16]
 8010e38:	895b      	ldrh	r3, [r3, #10]
 8010e3a:	025b      	lsls	r3, r3, #9
 8010e3c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010e3e:	e019      	b.n	8010e74 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	6979      	ldr	r1, [r7, #20]
 8010e44:	4618      	mov	r0, r3
 8010e46:	f7ff fcfe 	bl	8010846 <get_fat>
 8010e4a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010e4c:	697b      	ldr	r3, [r7, #20]
 8010e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e52:	d101      	bne.n	8010e58 <dir_sdi+0x88>
 8010e54:	2301      	movs	r3, #1
 8010e56:	e032      	b.n	8010ebe <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010e58:	697b      	ldr	r3, [r7, #20]
 8010e5a:	2b01      	cmp	r3, #1
 8010e5c:	d904      	bls.n	8010e68 <dir_sdi+0x98>
 8010e5e:	693b      	ldr	r3, [r7, #16]
 8010e60:	699b      	ldr	r3, [r3, #24]
 8010e62:	697a      	ldr	r2, [r7, #20]
 8010e64:	429a      	cmp	r2, r3
 8010e66:	d301      	bcc.n	8010e6c <dir_sdi+0x9c>
 8010e68:	2302      	movs	r3, #2
 8010e6a:	e028      	b.n	8010ebe <dir_sdi+0xee>
			ofs -= csz;
 8010e6c:	683a      	ldr	r2, [r7, #0]
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	1ad3      	subs	r3, r2, r3
 8010e72:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010e74:	683a      	ldr	r2, [r7, #0]
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	429a      	cmp	r2, r3
 8010e7a:	d2e1      	bcs.n	8010e40 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8010e7c:	6979      	ldr	r1, [r7, #20]
 8010e7e:	6938      	ldr	r0, [r7, #16]
 8010e80:	f7ff fcc2 	bl	8010808 <clust2sect>
 8010e84:	4602      	mov	r2, r0
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	697a      	ldr	r2, [r7, #20]
 8010e8e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	69db      	ldr	r3, [r3, #28]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d101      	bne.n	8010e9c <dir_sdi+0xcc>
 8010e98:	2302      	movs	r3, #2
 8010e9a:	e010      	b.n	8010ebe <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	69da      	ldr	r2, [r3, #28]
 8010ea0:	683b      	ldr	r3, [r7, #0]
 8010ea2:	0a5b      	lsrs	r3, r3, #9
 8010ea4:	441a      	add	r2, r3
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010eaa:	693b      	ldr	r3, [r7, #16]
 8010eac:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010eb0:	683b      	ldr	r3, [r7, #0]
 8010eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010eb6:	441a      	add	r2, r3
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010ebc:	2300      	movs	r3, #0
}
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	3718      	adds	r7, #24
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	bd80      	pop	{r7, pc}

08010ec6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8010ec6:	b580      	push	{r7, lr}
 8010ec8:	b086      	sub	sp, #24
 8010eca:	af00      	add	r7, sp, #0
 8010ecc:	6078      	str	r0, [r7, #4]
 8010ece:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	695b      	ldr	r3, [r3, #20]
 8010eda:	3320      	adds	r3, #32
 8010edc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	69db      	ldr	r3, [r3, #28]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d003      	beq.n	8010eee <dir_next+0x28>
 8010ee6:	68bb      	ldr	r3, [r7, #8]
 8010ee8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010eec:	d301      	bcc.n	8010ef2 <dir_next+0x2c>
 8010eee:	2304      	movs	r3, #4
 8010ef0:	e0aa      	b.n	8011048 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010ef2:	68bb      	ldr	r3, [r7, #8]
 8010ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	f040 8098 	bne.w	801102e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	69db      	ldr	r3, [r3, #28]
 8010f02:	1c5a      	adds	r2, r3, #1
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	699b      	ldr	r3, [r3, #24]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d10b      	bne.n	8010f28 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010f10:	68bb      	ldr	r3, [r7, #8]
 8010f12:	095b      	lsrs	r3, r3, #5
 8010f14:	68fa      	ldr	r2, [r7, #12]
 8010f16:	8912      	ldrh	r2, [r2, #8]
 8010f18:	4293      	cmp	r3, r2
 8010f1a:	f0c0 8088 	bcc.w	801102e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	2200      	movs	r2, #0
 8010f22:	61da      	str	r2, [r3, #28]
 8010f24:	2304      	movs	r3, #4
 8010f26:	e08f      	b.n	8011048 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010f28:	68bb      	ldr	r3, [r7, #8]
 8010f2a:	0a5b      	lsrs	r3, r3, #9
 8010f2c:	68fa      	ldr	r2, [r7, #12]
 8010f2e:	8952      	ldrh	r2, [r2, #10]
 8010f30:	3a01      	subs	r2, #1
 8010f32:	4013      	ands	r3, r2
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d17a      	bne.n	801102e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010f38:	687a      	ldr	r2, [r7, #4]
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	699b      	ldr	r3, [r3, #24]
 8010f3e:	4619      	mov	r1, r3
 8010f40:	4610      	mov	r0, r2
 8010f42:	f7ff fc80 	bl	8010846 <get_fat>
 8010f46:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010f48:	697b      	ldr	r3, [r7, #20]
 8010f4a:	2b01      	cmp	r3, #1
 8010f4c:	d801      	bhi.n	8010f52 <dir_next+0x8c>
 8010f4e:	2302      	movs	r3, #2
 8010f50:	e07a      	b.n	8011048 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010f52:	697b      	ldr	r3, [r7, #20]
 8010f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f58:	d101      	bne.n	8010f5e <dir_next+0x98>
 8010f5a:	2301      	movs	r3, #1
 8010f5c:	e074      	b.n	8011048 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	699b      	ldr	r3, [r3, #24]
 8010f62:	697a      	ldr	r2, [r7, #20]
 8010f64:	429a      	cmp	r2, r3
 8010f66:	d358      	bcc.n	801101a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010f68:	683b      	ldr	r3, [r7, #0]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d104      	bne.n	8010f78 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	2200      	movs	r2, #0
 8010f72:	61da      	str	r2, [r3, #28]
 8010f74:	2304      	movs	r3, #4
 8010f76:	e067      	b.n	8011048 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010f78:	687a      	ldr	r2, [r7, #4]
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	699b      	ldr	r3, [r3, #24]
 8010f7e:	4619      	mov	r1, r3
 8010f80:	4610      	mov	r0, r2
 8010f82:	f7ff fe59 	bl	8010c38 <create_chain>
 8010f86:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010f88:	697b      	ldr	r3, [r7, #20]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d101      	bne.n	8010f92 <dir_next+0xcc>
 8010f8e:	2307      	movs	r3, #7
 8010f90:	e05a      	b.n	8011048 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010f92:	697b      	ldr	r3, [r7, #20]
 8010f94:	2b01      	cmp	r3, #1
 8010f96:	d101      	bne.n	8010f9c <dir_next+0xd6>
 8010f98:	2302      	movs	r3, #2
 8010f9a:	e055      	b.n	8011048 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010f9c:	697b      	ldr	r3, [r7, #20]
 8010f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fa2:	d101      	bne.n	8010fa8 <dir_next+0xe2>
 8010fa4:	2301      	movs	r3, #1
 8010fa6:	e04f      	b.n	8011048 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8010fa8:	68f8      	ldr	r0, [r7, #12]
 8010faa:	f7ff fb4d 	bl	8010648 <sync_window>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d001      	beq.n	8010fb8 <dir_next+0xf2>
 8010fb4:	2301      	movs	r3, #1
 8010fb6:	e047      	b.n	8011048 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	3334      	adds	r3, #52	; 0x34
 8010fbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010fc0:	2100      	movs	r1, #0
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	f7ff f977 	bl	80102b6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010fc8:	2300      	movs	r3, #0
 8010fca:	613b      	str	r3, [r7, #16]
 8010fcc:	6979      	ldr	r1, [r7, #20]
 8010fce:	68f8      	ldr	r0, [r7, #12]
 8010fd0:	f7ff fc1a 	bl	8010808 <clust2sect>
 8010fd4:	4602      	mov	r2, r0
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	631a      	str	r2, [r3, #48]	; 0x30
 8010fda:	e012      	b.n	8011002 <dir_next+0x13c>
						fs->wflag = 1;
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	2201      	movs	r2, #1
 8010fe0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010fe2:	68f8      	ldr	r0, [r7, #12]
 8010fe4:	f7ff fb30 	bl	8010648 <sync_window>
 8010fe8:	4603      	mov	r3, r0
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d001      	beq.n	8010ff2 <dir_next+0x12c>
 8010fee:	2301      	movs	r3, #1
 8010ff0:	e02a      	b.n	8011048 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010ff2:	693b      	ldr	r3, [r7, #16]
 8010ff4:	3301      	adds	r3, #1
 8010ff6:	613b      	str	r3, [r7, #16]
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ffc:	1c5a      	adds	r2, r3, #1
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	631a      	str	r2, [r3, #48]	; 0x30
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	895b      	ldrh	r3, [r3, #10]
 8011006:	461a      	mov	r2, r3
 8011008:	693b      	ldr	r3, [r7, #16]
 801100a:	4293      	cmp	r3, r2
 801100c:	d3e6      	bcc.n	8010fdc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011012:	693b      	ldr	r3, [r7, #16]
 8011014:	1ad2      	subs	r2, r2, r3
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	697a      	ldr	r2, [r7, #20]
 801101e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011020:	6979      	ldr	r1, [r7, #20]
 8011022:	68f8      	ldr	r0, [r7, #12]
 8011024:	f7ff fbf0 	bl	8010808 <clust2sect>
 8011028:	4602      	mov	r2, r0
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	68ba      	ldr	r2, [r7, #8]
 8011032:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801103a:	68bb      	ldr	r3, [r7, #8]
 801103c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011040:	441a      	add	r2, r3
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011046:	2300      	movs	r3, #0
}
 8011048:	4618      	mov	r0, r3
 801104a:	3718      	adds	r7, #24
 801104c:	46bd      	mov	sp, r7
 801104e:	bd80      	pop	{r7, pc}

08011050 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b086      	sub	sp, #24
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
 8011058:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011060:	2100      	movs	r1, #0
 8011062:	6878      	ldr	r0, [r7, #4]
 8011064:	f7ff feb4 	bl	8010dd0 <dir_sdi>
 8011068:	4603      	mov	r3, r0
 801106a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801106c:	7dfb      	ldrb	r3, [r7, #23]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d12b      	bne.n	80110ca <dir_alloc+0x7a>
		n = 0;
 8011072:	2300      	movs	r3, #0
 8011074:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	69db      	ldr	r3, [r3, #28]
 801107a:	4619      	mov	r1, r3
 801107c:	68f8      	ldr	r0, [r7, #12]
 801107e:	f7ff fb27 	bl	80106d0 <move_window>
 8011082:	4603      	mov	r3, r0
 8011084:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011086:	7dfb      	ldrb	r3, [r7, #23]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d11d      	bne.n	80110c8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	6a1b      	ldr	r3, [r3, #32]
 8011090:	781b      	ldrb	r3, [r3, #0]
 8011092:	2be5      	cmp	r3, #229	; 0xe5
 8011094:	d004      	beq.n	80110a0 <dir_alloc+0x50>
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	6a1b      	ldr	r3, [r3, #32]
 801109a:	781b      	ldrb	r3, [r3, #0]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d107      	bne.n	80110b0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80110a0:	693b      	ldr	r3, [r7, #16]
 80110a2:	3301      	adds	r3, #1
 80110a4:	613b      	str	r3, [r7, #16]
 80110a6:	693a      	ldr	r2, [r7, #16]
 80110a8:	683b      	ldr	r3, [r7, #0]
 80110aa:	429a      	cmp	r2, r3
 80110ac:	d102      	bne.n	80110b4 <dir_alloc+0x64>
 80110ae:	e00c      	b.n	80110ca <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80110b0:	2300      	movs	r3, #0
 80110b2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80110b4:	2101      	movs	r1, #1
 80110b6:	6878      	ldr	r0, [r7, #4]
 80110b8:	f7ff ff05 	bl	8010ec6 <dir_next>
 80110bc:	4603      	mov	r3, r0
 80110be:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80110c0:	7dfb      	ldrb	r3, [r7, #23]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d0d7      	beq.n	8011076 <dir_alloc+0x26>
 80110c6:	e000      	b.n	80110ca <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80110c8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80110ca:	7dfb      	ldrb	r3, [r7, #23]
 80110cc:	2b04      	cmp	r3, #4
 80110ce:	d101      	bne.n	80110d4 <dir_alloc+0x84>
 80110d0:	2307      	movs	r3, #7
 80110d2:	75fb      	strb	r3, [r7, #23]
	return res;
 80110d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80110d6:	4618      	mov	r0, r3
 80110d8:	3718      	adds	r7, #24
 80110da:	46bd      	mov	sp, r7
 80110dc:	bd80      	pop	{r7, pc}

080110de <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80110de:	b580      	push	{r7, lr}
 80110e0:	b084      	sub	sp, #16
 80110e2:	af00      	add	r7, sp, #0
 80110e4:	6078      	str	r0, [r7, #4]
 80110e6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80110e8:	683b      	ldr	r3, [r7, #0]
 80110ea:	331a      	adds	r3, #26
 80110ec:	4618      	mov	r0, r3
 80110ee:	f7ff f83f 	bl	8010170 <ld_word>
 80110f2:	4603      	mov	r3, r0
 80110f4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	781b      	ldrb	r3, [r3, #0]
 80110fa:	2b03      	cmp	r3, #3
 80110fc:	d109      	bne.n	8011112 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80110fe:	683b      	ldr	r3, [r7, #0]
 8011100:	3314      	adds	r3, #20
 8011102:	4618      	mov	r0, r3
 8011104:	f7ff f834 	bl	8010170 <ld_word>
 8011108:	4603      	mov	r3, r0
 801110a:	041b      	lsls	r3, r3, #16
 801110c:	68fa      	ldr	r2, [r7, #12]
 801110e:	4313      	orrs	r3, r2
 8011110:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011112:	68fb      	ldr	r3, [r7, #12]
}
 8011114:	4618      	mov	r0, r3
 8011116:	3710      	adds	r7, #16
 8011118:	46bd      	mov	sp, r7
 801111a:	bd80      	pop	{r7, pc}

0801111c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b084      	sub	sp, #16
 8011120:	af00      	add	r7, sp, #0
 8011122:	60f8      	str	r0, [r7, #12]
 8011124:	60b9      	str	r1, [r7, #8]
 8011126:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011128:	68bb      	ldr	r3, [r7, #8]
 801112a:	331a      	adds	r3, #26
 801112c:	687a      	ldr	r2, [r7, #4]
 801112e:	b292      	uxth	r2, r2
 8011130:	4611      	mov	r1, r2
 8011132:	4618      	mov	r0, r3
 8011134:	f7ff f857 	bl	80101e6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	781b      	ldrb	r3, [r3, #0]
 801113c:	2b03      	cmp	r3, #3
 801113e:	d109      	bne.n	8011154 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011140:	68bb      	ldr	r3, [r7, #8]
 8011142:	f103 0214 	add.w	r2, r3, #20
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	0c1b      	lsrs	r3, r3, #16
 801114a:	b29b      	uxth	r3, r3
 801114c:	4619      	mov	r1, r3
 801114e:	4610      	mov	r0, r2
 8011150:	f7ff f849 	bl	80101e6 <st_word>
	}
}
 8011154:	bf00      	nop
 8011156:	3710      	adds	r7, #16
 8011158:	46bd      	mov	sp, r7
 801115a:	bd80      	pop	{r7, pc}

0801115c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801115c:	b590      	push	{r4, r7, lr}
 801115e:	b087      	sub	sp, #28
 8011160:	af00      	add	r7, sp, #0
 8011162:	6078      	str	r0, [r7, #4]
 8011164:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8011166:	683b      	ldr	r3, [r7, #0]
 8011168:	331a      	adds	r3, #26
 801116a:	4618      	mov	r0, r3
 801116c:	f7ff f800 	bl	8010170 <ld_word>
 8011170:	4603      	mov	r3, r0
 8011172:	2b00      	cmp	r3, #0
 8011174:	d001      	beq.n	801117a <cmp_lfn+0x1e>
 8011176:	2300      	movs	r3, #0
 8011178:	e059      	b.n	801122e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801117a:	683b      	ldr	r3, [r7, #0]
 801117c:	781b      	ldrb	r3, [r3, #0]
 801117e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011182:	1e5a      	subs	r2, r3, #1
 8011184:	4613      	mov	r3, r2
 8011186:	005b      	lsls	r3, r3, #1
 8011188:	4413      	add	r3, r2
 801118a:	009b      	lsls	r3, r3, #2
 801118c:	4413      	add	r3, r2
 801118e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011190:	2301      	movs	r3, #1
 8011192:	81fb      	strh	r3, [r7, #14]
 8011194:	2300      	movs	r3, #0
 8011196:	613b      	str	r3, [r7, #16]
 8011198:	e033      	b.n	8011202 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801119a:	4a27      	ldr	r2, [pc, #156]	; (8011238 <cmp_lfn+0xdc>)
 801119c:	693b      	ldr	r3, [r7, #16]
 801119e:	4413      	add	r3, r2
 80111a0:	781b      	ldrb	r3, [r3, #0]
 80111a2:	461a      	mov	r2, r3
 80111a4:	683b      	ldr	r3, [r7, #0]
 80111a6:	4413      	add	r3, r2
 80111a8:	4618      	mov	r0, r3
 80111aa:	f7fe ffe1 	bl	8010170 <ld_word>
 80111ae:	4603      	mov	r3, r0
 80111b0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80111b2:	89fb      	ldrh	r3, [r7, #14]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d01a      	beq.n	80111ee <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80111b8:	697b      	ldr	r3, [r7, #20]
 80111ba:	2bfe      	cmp	r3, #254	; 0xfe
 80111bc:	d812      	bhi.n	80111e4 <cmp_lfn+0x88>
 80111be:	89bb      	ldrh	r3, [r7, #12]
 80111c0:	4618      	mov	r0, r3
 80111c2:	f002 f99f 	bl	8013504 <ff_wtoupper>
 80111c6:	4603      	mov	r3, r0
 80111c8:	461c      	mov	r4, r3
 80111ca:	697b      	ldr	r3, [r7, #20]
 80111cc:	1c5a      	adds	r2, r3, #1
 80111ce:	617a      	str	r2, [r7, #20]
 80111d0:	005b      	lsls	r3, r3, #1
 80111d2:	687a      	ldr	r2, [r7, #4]
 80111d4:	4413      	add	r3, r2
 80111d6:	881b      	ldrh	r3, [r3, #0]
 80111d8:	4618      	mov	r0, r3
 80111da:	f002 f993 	bl	8013504 <ff_wtoupper>
 80111de:	4603      	mov	r3, r0
 80111e0:	429c      	cmp	r4, r3
 80111e2:	d001      	beq.n	80111e8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80111e4:	2300      	movs	r3, #0
 80111e6:	e022      	b.n	801122e <cmp_lfn+0xd2>
			}
			wc = uc;
 80111e8:	89bb      	ldrh	r3, [r7, #12]
 80111ea:	81fb      	strh	r3, [r7, #14]
 80111ec:	e006      	b.n	80111fc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80111ee:	89bb      	ldrh	r3, [r7, #12]
 80111f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80111f4:	4293      	cmp	r3, r2
 80111f6:	d001      	beq.n	80111fc <cmp_lfn+0xa0>
 80111f8:	2300      	movs	r3, #0
 80111fa:	e018      	b.n	801122e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80111fc:	693b      	ldr	r3, [r7, #16]
 80111fe:	3301      	adds	r3, #1
 8011200:	613b      	str	r3, [r7, #16]
 8011202:	693b      	ldr	r3, [r7, #16]
 8011204:	2b0c      	cmp	r3, #12
 8011206:	d9c8      	bls.n	801119a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8011208:	683b      	ldr	r3, [r7, #0]
 801120a:	781b      	ldrb	r3, [r3, #0]
 801120c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011210:	2b00      	cmp	r3, #0
 8011212:	d00b      	beq.n	801122c <cmp_lfn+0xd0>
 8011214:	89fb      	ldrh	r3, [r7, #14]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d008      	beq.n	801122c <cmp_lfn+0xd0>
 801121a:	697b      	ldr	r3, [r7, #20]
 801121c:	005b      	lsls	r3, r3, #1
 801121e:	687a      	ldr	r2, [r7, #4]
 8011220:	4413      	add	r3, r2
 8011222:	881b      	ldrh	r3, [r3, #0]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d001      	beq.n	801122c <cmp_lfn+0xd0>
 8011228:	2300      	movs	r3, #0
 801122a:	e000      	b.n	801122e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801122c:	2301      	movs	r3, #1
}
 801122e:	4618      	mov	r0, r3
 8011230:	371c      	adds	r7, #28
 8011232:	46bd      	mov	sp, r7
 8011234:	bd90      	pop	{r4, r7, pc}
 8011236:	bf00      	nop
 8011238:	08016ce8 	.word	0x08016ce8

0801123c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 801123c:	b580      	push	{r7, lr}
 801123e:	b086      	sub	sp, #24
 8011240:	af00      	add	r7, sp, #0
 8011242:	6078      	str	r0, [r7, #4]
 8011244:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8011246:	683b      	ldr	r3, [r7, #0]
 8011248:	331a      	adds	r3, #26
 801124a:	4618      	mov	r0, r3
 801124c:	f7fe ff90 	bl	8010170 <ld_word>
 8011250:	4603      	mov	r3, r0
 8011252:	2b00      	cmp	r3, #0
 8011254:	d001      	beq.n	801125a <pick_lfn+0x1e>
 8011256:	2300      	movs	r3, #0
 8011258:	e04d      	b.n	80112f6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801125a:	683b      	ldr	r3, [r7, #0]
 801125c:	781b      	ldrb	r3, [r3, #0]
 801125e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011262:	1e5a      	subs	r2, r3, #1
 8011264:	4613      	mov	r3, r2
 8011266:	005b      	lsls	r3, r3, #1
 8011268:	4413      	add	r3, r2
 801126a:	009b      	lsls	r3, r3, #2
 801126c:	4413      	add	r3, r2
 801126e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011270:	2301      	movs	r3, #1
 8011272:	81fb      	strh	r3, [r7, #14]
 8011274:	2300      	movs	r3, #0
 8011276:	613b      	str	r3, [r7, #16]
 8011278:	e028      	b.n	80112cc <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801127a:	4a21      	ldr	r2, [pc, #132]	; (8011300 <pick_lfn+0xc4>)
 801127c:	693b      	ldr	r3, [r7, #16]
 801127e:	4413      	add	r3, r2
 8011280:	781b      	ldrb	r3, [r3, #0]
 8011282:	461a      	mov	r2, r3
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	4413      	add	r3, r2
 8011288:	4618      	mov	r0, r3
 801128a:	f7fe ff71 	bl	8010170 <ld_word>
 801128e:	4603      	mov	r3, r0
 8011290:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8011292:	89fb      	ldrh	r3, [r7, #14]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d00f      	beq.n	80112b8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8011298:	697b      	ldr	r3, [r7, #20]
 801129a:	2bfe      	cmp	r3, #254	; 0xfe
 801129c:	d901      	bls.n	80112a2 <pick_lfn+0x66>
 801129e:	2300      	movs	r3, #0
 80112a0:	e029      	b.n	80112f6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80112a2:	89bb      	ldrh	r3, [r7, #12]
 80112a4:	81fb      	strh	r3, [r7, #14]
 80112a6:	697b      	ldr	r3, [r7, #20]
 80112a8:	1c5a      	adds	r2, r3, #1
 80112aa:	617a      	str	r2, [r7, #20]
 80112ac:	005b      	lsls	r3, r3, #1
 80112ae:	687a      	ldr	r2, [r7, #4]
 80112b0:	4413      	add	r3, r2
 80112b2:	89fa      	ldrh	r2, [r7, #14]
 80112b4:	801a      	strh	r2, [r3, #0]
 80112b6:	e006      	b.n	80112c6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80112b8:	89bb      	ldrh	r3, [r7, #12]
 80112ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80112be:	4293      	cmp	r3, r2
 80112c0:	d001      	beq.n	80112c6 <pick_lfn+0x8a>
 80112c2:	2300      	movs	r3, #0
 80112c4:	e017      	b.n	80112f6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80112c6:	693b      	ldr	r3, [r7, #16]
 80112c8:	3301      	adds	r3, #1
 80112ca:	613b      	str	r3, [r7, #16]
 80112cc:	693b      	ldr	r3, [r7, #16]
 80112ce:	2b0c      	cmp	r3, #12
 80112d0:	d9d3      	bls.n	801127a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80112d2:	683b      	ldr	r3, [r7, #0]
 80112d4:	781b      	ldrb	r3, [r3, #0]
 80112d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d00a      	beq.n	80112f4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80112de:	697b      	ldr	r3, [r7, #20]
 80112e0:	2bfe      	cmp	r3, #254	; 0xfe
 80112e2:	d901      	bls.n	80112e8 <pick_lfn+0xac>
 80112e4:	2300      	movs	r3, #0
 80112e6:	e006      	b.n	80112f6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80112e8:	697b      	ldr	r3, [r7, #20]
 80112ea:	005b      	lsls	r3, r3, #1
 80112ec:	687a      	ldr	r2, [r7, #4]
 80112ee:	4413      	add	r3, r2
 80112f0:	2200      	movs	r2, #0
 80112f2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80112f4:	2301      	movs	r3, #1
}
 80112f6:	4618      	mov	r0, r3
 80112f8:	3718      	adds	r7, #24
 80112fa:	46bd      	mov	sp, r7
 80112fc:	bd80      	pop	{r7, pc}
 80112fe:	bf00      	nop
 8011300:	08016ce8 	.word	0x08016ce8

08011304 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b088      	sub	sp, #32
 8011308:	af00      	add	r7, sp, #0
 801130a:	60f8      	str	r0, [r7, #12]
 801130c:	60b9      	str	r1, [r7, #8]
 801130e:	4611      	mov	r1, r2
 8011310:	461a      	mov	r2, r3
 8011312:	460b      	mov	r3, r1
 8011314:	71fb      	strb	r3, [r7, #7]
 8011316:	4613      	mov	r3, r2
 8011318:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801131a:	68bb      	ldr	r3, [r7, #8]
 801131c:	330d      	adds	r3, #13
 801131e:	79ba      	ldrb	r2, [r7, #6]
 8011320:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8011322:	68bb      	ldr	r3, [r7, #8]
 8011324:	330b      	adds	r3, #11
 8011326:	220f      	movs	r2, #15
 8011328:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801132a:	68bb      	ldr	r3, [r7, #8]
 801132c:	330c      	adds	r3, #12
 801132e:	2200      	movs	r2, #0
 8011330:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8011332:	68bb      	ldr	r3, [r7, #8]
 8011334:	331a      	adds	r3, #26
 8011336:	2100      	movs	r1, #0
 8011338:	4618      	mov	r0, r3
 801133a:	f7fe ff54 	bl	80101e6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801133e:	79fb      	ldrb	r3, [r7, #7]
 8011340:	1e5a      	subs	r2, r3, #1
 8011342:	4613      	mov	r3, r2
 8011344:	005b      	lsls	r3, r3, #1
 8011346:	4413      	add	r3, r2
 8011348:	009b      	lsls	r3, r3, #2
 801134a:	4413      	add	r3, r2
 801134c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801134e:	2300      	movs	r3, #0
 8011350:	82fb      	strh	r3, [r7, #22]
 8011352:	2300      	movs	r3, #0
 8011354:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011356:	8afb      	ldrh	r3, [r7, #22]
 8011358:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801135c:	4293      	cmp	r3, r2
 801135e:	d007      	beq.n	8011370 <put_lfn+0x6c>
 8011360:	69fb      	ldr	r3, [r7, #28]
 8011362:	1c5a      	adds	r2, r3, #1
 8011364:	61fa      	str	r2, [r7, #28]
 8011366:	005b      	lsls	r3, r3, #1
 8011368:	68fa      	ldr	r2, [r7, #12]
 801136a:	4413      	add	r3, r2
 801136c:	881b      	ldrh	r3, [r3, #0]
 801136e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8011370:	4a17      	ldr	r2, [pc, #92]	; (80113d0 <put_lfn+0xcc>)
 8011372:	69bb      	ldr	r3, [r7, #24]
 8011374:	4413      	add	r3, r2
 8011376:	781b      	ldrb	r3, [r3, #0]
 8011378:	461a      	mov	r2, r3
 801137a:	68bb      	ldr	r3, [r7, #8]
 801137c:	4413      	add	r3, r2
 801137e:	8afa      	ldrh	r2, [r7, #22]
 8011380:	4611      	mov	r1, r2
 8011382:	4618      	mov	r0, r3
 8011384:	f7fe ff2f 	bl	80101e6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011388:	8afb      	ldrh	r3, [r7, #22]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d102      	bne.n	8011394 <put_lfn+0x90>
 801138e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011392:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8011394:	69bb      	ldr	r3, [r7, #24]
 8011396:	3301      	adds	r3, #1
 8011398:	61bb      	str	r3, [r7, #24]
 801139a:	69bb      	ldr	r3, [r7, #24]
 801139c:	2b0c      	cmp	r3, #12
 801139e:	d9da      	bls.n	8011356 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80113a0:	8afb      	ldrh	r3, [r7, #22]
 80113a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80113a6:	4293      	cmp	r3, r2
 80113a8:	d006      	beq.n	80113b8 <put_lfn+0xb4>
 80113aa:	69fb      	ldr	r3, [r7, #28]
 80113ac:	005b      	lsls	r3, r3, #1
 80113ae:	68fa      	ldr	r2, [r7, #12]
 80113b0:	4413      	add	r3, r2
 80113b2:	881b      	ldrh	r3, [r3, #0]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d103      	bne.n	80113c0 <put_lfn+0xbc>
 80113b8:	79fb      	ldrb	r3, [r7, #7]
 80113ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113be:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80113c0:	68bb      	ldr	r3, [r7, #8]
 80113c2:	79fa      	ldrb	r2, [r7, #7]
 80113c4:	701a      	strb	r2, [r3, #0]
}
 80113c6:	bf00      	nop
 80113c8:	3720      	adds	r7, #32
 80113ca:	46bd      	mov	sp, r7
 80113cc:	bd80      	pop	{r7, pc}
 80113ce:	bf00      	nop
 80113d0:	08016ce8 	.word	0x08016ce8

080113d4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80113d4:	b580      	push	{r7, lr}
 80113d6:	b08c      	sub	sp, #48	; 0x30
 80113d8:	af00      	add	r7, sp, #0
 80113da:	60f8      	str	r0, [r7, #12]
 80113dc:	60b9      	str	r1, [r7, #8]
 80113de:	607a      	str	r2, [r7, #4]
 80113e0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80113e2:	220b      	movs	r2, #11
 80113e4:	68b9      	ldr	r1, [r7, #8]
 80113e6:	68f8      	ldr	r0, [r7, #12]
 80113e8:	f7fe ff44 	bl	8010274 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80113ec:	683b      	ldr	r3, [r7, #0]
 80113ee:	2b05      	cmp	r3, #5
 80113f0:	d92b      	bls.n	801144a <gen_numname+0x76>
		sr = seq;
 80113f2:	683b      	ldr	r3, [r7, #0]
 80113f4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80113f6:	e022      	b.n	801143e <gen_numname+0x6a>
			wc = *lfn++;
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	1c9a      	adds	r2, r3, #2
 80113fc:	607a      	str	r2, [r7, #4]
 80113fe:	881b      	ldrh	r3, [r3, #0]
 8011400:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8011402:	2300      	movs	r3, #0
 8011404:	62bb      	str	r3, [r7, #40]	; 0x28
 8011406:	e017      	b.n	8011438 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8011408:	69fb      	ldr	r3, [r7, #28]
 801140a:	005a      	lsls	r2, r3, #1
 801140c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801140e:	f003 0301 	and.w	r3, r3, #1
 8011412:	4413      	add	r3, r2
 8011414:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8011416:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011418:	085b      	lsrs	r3, r3, #1
 801141a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801141c:	69fb      	ldr	r3, [r7, #28]
 801141e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011422:	2b00      	cmp	r3, #0
 8011424:	d005      	beq.n	8011432 <gen_numname+0x5e>
 8011426:	69fb      	ldr	r3, [r7, #28]
 8011428:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 801142c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8011430:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8011432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011434:	3301      	adds	r3, #1
 8011436:	62bb      	str	r3, [r7, #40]	; 0x28
 8011438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801143a:	2b0f      	cmp	r3, #15
 801143c:	d9e4      	bls.n	8011408 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	881b      	ldrh	r3, [r3, #0]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d1d8      	bne.n	80113f8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8011446:	69fb      	ldr	r3, [r7, #28]
 8011448:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801144a:	2307      	movs	r3, #7
 801144c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801144e:	683b      	ldr	r3, [r7, #0]
 8011450:	b2db      	uxtb	r3, r3
 8011452:	f003 030f 	and.w	r3, r3, #15
 8011456:	b2db      	uxtb	r3, r3
 8011458:	3330      	adds	r3, #48	; 0x30
 801145a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 801145e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011462:	2b39      	cmp	r3, #57	; 0x39
 8011464:	d904      	bls.n	8011470 <gen_numname+0x9c>
 8011466:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801146a:	3307      	adds	r3, #7
 801146c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8011470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011472:	1e5a      	subs	r2, r3, #1
 8011474:	62ba      	str	r2, [r7, #40]	; 0x28
 8011476:	3330      	adds	r3, #48	; 0x30
 8011478:	443b      	add	r3, r7
 801147a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801147e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8011482:	683b      	ldr	r3, [r7, #0]
 8011484:	091b      	lsrs	r3, r3, #4
 8011486:	603b      	str	r3, [r7, #0]
	} while (seq);
 8011488:	683b      	ldr	r3, [r7, #0]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d1df      	bne.n	801144e <gen_numname+0x7a>
	ns[i] = '~';
 801148e:	f107 0214 	add.w	r2, r7, #20
 8011492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011494:	4413      	add	r3, r2
 8011496:	227e      	movs	r2, #126	; 0x7e
 8011498:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801149a:	2300      	movs	r3, #0
 801149c:	627b      	str	r3, [r7, #36]	; 0x24
 801149e:	e002      	b.n	80114a6 <gen_numname+0xd2>
 80114a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114a2:	3301      	adds	r3, #1
 80114a4:	627b      	str	r3, [r7, #36]	; 0x24
 80114a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80114a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114aa:	429a      	cmp	r2, r3
 80114ac:	d205      	bcs.n	80114ba <gen_numname+0xe6>
 80114ae:	68fa      	ldr	r2, [r7, #12]
 80114b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114b2:	4413      	add	r3, r2
 80114b4:	781b      	ldrb	r3, [r3, #0]
 80114b6:	2b20      	cmp	r3, #32
 80114b8:	d1f2      	bne.n	80114a0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80114ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114bc:	2b07      	cmp	r3, #7
 80114be:	d807      	bhi.n	80114d0 <gen_numname+0xfc>
 80114c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114c2:	1c5a      	adds	r2, r3, #1
 80114c4:	62ba      	str	r2, [r7, #40]	; 0x28
 80114c6:	3330      	adds	r3, #48	; 0x30
 80114c8:	443b      	add	r3, r7
 80114ca:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80114ce:	e000      	b.n	80114d2 <gen_numname+0xfe>
 80114d0:	2120      	movs	r1, #32
 80114d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114d4:	1c5a      	adds	r2, r3, #1
 80114d6:	627a      	str	r2, [r7, #36]	; 0x24
 80114d8:	68fa      	ldr	r2, [r7, #12]
 80114da:	4413      	add	r3, r2
 80114dc:	460a      	mov	r2, r1
 80114de:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80114e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114e2:	2b07      	cmp	r3, #7
 80114e4:	d9e9      	bls.n	80114ba <gen_numname+0xe6>
}
 80114e6:	bf00      	nop
 80114e8:	bf00      	nop
 80114ea:	3730      	adds	r7, #48	; 0x30
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd80      	pop	{r7, pc}

080114f0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80114f0:	b480      	push	{r7}
 80114f2:	b085      	sub	sp, #20
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80114f8:	2300      	movs	r3, #0
 80114fa:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80114fc:	230b      	movs	r3, #11
 80114fe:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8011500:	7bfb      	ldrb	r3, [r7, #15]
 8011502:	b2da      	uxtb	r2, r3
 8011504:	0852      	lsrs	r2, r2, #1
 8011506:	01db      	lsls	r3, r3, #7
 8011508:	4313      	orrs	r3, r2
 801150a:	b2da      	uxtb	r2, r3
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	1c59      	adds	r1, r3, #1
 8011510:	6079      	str	r1, [r7, #4]
 8011512:	781b      	ldrb	r3, [r3, #0]
 8011514:	4413      	add	r3, r2
 8011516:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8011518:	68bb      	ldr	r3, [r7, #8]
 801151a:	3b01      	subs	r3, #1
 801151c:	60bb      	str	r3, [r7, #8]
 801151e:	68bb      	ldr	r3, [r7, #8]
 8011520:	2b00      	cmp	r3, #0
 8011522:	d1ed      	bne.n	8011500 <sum_sfn+0x10>
	return sum;
 8011524:	7bfb      	ldrb	r3, [r7, #15]
}
 8011526:	4618      	mov	r0, r3
 8011528:	3714      	adds	r7, #20
 801152a:	46bd      	mov	sp, r7
 801152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011530:	4770      	bx	lr

08011532 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8011532:	b580      	push	{r7, lr}
 8011534:	b086      	sub	sp, #24
 8011536:	af00      	add	r7, sp, #0
 8011538:	6078      	str	r0, [r7, #4]
 801153a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801153c:	2304      	movs	r3, #4
 801153e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8011546:	23ff      	movs	r3, #255	; 0xff
 8011548:	757b      	strb	r3, [r7, #21]
 801154a:	23ff      	movs	r3, #255	; 0xff
 801154c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 801154e:	e081      	b.n	8011654 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	69db      	ldr	r3, [r3, #28]
 8011554:	4619      	mov	r1, r3
 8011556:	6938      	ldr	r0, [r7, #16]
 8011558:	f7ff f8ba 	bl	80106d0 <move_window>
 801155c:	4603      	mov	r3, r0
 801155e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011560:	7dfb      	ldrb	r3, [r7, #23]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d17c      	bne.n	8011660 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	6a1b      	ldr	r3, [r3, #32]
 801156a:	781b      	ldrb	r3, [r3, #0]
 801156c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801156e:	7dbb      	ldrb	r3, [r7, #22]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d102      	bne.n	801157a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8011574:	2304      	movs	r3, #4
 8011576:	75fb      	strb	r3, [r7, #23]
 8011578:	e077      	b.n	801166a <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	6a1b      	ldr	r3, [r3, #32]
 801157e:	330b      	adds	r3, #11
 8011580:	781b      	ldrb	r3, [r3, #0]
 8011582:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011586:	73fb      	strb	r3, [r7, #15]
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	7bfa      	ldrb	r2, [r7, #15]
 801158c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801158e:	7dbb      	ldrb	r3, [r7, #22]
 8011590:	2be5      	cmp	r3, #229	; 0xe5
 8011592:	d00e      	beq.n	80115b2 <dir_read+0x80>
 8011594:	7dbb      	ldrb	r3, [r7, #22]
 8011596:	2b2e      	cmp	r3, #46	; 0x2e
 8011598:	d00b      	beq.n	80115b2 <dir_read+0x80>
 801159a:	7bfb      	ldrb	r3, [r7, #15]
 801159c:	f023 0320 	bic.w	r3, r3, #32
 80115a0:	2b08      	cmp	r3, #8
 80115a2:	bf0c      	ite	eq
 80115a4:	2301      	moveq	r3, #1
 80115a6:	2300      	movne	r3, #0
 80115a8:	b2db      	uxtb	r3, r3
 80115aa:	461a      	mov	r2, r3
 80115ac:	683b      	ldr	r3, [r7, #0]
 80115ae:	4293      	cmp	r3, r2
 80115b0:	d002      	beq.n	80115b8 <dir_read+0x86>
				ord = 0xFF;
 80115b2:	23ff      	movs	r3, #255	; 0xff
 80115b4:	757b      	strb	r3, [r7, #21]
 80115b6:	e044      	b.n	8011642 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 80115b8:	7bfb      	ldrb	r3, [r7, #15]
 80115ba:	2b0f      	cmp	r3, #15
 80115bc:	d12f      	bne.n	801161e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80115be:	7dbb      	ldrb	r3, [r7, #22]
 80115c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d00d      	beq.n	80115e4 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	6a1b      	ldr	r3, [r3, #32]
 80115cc:	7b5b      	ldrb	r3, [r3, #13]
 80115ce:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80115d0:	7dbb      	ldrb	r3, [r7, #22]
 80115d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80115d6:	75bb      	strb	r3, [r7, #22]
 80115d8:	7dbb      	ldrb	r3, [r7, #22]
 80115da:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	695a      	ldr	r2, [r3, #20]
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80115e4:	7dba      	ldrb	r2, [r7, #22]
 80115e6:	7d7b      	ldrb	r3, [r7, #21]
 80115e8:	429a      	cmp	r2, r3
 80115ea:	d115      	bne.n	8011618 <dir_read+0xe6>
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	6a1b      	ldr	r3, [r3, #32]
 80115f0:	330d      	adds	r3, #13
 80115f2:	781b      	ldrb	r3, [r3, #0]
 80115f4:	7d3a      	ldrb	r2, [r7, #20]
 80115f6:	429a      	cmp	r2, r3
 80115f8:	d10e      	bne.n	8011618 <dir_read+0xe6>
 80115fa:	693b      	ldr	r3, [r7, #16]
 80115fc:	68da      	ldr	r2, [r3, #12]
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	6a1b      	ldr	r3, [r3, #32]
 8011602:	4619      	mov	r1, r3
 8011604:	4610      	mov	r0, r2
 8011606:	f7ff fe19 	bl	801123c <pick_lfn>
 801160a:	4603      	mov	r3, r0
 801160c:	2b00      	cmp	r3, #0
 801160e:	d003      	beq.n	8011618 <dir_read+0xe6>
 8011610:	7d7b      	ldrb	r3, [r7, #21]
 8011612:	3b01      	subs	r3, #1
 8011614:	b2db      	uxtb	r3, r3
 8011616:	e000      	b.n	801161a <dir_read+0xe8>
 8011618:	23ff      	movs	r3, #255	; 0xff
 801161a:	757b      	strb	r3, [r7, #21]
 801161c:	e011      	b.n	8011642 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801161e:	7d7b      	ldrb	r3, [r7, #21]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d109      	bne.n	8011638 <dir_read+0x106>
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	6a1b      	ldr	r3, [r3, #32]
 8011628:	4618      	mov	r0, r3
 801162a:	f7ff ff61 	bl	80114f0 <sum_sfn>
 801162e:	4603      	mov	r3, r0
 8011630:	461a      	mov	r2, r3
 8011632:	7d3b      	ldrb	r3, [r7, #20]
 8011634:	4293      	cmp	r3, r2
 8011636:	d015      	beq.n	8011664 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	f04f 32ff 	mov.w	r2, #4294967295
 801163e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8011640:	e010      	b.n	8011664 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8011642:	2100      	movs	r1, #0
 8011644:	6878      	ldr	r0, [r7, #4]
 8011646:	f7ff fc3e 	bl	8010ec6 <dir_next>
 801164a:	4603      	mov	r3, r0
 801164c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801164e:	7dfb      	ldrb	r3, [r7, #23]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d109      	bne.n	8011668 <dir_read+0x136>
	while (dp->sect) {
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	69db      	ldr	r3, [r3, #28]
 8011658:	2b00      	cmp	r3, #0
 801165a:	f47f af79 	bne.w	8011550 <dir_read+0x1e>
 801165e:	e004      	b.n	801166a <dir_read+0x138>
		if (res != FR_OK) break;
 8011660:	bf00      	nop
 8011662:	e002      	b.n	801166a <dir_read+0x138>
					break;
 8011664:	bf00      	nop
 8011666:	e000      	b.n	801166a <dir_read+0x138>
		if (res != FR_OK) break;
 8011668:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801166a:	7dfb      	ldrb	r3, [r7, #23]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d002      	beq.n	8011676 <dir_read+0x144>
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	2200      	movs	r2, #0
 8011674:	61da      	str	r2, [r3, #28]
	return res;
 8011676:	7dfb      	ldrb	r3, [r7, #23]
}
 8011678:	4618      	mov	r0, r3
 801167a:	3718      	adds	r7, #24
 801167c:	46bd      	mov	sp, r7
 801167e:	bd80      	pop	{r7, pc}

08011680 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b086      	sub	sp, #24
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801168e:	2100      	movs	r1, #0
 8011690:	6878      	ldr	r0, [r7, #4]
 8011692:	f7ff fb9d 	bl	8010dd0 <dir_sdi>
 8011696:	4603      	mov	r3, r0
 8011698:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801169a:	7dfb      	ldrb	r3, [r7, #23]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d001      	beq.n	80116a4 <dir_find+0x24>
 80116a0:	7dfb      	ldrb	r3, [r7, #23]
 80116a2:	e0a9      	b.n	80117f8 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80116a4:	23ff      	movs	r3, #255	; 0xff
 80116a6:	753b      	strb	r3, [r7, #20]
 80116a8:	7d3b      	ldrb	r3, [r7, #20]
 80116aa:	757b      	strb	r3, [r7, #21]
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	f04f 32ff 	mov.w	r2, #4294967295
 80116b2:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	69db      	ldr	r3, [r3, #28]
 80116b8:	4619      	mov	r1, r3
 80116ba:	6938      	ldr	r0, [r7, #16]
 80116bc:	f7ff f808 	bl	80106d0 <move_window>
 80116c0:	4603      	mov	r3, r0
 80116c2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80116c4:	7dfb      	ldrb	r3, [r7, #23]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	f040 8090 	bne.w	80117ec <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	6a1b      	ldr	r3, [r3, #32]
 80116d0:	781b      	ldrb	r3, [r3, #0]
 80116d2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80116d4:	7dbb      	ldrb	r3, [r7, #22]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d102      	bne.n	80116e0 <dir_find+0x60>
 80116da:	2304      	movs	r3, #4
 80116dc:	75fb      	strb	r3, [r7, #23]
 80116de:	e08a      	b.n	80117f6 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	6a1b      	ldr	r3, [r3, #32]
 80116e4:	330b      	adds	r3, #11
 80116e6:	781b      	ldrb	r3, [r3, #0]
 80116e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80116ec:	73fb      	strb	r3, [r7, #15]
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	7bfa      	ldrb	r2, [r7, #15]
 80116f2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80116f4:	7dbb      	ldrb	r3, [r7, #22]
 80116f6:	2be5      	cmp	r3, #229	; 0xe5
 80116f8:	d007      	beq.n	801170a <dir_find+0x8a>
 80116fa:	7bfb      	ldrb	r3, [r7, #15]
 80116fc:	f003 0308 	and.w	r3, r3, #8
 8011700:	2b00      	cmp	r3, #0
 8011702:	d009      	beq.n	8011718 <dir_find+0x98>
 8011704:	7bfb      	ldrb	r3, [r7, #15]
 8011706:	2b0f      	cmp	r3, #15
 8011708:	d006      	beq.n	8011718 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801170a:	23ff      	movs	r3, #255	; 0xff
 801170c:	757b      	strb	r3, [r7, #21]
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	f04f 32ff 	mov.w	r2, #4294967295
 8011714:	631a      	str	r2, [r3, #48]	; 0x30
 8011716:	e05e      	b.n	80117d6 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8011718:	7bfb      	ldrb	r3, [r7, #15]
 801171a:	2b0f      	cmp	r3, #15
 801171c:	d136      	bne.n	801178c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011728:	2b00      	cmp	r3, #0
 801172a:	d154      	bne.n	80117d6 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801172c:	7dbb      	ldrb	r3, [r7, #22]
 801172e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011732:	2b00      	cmp	r3, #0
 8011734:	d00d      	beq.n	8011752 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	6a1b      	ldr	r3, [r3, #32]
 801173a:	7b5b      	ldrb	r3, [r3, #13]
 801173c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801173e:	7dbb      	ldrb	r3, [r7, #22]
 8011740:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011744:	75bb      	strb	r3, [r7, #22]
 8011746:	7dbb      	ldrb	r3, [r7, #22]
 8011748:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	695a      	ldr	r2, [r3, #20]
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011752:	7dba      	ldrb	r2, [r7, #22]
 8011754:	7d7b      	ldrb	r3, [r7, #21]
 8011756:	429a      	cmp	r2, r3
 8011758:	d115      	bne.n	8011786 <dir_find+0x106>
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	6a1b      	ldr	r3, [r3, #32]
 801175e:	330d      	adds	r3, #13
 8011760:	781b      	ldrb	r3, [r3, #0]
 8011762:	7d3a      	ldrb	r2, [r7, #20]
 8011764:	429a      	cmp	r2, r3
 8011766:	d10e      	bne.n	8011786 <dir_find+0x106>
 8011768:	693b      	ldr	r3, [r7, #16]
 801176a:	68da      	ldr	r2, [r3, #12]
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	6a1b      	ldr	r3, [r3, #32]
 8011770:	4619      	mov	r1, r3
 8011772:	4610      	mov	r0, r2
 8011774:	f7ff fcf2 	bl	801115c <cmp_lfn>
 8011778:	4603      	mov	r3, r0
 801177a:	2b00      	cmp	r3, #0
 801177c:	d003      	beq.n	8011786 <dir_find+0x106>
 801177e:	7d7b      	ldrb	r3, [r7, #21]
 8011780:	3b01      	subs	r3, #1
 8011782:	b2db      	uxtb	r3, r3
 8011784:	e000      	b.n	8011788 <dir_find+0x108>
 8011786:	23ff      	movs	r3, #255	; 0xff
 8011788:	757b      	strb	r3, [r7, #21]
 801178a:	e024      	b.n	80117d6 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801178c:	7d7b      	ldrb	r3, [r7, #21]
 801178e:	2b00      	cmp	r3, #0
 8011790:	d109      	bne.n	80117a6 <dir_find+0x126>
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	6a1b      	ldr	r3, [r3, #32]
 8011796:	4618      	mov	r0, r3
 8011798:	f7ff feaa 	bl	80114f0 <sum_sfn>
 801179c:	4603      	mov	r3, r0
 801179e:	461a      	mov	r2, r3
 80117a0:	7d3b      	ldrb	r3, [r7, #20]
 80117a2:	4293      	cmp	r3, r2
 80117a4:	d024      	beq.n	80117f0 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80117ac:	f003 0301 	and.w	r3, r3, #1
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d10a      	bne.n	80117ca <dir_find+0x14a>
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	6a18      	ldr	r0, [r3, #32]
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	3324      	adds	r3, #36	; 0x24
 80117bc:	220b      	movs	r2, #11
 80117be:	4619      	mov	r1, r3
 80117c0:	f7fe fd94 	bl	80102ec <mem_cmp>
 80117c4:	4603      	mov	r3, r0
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d014      	beq.n	80117f4 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80117ca:	23ff      	movs	r3, #255	; 0xff
 80117cc:	757b      	strb	r3, [r7, #21]
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	f04f 32ff 	mov.w	r2, #4294967295
 80117d4:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80117d6:	2100      	movs	r1, #0
 80117d8:	6878      	ldr	r0, [r7, #4]
 80117da:	f7ff fb74 	bl	8010ec6 <dir_next>
 80117de:	4603      	mov	r3, r0
 80117e0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80117e2:	7dfb      	ldrb	r3, [r7, #23]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	f43f af65 	beq.w	80116b4 <dir_find+0x34>
 80117ea:	e004      	b.n	80117f6 <dir_find+0x176>
		if (res != FR_OK) break;
 80117ec:	bf00      	nop
 80117ee:	e002      	b.n	80117f6 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80117f0:	bf00      	nop
 80117f2:	e000      	b.n	80117f6 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80117f4:	bf00      	nop

	return res;
 80117f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80117f8:	4618      	mov	r0, r3
 80117fa:	3718      	adds	r7, #24
 80117fc:	46bd      	mov	sp, r7
 80117fe:	bd80      	pop	{r7, pc}

08011800 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011800:	b580      	push	{r7, lr}
 8011802:	b08c      	sub	sp, #48	; 0x30
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011814:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8011818:	2b00      	cmp	r3, #0
 801181a:	d001      	beq.n	8011820 <dir_register+0x20>
 801181c:	2306      	movs	r3, #6
 801181e:	e0e0      	b.n	80119e2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8011820:	2300      	movs	r3, #0
 8011822:	627b      	str	r3, [r7, #36]	; 0x24
 8011824:	e002      	b.n	801182c <dir_register+0x2c>
 8011826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011828:	3301      	adds	r3, #1
 801182a:	627b      	str	r3, [r7, #36]	; 0x24
 801182c:	69fb      	ldr	r3, [r7, #28]
 801182e:	68da      	ldr	r2, [r3, #12]
 8011830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011832:	005b      	lsls	r3, r3, #1
 8011834:	4413      	add	r3, r2
 8011836:	881b      	ldrh	r3, [r3, #0]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d1f4      	bne.n	8011826 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8011842:	f107 030c 	add.w	r3, r7, #12
 8011846:	220c      	movs	r2, #12
 8011848:	4618      	mov	r0, r3
 801184a:	f7fe fd13 	bl	8010274 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801184e:	7dfb      	ldrb	r3, [r7, #23]
 8011850:	f003 0301 	and.w	r3, r3, #1
 8011854:	2b00      	cmp	r3, #0
 8011856:	d032      	beq.n	80118be <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	2240      	movs	r2, #64	; 0x40
 801185c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8011860:	2301      	movs	r3, #1
 8011862:	62bb      	str	r3, [r7, #40]	; 0x28
 8011864:	e016      	b.n	8011894 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	f103 0024 	add.w	r0, r3, #36	; 0x24
 801186c:	69fb      	ldr	r3, [r7, #28]
 801186e:	68da      	ldr	r2, [r3, #12]
 8011870:	f107 010c 	add.w	r1, r7, #12
 8011874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011876:	f7ff fdad 	bl	80113d4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801187a:	6878      	ldr	r0, [r7, #4]
 801187c:	f7ff ff00 	bl	8011680 <dir_find>
 8011880:	4603      	mov	r3, r0
 8011882:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8011886:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801188a:	2b00      	cmp	r3, #0
 801188c:	d106      	bne.n	801189c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801188e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011890:	3301      	adds	r3, #1
 8011892:	62bb      	str	r3, [r7, #40]	; 0x28
 8011894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011896:	2b63      	cmp	r3, #99	; 0x63
 8011898:	d9e5      	bls.n	8011866 <dir_register+0x66>
 801189a:	e000      	b.n	801189e <dir_register+0x9e>
			if (res != FR_OK) break;
 801189c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801189e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118a0:	2b64      	cmp	r3, #100	; 0x64
 80118a2:	d101      	bne.n	80118a8 <dir_register+0xa8>
 80118a4:	2307      	movs	r3, #7
 80118a6:	e09c      	b.n	80119e2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80118a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80118ac:	2b04      	cmp	r3, #4
 80118ae:	d002      	beq.n	80118b6 <dir_register+0xb6>
 80118b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80118b4:	e095      	b.n	80119e2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80118b6:	7dfa      	ldrb	r2, [r7, #23]
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80118be:	7dfb      	ldrb	r3, [r7, #23]
 80118c0:	f003 0302 	and.w	r3, r3, #2
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d007      	beq.n	80118d8 <dir_register+0xd8>
 80118c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118ca:	330c      	adds	r3, #12
 80118cc:	4a47      	ldr	r2, [pc, #284]	; (80119ec <dir_register+0x1ec>)
 80118ce:	fba2 2303 	umull	r2, r3, r2, r3
 80118d2:	089b      	lsrs	r3, r3, #2
 80118d4:	3301      	adds	r3, #1
 80118d6:	e000      	b.n	80118da <dir_register+0xda>
 80118d8:	2301      	movs	r3, #1
 80118da:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80118dc:	6a39      	ldr	r1, [r7, #32]
 80118de:	6878      	ldr	r0, [r7, #4]
 80118e0:	f7ff fbb6 	bl	8011050 <dir_alloc>
 80118e4:	4603      	mov	r3, r0
 80118e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80118ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d148      	bne.n	8011984 <dir_register+0x184>
 80118f2:	6a3b      	ldr	r3, [r7, #32]
 80118f4:	3b01      	subs	r3, #1
 80118f6:	623b      	str	r3, [r7, #32]
 80118f8:	6a3b      	ldr	r3, [r7, #32]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d042      	beq.n	8011984 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	695a      	ldr	r2, [r3, #20]
 8011902:	6a3b      	ldr	r3, [r7, #32]
 8011904:	015b      	lsls	r3, r3, #5
 8011906:	1ad3      	subs	r3, r2, r3
 8011908:	4619      	mov	r1, r3
 801190a:	6878      	ldr	r0, [r7, #4]
 801190c:	f7ff fa60 	bl	8010dd0 <dir_sdi>
 8011910:	4603      	mov	r3, r0
 8011912:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8011916:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801191a:	2b00      	cmp	r3, #0
 801191c:	d132      	bne.n	8011984 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	3324      	adds	r3, #36	; 0x24
 8011922:	4618      	mov	r0, r3
 8011924:	f7ff fde4 	bl	80114f0 <sum_sfn>
 8011928:	4603      	mov	r3, r0
 801192a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	69db      	ldr	r3, [r3, #28]
 8011930:	4619      	mov	r1, r3
 8011932:	69f8      	ldr	r0, [r7, #28]
 8011934:	f7fe fecc 	bl	80106d0 <move_window>
 8011938:	4603      	mov	r3, r0
 801193a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 801193e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011942:	2b00      	cmp	r3, #0
 8011944:	d11d      	bne.n	8011982 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8011946:	69fb      	ldr	r3, [r7, #28]
 8011948:	68d8      	ldr	r0, [r3, #12]
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	6a19      	ldr	r1, [r3, #32]
 801194e:	6a3b      	ldr	r3, [r7, #32]
 8011950:	b2da      	uxtb	r2, r3
 8011952:	7efb      	ldrb	r3, [r7, #27]
 8011954:	f7ff fcd6 	bl	8011304 <put_lfn>
				fs->wflag = 1;
 8011958:	69fb      	ldr	r3, [r7, #28]
 801195a:	2201      	movs	r2, #1
 801195c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801195e:	2100      	movs	r1, #0
 8011960:	6878      	ldr	r0, [r7, #4]
 8011962:	f7ff fab0 	bl	8010ec6 <dir_next>
 8011966:	4603      	mov	r3, r0
 8011968:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 801196c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011970:	2b00      	cmp	r3, #0
 8011972:	d107      	bne.n	8011984 <dir_register+0x184>
 8011974:	6a3b      	ldr	r3, [r7, #32]
 8011976:	3b01      	subs	r3, #1
 8011978:	623b      	str	r3, [r7, #32]
 801197a:	6a3b      	ldr	r3, [r7, #32]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d1d5      	bne.n	801192c <dir_register+0x12c>
 8011980:	e000      	b.n	8011984 <dir_register+0x184>
				if (res != FR_OK) break;
 8011982:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8011984:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011988:	2b00      	cmp	r3, #0
 801198a:	d128      	bne.n	80119de <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	69db      	ldr	r3, [r3, #28]
 8011990:	4619      	mov	r1, r3
 8011992:	69f8      	ldr	r0, [r7, #28]
 8011994:	f7fe fe9c 	bl	80106d0 <move_window>
 8011998:	4603      	mov	r3, r0
 801199a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801199e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d11b      	bne.n	80119de <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	6a1b      	ldr	r3, [r3, #32]
 80119aa:	2220      	movs	r2, #32
 80119ac:	2100      	movs	r1, #0
 80119ae:	4618      	mov	r0, r3
 80119b0:	f7fe fc81 	bl	80102b6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	6a18      	ldr	r0, [r3, #32]
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	3324      	adds	r3, #36	; 0x24
 80119bc:	220b      	movs	r2, #11
 80119be:	4619      	mov	r1, r3
 80119c0:	f7fe fc58 	bl	8010274 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	6a1b      	ldr	r3, [r3, #32]
 80119ce:	330c      	adds	r3, #12
 80119d0:	f002 0218 	and.w	r2, r2, #24
 80119d4:	b2d2      	uxtb	r2, r2
 80119d6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80119d8:	69fb      	ldr	r3, [r7, #28]
 80119da:	2201      	movs	r2, #1
 80119dc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80119de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80119e2:	4618      	mov	r0, r3
 80119e4:	3730      	adds	r7, #48	; 0x30
 80119e6:	46bd      	mov	sp, r7
 80119e8:	bd80      	pop	{r7, pc}
 80119ea:	bf00      	nop
 80119ec:	4ec4ec4f 	.word	0x4ec4ec4f

080119f0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b088      	sub	sp, #32
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	6078      	str	r0, [r7, #4]
 80119f8:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8011a00:	683b      	ldr	r3, [r7, #0]
 8011a02:	2200      	movs	r2, #0
 8011a04:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	69db      	ldr	r3, [r3, #28]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	f000 80c9 	beq.w	8011ba2 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a18:	d032      	beq.n	8011a80 <get_fileinfo+0x90>
			i = j = 0;
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	61bb      	str	r3, [r7, #24]
 8011a1e:	69bb      	ldr	r3, [r7, #24]
 8011a20:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8011a22:	e01b      	b.n	8011a5c <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8011a24:	89fb      	ldrh	r3, [r7, #14]
 8011a26:	2100      	movs	r1, #0
 8011a28:	4618      	mov	r0, r3
 8011a2a:	f001 fd2f 	bl	801348c <ff_convert>
 8011a2e:	4603      	mov	r3, r0
 8011a30:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8011a32:	89fb      	ldrh	r3, [r7, #14]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d102      	bne.n	8011a3e <get_fileinfo+0x4e>
 8011a38:	2300      	movs	r3, #0
 8011a3a:	61fb      	str	r3, [r7, #28]
 8011a3c:	e01a      	b.n	8011a74 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8011a3e:	69fb      	ldr	r3, [r7, #28]
 8011a40:	2bfe      	cmp	r3, #254	; 0xfe
 8011a42:	d902      	bls.n	8011a4a <get_fileinfo+0x5a>
 8011a44:	2300      	movs	r3, #0
 8011a46:	61fb      	str	r3, [r7, #28]
 8011a48:	e014      	b.n	8011a74 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8011a4a:	69fb      	ldr	r3, [r7, #28]
 8011a4c:	1c5a      	adds	r2, r3, #1
 8011a4e:	61fa      	str	r2, [r7, #28]
 8011a50:	89fa      	ldrh	r2, [r7, #14]
 8011a52:	b2d1      	uxtb	r1, r2
 8011a54:	683a      	ldr	r2, [r7, #0]
 8011a56:	4413      	add	r3, r2
 8011a58:	460a      	mov	r2, r1
 8011a5a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8011a5c:	693b      	ldr	r3, [r7, #16]
 8011a5e:	68da      	ldr	r2, [r3, #12]
 8011a60:	69bb      	ldr	r3, [r7, #24]
 8011a62:	1c59      	adds	r1, r3, #1
 8011a64:	61b9      	str	r1, [r7, #24]
 8011a66:	005b      	lsls	r3, r3, #1
 8011a68:	4413      	add	r3, r2
 8011a6a:	881b      	ldrh	r3, [r3, #0]
 8011a6c:	81fb      	strh	r3, [r7, #14]
 8011a6e:	89fb      	ldrh	r3, [r7, #14]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d1d7      	bne.n	8011a24 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8011a74:	683a      	ldr	r2, [r7, #0]
 8011a76:	69fb      	ldr	r3, [r7, #28]
 8011a78:	4413      	add	r3, r2
 8011a7a:	3316      	adds	r3, #22
 8011a7c:	2200      	movs	r2, #0
 8011a7e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8011a80:	2300      	movs	r3, #0
 8011a82:	61bb      	str	r3, [r7, #24]
 8011a84:	69bb      	ldr	r3, [r7, #24]
 8011a86:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8011a88:	683a      	ldr	r2, [r7, #0]
 8011a8a:	69fb      	ldr	r3, [r7, #28]
 8011a8c:	4413      	add	r3, r2
 8011a8e:	3316      	adds	r3, #22
 8011a90:	781b      	ldrb	r3, [r3, #0]
 8011a92:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8011a94:	e04c      	b.n	8011b30 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	6a1a      	ldr	r2, [r3, #32]
 8011a9a:	69fb      	ldr	r3, [r7, #28]
 8011a9c:	1c59      	adds	r1, r3, #1
 8011a9e:	61f9      	str	r1, [r7, #28]
 8011aa0:	4413      	add	r3, r2
 8011aa2:	781b      	ldrb	r3, [r3, #0]
 8011aa4:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8011aa6:	7dfb      	ldrb	r3, [r7, #23]
 8011aa8:	2b20      	cmp	r3, #32
 8011aaa:	d100      	bne.n	8011aae <get_fileinfo+0xbe>
 8011aac:	e040      	b.n	8011b30 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8011aae:	7dfb      	ldrb	r3, [r7, #23]
 8011ab0:	2b05      	cmp	r3, #5
 8011ab2:	d101      	bne.n	8011ab8 <get_fileinfo+0xc8>
 8011ab4:	23e5      	movs	r3, #229	; 0xe5
 8011ab6:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8011ab8:	69fb      	ldr	r3, [r7, #28]
 8011aba:	2b09      	cmp	r3, #9
 8011abc:	d10f      	bne.n	8011ade <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8011abe:	89bb      	ldrh	r3, [r7, #12]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d105      	bne.n	8011ad0 <get_fileinfo+0xe0>
 8011ac4:	683a      	ldr	r2, [r7, #0]
 8011ac6:	69bb      	ldr	r3, [r7, #24]
 8011ac8:	4413      	add	r3, r2
 8011aca:	3316      	adds	r3, #22
 8011acc:	222e      	movs	r2, #46	; 0x2e
 8011ace:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8011ad0:	69bb      	ldr	r3, [r7, #24]
 8011ad2:	1c5a      	adds	r2, r3, #1
 8011ad4:	61ba      	str	r2, [r7, #24]
 8011ad6:	683a      	ldr	r2, [r7, #0]
 8011ad8:	4413      	add	r3, r2
 8011ada:	222e      	movs	r2, #46	; 0x2e
 8011adc:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8011ade:	683a      	ldr	r2, [r7, #0]
 8011ae0:	69bb      	ldr	r3, [r7, #24]
 8011ae2:	4413      	add	r3, r2
 8011ae4:	3309      	adds	r3, #9
 8011ae6:	7dfa      	ldrb	r2, [r7, #23]
 8011ae8:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8011aea:	89bb      	ldrh	r3, [r7, #12]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d11c      	bne.n	8011b2a <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8011af0:	7dfb      	ldrb	r3, [r7, #23]
 8011af2:	2b40      	cmp	r3, #64	; 0x40
 8011af4:	d913      	bls.n	8011b1e <get_fileinfo+0x12e>
 8011af6:	7dfb      	ldrb	r3, [r7, #23]
 8011af8:	2b5a      	cmp	r3, #90	; 0x5a
 8011afa:	d810      	bhi.n	8011b1e <get_fileinfo+0x12e>
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	6a1b      	ldr	r3, [r3, #32]
 8011b00:	330c      	adds	r3, #12
 8011b02:	781b      	ldrb	r3, [r3, #0]
 8011b04:	461a      	mov	r2, r3
 8011b06:	69fb      	ldr	r3, [r7, #28]
 8011b08:	2b08      	cmp	r3, #8
 8011b0a:	d901      	bls.n	8011b10 <get_fileinfo+0x120>
 8011b0c:	2310      	movs	r3, #16
 8011b0e:	e000      	b.n	8011b12 <get_fileinfo+0x122>
 8011b10:	2308      	movs	r3, #8
 8011b12:	4013      	ands	r3, r2
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d002      	beq.n	8011b1e <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8011b18:	7dfb      	ldrb	r3, [r7, #23]
 8011b1a:	3320      	adds	r3, #32
 8011b1c:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8011b1e:	683a      	ldr	r2, [r7, #0]
 8011b20:	69bb      	ldr	r3, [r7, #24]
 8011b22:	4413      	add	r3, r2
 8011b24:	3316      	adds	r3, #22
 8011b26:	7dfa      	ldrb	r2, [r7, #23]
 8011b28:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8011b2a:	69bb      	ldr	r3, [r7, #24]
 8011b2c:	3301      	adds	r3, #1
 8011b2e:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8011b30:	69fb      	ldr	r3, [r7, #28]
 8011b32:	2b0a      	cmp	r3, #10
 8011b34:	d9af      	bls.n	8011a96 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8011b36:	89bb      	ldrh	r3, [r7, #12]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d10d      	bne.n	8011b58 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8011b3c:	683a      	ldr	r2, [r7, #0]
 8011b3e:	69bb      	ldr	r3, [r7, #24]
 8011b40:	4413      	add	r3, r2
 8011b42:	3316      	adds	r3, #22
 8011b44:	2200      	movs	r2, #0
 8011b46:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	6a1b      	ldr	r3, [r3, #32]
 8011b4c:	330c      	adds	r3, #12
 8011b4e:	781b      	ldrb	r3, [r3, #0]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d101      	bne.n	8011b58 <get_fileinfo+0x168>
 8011b54:	2300      	movs	r3, #0
 8011b56:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8011b58:	683a      	ldr	r2, [r7, #0]
 8011b5a:	69bb      	ldr	r3, [r7, #24]
 8011b5c:	4413      	add	r3, r2
 8011b5e:	3309      	adds	r3, #9
 8011b60:	2200      	movs	r2, #0
 8011b62:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	6a1b      	ldr	r3, [r3, #32]
 8011b68:	7ada      	ldrb	r2, [r3, #11]
 8011b6a:	683b      	ldr	r3, [r7, #0]
 8011b6c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	6a1b      	ldr	r3, [r3, #32]
 8011b72:	331c      	adds	r3, #28
 8011b74:	4618      	mov	r0, r3
 8011b76:	f7fe fb13 	bl	80101a0 <ld_dword>
 8011b7a:	4602      	mov	r2, r0
 8011b7c:	683b      	ldr	r3, [r7, #0]
 8011b7e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	6a1b      	ldr	r3, [r3, #32]
 8011b84:	3316      	adds	r3, #22
 8011b86:	4618      	mov	r0, r3
 8011b88:	f7fe fb0a 	bl	80101a0 <ld_dword>
 8011b8c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8011b8e:	68bb      	ldr	r3, [r7, #8]
 8011b90:	b29a      	uxth	r2, r3
 8011b92:	683b      	ldr	r3, [r7, #0]
 8011b94:	80da      	strh	r2, [r3, #6]
 8011b96:	68bb      	ldr	r3, [r7, #8]
 8011b98:	0c1b      	lsrs	r3, r3, #16
 8011b9a:	b29a      	uxth	r2, r3
 8011b9c:	683b      	ldr	r3, [r7, #0]
 8011b9e:	809a      	strh	r2, [r3, #4]
 8011ba0:	e000      	b.n	8011ba4 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8011ba2:	bf00      	nop
}
 8011ba4:	3720      	adds	r7, #32
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	bd80      	pop	{r7, pc}
	...

08011bac <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b08a      	sub	sp, #40	; 0x28
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
 8011bb4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8011bb6:	683b      	ldr	r3, [r7, #0]
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	613b      	str	r3, [r7, #16]
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	68db      	ldr	r3, [r3, #12]
 8011bc2:	60fb      	str	r3, [r7, #12]
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	617b      	str	r3, [r7, #20]
 8011bc8:	697b      	ldr	r3, [r7, #20]
 8011bca:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8011bcc:	69bb      	ldr	r3, [r7, #24]
 8011bce:	1c5a      	adds	r2, r3, #1
 8011bd0:	61ba      	str	r2, [r7, #24]
 8011bd2:	693a      	ldr	r2, [r7, #16]
 8011bd4:	4413      	add	r3, r2
 8011bd6:	781b      	ldrb	r3, [r3, #0]
 8011bd8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8011bda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011bdc:	2b1f      	cmp	r3, #31
 8011bde:	d940      	bls.n	8011c62 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8011be0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011be2:	2b2f      	cmp	r3, #47	; 0x2f
 8011be4:	d006      	beq.n	8011bf4 <create_name+0x48>
 8011be6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011be8:	2b5c      	cmp	r3, #92	; 0x5c
 8011bea:	d110      	bne.n	8011c0e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011bec:	e002      	b.n	8011bf4 <create_name+0x48>
 8011bee:	69bb      	ldr	r3, [r7, #24]
 8011bf0:	3301      	adds	r3, #1
 8011bf2:	61bb      	str	r3, [r7, #24]
 8011bf4:	693a      	ldr	r2, [r7, #16]
 8011bf6:	69bb      	ldr	r3, [r7, #24]
 8011bf8:	4413      	add	r3, r2
 8011bfa:	781b      	ldrb	r3, [r3, #0]
 8011bfc:	2b2f      	cmp	r3, #47	; 0x2f
 8011bfe:	d0f6      	beq.n	8011bee <create_name+0x42>
 8011c00:	693a      	ldr	r2, [r7, #16]
 8011c02:	69bb      	ldr	r3, [r7, #24]
 8011c04:	4413      	add	r3, r2
 8011c06:	781b      	ldrb	r3, [r3, #0]
 8011c08:	2b5c      	cmp	r3, #92	; 0x5c
 8011c0a:	d0f0      	beq.n	8011bee <create_name+0x42>
			break;
 8011c0c:	e02a      	b.n	8011c64 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8011c0e:	697b      	ldr	r3, [r7, #20]
 8011c10:	2bfe      	cmp	r3, #254	; 0xfe
 8011c12:	d901      	bls.n	8011c18 <create_name+0x6c>
 8011c14:	2306      	movs	r3, #6
 8011c16:	e17d      	b.n	8011f14 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8011c18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011c1a:	b2db      	uxtb	r3, r3
 8011c1c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8011c1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011c20:	2101      	movs	r1, #1
 8011c22:	4618      	mov	r0, r3
 8011c24:	f001 fc32 	bl	801348c <ff_convert>
 8011c28:	4603      	mov	r3, r0
 8011c2a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8011c2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d101      	bne.n	8011c36 <create_name+0x8a>
 8011c32:	2306      	movs	r3, #6
 8011c34:	e16e      	b.n	8011f14 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8011c36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011c38:	2b7f      	cmp	r3, #127	; 0x7f
 8011c3a:	d809      	bhi.n	8011c50 <create_name+0xa4>
 8011c3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011c3e:	4619      	mov	r1, r3
 8011c40:	488d      	ldr	r0, [pc, #564]	; (8011e78 <create_name+0x2cc>)
 8011c42:	f7fe fb7a 	bl	801033a <chk_chr>
 8011c46:	4603      	mov	r3, r0
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d001      	beq.n	8011c50 <create_name+0xa4>
 8011c4c:	2306      	movs	r3, #6
 8011c4e:	e161      	b.n	8011f14 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8011c50:	697b      	ldr	r3, [r7, #20]
 8011c52:	1c5a      	adds	r2, r3, #1
 8011c54:	617a      	str	r2, [r7, #20]
 8011c56:	005b      	lsls	r3, r3, #1
 8011c58:	68fa      	ldr	r2, [r7, #12]
 8011c5a:	4413      	add	r3, r2
 8011c5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011c5e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8011c60:	e7b4      	b.n	8011bcc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8011c62:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8011c64:	693a      	ldr	r2, [r7, #16]
 8011c66:	69bb      	ldr	r3, [r7, #24]
 8011c68:	441a      	add	r2, r3
 8011c6a:	683b      	ldr	r3, [r7, #0]
 8011c6c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8011c6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011c70:	2b1f      	cmp	r3, #31
 8011c72:	d801      	bhi.n	8011c78 <create_name+0xcc>
 8011c74:	2304      	movs	r3, #4
 8011c76:	e000      	b.n	8011c7a <create_name+0xce>
 8011c78:	2300      	movs	r3, #0
 8011c7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8011c7e:	e011      	b.n	8011ca4 <create_name+0xf8>
		w = lfn[di - 1];
 8011c80:	697b      	ldr	r3, [r7, #20]
 8011c82:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011c86:	3b01      	subs	r3, #1
 8011c88:	005b      	lsls	r3, r3, #1
 8011c8a:	68fa      	ldr	r2, [r7, #12]
 8011c8c:	4413      	add	r3, r2
 8011c8e:	881b      	ldrh	r3, [r3, #0]
 8011c90:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8011c92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011c94:	2b20      	cmp	r3, #32
 8011c96:	d002      	beq.n	8011c9e <create_name+0xf2>
 8011c98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011c9a:	2b2e      	cmp	r3, #46	; 0x2e
 8011c9c:	d106      	bne.n	8011cac <create_name+0x100>
		di--;
 8011c9e:	697b      	ldr	r3, [r7, #20]
 8011ca0:	3b01      	subs	r3, #1
 8011ca2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8011ca4:	697b      	ldr	r3, [r7, #20]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d1ea      	bne.n	8011c80 <create_name+0xd4>
 8011caa:	e000      	b.n	8011cae <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8011cac:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8011cae:	697b      	ldr	r3, [r7, #20]
 8011cb0:	005b      	lsls	r3, r3, #1
 8011cb2:	68fa      	ldr	r2, [r7, #12]
 8011cb4:	4413      	add	r3, r2
 8011cb6:	2200      	movs	r2, #0
 8011cb8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8011cba:	697b      	ldr	r3, [r7, #20]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d101      	bne.n	8011cc4 <create_name+0x118>
 8011cc0:	2306      	movs	r3, #6
 8011cc2:	e127      	b.n	8011f14 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	3324      	adds	r3, #36	; 0x24
 8011cc8:	220b      	movs	r2, #11
 8011cca:	2120      	movs	r1, #32
 8011ccc:	4618      	mov	r0, r3
 8011cce:	f7fe faf2 	bl	80102b6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	61bb      	str	r3, [r7, #24]
 8011cd6:	e002      	b.n	8011cde <create_name+0x132>
 8011cd8:	69bb      	ldr	r3, [r7, #24]
 8011cda:	3301      	adds	r3, #1
 8011cdc:	61bb      	str	r3, [r7, #24]
 8011cde:	69bb      	ldr	r3, [r7, #24]
 8011ce0:	005b      	lsls	r3, r3, #1
 8011ce2:	68fa      	ldr	r2, [r7, #12]
 8011ce4:	4413      	add	r3, r2
 8011ce6:	881b      	ldrh	r3, [r3, #0]
 8011ce8:	2b20      	cmp	r3, #32
 8011cea:	d0f5      	beq.n	8011cd8 <create_name+0x12c>
 8011cec:	69bb      	ldr	r3, [r7, #24]
 8011cee:	005b      	lsls	r3, r3, #1
 8011cf0:	68fa      	ldr	r2, [r7, #12]
 8011cf2:	4413      	add	r3, r2
 8011cf4:	881b      	ldrh	r3, [r3, #0]
 8011cf6:	2b2e      	cmp	r3, #46	; 0x2e
 8011cf8:	d0ee      	beq.n	8011cd8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8011cfa:	69bb      	ldr	r3, [r7, #24]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d009      	beq.n	8011d14 <create_name+0x168>
 8011d00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d04:	f043 0303 	orr.w	r3, r3, #3
 8011d08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8011d0c:	e002      	b.n	8011d14 <create_name+0x168>
 8011d0e:	697b      	ldr	r3, [r7, #20]
 8011d10:	3b01      	subs	r3, #1
 8011d12:	617b      	str	r3, [r7, #20]
 8011d14:	697b      	ldr	r3, [r7, #20]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d009      	beq.n	8011d2e <create_name+0x182>
 8011d1a:	697b      	ldr	r3, [r7, #20]
 8011d1c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011d20:	3b01      	subs	r3, #1
 8011d22:	005b      	lsls	r3, r3, #1
 8011d24:	68fa      	ldr	r2, [r7, #12]
 8011d26:	4413      	add	r3, r2
 8011d28:	881b      	ldrh	r3, [r3, #0]
 8011d2a:	2b2e      	cmp	r3, #46	; 0x2e
 8011d2c:	d1ef      	bne.n	8011d0e <create_name+0x162>

	i = b = 0; ni = 8;
 8011d2e:	2300      	movs	r3, #0
 8011d30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011d34:	2300      	movs	r3, #0
 8011d36:	623b      	str	r3, [r7, #32]
 8011d38:	2308      	movs	r3, #8
 8011d3a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8011d3c:	69bb      	ldr	r3, [r7, #24]
 8011d3e:	1c5a      	adds	r2, r3, #1
 8011d40:	61ba      	str	r2, [r7, #24]
 8011d42:	005b      	lsls	r3, r3, #1
 8011d44:	68fa      	ldr	r2, [r7, #12]
 8011d46:	4413      	add	r3, r2
 8011d48:	881b      	ldrh	r3, [r3, #0]
 8011d4a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8011d4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	f000 8090 	beq.w	8011e74 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8011d54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011d56:	2b20      	cmp	r3, #32
 8011d58:	d006      	beq.n	8011d68 <create_name+0x1bc>
 8011d5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011d5c:	2b2e      	cmp	r3, #46	; 0x2e
 8011d5e:	d10a      	bne.n	8011d76 <create_name+0x1ca>
 8011d60:	69ba      	ldr	r2, [r7, #24]
 8011d62:	697b      	ldr	r3, [r7, #20]
 8011d64:	429a      	cmp	r2, r3
 8011d66:	d006      	beq.n	8011d76 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8011d68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d6c:	f043 0303 	orr.w	r3, r3, #3
 8011d70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011d74:	e07d      	b.n	8011e72 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8011d76:	6a3a      	ldr	r2, [r7, #32]
 8011d78:	69fb      	ldr	r3, [r7, #28]
 8011d7a:	429a      	cmp	r2, r3
 8011d7c:	d203      	bcs.n	8011d86 <create_name+0x1da>
 8011d7e:	69ba      	ldr	r2, [r7, #24]
 8011d80:	697b      	ldr	r3, [r7, #20]
 8011d82:	429a      	cmp	r2, r3
 8011d84:	d123      	bne.n	8011dce <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8011d86:	69fb      	ldr	r3, [r7, #28]
 8011d88:	2b0b      	cmp	r3, #11
 8011d8a:	d106      	bne.n	8011d9a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8011d8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d90:	f043 0303 	orr.w	r3, r3, #3
 8011d94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011d98:	e075      	b.n	8011e86 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8011d9a:	69ba      	ldr	r2, [r7, #24]
 8011d9c:	697b      	ldr	r3, [r7, #20]
 8011d9e:	429a      	cmp	r2, r3
 8011da0:	d005      	beq.n	8011dae <create_name+0x202>
 8011da2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011da6:	f043 0303 	orr.w	r3, r3, #3
 8011daa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8011dae:	69ba      	ldr	r2, [r7, #24]
 8011db0:	697b      	ldr	r3, [r7, #20]
 8011db2:	429a      	cmp	r2, r3
 8011db4:	d866      	bhi.n	8011e84 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8011db6:	697b      	ldr	r3, [r7, #20]
 8011db8:	61bb      	str	r3, [r7, #24]
 8011dba:	2308      	movs	r3, #8
 8011dbc:	623b      	str	r3, [r7, #32]
 8011dbe:	230b      	movs	r3, #11
 8011dc0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8011dc2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011dc6:	009b      	lsls	r3, r3, #2
 8011dc8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011dcc:	e051      	b.n	8011e72 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8011dce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011dd0:	2b7f      	cmp	r3, #127	; 0x7f
 8011dd2:	d914      	bls.n	8011dfe <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8011dd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011dd6:	2100      	movs	r1, #0
 8011dd8:	4618      	mov	r0, r3
 8011dda:	f001 fb57 	bl	801348c <ff_convert>
 8011dde:	4603      	mov	r3, r0
 8011de0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8011de2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d004      	beq.n	8011df2 <create_name+0x246>
 8011de8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011dea:	3b80      	subs	r3, #128	; 0x80
 8011dec:	4a23      	ldr	r2, [pc, #140]	; (8011e7c <create_name+0x2d0>)
 8011dee:	5cd3      	ldrb	r3, [r2, r3]
 8011df0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8011df2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011df6:	f043 0302 	orr.w	r3, r3, #2
 8011dfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8011dfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d007      	beq.n	8011e14 <create_name+0x268>
 8011e04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011e06:	4619      	mov	r1, r3
 8011e08:	481d      	ldr	r0, [pc, #116]	; (8011e80 <create_name+0x2d4>)
 8011e0a:	f7fe fa96 	bl	801033a <chk_chr>
 8011e0e:	4603      	mov	r3, r0
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d008      	beq.n	8011e26 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8011e14:	235f      	movs	r3, #95	; 0x5f
 8011e16:	84bb      	strh	r3, [r7, #36]	; 0x24
 8011e18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e1c:	f043 0303 	orr.w	r3, r3, #3
 8011e20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011e24:	e01b      	b.n	8011e5e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8011e26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011e28:	2b40      	cmp	r3, #64	; 0x40
 8011e2a:	d909      	bls.n	8011e40 <create_name+0x294>
 8011e2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011e2e:	2b5a      	cmp	r3, #90	; 0x5a
 8011e30:	d806      	bhi.n	8011e40 <create_name+0x294>
					b |= 2;
 8011e32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011e36:	f043 0302 	orr.w	r3, r3, #2
 8011e3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011e3e:	e00e      	b.n	8011e5e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8011e40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011e42:	2b60      	cmp	r3, #96	; 0x60
 8011e44:	d90b      	bls.n	8011e5e <create_name+0x2b2>
 8011e46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011e48:	2b7a      	cmp	r3, #122	; 0x7a
 8011e4a:	d808      	bhi.n	8011e5e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8011e4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011e50:	f043 0301 	orr.w	r3, r3, #1
 8011e54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011e58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011e5a:	3b20      	subs	r3, #32
 8011e5c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8011e5e:	6a3b      	ldr	r3, [r7, #32]
 8011e60:	1c5a      	adds	r2, r3, #1
 8011e62:	623a      	str	r2, [r7, #32]
 8011e64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011e66:	b2d1      	uxtb	r1, r2
 8011e68:	687a      	ldr	r2, [r7, #4]
 8011e6a:	4413      	add	r3, r2
 8011e6c:	460a      	mov	r2, r1
 8011e6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8011e72:	e763      	b.n	8011d3c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8011e74:	bf00      	nop
 8011e76:	e006      	b.n	8011e86 <create_name+0x2da>
 8011e78:	08016b8c 	.word	0x08016b8c
 8011e7c:	08016c68 	.word	0x08016c68
 8011e80:	08016b98 	.word	0x08016b98
			if (si > di) break;			/* No extension */
 8011e84:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011e8c:	2be5      	cmp	r3, #229	; 0xe5
 8011e8e:	d103      	bne.n	8011e98 <create_name+0x2ec>
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	2205      	movs	r2, #5
 8011e94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8011e98:	69fb      	ldr	r3, [r7, #28]
 8011e9a:	2b08      	cmp	r3, #8
 8011e9c:	d104      	bne.n	8011ea8 <create_name+0x2fc>
 8011e9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011ea2:	009b      	lsls	r3, r3, #2
 8011ea4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8011ea8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011eac:	f003 030c 	and.w	r3, r3, #12
 8011eb0:	2b0c      	cmp	r3, #12
 8011eb2:	d005      	beq.n	8011ec0 <create_name+0x314>
 8011eb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011eb8:	f003 0303 	and.w	r3, r3, #3
 8011ebc:	2b03      	cmp	r3, #3
 8011ebe:	d105      	bne.n	8011ecc <create_name+0x320>
 8011ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ec4:	f043 0302 	orr.w	r3, r3, #2
 8011ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8011ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ed0:	f003 0302 	and.w	r3, r3, #2
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d117      	bne.n	8011f08 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8011ed8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011edc:	f003 0303 	and.w	r3, r3, #3
 8011ee0:	2b01      	cmp	r3, #1
 8011ee2:	d105      	bne.n	8011ef0 <create_name+0x344>
 8011ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ee8:	f043 0310 	orr.w	r3, r3, #16
 8011eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8011ef0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011ef4:	f003 030c 	and.w	r3, r3, #12
 8011ef8:	2b04      	cmp	r3, #4
 8011efa:	d105      	bne.n	8011f08 <create_name+0x35c>
 8011efc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f00:	f043 0308 	orr.w	r3, r3, #8
 8011f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8011f0e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8011f12:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8011f14:	4618      	mov	r0, r3
 8011f16:	3728      	adds	r7, #40	; 0x28
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	bd80      	pop	{r7, pc}

08011f1c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b086      	sub	sp, #24
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
 8011f24:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8011f2a:	693b      	ldr	r3, [r7, #16]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011f30:	e002      	b.n	8011f38 <follow_path+0x1c>
 8011f32:	683b      	ldr	r3, [r7, #0]
 8011f34:	3301      	adds	r3, #1
 8011f36:	603b      	str	r3, [r7, #0]
 8011f38:	683b      	ldr	r3, [r7, #0]
 8011f3a:	781b      	ldrb	r3, [r3, #0]
 8011f3c:	2b2f      	cmp	r3, #47	; 0x2f
 8011f3e:	d0f8      	beq.n	8011f32 <follow_path+0x16>
 8011f40:	683b      	ldr	r3, [r7, #0]
 8011f42:	781b      	ldrb	r3, [r3, #0]
 8011f44:	2b5c      	cmp	r3, #92	; 0x5c
 8011f46:	d0f4      	beq.n	8011f32 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8011f48:	693b      	ldr	r3, [r7, #16]
 8011f4a:	2200      	movs	r2, #0
 8011f4c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8011f4e:	683b      	ldr	r3, [r7, #0]
 8011f50:	781b      	ldrb	r3, [r3, #0]
 8011f52:	2b1f      	cmp	r3, #31
 8011f54:	d80a      	bhi.n	8011f6c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	2280      	movs	r2, #128	; 0x80
 8011f5a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8011f5e:	2100      	movs	r1, #0
 8011f60:	6878      	ldr	r0, [r7, #4]
 8011f62:	f7fe ff35 	bl	8010dd0 <dir_sdi>
 8011f66:	4603      	mov	r3, r0
 8011f68:	75fb      	strb	r3, [r7, #23]
 8011f6a:	e043      	b.n	8011ff4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011f6c:	463b      	mov	r3, r7
 8011f6e:	4619      	mov	r1, r3
 8011f70:	6878      	ldr	r0, [r7, #4]
 8011f72:	f7ff fe1b 	bl	8011bac <create_name>
 8011f76:	4603      	mov	r3, r0
 8011f78:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011f7a:	7dfb      	ldrb	r3, [r7, #23]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d134      	bne.n	8011fea <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011f80:	6878      	ldr	r0, [r7, #4]
 8011f82:	f7ff fb7d 	bl	8011680 <dir_find>
 8011f86:	4603      	mov	r3, r0
 8011f88:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011f90:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8011f92:	7dfb      	ldrb	r3, [r7, #23]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d00a      	beq.n	8011fae <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011f98:	7dfb      	ldrb	r3, [r7, #23]
 8011f9a:	2b04      	cmp	r3, #4
 8011f9c:	d127      	bne.n	8011fee <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011f9e:	7afb      	ldrb	r3, [r7, #11]
 8011fa0:	f003 0304 	and.w	r3, r3, #4
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d122      	bne.n	8011fee <follow_path+0xd2>
 8011fa8:	2305      	movs	r3, #5
 8011faa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8011fac:	e01f      	b.n	8011fee <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011fae:	7afb      	ldrb	r3, [r7, #11]
 8011fb0:	f003 0304 	and.w	r3, r3, #4
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d11c      	bne.n	8011ff2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011fb8:	693b      	ldr	r3, [r7, #16]
 8011fba:	799b      	ldrb	r3, [r3, #6]
 8011fbc:	f003 0310 	and.w	r3, r3, #16
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d102      	bne.n	8011fca <follow_path+0xae>
				res = FR_NO_PATH; break;
 8011fc4:	2305      	movs	r3, #5
 8011fc6:	75fb      	strb	r3, [r7, #23]
 8011fc8:	e014      	b.n	8011ff4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	695b      	ldr	r3, [r3, #20]
 8011fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011fd8:	4413      	add	r3, r2
 8011fda:	4619      	mov	r1, r3
 8011fdc:	68f8      	ldr	r0, [r7, #12]
 8011fde:	f7ff f87e 	bl	80110de <ld_clust>
 8011fe2:	4602      	mov	r2, r0
 8011fe4:	693b      	ldr	r3, [r7, #16]
 8011fe6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011fe8:	e7c0      	b.n	8011f6c <follow_path+0x50>
			if (res != FR_OK) break;
 8011fea:	bf00      	nop
 8011fec:	e002      	b.n	8011ff4 <follow_path+0xd8>
				break;
 8011fee:	bf00      	nop
 8011ff0:	e000      	b.n	8011ff4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011ff2:	bf00      	nop
			}
		}
	}

	return res;
 8011ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	3718      	adds	r7, #24
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	bd80      	pop	{r7, pc}

08011ffe <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011ffe:	b480      	push	{r7}
 8012000:	b087      	sub	sp, #28
 8012002:	af00      	add	r7, sp, #0
 8012004:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012006:	f04f 33ff 	mov.w	r3, #4294967295
 801200a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	2b00      	cmp	r3, #0
 8012012:	d031      	beq.n	8012078 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	617b      	str	r3, [r7, #20]
 801201a:	e002      	b.n	8012022 <get_ldnumber+0x24>
 801201c:	697b      	ldr	r3, [r7, #20]
 801201e:	3301      	adds	r3, #1
 8012020:	617b      	str	r3, [r7, #20]
 8012022:	697b      	ldr	r3, [r7, #20]
 8012024:	781b      	ldrb	r3, [r3, #0]
 8012026:	2b1f      	cmp	r3, #31
 8012028:	d903      	bls.n	8012032 <get_ldnumber+0x34>
 801202a:	697b      	ldr	r3, [r7, #20]
 801202c:	781b      	ldrb	r3, [r3, #0]
 801202e:	2b3a      	cmp	r3, #58	; 0x3a
 8012030:	d1f4      	bne.n	801201c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012032:	697b      	ldr	r3, [r7, #20]
 8012034:	781b      	ldrb	r3, [r3, #0]
 8012036:	2b3a      	cmp	r3, #58	; 0x3a
 8012038:	d11c      	bne.n	8012074 <get_ldnumber+0x76>
			tp = *path;
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	1c5a      	adds	r2, r3, #1
 8012044:	60fa      	str	r2, [r7, #12]
 8012046:	781b      	ldrb	r3, [r3, #0]
 8012048:	3b30      	subs	r3, #48	; 0x30
 801204a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801204c:	68bb      	ldr	r3, [r7, #8]
 801204e:	2b09      	cmp	r3, #9
 8012050:	d80e      	bhi.n	8012070 <get_ldnumber+0x72>
 8012052:	68fa      	ldr	r2, [r7, #12]
 8012054:	697b      	ldr	r3, [r7, #20]
 8012056:	429a      	cmp	r2, r3
 8012058:	d10a      	bne.n	8012070 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801205a:	68bb      	ldr	r3, [r7, #8]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d107      	bne.n	8012070 <get_ldnumber+0x72>
					vol = (int)i;
 8012060:	68bb      	ldr	r3, [r7, #8]
 8012062:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012064:	697b      	ldr	r3, [r7, #20]
 8012066:	3301      	adds	r3, #1
 8012068:	617b      	str	r3, [r7, #20]
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	697a      	ldr	r2, [r7, #20]
 801206e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012070:	693b      	ldr	r3, [r7, #16]
 8012072:	e002      	b.n	801207a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012074:	2300      	movs	r3, #0
 8012076:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012078:	693b      	ldr	r3, [r7, #16]
}
 801207a:	4618      	mov	r0, r3
 801207c:	371c      	adds	r7, #28
 801207e:	46bd      	mov	sp, r7
 8012080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012084:	4770      	bx	lr
	...

08012088 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012088:	b580      	push	{r7, lr}
 801208a:	b082      	sub	sp, #8
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
 8012090:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	2200      	movs	r2, #0
 8012096:	70da      	strb	r2, [r3, #3]
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	f04f 32ff 	mov.w	r2, #4294967295
 801209e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80120a0:	6839      	ldr	r1, [r7, #0]
 80120a2:	6878      	ldr	r0, [r7, #4]
 80120a4:	f7fe fb14 	bl	80106d0 <move_window>
 80120a8:	4603      	mov	r3, r0
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d001      	beq.n	80120b2 <check_fs+0x2a>
 80120ae:	2304      	movs	r3, #4
 80120b0:	e038      	b.n	8012124 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	3334      	adds	r3, #52	; 0x34
 80120b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80120ba:	4618      	mov	r0, r3
 80120bc:	f7fe f858 	bl	8010170 <ld_word>
 80120c0:	4603      	mov	r3, r0
 80120c2:	461a      	mov	r2, r3
 80120c4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80120c8:	429a      	cmp	r2, r3
 80120ca:	d001      	beq.n	80120d0 <check_fs+0x48>
 80120cc:	2303      	movs	r3, #3
 80120ce:	e029      	b.n	8012124 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80120d6:	2be9      	cmp	r3, #233	; 0xe9
 80120d8:	d009      	beq.n	80120ee <check_fs+0x66>
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80120e0:	2beb      	cmp	r3, #235	; 0xeb
 80120e2:	d11e      	bne.n	8012122 <check_fs+0x9a>
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80120ea:	2b90      	cmp	r3, #144	; 0x90
 80120ec:	d119      	bne.n	8012122 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	3334      	adds	r3, #52	; 0x34
 80120f2:	3336      	adds	r3, #54	; 0x36
 80120f4:	4618      	mov	r0, r3
 80120f6:	f7fe f853 	bl	80101a0 <ld_dword>
 80120fa:	4603      	mov	r3, r0
 80120fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012100:	4a0a      	ldr	r2, [pc, #40]	; (801212c <check_fs+0xa4>)
 8012102:	4293      	cmp	r3, r2
 8012104:	d101      	bne.n	801210a <check_fs+0x82>
 8012106:	2300      	movs	r3, #0
 8012108:	e00c      	b.n	8012124 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	3334      	adds	r3, #52	; 0x34
 801210e:	3352      	adds	r3, #82	; 0x52
 8012110:	4618      	mov	r0, r3
 8012112:	f7fe f845 	bl	80101a0 <ld_dword>
 8012116:	4603      	mov	r3, r0
 8012118:	4a05      	ldr	r2, [pc, #20]	; (8012130 <check_fs+0xa8>)
 801211a:	4293      	cmp	r3, r2
 801211c:	d101      	bne.n	8012122 <check_fs+0x9a>
 801211e:	2300      	movs	r3, #0
 8012120:	e000      	b.n	8012124 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012122:	2302      	movs	r3, #2
}
 8012124:	4618      	mov	r0, r3
 8012126:	3708      	adds	r7, #8
 8012128:	46bd      	mov	sp, r7
 801212a:	bd80      	pop	{r7, pc}
 801212c:	00544146 	.word	0x00544146
 8012130:	33544146 	.word	0x33544146

08012134 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012134:	b580      	push	{r7, lr}
 8012136:	b096      	sub	sp, #88	; 0x58
 8012138:	af00      	add	r7, sp, #0
 801213a:	60f8      	str	r0, [r7, #12]
 801213c:	60b9      	str	r1, [r7, #8]
 801213e:	4613      	mov	r3, r2
 8012140:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012142:	68bb      	ldr	r3, [r7, #8]
 8012144:	2200      	movs	r2, #0
 8012146:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012148:	68f8      	ldr	r0, [r7, #12]
 801214a:	f7ff ff58 	bl	8011ffe <get_ldnumber>
 801214e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012152:	2b00      	cmp	r3, #0
 8012154:	da01      	bge.n	801215a <find_volume+0x26>
 8012156:	230b      	movs	r3, #11
 8012158:	e230      	b.n	80125bc <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801215a:	4aa1      	ldr	r2, [pc, #644]	; (80123e0 <find_volume+0x2ac>)
 801215c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801215e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012162:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012166:	2b00      	cmp	r3, #0
 8012168:	d101      	bne.n	801216e <find_volume+0x3a>
 801216a:	230c      	movs	r3, #12
 801216c:	e226      	b.n	80125bc <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801216e:	68bb      	ldr	r3, [r7, #8]
 8012170:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012172:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012174:	79fb      	ldrb	r3, [r7, #7]
 8012176:	f023 0301 	bic.w	r3, r3, #1
 801217a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801217c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801217e:	781b      	ldrb	r3, [r3, #0]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d01a      	beq.n	80121ba <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012186:	785b      	ldrb	r3, [r3, #1]
 8012188:	4618      	mov	r0, r3
 801218a:	f7fd ff53 	bl	8010034 <disk_status>
 801218e:	4603      	mov	r3, r0
 8012190:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012194:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012198:	f003 0301 	and.w	r3, r3, #1
 801219c:	2b00      	cmp	r3, #0
 801219e:	d10c      	bne.n	80121ba <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80121a0:	79fb      	ldrb	r3, [r7, #7]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d007      	beq.n	80121b6 <find_volume+0x82>
 80121a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80121aa:	f003 0304 	and.w	r3, r3, #4
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d001      	beq.n	80121b6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80121b2:	230a      	movs	r3, #10
 80121b4:	e202      	b.n	80125bc <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 80121b6:	2300      	movs	r3, #0
 80121b8:	e200      	b.n	80125bc <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80121ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121bc:	2200      	movs	r2, #0
 80121be:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80121c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121c2:	b2da      	uxtb	r2, r3
 80121c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121c6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80121c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121ca:	785b      	ldrb	r3, [r3, #1]
 80121cc:	4618      	mov	r0, r3
 80121ce:	f7fd ff4b 	bl	8010068 <disk_initialize>
 80121d2:	4603      	mov	r3, r0
 80121d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80121d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80121dc:	f003 0301 	and.w	r3, r3, #1
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d001      	beq.n	80121e8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80121e4:	2303      	movs	r3, #3
 80121e6:	e1e9      	b.n	80125bc <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80121e8:	79fb      	ldrb	r3, [r7, #7]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d007      	beq.n	80121fe <find_volume+0xca>
 80121ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80121f2:	f003 0304 	and.w	r3, r3, #4
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d001      	beq.n	80121fe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80121fa:	230a      	movs	r3, #10
 80121fc:	e1de      	b.n	80125bc <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80121fe:	2300      	movs	r3, #0
 8012200:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012202:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012204:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012206:	f7ff ff3f 	bl	8012088 <check_fs>
 801220a:	4603      	mov	r3, r0
 801220c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012210:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012214:	2b02      	cmp	r3, #2
 8012216:	d149      	bne.n	80122ac <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012218:	2300      	movs	r3, #0
 801221a:	643b      	str	r3, [r7, #64]	; 0x40
 801221c:	e01e      	b.n	801225c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801221e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012220:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012226:	011b      	lsls	r3, r3, #4
 8012228:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801222c:	4413      	add	r3, r2
 801222e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012232:	3304      	adds	r3, #4
 8012234:	781b      	ldrb	r3, [r3, #0]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d006      	beq.n	8012248 <find_volume+0x114>
 801223a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801223c:	3308      	adds	r3, #8
 801223e:	4618      	mov	r0, r3
 8012240:	f7fd ffae 	bl	80101a0 <ld_dword>
 8012244:	4602      	mov	r2, r0
 8012246:	e000      	b.n	801224a <find_volume+0x116>
 8012248:	2200      	movs	r2, #0
 801224a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801224c:	009b      	lsls	r3, r3, #2
 801224e:	3358      	adds	r3, #88	; 0x58
 8012250:	443b      	add	r3, r7
 8012252:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012258:	3301      	adds	r3, #1
 801225a:	643b      	str	r3, [r7, #64]	; 0x40
 801225c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801225e:	2b03      	cmp	r3, #3
 8012260:	d9dd      	bls.n	801221e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012262:	2300      	movs	r3, #0
 8012264:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012268:	2b00      	cmp	r3, #0
 801226a:	d002      	beq.n	8012272 <find_volume+0x13e>
 801226c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801226e:	3b01      	subs	r3, #1
 8012270:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012274:	009b      	lsls	r3, r3, #2
 8012276:	3358      	adds	r3, #88	; 0x58
 8012278:	443b      	add	r3, r7
 801227a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801227e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012282:	2b00      	cmp	r3, #0
 8012284:	d005      	beq.n	8012292 <find_volume+0x15e>
 8012286:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012288:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801228a:	f7ff fefd 	bl	8012088 <check_fs>
 801228e:	4603      	mov	r3, r0
 8012290:	e000      	b.n	8012294 <find_volume+0x160>
 8012292:	2303      	movs	r3, #3
 8012294:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012298:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801229c:	2b01      	cmp	r3, #1
 801229e:	d905      	bls.n	80122ac <find_volume+0x178>
 80122a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122a2:	3301      	adds	r3, #1
 80122a4:	643b      	str	r3, [r7, #64]	; 0x40
 80122a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122a8:	2b03      	cmp	r3, #3
 80122aa:	d9e2      	bls.n	8012272 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80122ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80122b0:	2b04      	cmp	r3, #4
 80122b2:	d101      	bne.n	80122b8 <find_volume+0x184>
 80122b4:	2301      	movs	r3, #1
 80122b6:	e181      	b.n	80125bc <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80122b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80122bc:	2b01      	cmp	r3, #1
 80122be:	d901      	bls.n	80122c4 <find_volume+0x190>
 80122c0:	230d      	movs	r3, #13
 80122c2:	e17b      	b.n	80125bc <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80122c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122c6:	3334      	adds	r3, #52	; 0x34
 80122c8:	330b      	adds	r3, #11
 80122ca:	4618      	mov	r0, r3
 80122cc:	f7fd ff50 	bl	8010170 <ld_word>
 80122d0:	4603      	mov	r3, r0
 80122d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80122d6:	d001      	beq.n	80122dc <find_volume+0x1a8>
 80122d8:	230d      	movs	r3, #13
 80122da:	e16f      	b.n	80125bc <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80122dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122de:	3334      	adds	r3, #52	; 0x34
 80122e0:	3316      	adds	r3, #22
 80122e2:	4618      	mov	r0, r3
 80122e4:	f7fd ff44 	bl	8010170 <ld_word>
 80122e8:	4603      	mov	r3, r0
 80122ea:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80122ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d106      	bne.n	8012300 <find_volume+0x1cc>
 80122f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122f4:	3334      	adds	r3, #52	; 0x34
 80122f6:	3324      	adds	r3, #36	; 0x24
 80122f8:	4618      	mov	r0, r3
 80122fa:	f7fd ff51 	bl	80101a0 <ld_dword>
 80122fe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012302:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012304:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012308:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 801230c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801230e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012312:	789b      	ldrb	r3, [r3, #2]
 8012314:	2b01      	cmp	r3, #1
 8012316:	d005      	beq.n	8012324 <find_volume+0x1f0>
 8012318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801231a:	789b      	ldrb	r3, [r3, #2]
 801231c:	2b02      	cmp	r3, #2
 801231e:	d001      	beq.n	8012324 <find_volume+0x1f0>
 8012320:	230d      	movs	r3, #13
 8012322:	e14b      	b.n	80125bc <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012326:	789b      	ldrb	r3, [r3, #2]
 8012328:	461a      	mov	r2, r3
 801232a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801232c:	fb02 f303 	mul.w	r3, r2, r3
 8012330:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012334:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012338:	b29a      	uxth	r2, r3
 801233a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801233c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801233e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012340:	895b      	ldrh	r3, [r3, #10]
 8012342:	2b00      	cmp	r3, #0
 8012344:	d008      	beq.n	8012358 <find_volume+0x224>
 8012346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012348:	895b      	ldrh	r3, [r3, #10]
 801234a:	461a      	mov	r2, r3
 801234c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801234e:	895b      	ldrh	r3, [r3, #10]
 8012350:	3b01      	subs	r3, #1
 8012352:	4013      	ands	r3, r2
 8012354:	2b00      	cmp	r3, #0
 8012356:	d001      	beq.n	801235c <find_volume+0x228>
 8012358:	230d      	movs	r3, #13
 801235a:	e12f      	b.n	80125bc <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801235c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801235e:	3334      	adds	r3, #52	; 0x34
 8012360:	3311      	adds	r3, #17
 8012362:	4618      	mov	r0, r3
 8012364:	f7fd ff04 	bl	8010170 <ld_word>
 8012368:	4603      	mov	r3, r0
 801236a:	461a      	mov	r2, r3
 801236c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801236e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012372:	891b      	ldrh	r3, [r3, #8]
 8012374:	f003 030f 	and.w	r3, r3, #15
 8012378:	b29b      	uxth	r3, r3
 801237a:	2b00      	cmp	r3, #0
 801237c:	d001      	beq.n	8012382 <find_volume+0x24e>
 801237e:	230d      	movs	r3, #13
 8012380:	e11c      	b.n	80125bc <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012384:	3334      	adds	r3, #52	; 0x34
 8012386:	3313      	adds	r3, #19
 8012388:	4618      	mov	r0, r3
 801238a:	f7fd fef1 	bl	8010170 <ld_word>
 801238e:	4603      	mov	r3, r0
 8012390:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012394:	2b00      	cmp	r3, #0
 8012396:	d106      	bne.n	80123a6 <find_volume+0x272>
 8012398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801239a:	3334      	adds	r3, #52	; 0x34
 801239c:	3320      	adds	r3, #32
 801239e:	4618      	mov	r0, r3
 80123a0:	f7fd fefe 	bl	80101a0 <ld_dword>
 80123a4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80123a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123a8:	3334      	adds	r3, #52	; 0x34
 80123aa:	330e      	adds	r3, #14
 80123ac:	4618      	mov	r0, r3
 80123ae:	f7fd fedf 	bl	8010170 <ld_word>
 80123b2:	4603      	mov	r3, r0
 80123b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80123b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d101      	bne.n	80123c0 <find_volume+0x28c>
 80123bc:	230d      	movs	r3, #13
 80123be:	e0fd      	b.n	80125bc <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80123c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80123c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123c4:	4413      	add	r3, r2
 80123c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80123c8:	8912      	ldrh	r2, [r2, #8]
 80123ca:	0912      	lsrs	r2, r2, #4
 80123cc:	b292      	uxth	r2, r2
 80123ce:	4413      	add	r3, r2
 80123d0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80123d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80123d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123d6:	429a      	cmp	r2, r3
 80123d8:	d204      	bcs.n	80123e4 <find_volume+0x2b0>
 80123da:	230d      	movs	r3, #13
 80123dc:	e0ee      	b.n	80125bc <find_volume+0x488>
 80123de:	bf00      	nop
 80123e0:	20001e5c 	.word	0x20001e5c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80123e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80123e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123e8:	1ad3      	subs	r3, r2, r3
 80123ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80123ec:	8952      	ldrh	r2, [r2, #10]
 80123ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80123f2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80123f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d101      	bne.n	80123fe <find_volume+0x2ca>
 80123fa:	230d      	movs	r3, #13
 80123fc:	e0de      	b.n	80125bc <find_volume+0x488>
		fmt = FS_FAT32;
 80123fe:	2303      	movs	r3, #3
 8012400:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012406:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801240a:	4293      	cmp	r3, r2
 801240c:	d802      	bhi.n	8012414 <find_volume+0x2e0>
 801240e:	2302      	movs	r3, #2
 8012410:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012416:	f640 72f5 	movw	r2, #4085	; 0xff5
 801241a:	4293      	cmp	r3, r2
 801241c:	d802      	bhi.n	8012424 <find_volume+0x2f0>
 801241e:	2301      	movs	r3, #1
 8012420:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012426:	1c9a      	adds	r2, r3, #2
 8012428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801242a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 801242c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801242e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012430:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012432:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012436:	441a      	add	r2, r3
 8012438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801243a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 801243c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801243e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012440:	441a      	add	r2, r3
 8012442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012444:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8012446:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801244a:	2b03      	cmp	r3, #3
 801244c:	d11e      	bne.n	801248c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801244e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012450:	3334      	adds	r3, #52	; 0x34
 8012452:	332a      	adds	r3, #42	; 0x2a
 8012454:	4618      	mov	r0, r3
 8012456:	f7fd fe8b 	bl	8010170 <ld_word>
 801245a:	4603      	mov	r3, r0
 801245c:	2b00      	cmp	r3, #0
 801245e:	d001      	beq.n	8012464 <find_volume+0x330>
 8012460:	230d      	movs	r3, #13
 8012462:	e0ab      	b.n	80125bc <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012466:	891b      	ldrh	r3, [r3, #8]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d001      	beq.n	8012470 <find_volume+0x33c>
 801246c:	230d      	movs	r3, #13
 801246e:	e0a5      	b.n	80125bc <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012472:	3334      	adds	r3, #52	; 0x34
 8012474:	332c      	adds	r3, #44	; 0x2c
 8012476:	4618      	mov	r0, r3
 8012478:	f7fd fe92 	bl	80101a0 <ld_dword>
 801247c:	4602      	mov	r2, r0
 801247e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012480:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012484:	699b      	ldr	r3, [r3, #24]
 8012486:	009b      	lsls	r3, r3, #2
 8012488:	647b      	str	r3, [r7, #68]	; 0x44
 801248a:	e01f      	b.n	80124cc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801248c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801248e:	891b      	ldrh	r3, [r3, #8]
 8012490:	2b00      	cmp	r3, #0
 8012492:	d101      	bne.n	8012498 <find_volume+0x364>
 8012494:	230d      	movs	r3, #13
 8012496:	e091      	b.n	80125bc <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801249a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801249c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801249e:	441a      	add	r2, r3
 80124a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124a2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80124a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80124a8:	2b02      	cmp	r3, #2
 80124aa:	d103      	bne.n	80124b4 <find_volume+0x380>
 80124ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124ae:	699b      	ldr	r3, [r3, #24]
 80124b0:	005b      	lsls	r3, r3, #1
 80124b2:	e00a      	b.n	80124ca <find_volume+0x396>
 80124b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124b6:	699a      	ldr	r2, [r3, #24]
 80124b8:	4613      	mov	r3, r2
 80124ba:	005b      	lsls	r3, r3, #1
 80124bc:	4413      	add	r3, r2
 80124be:	085a      	lsrs	r2, r3, #1
 80124c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124c2:	699b      	ldr	r3, [r3, #24]
 80124c4:	f003 0301 	and.w	r3, r3, #1
 80124c8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80124ca:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80124cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124ce:	69da      	ldr	r2, [r3, #28]
 80124d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80124d2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80124d6:	0a5b      	lsrs	r3, r3, #9
 80124d8:	429a      	cmp	r2, r3
 80124da:	d201      	bcs.n	80124e0 <find_volume+0x3ac>
 80124dc:	230d      	movs	r3, #13
 80124de:	e06d      	b.n	80125bc <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80124e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124e2:	f04f 32ff 	mov.w	r2, #4294967295
 80124e6:	615a      	str	r2, [r3, #20]
 80124e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124ea:	695a      	ldr	r2, [r3, #20]
 80124ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124ee:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80124f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124f2:	2280      	movs	r2, #128	; 0x80
 80124f4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80124f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80124fa:	2b03      	cmp	r3, #3
 80124fc:	d149      	bne.n	8012592 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80124fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012500:	3334      	adds	r3, #52	; 0x34
 8012502:	3330      	adds	r3, #48	; 0x30
 8012504:	4618      	mov	r0, r3
 8012506:	f7fd fe33 	bl	8010170 <ld_word>
 801250a:	4603      	mov	r3, r0
 801250c:	2b01      	cmp	r3, #1
 801250e:	d140      	bne.n	8012592 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012512:	3301      	adds	r3, #1
 8012514:	4619      	mov	r1, r3
 8012516:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012518:	f7fe f8da 	bl	80106d0 <move_window>
 801251c:	4603      	mov	r3, r0
 801251e:	2b00      	cmp	r3, #0
 8012520:	d137      	bne.n	8012592 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8012522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012524:	2200      	movs	r2, #0
 8012526:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801252a:	3334      	adds	r3, #52	; 0x34
 801252c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012530:	4618      	mov	r0, r3
 8012532:	f7fd fe1d 	bl	8010170 <ld_word>
 8012536:	4603      	mov	r3, r0
 8012538:	461a      	mov	r2, r3
 801253a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801253e:	429a      	cmp	r2, r3
 8012540:	d127      	bne.n	8012592 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012544:	3334      	adds	r3, #52	; 0x34
 8012546:	4618      	mov	r0, r3
 8012548:	f7fd fe2a 	bl	80101a0 <ld_dword>
 801254c:	4603      	mov	r3, r0
 801254e:	4a1d      	ldr	r2, [pc, #116]	; (80125c4 <find_volume+0x490>)
 8012550:	4293      	cmp	r3, r2
 8012552:	d11e      	bne.n	8012592 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012556:	3334      	adds	r3, #52	; 0x34
 8012558:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801255c:	4618      	mov	r0, r3
 801255e:	f7fd fe1f 	bl	80101a0 <ld_dword>
 8012562:	4603      	mov	r3, r0
 8012564:	4a18      	ldr	r2, [pc, #96]	; (80125c8 <find_volume+0x494>)
 8012566:	4293      	cmp	r3, r2
 8012568:	d113      	bne.n	8012592 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801256a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801256c:	3334      	adds	r3, #52	; 0x34
 801256e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012572:	4618      	mov	r0, r3
 8012574:	f7fd fe14 	bl	80101a0 <ld_dword>
 8012578:	4602      	mov	r2, r0
 801257a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801257c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801257e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012580:	3334      	adds	r3, #52	; 0x34
 8012582:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012586:	4618      	mov	r0, r3
 8012588:	f7fd fe0a 	bl	80101a0 <ld_dword>
 801258c:	4602      	mov	r2, r0
 801258e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012590:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012594:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012598:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801259a:	4b0c      	ldr	r3, [pc, #48]	; (80125cc <find_volume+0x498>)
 801259c:	881b      	ldrh	r3, [r3, #0]
 801259e:	3301      	adds	r3, #1
 80125a0:	b29a      	uxth	r2, r3
 80125a2:	4b0a      	ldr	r3, [pc, #40]	; (80125cc <find_volume+0x498>)
 80125a4:	801a      	strh	r2, [r3, #0]
 80125a6:	4b09      	ldr	r3, [pc, #36]	; (80125cc <find_volume+0x498>)
 80125a8:	881a      	ldrh	r2, [r3, #0]
 80125aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125ac:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80125ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125b0:	4a07      	ldr	r2, [pc, #28]	; (80125d0 <find_volume+0x49c>)
 80125b2:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80125b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80125b6:	f7fe f823 	bl	8010600 <clear_lock>
#endif
	return FR_OK;
 80125ba:	2300      	movs	r3, #0
}
 80125bc:	4618      	mov	r0, r3
 80125be:	3758      	adds	r7, #88	; 0x58
 80125c0:	46bd      	mov	sp, r7
 80125c2:	bd80      	pop	{r7, pc}
 80125c4:	41615252 	.word	0x41615252
 80125c8:	61417272 	.word	0x61417272
 80125cc:	20001e60 	.word	0x20001e60
 80125d0:	20001e84 	.word	0x20001e84

080125d4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80125d4:	b580      	push	{r7, lr}
 80125d6:	b084      	sub	sp, #16
 80125d8:	af00      	add	r7, sp, #0
 80125da:	6078      	str	r0, [r7, #4]
 80125dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80125de:	2309      	movs	r3, #9
 80125e0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d01c      	beq.n	8012622 <validate+0x4e>
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d018      	beq.n	8012622 <validate+0x4e>
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	781b      	ldrb	r3, [r3, #0]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d013      	beq.n	8012622 <validate+0x4e>
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	889a      	ldrh	r2, [r3, #4]
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	88db      	ldrh	r3, [r3, #6]
 8012604:	429a      	cmp	r2, r3
 8012606:	d10c      	bne.n	8012622 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	785b      	ldrb	r3, [r3, #1]
 801260e:	4618      	mov	r0, r3
 8012610:	f7fd fd10 	bl	8010034 <disk_status>
 8012614:	4603      	mov	r3, r0
 8012616:	f003 0301 	and.w	r3, r3, #1
 801261a:	2b00      	cmp	r3, #0
 801261c:	d101      	bne.n	8012622 <validate+0x4e>
			res = FR_OK;
 801261e:	2300      	movs	r3, #0
 8012620:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012622:	7bfb      	ldrb	r3, [r7, #15]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d102      	bne.n	801262e <validate+0x5a>
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	e000      	b.n	8012630 <validate+0x5c>
 801262e:	2300      	movs	r3, #0
 8012630:	683a      	ldr	r2, [r7, #0]
 8012632:	6013      	str	r3, [r2, #0]
	return res;
 8012634:	7bfb      	ldrb	r3, [r7, #15]
}
 8012636:	4618      	mov	r0, r3
 8012638:	3710      	adds	r7, #16
 801263a:	46bd      	mov	sp, r7
 801263c:	bd80      	pop	{r7, pc}
	...

08012640 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012640:	b580      	push	{r7, lr}
 8012642:	b088      	sub	sp, #32
 8012644:	af00      	add	r7, sp, #0
 8012646:	60f8      	str	r0, [r7, #12]
 8012648:	60b9      	str	r1, [r7, #8]
 801264a:	4613      	mov	r3, r2
 801264c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801264e:	68bb      	ldr	r3, [r7, #8]
 8012650:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012652:	f107 0310 	add.w	r3, r7, #16
 8012656:	4618      	mov	r0, r3
 8012658:	f7ff fcd1 	bl	8011ffe <get_ldnumber>
 801265c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801265e:	69fb      	ldr	r3, [r7, #28]
 8012660:	2b00      	cmp	r3, #0
 8012662:	da01      	bge.n	8012668 <f_mount+0x28>
 8012664:	230b      	movs	r3, #11
 8012666:	e02b      	b.n	80126c0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012668:	4a17      	ldr	r2, [pc, #92]	; (80126c8 <f_mount+0x88>)
 801266a:	69fb      	ldr	r3, [r7, #28]
 801266c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012670:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012672:	69bb      	ldr	r3, [r7, #24]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d005      	beq.n	8012684 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012678:	69b8      	ldr	r0, [r7, #24]
 801267a:	f7fd ffc1 	bl	8010600 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801267e:	69bb      	ldr	r3, [r7, #24]
 8012680:	2200      	movs	r2, #0
 8012682:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d002      	beq.n	8012690 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	2200      	movs	r2, #0
 801268e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012690:	68fa      	ldr	r2, [r7, #12]
 8012692:	490d      	ldr	r1, [pc, #52]	; (80126c8 <f_mount+0x88>)
 8012694:	69fb      	ldr	r3, [r7, #28]
 8012696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	2b00      	cmp	r3, #0
 801269e:	d002      	beq.n	80126a6 <f_mount+0x66>
 80126a0:	79fb      	ldrb	r3, [r7, #7]
 80126a2:	2b01      	cmp	r3, #1
 80126a4:	d001      	beq.n	80126aa <f_mount+0x6a>
 80126a6:	2300      	movs	r3, #0
 80126a8:	e00a      	b.n	80126c0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80126aa:	f107 010c 	add.w	r1, r7, #12
 80126ae:	f107 0308 	add.w	r3, r7, #8
 80126b2:	2200      	movs	r2, #0
 80126b4:	4618      	mov	r0, r3
 80126b6:	f7ff fd3d 	bl	8012134 <find_volume>
 80126ba:	4603      	mov	r3, r0
 80126bc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80126be:	7dfb      	ldrb	r3, [r7, #23]
}
 80126c0:	4618      	mov	r0, r3
 80126c2:	3720      	adds	r7, #32
 80126c4:	46bd      	mov	sp, r7
 80126c6:	bd80      	pop	{r7, pc}
 80126c8:	20001e5c 	.word	0x20001e5c

080126cc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80126cc:	b580      	push	{r7, lr}
 80126ce:	b09a      	sub	sp, #104	; 0x68
 80126d0:	af00      	add	r7, sp, #0
 80126d2:	60f8      	str	r0, [r7, #12]
 80126d4:	60b9      	str	r1, [r7, #8]
 80126d6:	4613      	mov	r3, r2
 80126d8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d101      	bne.n	80126e4 <f_open+0x18>
 80126e0:	2309      	movs	r3, #9
 80126e2:	e1ad      	b.n	8012a40 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80126e4:	79fb      	ldrb	r3, [r7, #7]
 80126e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80126ea:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80126ec:	79fa      	ldrb	r2, [r7, #7]
 80126ee:	f107 0114 	add.w	r1, r7, #20
 80126f2:	f107 0308 	add.w	r3, r7, #8
 80126f6:	4618      	mov	r0, r3
 80126f8:	f7ff fd1c 	bl	8012134 <find_volume>
 80126fc:	4603      	mov	r3, r0
 80126fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8012702:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012706:	2b00      	cmp	r3, #0
 8012708:	f040 8191 	bne.w	8012a2e <f_open+0x362>
		dj.obj.fs = fs;
 801270c:	697b      	ldr	r3, [r7, #20]
 801270e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012710:	68ba      	ldr	r2, [r7, #8]
 8012712:	f107 0318 	add.w	r3, r7, #24
 8012716:	4611      	mov	r1, r2
 8012718:	4618      	mov	r0, r3
 801271a:	f7ff fbff 	bl	8011f1c <follow_path>
 801271e:	4603      	mov	r3, r0
 8012720:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012724:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012728:	2b00      	cmp	r3, #0
 801272a:	d11a      	bne.n	8012762 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801272c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012730:	b25b      	sxtb	r3, r3
 8012732:	2b00      	cmp	r3, #0
 8012734:	da03      	bge.n	801273e <f_open+0x72>
				res = FR_INVALID_NAME;
 8012736:	2306      	movs	r3, #6
 8012738:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801273c:	e011      	b.n	8012762 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801273e:	79fb      	ldrb	r3, [r7, #7]
 8012740:	f023 0301 	bic.w	r3, r3, #1
 8012744:	2b00      	cmp	r3, #0
 8012746:	bf14      	ite	ne
 8012748:	2301      	movne	r3, #1
 801274a:	2300      	moveq	r3, #0
 801274c:	b2db      	uxtb	r3, r3
 801274e:	461a      	mov	r2, r3
 8012750:	f107 0318 	add.w	r3, r7, #24
 8012754:	4611      	mov	r1, r2
 8012756:	4618      	mov	r0, r3
 8012758:	f7fd fe0a 	bl	8010370 <chk_lock>
 801275c:	4603      	mov	r3, r0
 801275e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012762:	79fb      	ldrb	r3, [r7, #7]
 8012764:	f003 031c 	and.w	r3, r3, #28
 8012768:	2b00      	cmp	r3, #0
 801276a:	d07f      	beq.n	801286c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 801276c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012770:	2b00      	cmp	r3, #0
 8012772:	d017      	beq.n	80127a4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012774:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012778:	2b04      	cmp	r3, #4
 801277a:	d10e      	bne.n	801279a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801277c:	f7fd fe54 	bl	8010428 <enq_lock>
 8012780:	4603      	mov	r3, r0
 8012782:	2b00      	cmp	r3, #0
 8012784:	d006      	beq.n	8012794 <f_open+0xc8>
 8012786:	f107 0318 	add.w	r3, r7, #24
 801278a:	4618      	mov	r0, r3
 801278c:	f7ff f838 	bl	8011800 <dir_register>
 8012790:	4603      	mov	r3, r0
 8012792:	e000      	b.n	8012796 <f_open+0xca>
 8012794:	2312      	movs	r3, #18
 8012796:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801279a:	79fb      	ldrb	r3, [r7, #7]
 801279c:	f043 0308 	orr.w	r3, r3, #8
 80127a0:	71fb      	strb	r3, [r7, #7]
 80127a2:	e010      	b.n	80127c6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80127a4:	7fbb      	ldrb	r3, [r7, #30]
 80127a6:	f003 0311 	and.w	r3, r3, #17
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d003      	beq.n	80127b6 <f_open+0xea>
					res = FR_DENIED;
 80127ae:	2307      	movs	r3, #7
 80127b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80127b4:	e007      	b.n	80127c6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80127b6:	79fb      	ldrb	r3, [r7, #7]
 80127b8:	f003 0304 	and.w	r3, r3, #4
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d002      	beq.n	80127c6 <f_open+0xfa>
 80127c0:	2308      	movs	r3, #8
 80127c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80127c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d168      	bne.n	80128a0 <f_open+0x1d4>
 80127ce:	79fb      	ldrb	r3, [r7, #7]
 80127d0:	f003 0308 	and.w	r3, r3, #8
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d063      	beq.n	80128a0 <f_open+0x1d4>
				dw = GET_FATTIME();
 80127d8:	f7fa fb1e 	bl	800ce18 <get_fattime>
 80127dc:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80127de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127e0:	330e      	adds	r3, #14
 80127e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80127e4:	4618      	mov	r0, r3
 80127e6:	f7fd fd19 	bl	801021c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80127ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127ec:	3316      	adds	r3, #22
 80127ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80127f0:	4618      	mov	r0, r3
 80127f2:	f7fd fd13 	bl	801021c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80127f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127f8:	330b      	adds	r3, #11
 80127fa:	2220      	movs	r2, #32
 80127fc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80127fe:	697b      	ldr	r3, [r7, #20]
 8012800:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012802:	4611      	mov	r1, r2
 8012804:	4618      	mov	r0, r3
 8012806:	f7fe fc6a 	bl	80110de <ld_clust>
 801280a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801280c:	697b      	ldr	r3, [r7, #20]
 801280e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012810:	2200      	movs	r2, #0
 8012812:	4618      	mov	r0, r3
 8012814:	f7fe fc82 	bl	801111c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801281a:	331c      	adds	r3, #28
 801281c:	2100      	movs	r1, #0
 801281e:	4618      	mov	r0, r3
 8012820:	f7fd fcfc 	bl	801021c <st_dword>
					fs->wflag = 1;
 8012824:	697b      	ldr	r3, [r7, #20]
 8012826:	2201      	movs	r2, #1
 8012828:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801282a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801282c:	2b00      	cmp	r3, #0
 801282e:	d037      	beq.n	80128a0 <f_open+0x1d4>
						dw = fs->winsect;
 8012830:	697b      	ldr	r3, [r7, #20]
 8012832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012834:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8012836:	f107 0318 	add.w	r3, r7, #24
 801283a:	2200      	movs	r2, #0
 801283c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801283e:	4618      	mov	r0, r3
 8012840:	f7fe f995 	bl	8010b6e <remove_chain>
 8012844:	4603      	mov	r3, r0
 8012846:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 801284a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801284e:	2b00      	cmp	r3, #0
 8012850:	d126      	bne.n	80128a0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8012852:	697b      	ldr	r3, [r7, #20]
 8012854:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012856:	4618      	mov	r0, r3
 8012858:	f7fd ff3a 	bl	80106d0 <move_window>
 801285c:	4603      	mov	r3, r0
 801285e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012862:	697b      	ldr	r3, [r7, #20]
 8012864:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012866:	3a01      	subs	r2, #1
 8012868:	611a      	str	r2, [r3, #16]
 801286a:	e019      	b.n	80128a0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801286c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012870:	2b00      	cmp	r3, #0
 8012872:	d115      	bne.n	80128a0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012874:	7fbb      	ldrb	r3, [r7, #30]
 8012876:	f003 0310 	and.w	r3, r3, #16
 801287a:	2b00      	cmp	r3, #0
 801287c:	d003      	beq.n	8012886 <f_open+0x1ba>
					res = FR_NO_FILE;
 801287e:	2304      	movs	r3, #4
 8012880:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8012884:	e00c      	b.n	80128a0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012886:	79fb      	ldrb	r3, [r7, #7]
 8012888:	f003 0302 	and.w	r3, r3, #2
 801288c:	2b00      	cmp	r3, #0
 801288e:	d007      	beq.n	80128a0 <f_open+0x1d4>
 8012890:	7fbb      	ldrb	r3, [r7, #30]
 8012892:	f003 0301 	and.w	r3, r3, #1
 8012896:	2b00      	cmp	r3, #0
 8012898:	d002      	beq.n	80128a0 <f_open+0x1d4>
						res = FR_DENIED;
 801289a:	2307      	movs	r3, #7
 801289c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80128a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d128      	bne.n	80128fa <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80128a8:	79fb      	ldrb	r3, [r7, #7]
 80128aa:	f003 0308 	and.w	r3, r3, #8
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d003      	beq.n	80128ba <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80128b2:	79fb      	ldrb	r3, [r7, #7]
 80128b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80128b8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80128ba:	697b      	ldr	r3, [r7, #20]
 80128bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80128c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80128c8:	79fb      	ldrb	r3, [r7, #7]
 80128ca:	f023 0301 	bic.w	r3, r3, #1
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	bf14      	ite	ne
 80128d2:	2301      	movne	r3, #1
 80128d4:	2300      	moveq	r3, #0
 80128d6:	b2db      	uxtb	r3, r3
 80128d8:	461a      	mov	r2, r3
 80128da:	f107 0318 	add.w	r3, r7, #24
 80128de:	4611      	mov	r1, r2
 80128e0:	4618      	mov	r0, r3
 80128e2:	f7fd fdc3 	bl	801046c <inc_lock>
 80128e6:	4602      	mov	r2, r0
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	691b      	ldr	r3, [r3, #16]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d102      	bne.n	80128fa <f_open+0x22e>
 80128f4:	2302      	movs	r3, #2
 80128f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80128fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80128fe:	2b00      	cmp	r3, #0
 8012900:	f040 8095 	bne.w	8012a2e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012904:	697b      	ldr	r3, [r7, #20]
 8012906:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012908:	4611      	mov	r1, r2
 801290a:	4618      	mov	r0, r3
 801290c:	f7fe fbe7 	bl	80110de <ld_clust>
 8012910:	4602      	mov	r2, r0
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012918:	331c      	adds	r3, #28
 801291a:	4618      	mov	r0, r3
 801291c:	f7fd fc40 	bl	80101a0 <ld_dword>
 8012920:	4602      	mov	r2, r0
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	2200      	movs	r2, #0
 801292a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801292c:	697a      	ldr	r2, [r7, #20]
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012932:	697b      	ldr	r3, [r7, #20]
 8012934:	88da      	ldrh	r2, [r3, #6]
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	79fa      	ldrb	r2, [r7, #7]
 801293e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	2200      	movs	r2, #0
 8012944:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	2200      	movs	r2, #0
 801294a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	2200      	movs	r2, #0
 8012950:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	3330      	adds	r3, #48	; 0x30
 8012956:	f44f 7200 	mov.w	r2, #512	; 0x200
 801295a:	2100      	movs	r1, #0
 801295c:	4618      	mov	r0, r3
 801295e:	f7fd fcaa 	bl	80102b6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012962:	79fb      	ldrb	r3, [r7, #7]
 8012964:	f003 0320 	and.w	r3, r3, #32
 8012968:	2b00      	cmp	r3, #0
 801296a:	d060      	beq.n	8012a2e <f_open+0x362>
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	68db      	ldr	r3, [r3, #12]
 8012970:	2b00      	cmp	r3, #0
 8012972:	d05c      	beq.n	8012a2e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	68da      	ldr	r2, [r3, #12]
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801297c:	697b      	ldr	r3, [r7, #20]
 801297e:	895b      	ldrh	r3, [r3, #10]
 8012980:	025b      	lsls	r3, r3, #9
 8012982:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	689b      	ldr	r3, [r3, #8]
 8012988:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	68db      	ldr	r3, [r3, #12]
 801298e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012990:	e016      	b.n	80129c0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8012996:	4618      	mov	r0, r3
 8012998:	f7fd ff55 	bl	8010846 <get_fat>
 801299c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801299e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80129a0:	2b01      	cmp	r3, #1
 80129a2:	d802      	bhi.n	80129aa <f_open+0x2de>
 80129a4:	2302      	movs	r3, #2
 80129a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80129aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80129ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129b0:	d102      	bne.n	80129b8 <f_open+0x2ec>
 80129b2:	2301      	movs	r3, #1
 80129b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80129b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80129ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129bc:	1ad3      	subs	r3, r2, r3
 80129be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80129c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d103      	bne.n	80129d0 <f_open+0x304>
 80129c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80129ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129cc:	429a      	cmp	r2, r3
 80129ce:	d8e0      	bhi.n	8012992 <f_open+0x2c6>
				}
				fp->clust = clst;
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80129d4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80129d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d127      	bne.n	8012a2e <f_open+0x362>
 80129de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80129e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d022      	beq.n	8012a2e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80129e8:	697b      	ldr	r3, [r7, #20]
 80129ea:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80129ec:	4618      	mov	r0, r3
 80129ee:	f7fd ff0b 	bl	8010808 <clust2sect>
 80129f2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80129f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d103      	bne.n	8012a02 <f_open+0x336>
						res = FR_INT_ERR;
 80129fa:	2302      	movs	r3, #2
 80129fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8012a00:	e015      	b.n	8012a2e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012a02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012a04:	0a5a      	lsrs	r2, r3, #9
 8012a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a08:	441a      	add	r2, r3
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012a0e:	697b      	ldr	r3, [r7, #20]
 8012a10:	7858      	ldrb	r0, [r3, #1]
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	6a1a      	ldr	r2, [r3, #32]
 8012a1c:	2301      	movs	r3, #1
 8012a1e:	f7fd fb49 	bl	80100b4 <disk_read>
 8012a22:	4603      	mov	r3, r0
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d002      	beq.n	8012a2e <f_open+0x362>
 8012a28:	2301      	movs	r3, #1
 8012a2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012a2e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d002      	beq.n	8012a3c <f_open+0x370>
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	2200      	movs	r2, #0
 8012a3a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012a3c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8012a40:	4618      	mov	r0, r3
 8012a42:	3768      	adds	r7, #104	; 0x68
 8012a44:	46bd      	mov	sp, r7
 8012a46:	bd80      	pop	{r7, pc}

08012a48 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	b08e      	sub	sp, #56	; 0x38
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	60f8      	str	r0, [r7, #12]
 8012a50:	60b9      	str	r1, [r7, #8]
 8012a52:	607a      	str	r2, [r7, #4]
 8012a54:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8012a56:	68bb      	ldr	r3, [r7, #8]
 8012a58:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8012a5a:	683b      	ldr	r3, [r7, #0]
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	f107 0214 	add.w	r2, r7, #20
 8012a66:	4611      	mov	r1, r2
 8012a68:	4618      	mov	r0, r3
 8012a6a:	f7ff fdb3 	bl	80125d4 <validate>
 8012a6e:	4603      	mov	r3, r0
 8012a70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012a74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d107      	bne.n	8012a8c <f_read+0x44>
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	7d5b      	ldrb	r3, [r3, #21]
 8012a80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012a84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d002      	beq.n	8012a92 <f_read+0x4a>
 8012a8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012a90:	e115      	b.n	8012cbe <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	7d1b      	ldrb	r3, [r3, #20]
 8012a96:	f003 0301 	and.w	r3, r3, #1
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d101      	bne.n	8012aa2 <f_read+0x5a>
 8012a9e:	2307      	movs	r3, #7
 8012aa0:	e10d      	b.n	8012cbe <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	68da      	ldr	r2, [r3, #12]
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	699b      	ldr	r3, [r3, #24]
 8012aaa:	1ad3      	subs	r3, r2, r3
 8012aac:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8012aae:	687a      	ldr	r2, [r7, #4]
 8012ab0:	6a3b      	ldr	r3, [r7, #32]
 8012ab2:	429a      	cmp	r2, r3
 8012ab4:	f240 80fe 	bls.w	8012cb4 <f_read+0x26c>
 8012ab8:	6a3b      	ldr	r3, [r7, #32]
 8012aba:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8012abc:	e0fa      	b.n	8012cb4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	699b      	ldr	r3, [r3, #24]
 8012ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	f040 80c6 	bne.w	8012c58 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	699b      	ldr	r3, [r3, #24]
 8012ad0:	0a5b      	lsrs	r3, r3, #9
 8012ad2:	697a      	ldr	r2, [r7, #20]
 8012ad4:	8952      	ldrh	r2, [r2, #10]
 8012ad6:	3a01      	subs	r2, #1
 8012ad8:	4013      	ands	r3, r2
 8012ada:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8012adc:	69fb      	ldr	r3, [r7, #28]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d12f      	bne.n	8012b42 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	699b      	ldr	r3, [r3, #24]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d103      	bne.n	8012af2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	689b      	ldr	r3, [r3, #8]
 8012aee:	633b      	str	r3, [r7, #48]	; 0x30
 8012af0:	e013      	b.n	8012b1a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d007      	beq.n	8012b0a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	699b      	ldr	r3, [r3, #24]
 8012afe:	4619      	mov	r1, r3
 8012b00:	68f8      	ldr	r0, [r7, #12]
 8012b02:	f7fe f931 	bl	8010d68 <clmt_clust>
 8012b06:	6338      	str	r0, [r7, #48]	; 0x30
 8012b08:	e007      	b.n	8012b1a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8012b0a:	68fa      	ldr	r2, [r7, #12]
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	69db      	ldr	r3, [r3, #28]
 8012b10:	4619      	mov	r1, r3
 8012b12:	4610      	mov	r0, r2
 8012b14:	f7fd fe97 	bl	8010846 <get_fat>
 8012b18:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8012b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b1c:	2b01      	cmp	r3, #1
 8012b1e:	d804      	bhi.n	8012b2a <f_read+0xe2>
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	2202      	movs	r2, #2
 8012b24:	755a      	strb	r2, [r3, #21]
 8012b26:	2302      	movs	r3, #2
 8012b28:	e0c9      	b.n	8012cbe <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b30:	d104      	bne.n	8012b3c <f_read+0xf4>
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	2201      	movs	r2, #1
 8012b36:	755a      	strb	r2, [r3, #21]
 8012b38:	2301      	movs	r3, #1
 8012b3a:	e0c0      	b.n	8012cbe <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b40:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012b42:	697a      	ldr	r2, [r7, #20]
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	69db      	ldr	r3, [r3, #28]
 8012b48:	4619      	mov	r1, r3
 8012b4a:	4610      	mov	r0, r2
 8012b4c:	f7fd fe5c 	bl	8010808 <clust2sect>
 8012b50:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012b52:	69bb      	ldr	r3, [r7, #24]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d104      	bne.n	8012b62 <f_read+0x11a>
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	2202      	movs	r2, #2
 8012b5c:	755a      	strb	r2, [r3, #21]
 8012b5e:	2302      	movs	r3, #2
 8012b60:	e0ad      	b.n	8012cbe <f_read+0x276>
			sect += csect;
 8012b62:	69ba      	ldr	r2, [r7, #24]
 8012b64:	69fb      	ldr	r3, [r7, #28]
 8012b66:	4413      	add	r3, r2
 8012b68:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	0a5b      	lsrs	r3, r3, #9
 8012b6e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8012b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d039      	beq.n	8012bea <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012b76:	69fa      	ldr	r2, [r7, #28]
 8012b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b7a:	4413      	add	r3, r2
 8012b7c:	697a      	ldr	r2, [r7, #20]
 8012b7e:	8952      	ldrh	r2, [r2, #10]
 8012b80:	4293      	cmp	r3, r2
 8012b82:	d905      	bls.n	8012b90 <f_read+0x148>
					cc = fs->csize - csect;
 8012b84:	697b      	ldr	r3, [r7, #20]
 8012b86:	895b      	ldrh	r3, [r3, #10]
 8012b88:	461a      	mov	r2, r3
 8012b8a:	69fb      	ldr	r3, [r7, #28]
 8012b8c:	1ad3      	subs	r3, r2, r3
 8012b8e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012b90:	697b      	ldr	r3, [r7, #20]
 8012b92:	7858      	ldrb	r0, [r3, #1]
 8012b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b96:	69ba      	ldr	r2, [r7, #24]
 8012b98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012b9a:	f7fd fa8b 	bl	80100b4 <disk_read>
 8012b9e:	4603      	mov	r3, r0
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d004      	beq.n	8012bae <f_read+0x166>
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	2201      	movs	r2, #1
 8012ba8:	755a      	strb	r2, [r3, #21]
 8012baa:	2301      	movs	r3, #1
 8012bac:	e087      	b.n	8012cbe <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	7d1b      	ldrb	r3, [r3, #20]
 8012bb2:	b25b      	sxtb	r3, r3
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	da14      	bge.n	8012be2 <f_read+0x19a>
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	6a1a      	ldr	r2, [r3, #32]
 8012bbc:	69bb      	ldr	r3, [r7, #24]
 8012bbe:	1ad3      	subs	r3, r2, r3
 8012bc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012bc2:	429a      	cmp	r2, r3
 8012bc4:	d90d      	bls.n	8012be2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	6a1a      	ldr	r2, [r3, #32]
 8012bca:	69bb      	ldr	r3, [r7, #24]
 8012bcc:	1ad3      	subs	r3, r2, r3
 8012bce:	025b      	lsls	r3, r3, #9
 8012bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012bd2:	18d0      	adds	r0, r2, r3
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	3330      	adds	r3, #48	; 0x30
 8012bd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012bdc:	4619      	mov	r1, r3
 8012bde:	f7fd fb49 	bl	8010274 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8012be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012be4:	025b      	lsls	r3, r3, #9
 8012be6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8012be8:	e050      	b.n	8012c8c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	6a1b      	ldr	r3, [r3, #32]
 8012bee:	69ba      	ldr	r2, [r7, #24]
 8012bf0:	429a      	cmp	r2, r3
 8012bf2:	d02e      	beq.n	8012c52 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	7d1b      	ldrb	r3, [r3, #20]
 8012bf8:	b25b      	sxtb	r3, r3
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	da18      	bge.n	8012c30 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012bfe:	697b      	ldr	r3, [r7, #20]
 8012c00:	7858      	ldrb	r0, [r3, #1]
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	6a1a      	ldr	r2, [r3, #32]
 8012c0c:	2301      	movs	r3, #1
 8012c0e:	f7fd fa71 	bl	80100f4 <disk_write>
 8012c12:	4603      	mov	r3, r0
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d004      	beq.n	8012c22 <f_read+0x1da>
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	2201      	movs	r2, #1
 8012c1c:	755a      	strb	r2, [r3, #21]
 8012c1e:	2301      	movs	r3, #1
 8012c20:	e04d      	b.n	8012cbe <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	7d1b      	ldrb	r3, [r3, #20]
 8012c26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012c2a:	b2da      	uxtb	r2, r3
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012c30:	697b      	ldr	r3, [r7, #20]
 8012c32:	7858      	ldrb	r0, [r3, #1]
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012c3a:	2301      	movs	r3, #1
 8012c3c:	69ba      	ldr	r2, [r7, #24]
 8012c3e:	f7fd fa39 	bl	80100b4 <disk_read>
 8012c42:	4603      	mov	r3, r0
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d004      	beq.n	8012c52 <f_read+0x20a>
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	2201      	movs	r2, #1
 8012c4c:	755a      	strb	r2, [r3, #21]
 8012c4e:	2301      	movs	r3, #1
 8012c50:	e035      	b.n	8012cbe <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	69ba      	ldr	r2, [r7, #24]
 8012c56:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	699b      	ldr	r3, [r3, #24]
 8012c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c60:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8012c64:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8012c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	429a      	cmp	r2, r3
 8012c6c:	d901      	bls.n	8012c72 <f_read+0x22a>
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	699b      	ldr	r3, [r3, #24]
 8012c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c80:	4413      	add	r3, r2
 8012c82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012c84:	4619      	mov	r1, r3
 8012c86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012c88:	f7fd faf4 	bl	8010274 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8012c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c90:	4413      	add	r3, r2
 8012c92:	627b      	str	r3, [r7, #36]	; 0x24
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	699a      	ldr	r2, [r3, #24]
 8012c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c9a:	441a      	add	r2, r3
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	619a      	str	r2, [r3, #24]
 8012ca0:	683b      	ldr	r3, [r7, #0]
 8012ca2:	681a      	ldr	r2, [r3, #0]
 8012ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ca6:	441a      	add	r2, r3
 8012ca8:	683b      	ldr	r3, [r7, #0]
 8012caa:	601a      	str	r2, [r3, #0]
 8012cac:	687a      	ldr	r2, [r7, #4]
 8012cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cb0:	1ad3      	subs	r3, r2, r3
 8012cb2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	f47f af01 	bne.w	8012abe <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8012cbc:	2300      	movs	r3, #0
}
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	3738      	adds	r7, #56	; 0x38
 8012cc2:	46bd      	mov	sp, r7
 8012cc4:	bd80      	pop	{r7, pc}

08012cc6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012cc6:	b580      	push	{r7, lr}
 8012cc8:	b086      	sub	sp, #24
 8012cca:	af00      	add	r7, sp, #0
 8012ccc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	f107 0208 	add.w	r2, r7, #8
 8012cd4:	4611      	mov	r1, r2
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	f7ff fc7c 	bl	80125d4 <validate>
 8012cdc:	4603      	mov	r3, r0
 8012cde:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012ce0:	7dfb      	ldrb	r3, [r7, #23]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d168      	bne.n	8012db8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	7d1b      	ldrb	r3, [r3, #20]
 8012cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d062      	beq.n	8012db8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	7d1b      	ldrb	r3, [r3, #20]
 8012cf6:	b25b      	sxtb	r3, r3
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	da15      	bge.n	8012d28 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012cfc:	68bb      	ldr	r3, [r7, #8]
 8012cfe:	7858      	ldrb	r0, [r3, #1]
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	6a1a      	ldr	r2, [r3, #32]
 8012d0a:	2301      	movs	r3, #1
 8012d0c:	f7fd f9f2 	bl	80100f4 <disk_write>
 8012d10:	4603      	mov	r3, r0
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d001      	beq.n	8012d1a <f_sync+0x54>
 8012d16:	2301      	movs	r3, #1
 8012d18:	e04f      	b.n	8012dba <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	7d1b      	ldrb	r3, [r3, #20]
 8012d1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012d22:	b2da      	uxtb	r2, r3
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8012d28:	f7fa f876 	bl	800ce18 <get_fattime>
 8012d2c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8012d2e:	68ba      	ldr	r2, [r7, #8]
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d34:	4619      	mov	r1, r3
 8012d36:	4610      	mov	r0, r2
 8012d38:	f7fd fcca 	bl	80106d0 <move_window>
 8012d3c:	4603      	mov	r3, r0
 8012d3e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8012d40:	7dfb      	ldrb	r3, [r7, #23]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d138      	bne.n	8012db8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d4a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	330b      	adds	r3, #11
 8012d50:	781a      	ldrb	r2, [r3, #0]
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	330b      	adds	r3, #11
 8012d56:	f042 0220 	orr.w	r2, r2, #32
 8012d5a:	b2d2      	uxtb	r2, r2
 8012d5c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	6818      	ldr	r0, [r3, #0]
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	689b      	ldr	r3, [r3, #8]
 8012d66:	461a      	mov	r2, r3
 8012d68:	68f9      	ldr	r1, [r7, #12]
 8012d6a:	f7fe f9d7 	bl	801111c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	f103 021c 	add.w	r2, r3, #28
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	68db      	ldr	r3, [r3, #12]
 8012d78:	4619      	mov	r1, r3
 8012d7a:	4610      	mov	r0, r2
 8012d7c:	f7fd fa4e 	bl	801021c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	3316      	adds	r3, #22
 8012d84:	6939      	ldr	r1, [r7, #16]
 8012d86:	4618      	mov	r0, r3
 8012d88:	f7fd fa48 	bl	801021c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	3312      	adds	r3, #18
 8012d90:	2100      	movs	r1, #0
 8012d92:	4618      	mov	r0, r3
 8012d94:	f7fd fa27 	bl	80101e6 <st_word>
					fs->wflag = 1;
 8012d98:	68bb      	ldr	r3, [r7, #8]
 8012d9a:	2201      	movs	r2, #1
 8012d9c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012d9e:	68bb      	ldr	r3, [r7, #8]
 8012da0:	4618      	mov	r0, r3
 8012da2:	f7fd fcc3 	bl	801072c <sync_fs>
 8012da6:	4603      	mov	r3, r0
 8012da8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	7d1b      	ldrb	r3, [r3, #20]
 8012dae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012db2:	b2da      	uxtb	r2, r3
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8012db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8012dba:	4618      	mov	r0, r3
 8012dbc:	3718      	adds	r7, #24
 8012dbe:	46bd      	mov	sp, r7
 8012dc0:	bd80      	pop	{r7, pc}

08012dc2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8012dc2:	b580      	push	{r7, lr}
 8012dc4:	b084      	sub	sp, #16
 8012dc6:	af00      	add	r7, sp, #0
 8012dc8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8012dca:	6878      	ldr	r0, [r7, #4]
 8012dcc:	f7ff ff7b 	bl	8012cc6 <f_sync>
 8012dd0:	4603      	mov	r3, r0
 8012dd2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8012dd4:	7bfb      	ldrb	r3, [r7, #15]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d118      	bne.n	8012e0c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	f107 0208 	add.w	r2, r7, #8
 8012de0:	4611      	mov	r1, r2
 8012de2:	4618      	mov	r0, r3
 8012de4:	f7ff fbf6 	bl	80125d4 <validate>
 8012de8:	4603      	mov	r3, r0
 8012dea:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012dec:	7bfb      	ldrb	r3, [r7, #15]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d10c      	bne.n	8012e0c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	691b      	ldr	r3, [r3, #16]
 8012df6:	4618      	mov	r0, r3
 8012df8:	f7fd fbc6 	bl	8010588 <dec_lock>
 8012dfc:	4603      	mov	r3, r0
 8012dfe:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8012e00:	7bfb      	ldrb	r3, [r7, #15]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d102      	bne.n	8012e0c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	2200      	movs	r2, #0
 8012e0a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8012e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e0e:	4618      	mov	r0, r3
 8012e10:	3710      	adds	r7, #16
 8012e12:	46bd      	mov	sp, r7
 8012e14:	bd80      	pop	{r7, pc}

08012e16 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8012e16:	b580      	push	{r7, lr}
 8012e18:	b090      	sub	sp, #64	; 0x40
 8012e1a:	af00      	add	r7, sp, #0
 8012e1c:	6078      	str	r0, [r7, #4]
 8012e1e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	f107 0208 	add.w	r2, r7, #8
 8012e26:	4611      	mov	r1, r2
 8012e28:	4618      	mov	r0, r3
 8012e2a:	f7ff fbd3 	bl	80125d4 <validate>
 8012e2e:	4603      	mov	r3, r0
 8012e30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8012e34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d103      	bne.n	8012e44 <f_lseek+0x2e>
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	7d5b      	ldrb	r3, [r3, #21]
 8012e40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8012e44:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d002      	beq.n	8012e52 <f_lseek+0x3c>
 8012e4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012e50:	e1e6      	b.n	8013220 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	f000 80d1 	beq.w	8012ffe <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8012e5c:	683b      	ldr	r3, [r7, #0]
 8012e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e62:	d15a      	bne.n	8012f1a <f_lseek+0x104>
			tbl = fp->cltbl;
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e68:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8012e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e6c:	1d1a      	adds	r2, r3, #4
 8012e6e:	627a      	str	r2, [r7, #36]	; 0x24
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	617b      	str	r3, [r7, #20]
 8012e74:	2302      	movs	r3, #2
 8012e76:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	689b      	ldr	r3, [r3, #8]
 8012e7c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8012e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d03a      	beq.n	8012efa <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8012e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e86:	613b      	str	r3, [r7, #16]
 8012e88:	2300      	movs	r3, #0
 8012e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e8e:	3302      	adds	r3, #2
 8012e90:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8012e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e94:	60fb      	str	r3, [r7, #12]
 8012e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e98:	3301      	adds	r3, #1
 8012e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	f7fd fcd0 	bl	8010846 <get_fat>
 8012ea6:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8012ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012eaa:	2b01      	cmp	r3, #1
 8012eac:	d804      	bhi.n	8012eb8 <f_lseek+0xa2>
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	2202      	movs	r2, #2
 8012eb2:	755a      	strb	r2, [r3, #21]
 8012eb4:	2302      	movs	r3, #2
 8012eb6:	e1b3      	b.n	8013220 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ebe:	d104      	bne.n	8012eca <f_lseek+0xb4>
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	2201      	movs	r2, #1
 8012ec4:	755a      	strb	r2, [r3, #21]
 8012ec6:	2301      	movs	r3, #1
 8012ec8:	e1aa      	b.n	8013220 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	3301      	adds	r3, #1
 8012ece:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ed0:	429a      	cmp	r2, r3
 8012ed2:	d0de      	beq.n	8012e92 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8012ed4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012ed6:	697b      	ldr	r3, [r7, #20]
 8012ed8:	429a      	cmp	r2, r3
 8012eda:	d809      	bhi.n	8012ef0 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8012edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ede:	1d1a      	adds	r2, r3, #4
 8012ee0:	627a      	str	r2, [r7, #36]	; 0x24
 8012ee2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012ee4:	601a      	str	r2, [r3, #0]
 8012ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ee8:	1d1a      	adds	r2, r3, #4
 8012eea:	627a      	str	r2, [r7, #36]	; 0x24
 8012eec:	693a      	ldr	r2, [r7, #16]
 8012eee:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8012ef0:	68bb      	ldr	r3, [r7, #8]
 8012ef2:	699b      	ldr	r3, [r3, #24]
 8012ef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ef6:	429a      	cmp	r2, r3
 8012ef8:	d3c4      	bcc.n	8012e84 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012efe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f00:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8012f02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f04:	697b      	ldr	r3, [r7, #20]
 8012f06:	429a      	cmp	r2, r3
 8012f08:	d803      	bhi.n	8012f12 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8012f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f0c:	2200      	movs	r2, #0
 8012f0e:	601a      	str	r2, [r3, #0]
 8012f10:	e184      	b.n	801321c <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8012f12:	2311      	movs	r3, #17
 8012f14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8012f18:	e180      	b.n	801321c <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	68db      	ldr	r3, [r3, #12]
 8012f1e:	683a      	ldr	r2, [r7, #0]
 8012f20:	429a      	cmp	r2, r3
 8012f22:	d902      	bls.n	8012f2a <f_lseek+0x114>
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	68db      	ldr	r3, [r3, #12]
 8012f28:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	683a      	ldr	r2, [r7, #0]
 8012f2e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8012f30:	683b      	ldr	r3, [r7, #0]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	f000 8172 	beq.w	801321c <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8012f38:	683b      	ldr	r3, [r7, #0]
 8012f3a:	3b01      	subs	r3, #1
 8012f3c:	4619      	mov	r1, r3
 8012f3e:	6878      	ldr	r0, [r7, #4]
 8012f40:	f7fd ff12 	bl	8010d68 <clmt_clust>
 8012f44:	4602      	mov	r2, r0
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8012f4a:	68ba      	ldr	r2, [r7, #8]
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	69db      	ldr	r3, [r3, #28]
 8012f50:	4619      	mov	r1, r3
 8012f52:	4610      	mov	r0, r2
 8012f54:	f7fd fc58 	bl	8010808 <clust2sect>
 8012f58:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8012f5a:	69bb      	ldr	r3, [r7, #24]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d104      	bne.n	8012f6a <f_lseek+0x154>
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	2202      	movs	r2, #2
 8012f64:	755a      	strb	r2, [r3, #21]
 8012f66:	2302      	movs	r3, #2
 8012f68:	e15a      	b.n	8013220 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8012f6a:	683b      	ldr	r3, [r7, #0]
 8012f6c:	3b01      	subs	r3, #1
 8012f6e:	0a5b      	lsrs	r3, r3, #9
 8012f70:	68ba      	ldr	r2, [r7, #8]
 8012f72:	8952      	ldrh	r2, [r2, #10]
 8012f74:	3a01      	subs	r2, #1
 8012f76:	4013      	ands	r3, r2
 8012f78:	69ba      	ldr	r2, [r7, #24]
 8012f7a:	4413      	add	r3, r2
 8012f7c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	699b      	ldr	r3, [r3, #24]
 8012f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	f000 8148 	beq.w	801321c <f_lseek+0x406>
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	6a1b      	ldr	r3, [r3, #32]
 8012f90:	69ba      	ldr	r2, [r7, #24]
 8012f92:	429a      	cmp	r2, r3
 8012f94:	f000 8142 	beq.w	801321c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	7d1b      	ldrb	r3, [r3, #20]
 8012f9c:	b25b      	sxtb	r3, r3
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	da18      	bge.n	8012fd4 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012fa2:	68bb      	ldr	r3, [r7, #8]
 8012fa4:	7858      	ldrb	r0, [r3, #1]
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	6a1a      	ldr	r2, [r3, #32]
 8012fb0:	2301      	movs	r3, #1
 8012fb2:	f7fd f89f 	bl	80100f4 <disk_write>
 8012fb6:	4603      	mov	r3, r0
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d004      	beq.n	8012fc6 <f_lseek+0x1b0>
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	2201      	movs	r2, #1
 8012fc0:	755a      	strb	r2, [r3, #21]
 8012fc2:	2301      	movs	r3, #1
 8012fc4:	e12c      	b.n	8013220 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	7d1b      	ldrb	r3, [r3, #20]
 8012fca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012fce:	b2da      	uxtb	r2, r3
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8012fd4:	68bb      	ldr	r3, [r7, #8]
 8012fd6:	7858      	ldrb	r0, [r3, #1]
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012fde:	2301      	movs	r3, #1
 8012fe0:	69ba      	ldr	r2, [r7, #24]
 8012fe2:	f7fd f867 	bl	80100b4 <disk_read>
 8012fe6:	4603      	mov	r3, r0
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d004      	beq.n	8012ff6 <f_lseek+0x1e0>
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	2201      	movs	r2, #1
 8012ff0:	755a      	strb	r2, [r3, #21]
 8012ff2:	2301      	movs	r3, #1
 8012ff4:	e114      	b.n	8013220 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	69ba      	ldr	r2, [r7, #24]
 8012ffa:	621a      	str	r2, [r3, #32]
 8012ffc:	e10e      	b.n	801321c <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	68db      	ldr	r3, [r3, #12]
 8013002:	683a      	ldr	r2, [r7, #0]
 8013004:	429a      	cmp	r2, r3
 8013006:	d908      	bls.n	801301a <f_lseek+0x204>
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	7d1b      	ldrb	r3, [r3, #20]
 801300c:	f003 0302 	and.w	r3, r3, #2
 8013010:	2b00      	cmp	r3, #0
 8013012:	d102      	bne.n	801301a <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	68db      	ldr	r3, [r3, #12]
 8013018:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	699b      	ldr	r3, [r3, #24]
 801301e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8013020:	2300      	movs	r3, #0
 8013022:	637b      	str	r3, [r7, #52]	; 0x34
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013028:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801302a:	683b      	ldr	r3, [r7, #0]
 801302c:	2b00      	cmp	r3, #0
 801302e:	f000 80a7 	beq.w	8013180 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8013032:	68bb      	ldr	r3, [r7, #8]
 8013034:	895b      	ldrh	r3, [r3, #10]
 8013036:	025b      	lsls	r3, r3, #9
 8013038:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801303a:	6a3b      	ldr	r3, [r7, #32]
 801303c:	2b00      	cmp	r3, #0
 801303e:	d01b      	beq.n	8013078 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8013040:	683b      	ldr	r3, [r7, #0]
 8013042:	1e5a      	subs	r2, r3, #1
 8013044:	69fb      	ldr	r3, [r7, #28]
 8013046:	fbb2 f2f3 	udiv	r2, r2, r3
 801304a:	6a3b      	ldr	r3, [r7, #32]
 801304c:	1e59      	subs	r1, r3, #1
 801304e:	69fb      	ldr	r3, [r7, #28]
 8013050:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8013054:	429a      	cmp	r2, r3
 8013056:	d30f      	bcc.n	8013078 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8013058:	6a3b      	ldr	r3, [r7, #32]
 801305a:	1e5a      	subs	r2, r3, #1
 801305c:	69fb      	ldr	r3, [r7, #28]
 801305e:	425b      	negs	r3, r3
 8013060:	401a      	ands	r2, r3
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	699b      	ldr	r3, [r3, #24]
 801306a:	683a      	ldr	r2, [r7, #0]
 801306c:	1ad3      	subs	r3, r2, r3
 801306e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	69db      	ldr	r3, [r3, #28]
 8013074:	63bb      	str	r3, [r7, #56]	; 0x38
 8013076:	e022      	b.n	80130be <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	689b      	ldr	r3, [r3, #8]
 801307c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801307e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013080:	2b00      	cmp	r3, #0
 8013082:	d119      	bne.n	80130b8 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	2100      	movs	r1, #0
 8013088:	4618      	mov	r0, r3
 801308a:	f7fd fdd5 	bl	8010c38 <create_chain>
 801308e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013092:	2b01      	cmp	r3, #1
 8013094:	d104      	bne.n	80130a0 <f_lseek+0x28a>
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	2202      	movs	r2, #2
 801309a:	755a      	strb	r2, [r3, #21]
 801309c:	2302      	movs	r3, #2
 801309e:	e0bf      	b.n	8013220 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80130a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130a6:	d104      	bne.n	80130b2 <f_lseek+0x29c>
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	2201      	movs	r2, #1
 80130ac:	755a      	strb	r2, [r3, #21]
 80130ae:	2301      	movs	r3, #1
 80130b0:	e0b6      	b.n	8013220 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80130b6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80130bc:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80130be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d05d      	beq.n	8013180 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 80130c4:	e03a      	b.n	801313c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 80130c6:	683a      	ldr	r2, [r7, #0]
 80130c8:	69fb      	ldr	r3, [r7, #28]
 80130ca:	1ad3      	subs	r3, r2, r3
 80130cc:	603b      	str	r3, [r7, #0]
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	699a      	ldr	r2, [r3, #24]
 80130d2:	69fb      	ldr	r3, [r7, #28]
 80130d4:	441a      	add	r2, r3
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	7d1b      	ldrb	r3, [r3, #20]
 80130de:	f003 0302 	and.w	r3, r3, #2
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d00b      	beq.n	80130fe <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80130ea:	4618      	mov	r0, r3
 80130ec:	f7fd fda4 	bl	8010c38 <create_chain>
 80130f0:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80130f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d108      	bne.n	801310a <f_lseek+0x2f4>
							ofs = 0; break;
 80130f8:	2300      	movs	r3, #0
 80130fa:	603b      	str	r3, [r7, #0]
 80130fc:	e022      	b.n	8013144 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013102:	4618      	mov	r0, r3
 8013104:	f7fd fb9f 	bl	8010846 <get_fat>
 8013108:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801310a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801310c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013110:	d104      	bne.n	801311c <f_lseek+0x306>
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	2201      	movs	r2, #1
 8013116:	755a      	strb	r2, [r3, #21]
 8013118:	2301      	movs	r3, #1
 801311a:	e081      	b.n	8013220 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801311c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801311e:	2b01      	cmp	r3, #1
 8013120:	d904      	bls.n	801312c <f_lseek+0x316>
 8013122:	68bb      	ldr	r3, [r7, #8]
 8013124:	699b      	ldr	r3, [r3, #24]
 8013126:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013128:	429a      	cmp	r2, r3
 801312a:	d304      	bcc.n	8013136 <f_lseek+0x320>
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	2202      	movs	r2, #2
 8013130:	755a      	strb	r2, [r3, #21]
 8013132:	2302      	movs	r3, #2
 8013134:	e074      	b.n	8013220 <f_lseek+0x40a>
					fp->clust = clst;
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801313a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801313c:	683a      	ldr	r2, [r7, #0]
 801313e:	69fb      	ldr	r3, [r7, #28]
 8013140:	429a      	cmp	r2, r3
 8013142:	d8c0      	bhi.n	80130c6 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	699a      	ldr	r2, [r3, #24]
 8013148:	683b      	ldr	r3, [r7, #0]
 801314a:	441a      	add	r2, r3
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8013150:	683b      	ldr	r3, [r7, #0]
 8013152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013156:	2b00      	cmp	r3, #0
 8013158:	d012      	beq.n	8013180 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801315a:	68bb      	ldr	r3, [r7, #8]
 801315c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801315e:	4618      	mov	r0, r3
 8013160:	f7fd fb52 	bl	8010808 <clust2sect>
 8013164:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8013166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013168:	2b00      	cmp	r3, #0
 801316a:	d104      	bne.n	8013176 <f_lseek+0x360>
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	2202      	movs	r2, #2
 8013170:	755a      	strb	r2, [r3, #21]
 8013172:	2302      	movs	r3, #2
 8013174:	e054      	b.n	8013220 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8013176:	683b      	ldr	r3, [r7, #0]
 8013178:	0a5b      	lsrs	r3, r3, #9
 801317a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801317c:	4413      	add	r3, r2
 801317e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	699a      	ldr	r2, [r3, #24]
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	68db      	ldr	r3, [r3, #12]
 8013188:	429a      	cmp	r2, r3
 801318a:	d90a      	bls.n	80131a2 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	699a      	ldr	r2, [r3, #24]
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	7d1b      	ldrb	r3, [r3, #20]
 8013198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801319c:	b2da      	uxtb	r2, r3
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	699b      	ldr	r3, [r3, #24]
 80131a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d036      	beq.n	801321c <f_lseek+0x406>
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	6a1b      	ldr	r3, [r3, #32]
 80131b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80131b4:	429a      	cmp	r2, r3
 80131b6:	d031      	beq.n	801321c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	7d1b      	ldrb	r3, [r3, #20]
 80131bc:	b25b      	sxtb	r3, r3
 80131be:	2b00      	cmp	r3, #0
 80131c0:	da18      	bge.n	80131f4 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80131c2:	68bb      	ldr	r3, [r7, #8]
 80131c4:	7858      	ldrb	r0, [r3, #1]
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	6a1a      	ldr	r2, [r3, #32]
 80131d0:	2301      	movs	r3, #1
 80131d2:	f7fc ff8f 	bl	80100f4 <disk_write>
 80131d6:	4603      	mov	r3, r0
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d004      	beq.n	80131e6 <f_lseek+0x3d0>
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	2201      	movs	r2, #1
 80131e0:	755a      	strb	r2, [r3, #21]
 80131e2:	2301      	movs	r3, #1
 80131e4:	e01c      	b.n	8013220 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	7d1b      	ldrb	r3, [r3, #20]
 80131ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80131ee:	b2da      	uxtb	r2, r3
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80131f4:	68bb      	ldr	r3, [r7, #8]
 80131f6:	7858      	ldrb	r0, [r3, #1]
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80131fe:	2301      	movs	r3, #1
 8013200:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013202:	f7fc ff57 	bl	80100b4 <disk_read>
 8013206:	4603      	mov	r3, r0
 8013208:	2b00      	cmp	r3, #0
 801320a:	d004      	beq.n	8013216 <f_lseek+0x400>
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	2201      	movs	r2, #1
 8013210:	755a      	strb	r2, [r3, #21]
 8013212:	2301      	movs	r3, #1
 8013214:	e004      	b.n	8013220 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801321a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801321c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013220:	4618      	mov	r0, r3
 8013222:	3740      	adds	r7, #64	; 0x40
 8013224:	46bd      	mov	sp, r7
 8013226:	bd80      	pop	{r7, pc}

08013228 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8013228:	b580      	push	{r7, lr}
 801322a:	b086      	sub	sp, #24
 801322c:	af00      	add	r7, sp, #0
 801322e:	6078      	str	r0, [r7, #4]
 8013230:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d101      	bne.n	801323c <f_opendir+0x14>
 8013238:	2309      	movs	r3, #9
 801323a:	e064      	b.n	8013306 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8013240:	f107 010c 	add.w	r1, r7, #12
 8013244:	463b      	mov	r3, r7
 8013246:	2200      	movs	r2, #0
 8013248:	4618      	mov	r0, r3
 801324a:	f7fe ff73 	bl	8012134 <find_volume>
 801324e:	4603      	mov	r3, r0
 8013250:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013252:	7dfb      	ldrb	r3, [r7, #23]
 8013254:	2b00      	cmp	r3, #0
 8013256:	d14f      	bne.n	80132f8 <f_opendir+0xd0>
		obj->fs = fs;
 8013258:	68fa      	ldr	r2, [r7, #12]
 801325a:	693b      	ldr	r3, [r7, #16]
 801325c:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801325e:	683b      	ldr	r3, [r7, #0]
 8013260:	4619      	mov	r1, r3
 8013262:	6878      	ldr	r0, [r7, #4]
 8013264:	f7fe fe5a 	bl	8011f1c <follow_path>
 8013268:	4603      	mov	r3, r0
 801326a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 801326c:	7dfb      	ldrb	r3, [r7, #23]
 801326e:	2b00      	cmp	r3, #0
 8013270:	d13d      	bne.n	80132ee <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013278:	b25b      	sxtb	r3, r3
 801327a:	2b00      	cmp	r3, #0
 801327c:	db12      	blt.n	80132a4 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801327e:	693b      	ldr	r3, [r7, #16]
 8013280:	799b      	ldrb	r3, [r3, #6]
 8013282:	f003 0310 	and.w	r3, r3, #16
 8013286:	2b00      	cmp	r3, #0
 8013288:	d00a      	beq.n	80132a0 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801328a:	68fa      	ldr	r2, [r7, #12]
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	6a1b      	ldr	r3, [r3, #32]
 8013290:	4619      	mov	r1, r3
 8013292:	4610      	mov	r0, r2
 8013294:	f7fd ff23 	bl	80110de <ld_clust>
 8013298:	4602      	mov	r2, r0
 801329a:	693b      	ldr	r3, [r7, #16]
 801329c:	609a      	str	r2, [r3, #8]
 801329e:	e001      	b.n	80132a4 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80132a0:	2305      	movs	r3, #5
 80132a2:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80132a4:	7dfb      	ldrb	r3, [r7, #23]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d121      	bne.n	80132ee <f_opendir+0xc6>
				obj->id = fs->id;
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	88da      	ldrh	r2, [r3, #6]
 80132ae:	693b      	ldr	r3, [r7, #16]
 80132b0:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80132b2:	2100      	movs	r1, #0
 80132b4:	6878      	ldr	r0, [r7, #4]
 80132b6:	f7fd fd8b 	bl	8010dd0 <dir_sdi>
 80132ba:	4603      	mov	r3, r0
 80132bc:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80132be:	7dfb      	ldrb	r3, [r7, #23]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d114      	bne.n	80132ee <f_opendir+0xc6>
					if (obj->sclust) {
 80132c4:	693b      	ldr	r3, [r7, #16]
 80132c6:	689b      	ldr	r3, [r3, #8]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d00d      	beq.n	80132e8 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80132cc:	2100      	movs	r1, #0
 80132ce:	6878      	ldr	r0, [r7, #4]
 80132d0:	f7fd f8cc 	bl	801046c <inc_lock>
 80132d4:	4602      	mov	r2, r0
 80132d6:	693b      	ldr	r3, [r7, #16]
 80132d8:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80132da:	693b      	ldr	r3, [r7, #16]
 80132dc:	691b      	ldr	r3, [r3, #16]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d105      	bne.n	80132ee <f_opendir+0xc6>
 80132e2:	2312      	movs	r3, #18
 80132e4:	75fb      	strb	r3, [r7, #23]
 80132e6:	e002      	b.n	80132ee <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80132e8:	693b      	ldr	r3, [r7, #16]
 80132ea:	2200      	movs	r2, #0
 80132ec:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80132ee:	7dfb      	ldrb	r3, [r7, #23]
 80132f0:	2b04      	cmp	r3, #4
 80132f2:	d101      	bne.n	80132f8 <f_opendir+0xd0>
 80132f4:	2305      	movs	r3, #5
 80132f6:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80132f8:	7dfb      	ldrb	r3, [r7, #23]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d002      	beq.n	8013304 <f_opendir+0xdc>
 80132fe:	693b      	ldr	r3, [r7, #16]
 8013300:	2200      	movs	r2, #0
 8013302:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013304:	7dfb      	ldrb	r3, [r7, #23]
}
 8013306:	4618      	mov	r0, r3
 8013308:	3718      	adds	r7, #24
 801330a:	46bd      	mov	sp, r7
 801330c:	bd80      	pop	{r7, pc}

0801330e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 801330e:	b580      	push	{r7, lr}
 8013310:	b084      	sub	sp, #16
 8013312:	af00      	add	r7, sp, #0
 8013314:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	f107 0208 	add.w	r2, r7, #8
 801331c:	4611      	mov	r1, r2
 801331e:	4618      	mov	r0, r3
 8013320:	f7ff f958 	bl	80125d4 <validate>
 8013324:	4603      	mov	r3, r0
 8013326:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8013328:	7bfb      	ldrb	r3, [r7, #15]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d110      	bne.n	8013350 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	691b      	ldr	r3, [r3, #16]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d006      	beq.n	8013344 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	691b      	ldr	r3, [r3, #16]
 801333a:	4618      	mov	r0, r3
 801333c:	f7fd f924 	bl	8010588 <dec_lock>
 8013340:	4603      	mov	r3, r0
 8013342:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8013344:	7bfb      	ldrb	r3, [r7, #15]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d102      	bne.n	8013350 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	2200      	movs	r2, #0
 801334e:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8013350:	7bfb      	ldrb	r3, [r7, #15]
}
 8013352:	4618      	mov	r0, r3
 8013354:	3710      	adds	r7, #16
 8013356:	46bd      	mov	sp, r7
 8013358:	bd80      	pop	{r7, pc}

0801335a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801335a:	b580      	push	{r7, lr}
 801335c:	b084      	sub	sp, #16
 801335e:	af00      	add	r7, sp, #0
 8013360:	6078      	str	r0, [r7, #4]
 8013362:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	f107 0208 	add.w	r2, r7, #8
 801336a:	4611      	mov	r1, r2
 801336c:	4618      	mov	r0, r3
 801336e:	f7ff f931 	bl	80125d4 <validate>
 8013372:	4603      	mov	r3, r0
 8013374:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8013376:	7bfb      	ldrb	r3, [r7, #15]
 8013378:	2b00      	cmp	r3, #0
 801337a:	d126      	bne.n	80133ca <f_readdir+0x70>
		if (!fno) {
 801337c:	683b      	ldr	r3, [r7, #0]
 801337e:	2b00      	cmp	r3, #0
 8013380:	d106      	bne.n	8013390 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8013382:	2100      	movs	r1, #0
 8013384:	6878      	ldr	r0, [r7, #4]
 8013386:	f7fd fd23 	bl	8010dd0 <dir_sdi>
 801338a:	4603      	mov	r3, r0
 801338c:	73fb      	strb	r3, [r7, #15]
 801338e:	e01c      	b.n	80133ca <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8013390:	2100      	movs	r1, #0
 8013392:	6878      	ldr	r0, [r7, #4]
 8013394:	f7fe f8cd 	bl	8011532 <dir_read>
 8013398:	4603      	mov	r3, r0
 801339a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 801339c:	7bfb      	ldrb	r3, [r7, #15]
 801339e:	2b04      	cmp	r3, #4
 80133a0:	d101      	bne.n	80133a6 <f_readdir+0x4c>
 80133a2:	2300      	movs	r3, #0
 80133a4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80133a6:	7bfb      	ldrb	r3, [r7, #15]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d10e      	bne.n	80133ca <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80133ac:	6839      	ldr	r1, [r7, #0]
 80133ae:	6878      	ldr	r0, [r7, #4]
 80133b0:	f7fe fb1e 	bl	80119f0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80133b4:	2100      	movs	r1, #0
 80133b6:	6878      	ldr	r0, [r7, #4]
 80133b8:	f7fd fd85 	bl	8010ec6 <dir_next>
 80133bc:	4603      	mov	r3, r0
 80133be:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80133c0:	7bfb      	ldrb	r3, [r7, #15]
 80133c2:	2b04      	cmp	r3, #4
 80133c4:	d101      	bne.n	80133ca <f_readdir+0x70>
 80133c6:	2300      	movs	r3, #0
 80133c8:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80133ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80133cc:	4618      	mov	r0, r3
 80133ce:	3710      	adds	r7, #16
 80133d0:	46bd      	mov	sp, r7
 80133d2:	bd80      	pop	{r7, pc}

080133d4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80133d4:	b480      	push	{r7}
 80133d6:	b087      	sub	sp, #28
 80133d8:	af00      	add	r7, sp, #0
 80133da:	60f8      	str	r0, [r7, #12]
 80133dc:	60b9      	str	r1, [r7, #8]
 80133de:	4613      	mov	r3, r2
 80133e0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80133e2:	2301      	movs	r3, #1
 80133e4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80133e6:	2300      	movs	r3, #0
 80133e8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80133ea:	4b1f      	ldr	r3, [pc, #124]	; (8013468 <FATFS_LinkDriverEx+0x94>)
 80133ec:	7a5b      	ldrb	r3, [r3, #9]
 80133ee:	b2db      	uxtb	r3, r3
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d131      	bne.n	8013458 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80133f4:	4b1c      	ldr	r3, [pc, #112]	; (8013468 <FATFS_LinkDriverEx+0x94>)
 80133f6:	7a5b      	ldrb	r3, [r3, #9]
 80133f8:	b2db      	uxtb	r3, r3
 80133fa:	461a      	mov	r2, r3
 80133fc:	4b1a      	ldr	r3, [pc, #104]	; (8013468 <FATFS_LinkDriverEx+0x94>)
 80133fe:	2100      	movs	r1, #0
 8013400:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013402:	4b19      	ldr	r3, [pc, #100]	; (8013468 <FATFS_LinkDriverEx+0x94>)
 8013404:	7a5b      	ldrb	r3, [r3, #9]
 8013406:	b2db      	uxtb	r3, r3
 8013408:	4a17      	ldr	r2, [pc, #92]	; (8013468 <FATFS_LinkDriverEx+0x94>)
 801340a:	009b      	lsls	r3, r3, #2
 801340c:	4413      	add	r3, r2
 801340e:	68fa      	ldr	r2, [r7, #12]
 8013410:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013412:	4b15      	ldr	r3, [pc, #84]	; (8013468 <FATFS_LinkDriverEx+0x94>)
 8013414:	7a5b      	ldrb	r3, [r3, #9]
 8013416:	b2db      	uxtb	r3, r3
 8013418:	461a      	mov	r2, r3
 801341a:	4b13      	ldr	r3, [pc, #76]	; (8013468 <FATFS_LinkDriverEx+0x94>)
 801341c:	4413      	add	r3, r2
 801341e:	79fa      	ldrb	r2, [r7, #7]
 8013420:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013422:	4b11      	ldr	r3, [pc, #68]	; (8013468 <FATFS_LinkDriverEx+0x94>)
 8013424:	7a5b      	ldrb	r3, [r3, #9]
 8013426:	b2db      	uxtb	r3, r3
 8013428:	1c5a      	adds	r2, r3, #1
 801342a:	b2d1      	uxtb	r1, r2
 801342c:	4a0e      	ldr	r2, [pc, #56]	; (8013468 <FATFS_LinkDriverEx+0x94>)
 801342e:	7251      	strb	r1, [r2, #9]
 8013430:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013432:	7dbb      	ldrb	r3, [r7, #22]
 8013434:	3330      	adds	r3, #48	; 0x30
 8013436:	b2da      	uxtb	r2, r3
 8013438:	68bb      	ldr	r3, [r7, #8]
 801343a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801343c:	68bb      	ldr	r3, [r7, #8]
 801343e:	3301      	adds	r3, #1
 8013440:	223a      	movs	r2, #58	; 0x3a
 8013442:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013444:	68bb      	ldr	r3, [r7, #8]
 8013446:	3302      	adds	r3, #2
 8013448:	222f      	movs	r2, #47	; 0x2f
 801344a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801344c:	68bb      	ldr	r3, [r7, #8]
 801344e:	3303      	adds	r3, #3
 8013450:	2200      	movs	r2, #0
 8013452:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013454:	2300      	movs	r3, #0
 8013456:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013458:	7dfb      	ldrb	r3, [r7, #23]
}
 801345a:	4618      	mov	r0, r3
 801345c:	371c      	adds	r7, #28
 801345e:	46bd      	mov	sp, r7
 8013460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013464:	4770      	bx	lr
 8013466:	bf00      	nop
 8013468:	20002084 	.word	0x20002084

0801346c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801346c:	b580      	push	{r7, lr}
 801346e:	b082      	sub	sp, #8
 8013470:	af00      	add	r7, sp, #0
 8013472:	6078      	str	r0, [r7, #4]
 8013474:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013476:	2200      	movs	r2, #0
 8013478:	6839      	ldr	r1, [r7, #0]
 801347a:	6878      	ldr	r0, [r7, #4]
 801347c:	f7ff ffaa 	bl	80133d4 <FATFS_LinkDriverEx>
 8013480:	4603      	mov	r3, r0
}
 8013482:	4618      	mov	r0, r3
 8013484:	3708      	adds	r7, #8
 8013486:	46bd      	mov	sp, r7
 8013488:	bd80      	pop	{r7, pc}
	...

0801348c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801348c:	b480      	push	{r7}
 801348e:	b085      	sub	sp, #20
 8013490:	af00      	add	r7, sp, #0
 8013492:	4603      	mov	r3, r0
 8013494:	6039      	str	r1, [r7, #0]
 8013496:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8013498:	88fb      	ldrh	r3, [r7, #6]
 801349a:	2b7f      	cmp	r3, #127	; 0x7f
 801349c:	d802      	bhi.n	80134a4 <ff_convert+0x18>
		c = chr;
 801349e:	88fb      	ldrh	r3, [r7, #6]
 80134a0:	81fb      	strh	r3, [r7, #14]
 80134a2:	e025      	b.n	80134f0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80134a4:	683b      	ldr	r3, [r7, #0]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d00b      	beq.n	80134c2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80134aa:	88fb      	ldrh	r3, [r7, #6]
 80134ac:	2bff      	cmp	r3, #255	; 0xff
 80134ae:	d805      	bhi.n	80134bc <ff_convert+0x30>
 80134b0:	88fb      	ldrh	r3, [r7, #6]
 80134b2:	3b80      	subs	r3, #128	; 0x80
 80134b4:	4a12      	ldr	r2, [pc, #72]	; (8013500 <ff_convert+0x74>)
 80134b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80134ba:	e000      	b.n	80134be <ff_convert+0x32>
 80134bc:	2300      	movs	r3, #0
 80134be:	81fb      	strh	r3, [r7, #14]
 80134c0:	e016      	b.n	80134f0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80134c2:	2300      	movs	r3, #0
 80134c4:	81fb      	strh	r3, [r7, #14]
 80134c6:	e009      	b.n	80134dc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80134c8:	89fb      	ldrh	r3, [r7, #14]
 80134ca:	4a0d      	ldr	r2, [pc, #52]	; (8013500 <ff_convert+0x74>)
 80134cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80134d0:	88fa      	ldrh	r2, [r7, #6]
 80134d2:	429a      	cmp	r2, r3
 80134d4:	d006      	beq.n	80134e4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80134d6:	89fb      	ldrh	r3, [r7, #14]
 80134d8:	3301      	adds	r3, #1
 80134da:	81fb      	strh	r3, [r7, #14]
 80134dc:	89fb      	ldrh	r3, [r7, #14]
 80134de:	2b7f      	cmp	r3, #127	; 0x7f
 80134e0:	d9f2      	bls.n	80134c8 <ff_convert+0x3c>
 80134e2:	e000      	b.n	80134e6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80134e4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80134e6:	89fb      	ldrh	r3, [r7, #14]
 80134e8:	3380      	adds	r3, #128	; 0x80
 80134ea:	b29b      	uxth	r3, r3
 80134ec:	b2db      	uxtb	r3, r3
 80134ee:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80134f0:	89fb      	ldrh	r3, [r7, #14]
}
 80134f2:	4618      	mov	r0, r3
 80134f4:	3714      	adds	r7, #20
 80134f6:	46bd      	mov	sp, r7
 80134f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134fc:	4770      	bx	lr
 80134fe:	bf00      	nop
 8013500:	08016cf8 	.word	0x08016cf8

08013504 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8013504:	b480      	push	{r7}
 8013506:	b087      	sub	sp, #28
 8013508:	af00      	add	r7, sp, #0
 801350a:	4603      	mov	r3, r0
 801350c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801350e:	88fb      	ldrh	r3, [r7, #6]
 8013510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013514:	d201      	bcs.n	801351a <ff_wtoupper+0x16>
 8013516:	4b3e      	ldr	r3, [pc, #248]	; (8013610 <ff_wtoupper+0x10c>)
 8013518:	e000      	b.n	801351c <ff_wtoupper+0x18>
 801351a:	4b3e      	ldr	r3, [pc, #248]	; (8013614 <ff_wtoupper+0x110>)
 801351c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801351e:	697b      	ldr	r3, [r7, #20]
 8013520:	1c9a      	adds	r2, r3, #2
 8013522:	617a      	str	r2, [r7, #20]
 8013524:	881b      	ldrh	r3, [r3, #0]
 8013526:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8013528:	8a7b      	ldrh	r3, [r7, #18]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d068      	beq.n	8013600 <ff_wtoupper+0xfc>
 801352e:	88fa      	ldrh	r2, [r7, #6]
 8013530:	8a7b      	ldrh	r3, [r7, #18]
 8013532:	429a      	cmp	r2, r3
 8013534:	d364      	bcc.n	8013600 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8013536:	697b      	ldr	r3, [r7, #20]
 8013538:	1c9a      	adds	r2, r3, #2
 801353a:	617a      	str	r2, [r7, #20]
 801353c:	881b      	ldrh	r3, [r3, #0]
 801353e:	823b      	strh	r3, [r7, #16]
 8013540:	8a3b      	ldrh	r3, [r7, #16]
 8013542:	0a1b      	lsrs	r3, r3, #8
 8013544:	81fb      	strh	r3, [r7, #14]
 8013546:	8a3b      	ldrh	r3, [r7, #16]
 8013548:	b2db      	uxtb	r3, r3
 801354a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801354c:	88fa      	ldrh	r2, [r7, #6]
 801354e:	8a79      	ldrh	r1, [r7, #18]
 8013550:	8a3b      	ldrh	r3, [r7, #16]
 8013552:	440b      	add	r3, r1
 8013554:	429a      	cmp	r2, r3
 8013556:	da49      	bge.n	80135ec <ff_wtoupper+0xe8>
			switch (cmd) {
 8013558:	89fb      	ldrh	r3, [r7, #14]
 801355a:	2b08      	cmp	r3, #8
 801355c:	d84f      	bhi.n	80135fe <ff_wtoupper+0xfa>
 801355e:	a201      	add	r2, pc, #4	; (adr r2, 8013564 <ff_wtoupper+0x60>)
 8013560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013564:	08013589 	.word	0x08013589
 8013568:	0801359b 	.word	0x0801359b
 801356c:	080135b1 	.word	0x080135b1
 8013570:	080135b9 	.word	0x080135b9
 8013574:	080135c1 	.word	0x080135c1
 8013578:	080135c9 	.word	0x080135c9
 801357c:	080135d1 	.word	0x080135d1
 8013580:	080135d9 	.word	0x080135d9
 8013584:	080135e1 	.word	0x080135e1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8013588:	88fa      	ldrh	r2, [r7, #6]
 801358a:	8a7b      	ldrh	r3, [r7, #18]
 801358c:	1ad3      	subs	r3, r2, r3
 801358e:	005b      	lsls	r3, r3, #1
 8013590:	697a      	ldr	r2, [r7, #20]
 8013592:	4413      	add	r3, r2
 8013594:	881b      	ldrh	r3, [r3, #0]
 8013596:	80fb      	strh	r3, [r7, #6]
 8013598:	e027      	b.n	80135ea <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801359a:	88fa      	ldrh	r2, [r7, #6]
 801359c:	8a7b      	ldrh	r3, [r7, #18]
 801359e:	1ad3      	subs	r3, r2, r3
 80135a0:	b29b      	uxth	r3, r3
 80135a2:	f003 0301 	and.w	r3, r3, #1
 80135a6:	b29b      	uxth	r3, r3
 80135a8:	88fa      	ldrh	r2, [r7, #6]
 80135aa:	1ad3      	subs	r3, r2, r3
 80135ac:	80fb      	strh	r3, [r7, #6]
 80135ae:	e01c      	b.n	80135ea <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80135b0:	88fb      	ldrh	r3, [r7, #6]
 80135b2:	3b10      	subs	r3, #16
 80135b4:	80fb      	strh	r3, [r7, #6]
 80135b6:	e018      	b.n	80135ea <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80135b8:	88fb      	ldrh	r3, [r7, #6]
 80135ba:	3b20      	subs	r3, #32
 80135bc:	80fb      	strh	r3, [r7, #6]
 80135be:	e014      	b.n	80135ea <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80135c0:	88fb      	ldrh	r3, [r7, #6]
 80135c2:	3b30      	subs	r3, #48	; 0x30
 80135c4:	80fb      	strh	r3, [r7, #6]
 80135c6:	e010      	b.n	80135ea <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80135c8:	88fb      	ldrh	r3, [r7, #6]
 80135ca:	3b1a      	subs	r3, #26
 80135cc:	80fb      	strh	r3, [r7, #6]
 80135ce:	e00c      	b.n	80135ea <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80135d0:	88fb      	ldrh	r3, [r7, #6]
 80135d2:	3308      	adds	r3, #8
 80135d4:	80fb      	strh	r3, [r7, #6]
 80135d6:	e008      	b.n	80135ea <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80135d8:	88fb      	ldrh	r3, [r7, #6]
 80135da:	3b50      	subs	r3, #80	; 0x50
 80135dc:	80fb      	strh	r3, [r7, #6]
 80135de:	e004      	b.n	80135ea <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80135e0:	88fb      	ldrh	r3, [r7, #6]
 80135e2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80135e6:	80fb      	strh	r3, [r7, #6]
 80135e8:	bf00      	nop
			}
			break;
 80135ea:	e008      	b.n	80135fe <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80135ec:	89fb      	ldrh	r3, [r7, #14]
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d195      	bne.n	801351e <ff_wtoupper+0x1a>
 80135f2:	8a3b      	ldrh	r3, [r7, #16]
 80135f4:	005b      	lsls	r3, r3, #1
 80135f6:	697a      	ldr	r2, [r7, #20]
 80135f8:	4413      	add	r3, r2
 80135fa:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80135fc:	e78f      	b.n	801351e <ff_wtoupper+0x1a>
			break;
 80135fe:	bf00      	nop
	}

	return chr;
 8013600:	88fb      	ldrh	r3, [r7, #6]
}
 8013602:	4618      	mov	r0, r3
 8013604:	371c      	adds	r7, #28
 8013606:	46bd      	mov	sp, r7
 8013608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801360c:	4770      	bx	lr
 801360e:	bf00      	nop
 8013610:	08016df8 	.word	0x08016df8
 8013614:	08016fec 	.word	0x08016fec

08013618 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8013618:	b580      	push	{r7, lr}
 801361a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801361c:	2201      	movs	r2, #1
 801361e:	490e      	ldr	r1, [pc, #56]	; (8013658 <MX_USB_HOST_Init+0x40>)
 8013620:	480e      	ldr	r0, [pc, #56]	; (801365c <MX_USB_HOST_Init+0x44>)
 8013622:	f7fb f8b5 	bl	800e790 <USBH_Init>
 8013626:	4603      	mov	r3, r0
 8013628:	2b00      	cmp	r3, #0
 801362a:	d001      	beq.n	8013630 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801362c:	f7ef f8a6 	bl	800277c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8013630:	490b      	ldr	r1, [pc, #44]	; (8013660 <MX_USB_HOST_Init+0x48>)
 8013632:	480a      	ldr	r0, [pc, #40]	; (801365c <MX_USB_HOST_Init+0x44>)
 8013634:	f7fb f93a 	bl	800e8ac <USBH_RegisterClass>
 8013638:	4603      	mov	r3, r0
 801363a:	2b00      	cmp	r3, #0
 801363c:	d001      	beq.n	8013642 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801363e:	f7ef f89d 	bl	800277c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8013642:	4806      	ldr	r0, [pc, #24]	; (801365c <MX_USB_HOST_Init+0x44>)
 8013644:	f7fb f9be 	bl	800e9c4 <USBH_Start>
 8013648:	4603      	mov	r3, r0
 801364a:	2b00      	cmp	r3, #0
 801364c:	d001      	beq.n	8013652 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801364e:	f7ef f895 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8013652:	bf00      	nop
 8013654:	bd80      	pop	{r7, pc}
 8013656:	bf00      	nop
 8013658:	08013679 	.word	0x08013679
 801365c:	20002090 	.word	0x20002090
 8013660:	20000048 	.word	0x20000048

08013664 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8013664:	b580      	push	{r7, lr}
 8013666:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8013668:	4802      	ldr	r0, [pc, #8]	; (8013674 <MX_USB_HOST_Process+0x10>)
 801366a:	f7fb f9bb 	bl	800e9e4 <USBH_Process>
}
 801366e:	bf00      	nop
 8013670:	bd80      	pop	{r7, pc}
 8013672:	bf00      	nop
 8013674:	20002090 	.word	0x20002090

08013678 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8013678:	b480      	push	{r7}
 801367a:	b083      	sub	sp, #12
 801367c:	af00      	add	r7, sp, #0
 801367e:	6078      	str	r0, [r7, #4]
 8013680:	460b      	mov	r3, r1
 8013682:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8013684:	78fb      	ldrb	r3, [r7, #3]
 8013686:	3b01      	subs	r3, #1
 8013688:	2b04      	cmp	r3, #4
 801368a:	d819      	bhi.n	80136c0 <USBH_UserProcess+0x48>
 801368c:	a201      	add	r2, pc, #4	; (adr r2, 8013694 <USBH_UserProcess+0x1c>)
 801368e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013692:	bf00      	nop
 8013694:	080136c1 	.word	0x080136c1
 8013698:	080136b1 	.word	0x080136b1
 801369c:	080136c1 	.word	0x080136c1
 80136a0:	080136b9 	.word	0x080136b9
 80136a4:	080136a9 	.word	0x080136a9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80136a8:	4b09      	ldr	r3, [pc, #36]	; (80136d0 <USBH_UserProcess+0x58>)
 80136aa:	2203      	movs	r2, #3
 80136ac:	701a      	strb	r2, [r3, #0]
  break;
 80136ae:	e008      	b.n	80136c2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80136b0:	4b07      	ldr	r3, [pc, #28]	; (80136d0 <USBH_UserProcess+0x58>)
 80136b2:	2202      	movs	r2, #2
 80136b4:	701a      	strb	r2, [r3, #0]
  break;
 80136b6:	e004      	b.n	80136c2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80136b8:	4b05      	ldr	r3, [pc, #20]	; (80136d0 <USBH_UserProcess+0x58>)
 80136ba:	2201      	movs	r2, #1
 80136bc:	701a      	strb	r2, [r3, #0]
  break;
 80136be:	e000      	b.n	80136c2 <USBH_UserProcess+0x4a>

  default:
  break;
 80136c0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80136c2:	bf00      	nop
 80136c4:	370c      	adds	r7, #12
 80136c6:	46bd      	mov	sp, r7
 80136c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136cc:	4770      	bx	lr
 80136ce:	bf00      	nop
 80136d0:	20002468 	.word	0x20002468

080136d4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80136d4:	b580      	push	{r7, lr}
 80136d6:	b08a      	sub	sp, #40	; 0x28
 80136d8:	af00      	add	r7, sp, #0
 80136da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80136dc:	f107 0314 	add.w	r3, r7, #20
 80136e0:	2200      	movs	r2, #0
 80136e2:	601a      	str	r2, [r3, #0]
 80136e4:	605a      	str	r2, [r3, #4]
 80136e6:	609a      	str	r2, [r3, #8]
 80136e8:	60da      	str	r2, [r3, #12]
 80136ea:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80136f4:	d147      	bne.n	8013786 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80136f6:	2300      	movs	r3, #0
 80136f8:	613b      	str	r3, [r7, #16]
 80136fa:	4b25      	ldr	r3, [pc, #148]	; (8013790 <HAL_HCD_MspInit+0xbc>)
 80136fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136fe:	4a24      	ldr	r2, [pc, #144]	; (8013790 <HAL_HCD_MspInit+0xbc>)
 8013700:	f043 0301 	orr.w	r3, r3, #1
 8013704:	6313      	str	r3, [r2, #48]	; 0x30
 8013706:	4b22      	ldr	r3, [pc, #136]	; (8013790 <HAL_HCD_MspInit+0xbc>)
 8013708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801370a:	f003 0301 	and.w	r3, r3, #1
 801370e:	613b      	str	r3, [r7, #16]
 8013710:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8013712:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013718:	2300      	movs	r3, #0
 801371a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801371c:	2300      	movs	r3, #0
 801371e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013720:	f107 0314 	add.w	r3, r7, #20
 8013724:	4619      	mov	r1, r3
 8013726:	481b      	ldr	r0, [pc, #108]	; (8013794 <HAL_HCD_MspInit+0xc0>)
 8013728:	f7f0 fc66 	bl	8003ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801372c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8013730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013732:	2302      	movs	r3, #2
 8013734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013736:	2300      	movs	r3, #0
 8013738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801373a:	2303      	movs	r3, #3
 801373c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801373e:	230a      	movs	r3, #10
 8013740:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013742:	f107 0314 	add.w	r3, r7, #20
 8013746:	4619      	mov	r1, r3
 8013748:	4812      	ldr	r0, [pc, #72]	; (8013794 <HAL_HCD_MspInit+0xc0>)
 801374a:	f7f0 fc55 	bl	8003ff8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801374e:	4b10      	ldr	r3, [pc, #64]	; (8013790 <HAL_HCD_MspInit+0xbc>)
 8013750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013752:	4a0f      	ldr	r2, [pc, #60]	; (8013790 <HAL_HCD_MspInit+0xbc>)
 8013754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013758:	6353      	str	r3, [r2, #52]	; 0x34
 801375a:	2300      	movs	r3, #0
 801375c:	60fb      	str	r3, [r7, #12]
 801375e:	4b0c      	ldr	r3, [pc, #48]	; (8013790 <HAL_HCD_MspInit+0xbc>)
 8013760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013762:	4a0b      	ldr	r2, [pc, #44]	; (8013790 <HAL_HCD_MspInit+0xbc>)
 8013764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013768:	6453      	str	r3, [r2, #68]	; 0x44
 801376a:	4b09      	ldr	r3, [pc, #36]	; (8013790 <HAL_HCD_MspInit+0xbc>)
 801376c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801376e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013772:	60fb      	str	r3, [r7, #12]
 8013774:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8013776:	2200      	movs	r2, #0
 8013778:	2100      	movs	r1, #0
 801377a:	2043      	movs	r0, #67	; 0x43
 801377c:	f7ef ff89 	bl	8003692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8013780:	2043      	movs	r0, #67	; 0x43
 8013782:	f7ef ffa2 	bl	80036ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8013786:	bf00      	nop
 8013788:	3728      	adds	r7, #40	; 0x28
 801378a:	46bd      	mov	sp, r7
 801378c:	bd80      	pop	{r7, pc}
 801378e:	bf00      	nop
 8013790:	40023800 	.word	0x40023800
 8013794:	40020000 	.word	0x40020000

08013798 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8013798:	b580      	push	{r7, lr}
 801379a:	b082      	sub	sp, #8
 801379c:	af00      	add	r7, sp, #0
 801379e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80137a6:	4618      	mov	r0, r3
 80137a8:	f7fb fcfb 	bl	800f1a2 <USBH_LL_IncTimer>
}
 80137ac:	bf00      	nop
 80137ae:	3708      	adds	r7, #8
 80137b0:	46bd      	mov	sp, r7
 80137b2:	bd80      	pop	{r7, pc}

080137b4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80137b4:	b580      	push	{r7, lr}
 80137b6:	b082      	sub	sp, #8
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80137c2:	4618      	mov	r0, r3
 80137c4:	f7fb fd33 	bl	800f22e <USBH_LL_Connect>
}
 80137c8:	bf00      	nop
 80137ca:	3708      	adds	r7, #8
 80137cc:	46bd      	mov	sp, r7
 80137ce:	bd80      	pop	{r7, pc}

080137d0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80137d0:	b580      	push	{r7, lr}
 80137d2:	b082      	sub	sp, #8
 80137d4:	af00      	add	r7, sp, #0
 80137d6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80137de:	4618      	mov	r0, r3
 80137e0:	f7fb fd3c 	bl	800f25c <USBH_LL_Disconnect>
}
 80137e4:	bf00      	nop
 80137e6:	3708      	adds	r7, #8
 80137e8:	46bd      	mov	sp, r7
 80137ea:	bd80      	pop	{r7, pc}

080137ec <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80137ec:	b480      	push	{r7}
 80137ee:	b083      	sub	sp, #12
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	6078      	str	r0, [r7, #4]
 80137f4:	460b      	mov	r3, r1
 80137f6:	70fb      	strb	r3, [r7, #3]
 80137f8:	4613      	mov	r3, r2
 80137fa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80137fc:	bf00      	nop
 80137fe:	370c      	adds	r7, #12
 8013800:	46bd      	mov	sp, r7
 8013802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013806:	4770      	bx	lr

08013808 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8013808:	b580      	push	{r7, lr}
 801380a:	b082      	sub	sp, #8
 801380c:	af00      	add	r7, sp, #0
 801380e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8013816:	4618      	mov	r0, r3
 8013818:	f7fb fced 	bl	800f1f6 <USBH_LL_PortEnabled>
}
 801381c:	bf00      	nop
 801381e:	3708      	adds	r7, #8
 8013820:	46bd      	mov	sp, r7
 8013822:	bd80      	pop	{r7, pc}

08013824 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8013824:	b580      	push	{r7, lr}
 8013826:	b082      	sub	sp, #8
 8013828:	af00      	add	r7, sp, #0
 801382a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8013832:	4618      	mov	r0, r3
 8013834:	f7fb fced 	bl	800f212 <USBH_LL_PortDisabled>
}
 8013838:	bf00      	nop
 801383a:	3708      	adds	r7, #8
 801383c:	46bd      	mov	sp, r7
 801383e:	bd80      	pop	{r7, pc}

08013840 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8013840:	b580      	push	{r7, lr}
 8013842:	b082      	sub	sp, #8
 8013844:	af00      	add	r7, sp, #0
 8013846:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801384e:	2b01      	cmp	r3, #1
 8013850:	d12a      	bne.n	80138a8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8013852:	4a18      	ldr	r2, [pc, #96]	; (80138b4 <USBH_LL_Init+0x74>)
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	4a15      	ldr	r2, [pc, #84]	; (80138b4 <USBH_LL_Init+0x74>)
 801385e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8013862:	4b14      	ldr	r3, [pc, #80]	; (80138b4 <USBH_LL_Init+0x74>)
 8013864:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8013868:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801386a:	4b12      	ldr	r3, [pc, #72]	; (80138b4 <USBH_LL_Init+0x74>)
 801386c:	2208      	movs	r2, #8
 801386e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8013870:	4b10      	ldr	r3, [pc, #64]	; (80138b4 <USBH_LL_Init+0x74>)
 8013872:	2201      	movs	r2, #1
 8013874:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8013876:	4b0f      	ldr	r3, [pc, #60]	; (80138b4 <USBH_LL_Init+0x74>)
 8013878:	2200      	movs	r2, #0
 801387a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801387c:	4b0d      	ldr	r3, [pc, #52]	; (80138b4 <USBH_LL_Init+0x74>)
 801387e:	2202      	movs	r2, #2
 8013880:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8013882:	4b0c      	ldr	r3, [pc, #48]	; (80138b4 <USBH_LL_Init+0x74>)
 8013884:	2200      	movs	r2, #0
 8013886:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8013888:	480a      	ldr	r0, [pc, #40]	; (80138b4 <USBH_LL_Init+0x74>)
 801388a:	f7f0 fe7f 	bl	800458c <HAL_HCD_Init>
 801388e:	4603      	mov	r3, r0
 8013890:	2b00      	cmp	r3, #0
 8013892:	d001      	beq.n	8013898 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8013894:	f7ee ff72 	bl	800277c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8013898:	4806      	ldr	r0, [pc, #24]	; (80138b4 <USBH_LL_Init+0x74>)
 801389a:	f7f1 fa62 	bl	8004d62 <HAL_HCD_GetCurrentFrame>
 801389e:	4603      	mov	r3, r0
 80138a0:	4619      	mov	r1, r3
 80138a2:	6878      	ldr	r0, [r7, #4]
 80138a4:	f7fb fc6e 	bl	800f184 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80138a8:	2300      	movs	r3, #0
}
 80138aa:	4618      	mov	r0, r3
 80138ac:	3708      	adds	r7, #8
 80138ae:	46bd      	mov	sp, r7
 80138b0:	bd80      	pop	{r7, pc}
 80138b2:	bf00      	nop
 80138b4:	2000246c 	.word	0x2000246c

080138b8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80138b8:	b580      	push	{r7, lr}
 80138ba:	b084      	sub	sp, #16
 80138bc:	af00      	add	r7, sp, #0
 80138be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80138c0:	2300      	movs	r3, #0
 80138c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80138c4:	2300      	movs	r3, #0
 80138c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80138ce:	4618      	mov	r0, r3
 80138d0:	f7f1 f9d1 	bl	8004c76 <HAL_HCD_Start>
 80138d4:	4603      	mov	r3, r0
 80138d6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80138d8:	7bfb      	ldrb	r3, [r7, #15]
 80138da:	4618      	mov	r0, r3
 80138dc:	f000 f98c 	bl	8013bf8 <USBH_Get_USB_Status>
 80138e0:	4603      	mov	r3, r0
 80138e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80138e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80138e6:	4618      	mov	r0, r3
 80138e8:	3710      	adds	r7, #16
 80138ea:	46bd      	mov	sp, r7
 80138ec:	bd80      	pop	{r7, pc}

080138ee <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80138ee:	b580      	push	{r7, lr}
 80138f0:	b084      	sub	sp, #16
 80138f2:	af00      	add	r7, sp, #0
 80138f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80138f6:	2300      	movs	r3, #0
 80138f8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80138fa:	2300      	movs	r3, #0
 80138fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013904:	4618      	mov	r0, r3
 8013906:	f7f1 f9d9 	bl	8004cbc <HAL_HCD_Stop>
 801390a:	4603      	mov	r3, r0
 801390c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801390e:	7bfb      	ldrb	r3, [r7, #15]
 8013910:	4618      	mov	r0, r3
 8013912:	f000 f971 	bl	8013bf8 <USBH_Get_USB_Status>
 8013916:	4603      	mov	r3, r0
 8013918:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801391a:	7bbb      	ldrb	r3, [r7, #14]
}
 801391c:	4618      	mov	r0, r3
 801391e:	3710      	adds	r7, #16
 8013920:	46bd      	mov	sp, r7
 8013922:	bd80      	pop	{r7, pc}

08013924 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8013924:	b580      	push	{r7, lr}
 8013926:	b084      	sub	sp, #16
 8013928:	af00      	add	r7, sp, #0
 801392a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 801392c:	2301      	movs	r3, #1
 801392e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013936:	4618      	mov	r0, r3
 8013938:	f7f1 fa21 	bl	8004d7e <HAL_HCD_GetCurrentSpeed>
 801393c:	4603      	mov	r3, r0
 801393e:	2b02      	cmp	r3, #2
 8013940:	d00c      	beq.n	801395c <USBH_LL_GetSpeed+0x38>
 8013942:	2b02      	cmp	r3, #2
 8013944:	d80d      	bhi.n	8013962 <USBH_LL_GetSpeed+0x3e>
 8013946:	2b00      	cmp	r3, #0
 8013948:	d002      	beq.n	8013950 <USBH_LL_GetSpeed+0x2c>
 801394a:	2b01      	cmp	r3, #1
 801394c:	d003      	beq.n	8013956 <USBH_LL_GetSpeed+0x32>
 801394e:	e008      	b.n	8013962 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8013950:	2300      	movs	r3, #0
 8013952:	73fb      	strb	r3, [r7, #15]
    break;
 8013954:	e008      	b.n	8013968 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8013956:	2301      	movs	r3, #1
 8013958:	73fb      	strb	r3, [r7, #15]
    break;
 801395a:	e005      	b.n	8013968 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 801395c:	2302      	movs	r3, #2
 801395e:	73fb      	strb	r3, [r7, #15]
    break;
 8013960:	e002      	b.n	8013968 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8013962:	2301      	movs	r3, #1
 8013964:	73fb      	strb	r3, [r7, #15]
    break;
 8013966:	bf00      	nop
  }
  return  speed;
 8013968:	7bfb      	ldrb	r3, [r7, #15]
}
 801396a:	4618      	mov	r0, r3
 801396c:	3710      	adds	r7, #16
 801396e:	46bd      	mov	sp, r7
 8013970:	bd80      	pop	{r7, pc}

08013972 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8013972:	b580      	push	{r7, lr}
 8013974:	b084      	sub	sp, #16
 8013976:	af00      	add	r7, sp, #0
 8013978:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801397a:	2300      	movs	r3, #0
 801397c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801397e:	2300      	movs	r3, #0
 8013980:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013988:	4618      	mov	r0, r3
 801398a:	f7f1 f9b4 	bl	8004cf6 <HAL_HCD_ResetPort>
 801398e:	4603      	mov	r3, r0
 8013990:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013992:	7bfb      	ldrb	r3, [r7, #15]
 8013994:	4618      	mov	r0, r3
 8013996:	f000 f92f 	bl	8013bf8 <USBH_Get_USB_Status>
 801399a:	4603      	mov	r3, r0
 801399c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801399e:	7bbb      	ldrb	r3, [r7, #14]
}
 80139a0:	4618      	mov	r0, r3
 80139a2:	3710      	adds	r7, #16
 80139a4:	46bd      	mov	sp, r7
 80139a6:	bd80      	pop	{r7, pc}

080139a8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80139a8:	b580      	push	{r7, lr}
 80139aa:	b082      	sub	sp, #8
 80139ac:	af00      	add	r7, sp, #0
 80139ae:	6078      	str	r0, [r7, #4]
 80139b0:	460b      	mov	r3, r1
 80139b2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80139ba:	78fa      	ldrb	r2, [r7, #3]
 80139bc:	4611      	mov	r1, r2
 80139be:	4618      	mov	r0, r3
 80139c0:	f7f1 f9bb 	bl	8004d3a <HAL_HCD_HC_GetXferCount>
 80139c4:	4603      	mov	r3, r0
}
 80139c6:	4618      	mov	r0, r3
 80139c8:	3708      	adds	r7, #8
 80139ca:	46bd      	mov	sp, r7
 80139cc:	bd80      	pop	{r7, pc}

080139ce <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80139ce:	b590      	push	{r4, r7, lr}
 80139d0:	b089      	sub	sp, #36	; 0x24
 80139d2:	af04      	add	r7, sp, #16
 80139d4:	6078      	str	r0, [r7, #4]
 80139d6:	4608      	mov	r0, r1
 80139d8:	4611      	mov	r1, r2
 80139da:	461a      	mov	r2, r3
 80139dc:	4603      	mov	r3, r0
 80139de:	70fb      	strb	r3, [r7, #3]
 80139e0:	460b      	mov	r3, r1
 80139e2:	70bb      	strb	r3, [r7, #2]
 80139e4:	4613      	mov	r3, r2
 80139e6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80139e8:	2300      	movs	r3, #0
 80139ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80139ec:	2300      	movs	r3, #0
 80139ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80139f6:	787c      	ldrb	r4, [r7, #1]
 80139f8:	78ba      	ldrb	r2, [r7, #2]
 80139fa:	78f9      	ldrb	r1, [r7, #3]
 80139fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80139fe:	9302      	str	r3, [sp, #8]
 8013a00:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013a04:	9301      	str	r3, [sp, #4]
 8013a06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013a0a:	9300      	str	r3, [sp, #0]
 8013a0c:	4623      	mov	r3, r4
 8013a0e:	f7f0 fe1f 	bl	8004650 <HAL_HCD_HC_Init>
 8013a12:	4603      	mov	r3, r0
 8013a14:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8013a16:	7bfb      	ldrb	r3, [r7, #15]
 8013a18:	4618      	mov	r0, r3
 8013a1a:	f000 f8ed 	bl	8013bf8 <USBH_Get_USB_Status>
 8013a1e:	4603      	mov	r3, r0
 8013a20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013a22:	7bbb      	ldrb	r3, [r7, #14]
}
 8013a24:	4618      	mov	r0, r3
 8013a26:	3714      	adds	r7, #20
 8013a28:	46bd      	mov	sp, r7
 8013a2a:	bd90      	pop	{r4, r7, pc}

08013a2c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013a2c:	b580      	push	{r7, lr}
 8013a2e:	b084      	sub	sp, #16
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	6078      	str	r0, [r7, #4]
 8013a34:	460b      	mov	r3, r1
 8013a36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013a38:	2300      	movs	r3, #0
 8013a3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013a3c:	2300      	movs	r3, #0
 8013a3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013a46:	78fa      	ldrb	r2, [r7, #3]
 8013a48:	4611      	mov	r1, r2
 8013a4a:	4618      	mov	r0, r3
 8013a4c:	f7f0 fe8f 	bl	800476e <HAL_HCD_HC_Halt>
 8013a50:	4603      	mov	r3, r0
 8013a52:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013a54:	7bfb      	ldrb	r3, [r7, #15]
 8013a56:	4618      	mov	r0, r3
 8013a58:	f000 f8ce 	bl	8013bf8 <USBH_Get_USB_Status>
 8013a5c:	4603      	mov	r3, r0
 8013a5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013a60:	7bbb      	ldrb	r3, [r7, #14]
}
 8013a62:	4618      	mov	r0, r3
 8013a64:	3710      	adds	r7, #16
 8013a66:	46bd      	mov	sp, r7
 8013a68:	bd80      	pop	{r7, pc}

08013a6a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8013a6a:	b590      	push	{r4, r7, lr}
 8013a6c:	b089      	sub	sp, #36	; 0x24
 8013a6e:	af04      	add	r7, sp, #16
 8013a70:	6078      	str	r0, [r7, #4]
 8013a72:	4608      	mov	r0, r1
 8013a74:	4611      	mov	r1, r2
 8013a76:	461a      	mov	r2, r3
 8013a78:	4603      	mov	r3, r0
 8013a7a:	70fb      	strb	r3, [r7, #3]
 8013a7c:	460b      	mov	r3, r1
 8013a7e:	70bb      	strb	r3, [r7, #2]
 8013a80:	4613      	mov	r3, r2
 8013a82:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013a84:	2300      	movs	r3, #0
 8013a86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013a88:	2300      	movs	r3, #0
 8013a8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8013a92:	787c      	ldrb	r4, [r7, #1]
 8013a94:	78ba      	ldrb	r2, [r7, #2]
 8013a96:	78f9      	ldrb	r1, [r7, #3]
 8013a98:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013a9c:	9303      	str	r3, [sp, #12]
 8013a9e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013aa0:	9302      	str	r3, [sp, #8]
 8013aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aa4:	9301      	str	r3, [sp, #4]
 8013aa6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013aaa:	9300      	str	r3, [sp, #0]
 8013aac:	4623      	mov	r3, r4
 8013aae:	f7f0 fe81 	bl	80047b4 <HAL_HCD_HC_SubmitRequest>
 8013ab2:	4603      	mov	r3, r0
 8013ab4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8013ab6:	7bfb      	ldrb	r3, [r7, #15]
 8013ab8:	4618      	mov	r0, r3
 8013aba:	f000 f89d 	bl	8013bf8 <USBH_Get_USB_Status>
 8013abe:	4603      	mov	r3, r0
 8013ac0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013ac2:	7bbb      	ldrb	r3, [r7, #14]
}
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	3714      	adds	r7, #20
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	bd90      	pop	{r4, r7, pc}

08013acc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013acc:	b580      	push	{r7, lr}
 8013ace:	b082      	sub	sp, #8
 8013ad0:	af00      	add	r7, sp, #0
 8013ad2:	6078      	str	r0, [r7, #4]
 8013ad4:	460b      	mov	r3, r1
 8013ad6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013ade:	78fa      	ldrb	r2, [r7, #3]
 8013ae0:	4611      	mov	r1, r2
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	f7f1 f915 	bl	8004d12 <HAL_HCD_HC_GetURBState>
 8013ae8:	4603      	mov	r3, r0
}
 8013aea:	4618      	mov	r0, r3
 8013aec:	3708      	adds	r7, #8
 8013aee:	46bd      	mov	sp, r7
 8013af0:	bd80      	pop	{r7, pc}

08013af2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8013af2:	b580      	push	{r7, lr}
 8013af4:	b082      	sub	sp, #8
 8013af6:	af00      	add	r7, sp, #0
 8013af8:	6078      	str	r0, [r7, #4]
 8013afa:	460b      	mov	r3, r1
 8013afc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8013b04:	2b01      	cmp	r3, #1
 8013b06:	d103      	bne.n	8013b10 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8013b08:	78fb      	ldrb	r3, [r7, #3]
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	f000 f8a0 	bl	8013c50 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8013b10:	20c8      	movs	r0, #200	; 0xc8
 8013b12:	f7ef fc9b 	bl	800344c <HAL_Delay>
  return USBH_OK;
 8013b16:	2300      	movs	r3, #0
}
 8013b18:	4618      	mov	r0, r3
 8013b1a:	3708      	adds	r7, #8
 8013b1c:	46bd      	mov	sp, r7
 8013b1e:	bd80      	pop	{r7, pc}

08013b20 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8013b20:	b480      	push	{r7}
 8013b22:	b085      	sub	sp, #20
 8013b24:	af00      	add	r7, sp, #0
 8013b26:	6078      	str	r0, [r7, #4]
 8013b28:	460b      	mov	r3, r1
 8013b2a:	70fb      	strb	r3, [r7, #3]
 8013b2c:	4613      	mov	r3, r2
 8013b2e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013b36:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8013b38:	78fb      	ldrb	r3, [r7, #3]
 8013b3a:	68fa      	ldr	r2, [r7, #12]
 8013b3c:	212c      	movs	r1, #44	; 0x2c
 8013b3e:	fb01 f303 	mul.w	r3, r1, r3
 8013b42:	4413      	add	r3, r2
 8013b44:	333b      	adds	r3, #59	; 0x3b
 8013b46:	781b      	ldrb	r3, [r3, #0]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d009      	beq.n	8013b60 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8013b4c:	78fb      	ldrb	r3, [r7, #3]
 8013b4e:	68fa      	ldr	r2, [r7, #12]
 8013b50:	212c      	movs	r1, #44	; 0x2c
 8013b52:	fb01 f303 	mul.w	r3, r1, r3
 8013b56:	4413      	add	r3, r2
 8013b58:	3354      	adds	r3, #84	; 0x54
 8013b5a:	78ba      	ldrb	r2, [r7, #2]
 8013b5c:	701a      	strb	r2, [r3, #0]
 8013b5e:	e008      	b.n	8013b72 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8013b60:	78fb      	ldrb	r3, [r7, #3]
 8013b62:	68fa      	ldr	r2, [r7, #12]
 8013b64:	212c      	movs	r1, #44	; 0x2c
 8013b66:	fb01 f303 	mul.w	r3, r1, r3
 8013b6a:	4413      	add	r3, r2
 8013b6c:	3355      	adds	r3, #85	; 0x55
 8013b6e:	78ba      	ldrb	r2, [r7, #2]
 8013b70:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8013b72:	2300      	movs	r3, #0
}
 8013b74:	4618      	mov	r0, r3
 8013b76:	3714      	adds	r7, #20
 8013b78:	46bd      	mov	sp, r7
 8013b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b7e:	4770      	bx	lr

08013b80 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013b80:	b480      	push	{r7}
 8013b82:	b085      	sub	sp, #20
 8013b84:	af00      	add	r7, sp, #0
 8013b86:	6078      	str	r0, [r7, #4]
 8013b88:	460b      	mov	r3, r1
 8013b8a:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013b96:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8013b98:	78fb      	ldrb	r3, [r7, #3]
 8013b9a:	68ba      	ldr	r2, [r7, #8]
 8013b9c:	212c      	movs	r1, #44	; 0x2c
 8013b9e:	fb01 f303 	mul.w	r3, r1, r3
 8013ba2:	4413      	add	r3, r2
 8013ba4:	333b      	adds	r3, #59	; 0x3b
 8013ba6:	781b      	ldrb	r3, [r3, #0]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d009      	beq.n	8013bc0 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8013bac:	78fb      	ldrb	r3, [r7, #3]
 8013bae:	68ba      	ldr	r2, [r7, #8]
 8013bb0:	212c      	movs	r1, #44	; 0x2c
 8013bb2:	fb01 f303 	mul.w	r3, r1, r3
 8013bb6:	4413      	add	r3, r2
 8013bb8:	3354      	adds	r3, #84	; 0x54
 8013bba:	781b      	ldrb	r3, [r3, #0]
 8013bbc:	73fb      	strb	r3, [r7, #15]
 8013bbe:	e008      	b.n	8013bd2 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8013bc0:	78fb      	ldrb	r3, [r7, #3]
 8013bc2:	68ba      	ldr	r2, [r7, #8]
 8013bc4:	212c      	movs	r1, #44	; 0x2c
 8013bc6:	fb01 f303 	mul.w	r3, r1, r3
 8013bca:	4413      	add	r3, r2
 8013bcc:	3355      	adds	r3, #85	; 0x55
 8013bce:	781b      	ldrb	r3, [r3, #0]
 8013bd0:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8013bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	3714      	adds	r7, #20
 8013bd8:	46bd      	mov	sp, r7
 8013bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bde:	4770      	bx	lr

08013be0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8013be0:	b580      	push	{r7, lr}
 8013be2:	b082      	sub	sp, #8
 8013be4:	af00      	add	r7, sp, #0
 8013be6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8013be8:	6878      	ldr	r0, [r7, #4]
 8013bea:	f7ef fc2f 	bl	800344c <HAL_Delay>
}
 8013bee:	bf00      	nop
 8013bf0:	3708      	adds	r7, #8
 8013bf2:	46bd      	mov	sp, r7
 8013bf4:	bd80      	pop	{r7, pc}
	...

08013bf8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013bf8:	b480      	push	{r7}
 8013bfa:	b085      	sub	sp, #20
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	4603      	mov	r3, r0
 8013c00:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013c02:	2300      	movs	r3, #0
 8013c04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013c06:	79fb      	ldrb	r3, [r7, #7]
 8013c08:	2b03      	cmp	r3, #3
 8013c0a:	d817      	bhi.n	8013c3c <USBH_Get_USB_Status+0x44>
 8013c0c:	a201      	add	r2, pc, #4	; (adr r2, 8013c14 <USBH_Get_USB_Status+0x1c>)
 8013c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c12:	bf00      	nop
 8013c14:	08013c25 	.word	0x08013c25
 8013c18:	08013c2b 	.word	0x08013c2b
 8013c1c:	08013c31 	.word	0x08013c31
 8013c20:	08013c37 	.word	0x08013c37
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8013c24:	2300      	movs	r3, #0
 8013c26:	73fb      	strb	r3, [r7, #15]
    break;
 8013c28:	e00b      	b.n	8013c42 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8013c2a:	2302      	movs	r3, #2
 8013c2c:	73fb      	strb	r3, [r7, #15]
    break;
 8013c2e:	e008      	b.n	8013c42 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8013c30:	2301      	movs	r3, #1
 8013c32:	73fb      	strb	r3, [r7, #15]
    break;
 8013c34:	e005      	b.n	8013c42 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8013c36:	2302      	movs	r3, #2
 8013c38:	73fb      	strb	r3, [r7, #15]
    break;
 8013c3a:	e002      	b.n	8013c42 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8013c3c:	2302      	movs	r3, #2
 8013c3e:	73fb      	strb	r3, [r7, #15]
    break;
 8013c40:	bf00      	nop
  }
  return usb_status;
 8013c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c44:	4618      	mov	r0, r3
 8013c46:	3714      	adds	r7, #20
 8013c48:	46bd      	mov	sp, r7
 8013c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c4e:	4770      	bx	lr

08013c50 <MX_DriverVbusFS>:
 *           - 1 : VBUS Active
 *           - 0 : VBUS Inactive
 */

// JIA change, notice (GPIO_PIN_SET, GPIO_PIN_RESET), sometimes it is wrong
void MX_DriverVbusFS(uint8_t state) {
 8013c50:	b580      	push	{r7, lr}
 8013c52:	b084      	sub	sp, #16
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	4603      	mov	r3, r0
 8013c58:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8013c5a:	79fb      	ldrb	r3, [r7, #7]
 8013c5c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if (state == 0) {
 8013c5e:	79fb      	ldrb	r3, [r7, #7]
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d102      	bne.n	8013c6a <MX_DriverVbusFS+0x1a>
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8013c64:	2301      	movs	r3, #1
 8013c66:	73fb      	strb	r3, [r7, #15]
 8013c68:	e001      	b.n	8013c6e <MX_DriverVbusFS+0x1e>
  } else {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, (GPIO_PinState)data);
 8013c6e:	7bfb      	ldrb	r3, [r7, #15]
 8013c70:	461a      	mov	r2, r3
 8013c72:	2101      	movs	r1, #1
 8013c74:	4803      	ldr	r0, [pc, #12]	; (8013c84 <MX_DriverVbusFS+0x34>)
 8013c76:	f7f0 fc57 	bl	8004528 <HAL_GPIO_WritePin>
}
 8013c7a:	bf00      	nop
 8013c7c:	3710      	adds	r7, #16
 8013c7e:	46bd      	mov	sp, r7
 8013c80:	bd80      	pop	{r7, pc}
 8013c82:	bf00      	nop
 8013c84:	40020800 	.word	0x40020800

08013c88 <__errno>:
 8013c88:	4b01      	ldr	r3, [pc, #4]	; (8013c90 <__errno+0x8>)
 8013c8a:	6818      	ldr	r0, [r3, #0]
 8013c8c:	4770      	bx	lr
 8013c8e:	bf00      	nop
 8013c90:	20000068 	.word	0x20000068

08013c94 <__libc_init_array>:
 8013c94:	b570      	push	{r4, r5, r6, lr}
 8013c96:	4d0d      	ldr	r5, [pc, #52]	; (8013ccc <__libc_init_array+0x38>)
 8013c98:	4c0d      	ldr	r4, [pc, #52]	; (8013cd0 <__libc_init_array+0x3c>)
 8013c9a:	1b64      	subs	r4, r4, r5
 8013c9c:	10a4      	asrs	r4, r4, #2
 8013c9e:	2600      	movs	r6, #0
 8013ca0:	42a6      	cmp	r6, r4
 8013ca2:	d109      	bne.n	8013cb8 <__libc_init_array+0x24>
 8013ca4:	4d0b      	ldr	r5, [pc, #44]	; (8013cd4 <__libc_init_array+0x40>)
 8013ca6:	4c0c      	ldr	r4, [pc, #48]	; (8013cd8 <__libc_init_array+0x44>)
 8013ca8:	f002 ff34 	bl	8016b14 <_init>
 8013cac:	1b64      	subs	r4, r4, r5
 8013cae:	10a4      	asrs	r4, r4, #2
 8013cb0:	2600      	movs	r6, #0
 8013cb2:	42a6      	cmp	r6, r4
 8013cb4:	d105      	bne.n	8013cc2 <__libc_init_array+0x2e>
 8013cb6:	bd70      	pop	{r4, r5, r6, pc}
 8013cb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8013cbc:	4798      	blx	r3
 8013cbe:	3601      	adds	r6, #1
 8013cc0:	e7ee      	b.n	8013ca0 <__libc_init_array+0xc>
 8013cc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8013cc6:	4798      	blx	r3
 8013cc8:	3601      	adds	r6, #1
 8013cca:	e7f2      	b.n	8013cb2 <__libc_init_array+0x1e>
 8013ccc:	0801748c 	.word	0x0801748c
 8013cd0:	0801748c 	.word	0x0801748c
 8013cd4:	0801748c 	.word	0x0801748c
 8013cd8:	08017490 	.word	0x08017490

08013cdc <malloc>:
 8013cdc:	4b02      	ldr	r3, [pc, #8]	; (8013ce8 <malloc+0xc>)
 8013cde:	4601      	mov	r1, r0
 8013ce0:	6818      	ldr	r0, [r3, #0]
 8013ce2:	f000 b88d 	b.w	8013e00 <_malloc_r>
 8013ce6:	bf00      	nop
 8013ce8:	20000068 	.word	0x20000068

08013cec <free>:
 8013cec:	4b02      	ldr	r3, [pc, #8]	; (8013cf8 <free+0xc>)
 8013cee:	4601      	mov	r1, r0
 8013cf0:	6818      	ldr	r0, [r3, #0]
 8013cf2:	f000 b819 	b.w	8013d28 <_free_r>
 8013cf6:	bf00      	nop
 8013cf8:	20000068 	.word	0x20000068

08013cfc <memcpy>:
 8013cfc:	440a      	add	r2, r1
 8013cfe:	4291      	cmp	r1, r2
 8013d00:	f100 33ff 	add.w	r3, r0, #4294967295
 8013d04:	d100      	bne.n	8013d08 <memcpy+0xc>
 8013d06:	4770      	bx	lr
 8013d08:	b510      	push	{r4, lr}
 8013d0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013d0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013d12:	4291      	cmp	r1, r2
 8013d14:	d1f9      	bne.n	8013d0a <memcpy+0xe>
 8013d16:	bd10      	pop	{r4, pc}

08013d18 <memset>:
 8013d18:	4402      	add	r2, r0
 8013d1a:	4603      	mov	r3, r0
 8013d1c:	4293      	cmp	r3, r2
 8013d1e:	d100      	bne.n	8013d22 <memset+0xa>
 8013d20:	4770      	bx	lr
 8013d22:	f803 1b01 	strb.w	r1, [r3], #1
 8013d26:	e7f9      	b.n	8013d1c <memset+0x4>

08013d28 <_free_r>:
 8013d28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013d2a:	2900      	cmp	r1, #0
 8013d2c:	d044      	beq.n	8013db8 <_free_r+0x90>
 8013d2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013d32:	9001      	str	r0, [sp, #4]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	f1a1 0404 	sub.w	r4, r1, #4
 8013d3a:	bfb8      	it	lt
 8013d3c:	18e4      	addlt	r4, r4, r3
 8013d3e:	f001 fc15 	bl	801556c <__malloc_lock>
 8013d42:	4a1e      	ldr	r2, [pc, #120]	; (8013dbc <_free_r+0x94>)
 8013d44:	9801      	ldr	r0, [sp, #4]
 8013d46:	6813      	ldr	r3, [r2, #0]
 8013d48:	b933      	cbnz	r3, 8013d58 <_free_r+0x30>
 8013d4a:	6063      	str	r3, [r4, #4]
 8013d4c:	6014      	str	r4, [r2, #0]
 8013d4e:	b003      	add	sp, #12
 8013d50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013d54:	f001 bc10 	b.w	8015578 <__malloc_unlock>
 8013d58:	42a3      	cmp	r3, r4
 8013d5a:	d908      	bls.n	8013d6e <_free_r+0x46>
 8013d5c:	6825      	ldr	r5, [r4, #0]
 8013d5e:	1961      	adds	r1, r4, r5
 8013d60:	428b      	cmp	r3, r1
 8013d62:	bf01      	itttt	eq
 8013d64:	6819      	ldreq	r1, [r3, #0]
 8013d66:	685b      	ldreq	r3, [r3, #4]
 8013d68:	1949      	addeq	r1, r1, r5
 8013d6a:	6021      	streq	r1, [r4, #0]
 8013d6c:	e7ed      	b.n	8013d4a <_free_r+0x22>
 8013d6e:	461a      	mov	r2, r3
 8013d70:	685b      	ldr	r3, [r3, #4]
 8013d72:	b10b      	cbz	r3, 8013d78 <_free_r+0x50>
 8013d74:	42a3      	cmp	r3, r4
 8013d76:	d9fa      	bls.n	8013d6e <_free_r+0x46>
 8013d78:	6811      	ldr	r1, [r2, #0]
 8013d7a:	1855      	adds	r5, r2, r1
 8013d7c:	42a5      	cmp	r5, r4
 8013d7e:	d10b      	bne.n	8013d98 <_free_r+0x70>
 8013d80:	6824      	ldr	r4, [r4, #0]
 8013d82:	4421      	add	r1, r4
 8013d84:	1854      	adds	r4, r2, r1
 8013d86:	42a3      	cmp	r3, r4
 8013d88:	6011      	str	r1, [r2, #0]
 8013d8a:	d1e0      	bne.n	8013d4e <_free_r+0x26>
 8013d8c:	681c      	ldr	r4, [r3, #0]
 8013d8e:	685b      	ldr	r3, [r3, #4]
 8013d90:	6053      	str	r3, [r2, #4]
 8013d92:	4421      	add	r1, r4
 8013d94:	6011      	str	r1, [r2, #0]
 8013d96:	e7da      	b.n	8013d4e <_free_r+0x26>
 8013d98:	d902      	bls.n	8013da0 <_free_r+0x78>
 8013d9a:	230c      	movs	r3, #12
 8013d9c:	6003      	str	r3, [r0, #0]
 8013d9e:	e7d6      	b.n	8013d4e <_free_r+0x26>
 8013da0:	6825      	ldr	r5, [r4, #0]
 8013da2:	1961      	adds	r1, r4, r5
 8013da4:	428b      	cmp	r3, r1
 8013da6:	bf04      	itt	eq
 8013da8:	6819      	ldreq	r1, [r3, #0]
 8013daa:	685b      	ldreq	r3, [r3, #4]
 8013dac:	6063      	str	r3, [r4, #4]
 8013dae:	bf04      	itt	eq
 8013db0:	1949      	addeq	r1, r1, r5
 8013db2:	6021      	streq	r1, [r4, #0]
 8013db4:	6054      	str	r4, [r2, #4]
 8013db6:	e7ca      	b.n	8013d4e <_free_r+0x26>
 8013db8:	b003      	add	sp, #12
 8013dba:	bd30      	pop	{r4, r5, pc}
 8013dbc:	20002770 	.word	0x20002770

08013dc0 <sbrk_aligned>:
 8013dc0:	b570      	push	{r4, r5, r6, lr}
 8013dc2:	4e0e      	ldr	r6, [pc, #56]	; (8013dfc <sbrk_aligned+0x3c>)
 8013dc4:	460c      	mov	r4, r1
 8013dc6:	6831      	ldr	r1, [r6, #0]
 8013dc8:	4605      	mov	r5, r0
 8013dca:	b911      	cbnz	r1, 8013dd2 <sbrk_aligned+0x12>
 8013dcc:	f000 fcf6 	bl	80147bc <_sbrk_r>
 8013dd0:	6030      	str	r0, [r6, #0]
 8013dd2:	4621      	mov	r1, r4
 8013dd4:	4628      	mov	r0, r5
 8013dd6:	f000 fcf1 	bl	80147bc <_sbrk_r>
 8013dda:	1c43      	adds	r3, r0, #1
 8013ddc:	d00a      	beq.n	8013df4 <sbrk_aligned+0x34>
 8013dde:	1cc4      	adds	r4, r0, #3
 8013de0:	f024 0403 	bic.w	r4, r4, #3
 8013de4:	42a0      	cmp	r0, r4
 8013de6:	d007      	beq.n	8013df8 <sbrk_aligned+0x38>
 8013de8:	1a21      	subs	r1, r4, r0
 8013dea:	4628      	mov	r0, r5
 8013dec:	f000 fce6 	bl	80147bc <_sbrk_r>
 8013df0:	3001      	adds	r0, #1
 8013df2:	d101      	bne.n	8013df8 <sbrk_aligned+0x38>
 8013df4:	f04f 34ff 	mov.w	r4, #4294967295
 8013df8:	4620      	mov	r0, r4
 8013dfa:	bd70      	pop	{r4, r5, r6, pc}
 8013dfc:	20002774 	.word	0x20002774

08013e00 <_malloc_r>:
 8013e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e04:	1ccd      	adds	r5, r1, #3
 8013e06:	f025 0503 	bic.w	r5, r5, #3
 8013e0a:	3508      	adds	r5, #8
 8013e0c:	2d0c      	cmp	r5, #12
 8013e0e:	bf38      	it	cc
 8013e10:	250c      	movcc	r5, #12
 8013e12:	2d00      	cmp	r5, #0
 8013e14:	4607      	mov	r7, r0
 8013e16:	db01      	blt.n	8013e1c <_malloc_r+0x1c>
 8013e18:	42a9      	cmp	r1, r5
 8013e1a:	d905      	bls.n	8013e28 <_malloc_r+0x28>
 8013e1c:	230c      	movs	r3, #12
 8013e1e:	603b      	str	r3, [r7, #0]
 8013e20:	2600      	movs	r6, #0
 8013e22:	4630      	mov	r0, r6
 8013e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e28:	4e2e      	ldr	r6, [pc, #184]	; (8013ee4 <_malloc_r+0xe4>)
 8013e2a:	f001 fb9f 	bl	801556c <__malloc_lock>
 8013e2e:	6833      	ldr	r3, [r6, #0]
 8013e30:	461c      	mov	r4, r3
 8013e32:	bb34      	cbnz	r4, 8013e82 <_malloc_r+0x82>
 8013e34:	4629      	mov	r1, r5
 8013e36:	4638      	mov	r0, r7
 8013e38:	f7ff ffc2 	bl	8013dc0 <sbrk_aligned>
 8013e3c:	1c43      	adds	r3, r0, #1
 8013e3e:	4604      	mov	r4, r0
 8013e40:	d14d      	bne.n	8013ede <_malloc_r+0xde>
 8013e42:	6834      	ldr	r4, [r6, #0]
 8013e44:	4626      	mov	r6, r4
 8013e46:	2e00      	cmp	r6, #0
 8013e48:	d140      	bne.n	8013ecc <_malloc_r+0xcc>
 8013e4a:	6823      	ldr	r3, [r4, #0]
 8013e4c:	4631      	mov	r1, r6
 8013e4e:	4638      	mov	r0, r7
 8013e50:	eb04 0803 	add.w	r8, r4, r3
 8013e54:	f000 fcb2 	bl	80147bc <_sbrk_r>
 8013e58:	4580      	cmp	r8, r0
 8013e5a:	d13a      	bne.n	8013ed2 <_malloc_r+0xd2>
 8013e5c:	6821      	ldr	r1, [r4, #0]
 8013e5e:	3503      	adds	r5, #3
 8013e60:	1a6d      	subs	r5, r5, r1
 8013e62:	f025 0503 	bic.w	r5, r5, #3
 8013e66:	3508      	adds	r5, #8
 8013e68:	2d0c      	cmp	r5, #12
 8013e6a:	bf38      	it	cc
 8013e6c:	250c      	movcc	r5, #12
 8013e6e:	4629      	mov	r1, r5
 8013e70:	4638      	mov	r0, r7
 8013e72:	f7ff ffa5 	bl	8013dc0 <sbrk_aligned>
 8013e76:	3001      	adds	r0, #1
 8013e78:	d02b      	beq.n	8013ed2 <_malloc_r+0xd2>
 8013e7a:	6823      	ldr	r3, [r4, #0]
 8013e7c:	442b      	add	r3, r5
 8013e7e:	6023      	str	r3, [r4, #0]
 8013e80:	e00e      	b.n	8013ea0 <_malloc_r+0xa0>
 8013e82:	6822      	ldr	r2, [r4, #0]
 8013e84:	1b52      	subs	r2, r2, r5
 8013e86:	d41e      	bmi.n	8013ec6 <_malloc_r+0xc6>
 8013e88:	2a0b      	cmp	r2, #11
 8013e8a:	d916      	bls.n	8013eba <_malloc_r+0xba>
 8013e8c:	1961      	adds	r1, r4, r5
 8013e8e:	42a3      	cmp	r3, r4
 8013e90:	6025      	str	r5, [r4, #0]
 8013e92:	bf18      	it	ne
 8013e94:	6059      	strne	r1, [r3, #4]
 8013e96:	6863      	ldr	r3, [r4, #4]
 8013e98:	bf08      	it	eq
 8013e9a:	6031      	streq	r1, [r6, #0]
 8013e9c:	5162      	str	r2, [r4, r5]
 8013e9e:	604b      	str	r3, [r1, #4]
 8013ea0:	4638      	mov	r0, r7
 8013ea2:	f104 060b 	add.w	r6, r4, #11
 8013ea6:	f001 fb67 	bl	8015578 <__malloc_unlock>
 8013eaa:	f026 0607 	bic.w	r6, r6, #7
 8013eae:	1d23      	adds	r3, r4, #4
 8013eb0:	1af2      	subs	r2, r6, r3
 8013eb2:	d0b6      	beq.n	8013e22 <_malloc_r+0x22>
 8013eb4:	1b9b      	subs	r3, r3, r6
 8013eb6:	50a3      	str	r3, [r4, r2]
 8013eb8:	e7b3      	b.n	8013e22 <_malloc_r+0x22>
 8013eba:	6862      	ldr	r2, [r4, #4]
 8013ebc:	42a3      	cmp	r3, r4
 8013ebe:	bf0c      	ite	eq
 8013ec0:	6032      	streq	r2, [r6, #0]
 8013ec2:	605a      	strne	r2, [r3, #4]
 8013ec4:	e7ec      	b.n	8013ea0 <_malloc_r+0xa0>
 8013ec6:	4623      	mov	r3, r4
 8013ec8:	6864      	ldr	r4, [r4, #4]
 8013eca:	e7b2      	b.n	8013e32 <_malloc_r+0x32>
 8013ecc:	4634      	mov	r4, r6
 8013ece:	6876      	ldr	r6, [r6, #4]
 8013ed0:	e7b9      	b.n	8013e46 <_malloc_r+0x46>
 8013ed2:	230c      	movs	r3, #12
 8013ed4:	603b      	str	r3, [r7, #0]
 8013ed6:	4638      	mov	r0, r7
 8013ed8:	f001 fb4e 	bl	8015578 <__malloc_unlock>
 8013edc:	e7a1      	b.n	8013e22 <_malloc_r+0x22>
 8013ede:	6025      	str	r5, [r4, #0]
 8013ee0:	e7de      	b.n	8013ea0 <_malloc_r+0xa0>
 8013ee2:	bf00      	nop
 8013ee4:	20002770 	.word	0x20002770

08013ee8 <__cvt>:
 8013ee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013eec:	ec55 4b10 	vmov	r4, r5, d0
 8013ef0:	2d00      	cmp	r5, #0
 8013ef2:	460e      	mov	r6, r1
 8013ef4:	4619      	mov	r1, r3
 8013ef6:	462b      	mov	r3, r5
 8013ef8:	bfbb      	ittet	lt
 8013efa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013efe:	461d      	movlt	r5, r3
 8013f00:	2300      	movge	r3, #0
 8013f02:	232d      	movlt	r3, #45	; 0x2d
 8013f04:	700b      	strb	r3, [r1, #0]
 8013f06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013f08:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013f0c:	4691      	mov	r9, r2
 8013f0e:	f023 0820 	bic.w	r8, r3, #32
 8013f12:	bfbc      	itt	lt
 8013f14:	4622      	movlt	r2, r4
 8013f16:	4614      	movlt	r4, r2
 8013f18:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013f1c:	d005      	beq.n	8013f2a <__cvt+0x42>
 8013f1e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8013f22:	d100      	bne.n	8013f26 <__cvt+0x3e>
 8013f24:	3601      	adds	r6, #1
 8013f26:	2102      	movs	r1, #2
 8013f28:	e000      	b.n	8013f2c <__cvt+0x44>
 8013f2a:	2103      	movs	r1, #3
 8013f2c:	ab03      	add	r3, sp, #12
 8013f2e:	9301      	str	r3, [sp, #4]
 8013f30:	ab02      	add	r3, sp, #8
 8013f32:	9300      	str	r3, [sp, #0]
 8013f34:	ec45 4b10 	vmov	d0, r4, r5
 8013f38:	4653      	mov	r3, sl
 8013f3a:	4632      	mov	r2, r6
 8013f3c:	f000 fd24 	bl	8014988 <_dtoa_r>
 8013f40:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8013f44:	4607      	mov	r7, r0
 8013f46:	d102      	bne.n	8013f4e <__cvt+0x66>
 8013f48:	f019 0f01 	tst.w	r9, #1
 8013f4c:	d022      	beq.n	8013f94 <__cvt+0xac>
 8013f4e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013f52:	eb07 0906 	add.w	r9, r7, r6
 8013f56:	d110      	bne.n	8013f7a <__cvt+0x92>
 8013f58:	783b      	ldrb	r3, [r7, #0]
 8013f5a:	2b30      	cmp	r3, #48	; 0x30
 8013f5c:	d10a      	bne.n	8013f74 <__cvt+0x8c>
 8013f5e:	2200      	movs	r2, #0
 8013f60:	2300      	movs	r3, #0
 8013f62:	4620      	mov	r0, r4
 8013f64:	4629      	mov	r1, r5
 8013f66:	f7ec fdaf 	bl	8000ac8 <__aeabi_dcmpeq>
 8013f6a:	b918      	cbnz	r0, 8013f74 <__cvt+0x8c>
 8013f6c:	f1c6 0601 	rsb	r6, r6, #1
 8013f70:	f8ca 6000 	str.w	r6, [sl]
 8013f74:	f8da 3000 	ldr.w	r3, [sl]
 8013f78:	4499      	add	r9, r3
 8013f7a:	2200      	movs	r2, #0
 8013f7c:	2300      	movs	r3, #0
 8013f7e:	4620      	mov	r0, r4
 8013f80:	4629      	mov	r1, r5
 8013f82:	f7ec fda1 	bl	8000ac8 <__aeabi_dcmpeq>
 8013f86:	b108      	cbz	r0, 8013f8c <__cvt+0xa4>
 8013f88:	f8cd 900c 	str.w	r9, [sp, #12]
 8013f8c:	2230      	movs	r2, #48	; 0x30
 8013f8e:	9b03      	ldr	r3, [sp, #12]
 8013f90:	454b      	cmp	r3, r9
 8013f92:	d307      	bcc.n	8013fa4 <__cvt+0xbc>
 8013f94:	9b03      	ldr	r3, [sp, #12]
 8013f96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013f98:	1bdb      	subs	r3, r3, r7
 8013f9a:	4638      	mov	r0, r7
 8013f9c:	6013      	str	r3, [r2, #0]
 8013f9e:	b004      	add	sp, #16
 8013fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fa4:	1c59      	adds	r1, r3, #1
 8013fa6:	9103      	str	r1, [sp, #12]
 8013fa8:	701a      	strb	r2, [r3, #0]
 8013faa:	e7f0      	b.n	8013f8e <__cvt+0xa6>

08013fac <__exponent>:
 8013fac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013fae:	4603      	mov	r3, r0
 8013fb0:	2900      	cmp	r1, #0
 8013fb2:	bfb8      	it	lt
 8013fb4:	4249      	neglt	r1, r1
 8013fb6:	f803 2b02 	strb.w	r2, [r3], #2
 8013fba:	bfb4      	ite	lt
 8013fbc:	222d      	movlt	r2, #45	; 0x2d
 8013fbe:	222b      	movge	r2, #43	; 0x2b
 8013fc0:	2909      	cmp	r1, #9
 8013fc2:	7042      	strb	r2, [r0, #1]
 8013fc4:	dd2a      	ble.n	801401c <__exponent+0x70>
 8013fc6:	f10d 0407 	add.w	r4, sp, #7
 8013fca:	46a4      	mov	ip, r4
 8013fcc:	270a      	movs	r7, #10
 8013fce:	46a6      	mov	lr, r4
 8013fd0:	460a      	mov	r2, r1
 8013fd2:	fb91 f6f7 	sdiv	r6, r1, r7
 8013fd6:	fb07 1516 	mls	r5, r7, r6, r1
 8013fda:	3530      	adds	r5, #48	; 0x30
 8013fdc:	2a63      	cmp	r2, #99	; 0x63
 8013fde:	f104 34ff 	add.w	r4, r4, #4294967295
 8013fe2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8013fe6:	4631      	mov	r1, r6
 8013fe8:	dcf1      	bgt.n	8013fce <__exponent+0x22>
 8013fea:	3130      	adds	r1, #48	; 0x30
 8013fec:	f1ae 0502 	sub.w	r5, lr, #2
 8013ff0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013ff4:	1c44      	adds	r4, r0, #1
 8013ff6:	4629      	mov	r1, r5
 8013ff8:	4561      	cmp	r1, ip
 8013ffa:	d30a      	bcc.n	8014012 <__exponent+0x66>
 8013ffc:	f10d 0209 	add.w	r2, sp, #9
 8014000:	eba2 020e 	sub.w	r2, r2, lr
 8014004:	4565      	cmp	r5, ip
 8014006:	bf88      	it	hi
 8014008:	2200      	movhi	r2, #0
 801400a:	4413      	add	r3, r2
 801400c:	1a18      	subs	r0, r3, r0
 801400e:	b003      	add	sp, #12
 8014010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014012:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014016:	f804 2f01 	strb.w	r2, [r4, #1]!
 801401a:	e7ed      	b.n	8013ff8 <__exponent+0x4c>
 801401c:	2330      	movs	r3, #48	; 0x30
 801401e:	3130      	adds	r1, #48	; 0x30
 8014020:	7083      	strb	r3, [r0, #2]
 8014022:	70c1      	strb	r1, [r0, #3]
 8014024:	1d03      	adds	r3, r0, #4
 8014026:	e7f1      	b.n	801400c <__exponent+0x60>

08014028 <_printf_float>:
 8014028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801402c:	ed2d 8b02 	vpush	{d8}
 8014030:	b08d      	sub	sp, #52	; 0x34
 8014032:	460c      	mov	r4, r1
 8014034:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014038:	4616      	mov	r6, r2
 801403a:	461f      	mov	r7, r3
 801403c:	4605      	mov	r5, r0
 801403e:	f001 fa91 	bl	8015564 <_localeconv_r>
 8014042:	f8d0 a000 	ldr.w	sl, [r0]
 8014046:	4650      	mov	r0, sl
 8014048:	f7ec f8c2 	bl	80001d0 <strlen>
 801404c:	2300      	movs	r3, #0
 801404e:	930a      	str	r3, [sp, #40]	; 0x28
 8014050:	6823      	ldr	r3, [r4, #0]
 8014052:	9305      	str	r3, [sp, #20]
 8014054:	f8d8 3000 	ldr.w	r3, [r8]
 8014058:	f894 b018 	ldrb.w	fp, [r4, #24]
 801405c:	3307      	adds	r3, #7
 801405e:	f023 0307 	bic.w	r3, r3, #7
 8014062:	f103 0208 	add.w	r2, r3, #8
 8014066:	f8c8 2000 	str.w	r2, [r8]
 801406a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801406e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014072:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014076:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801407a:	9307      	str	r3, [sp, #28]
 801407c:	f8cd 8018 	str.w	r8, [sp, #24]
 8014080:	ee08 0a10 	vmov	s16, r0
 8014084:	4b9f      	ldr	r3, [pc, #636]	; (8014304 <_printf_float+0x2dc>)
 8014086:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801408a:	f04f 32ff 	mov.w	r2, #4294967295
 801408e:	f7ec fd4d 	bl	8000b2c <__aeabi_dcmpun>
 8014092:	bb88      	cbnz	r0, 80140f8 <_printf_float+0xd0>
 8014094:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014098:	4b9a      	ldr	r3, [pc, #616]	; (8014304 <_printf_float+0x2dc>)
 801409a:	f04f 32ff 	mov.w	r2, #4294967295
 801409e:	f7ec fd27 	bl	8000af0 <__aeabi_dcmple>
 80140a2:	bb48      	cbnz	r0, 80140f8 <_printf_float+0xd0>
 80140a4:	2200      	movs	r2, #0
 80140a6:	2300      	movs	r3, #0
 80140a8:	4640      	mov	r0, r8
 80140aa:	4649      	mov	r1, r9
 80140ac:	f7ec fd16 	bl	8000adc <__aeabi_dcmplt>
 80140b0:	b110      	cbz	r0, 80140b8 <_printf_float+0x90>
 80140b2:	232d      	movs	r3, #45	; 0x2d
 80140b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80140b8:	4b93      	ldr	r3, [pc, #588]	; (8014308 <_printf_float+0x2e0>)
 80140ba:	4894      	ldr	r0, [pc, #592]	; (801430c <_printf_float+0x2e4>)
 80140bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80140c0:	bf94      	ite	ls
 80140c2:	4698      	movls	r8, r3
 80140c4:	4680      	movhi	r8, r0
 80140c6:	2303      	movs	r3, #3
 80140c8:	6123      	str	r3, [r4, #16]
 80140ca:	9b05      	ldr	r3, [sp, #20]
 80140cc:	f023 0204 	bic.w	r2, r3, #4
 80140d0:	6022      	str	r2, [r4, #0]
 80140d2:	f04f 0900 	mov.w	r9, #0
 80140d6:	9700      	str	r7, [sp, #0]
 80140d8:	4633      	mov	r3, r6
 80140da:	aa0b      	add	r2, sp, #44	; 0x2c
 80140dc:	4621      	mov	r1, r4
 80140de:	4628      	mov	r0, r5
 80140e0:	f000 f9d8 	bl	8014494 <_printf_common>
 80140e4:	3001      	adds	r0, #1
 80140e6:	f040 8090 	bne.w	801420a <_printf_float+0x1e2>
 80140ea:	f04f 30ff 	mov.w	r0, #4294967295
 80140ee:	b00d      	add	sp, #52	; 0x34
 80140f0:	ecbd 8b02 	vpop	{d8}
 80140f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140f8:	4642      	mov	r2, r8
 80140fa:	464b      	mov	r3, r9
 80140fc:	4640      	mov	r0, r8
 80140fe:	4649      	mov	r1, r9
 8014100:	f7ec fd14 	bl	8000b2c <__aeabi_dcmpun>
 8014104:	b140      	cbz	r0, 8014118 <_printf_float+0xf0>
 8014106:	464b      	mov	r3, r9
 8014108:	2b00      	cmp	r3, #0
 801410a:	bfbc      	itt	lt
 801410c:	232d      	movlt	r3, #45	; 0x2d
 801410e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8014112:	487f      	ldr	r0, [pc, #508]	; (8014310 <_printf_float+0x2e8>)
 8014114:	4b7f      	ldr	r3, [pc, #508]	; (8014314 <_printf_float+0x2ec>)
 8014116:	e7d1      	b.n	80140bc <_printf_float+0x94>
 8014118:	6863      	ldr	r3, [r4, #4]
 801411a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801411e:	9206      	str	r2, [sp, #24]
 8014120:	1c5a      	adds	r2, r3, #1
 8014122:	d13f      	bne.n	80141a4 <_printf_float+0x17c>
 8014124:	2306      	movs	r3, #6
 8014126:	6063      	str	r3, [r4, #4]
 8014128:	9b05      	ldr	r3, [sp, #20]
 801412a:	6861      	ldr	r1, [r4, #4]
 801412c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8014130:	2300      	movs	r3, #0
 8014132:	9303      	str	r3, [sp, #12]
 8014134:	ab0a      	add	r3, sp, #40	; 0x28
 8014136:	e9cd b301 	strd	fp, r3, [sp, #4]
 801413a:	ab09      	add	r3, sp, #36	; 0x24
 801413c:	ec49 8b10 	vmov	d0, r8, r9
 8014140:	9300      	str	r3, [sp, #0]
 8014142:	6022      	str	r2, [r4, #0]
 8014144:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014148:	4628      	mov	r0, r5
 801414a:	f7ff fecd 	bl	8013ee8 <__cvt>
 801414e:	9b06      	ldr	r3, [sp, #24]
 8014150:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014152:	2b47      	cmp	r3, #71	; 0x47
 8014154:	4680      	mov	r8, r0
 8014156:	d108      	bne.n	801416a <_printf_float+0x142>
 8014158:	1cc8      	adds	r0, r1, #3
 801415a:	db02      	blt.n	8014162 <_printf_float+0x13a>
 801415c:	6863      	ldr	r3, [r4, #4]
 801415e:	4299      	cmp	r1, r3
 8014160:	dd41      	ble.n	80141e6 <_printf_float+0x1be>
 8014162:	f1ab 0b02 	sub.w	fp, fp, #2
 8014166:	fa5f fb8b 	uxtb.w	fp, fp
 801416a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801416e:	d820      	bhi.n	80141b2 <_printf_float+0x18a>
 8014170:	3901      	subs	r1, #1
 8014172:	465a      	mov	r2, fp
 8014174:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014178:	9109      	str	r1, [sp, #36]	; 0x24
 801417a:	f7ff ff17 	bl	8013fac <__exponent>
 801417e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014180:	1813      	adds	r3, r2, r0
 8014182:	2a01      	cmp	r2, #1
 8014184:	4681      	mov	r9, r0
 8014186:	6123      	str	r3, [r4, #16]
 8014188:	dc02      	bgt.n	8014190 <_printf_float+0x168>
 801418a:	6822      	ldr	r2, [r4, #0]
 801418c:	07d2      	lsls	r2, r2, #31
 801418e:	d501      	bpl.n	8014194 <_printf_float+0x16c>
 8014190:	3301      	adds	r3, #1
 8014192:	6123      	str	r3, [r4, #16]
 8014194:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014198:	2b00      	cmp	r3, #0
 801419a:	d09c      	beq.n	80140d6 <_printf_float+0xae>
 801419c:	232d      	movs	r3, #45	; 0x2d
 801419e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80141a2:	e798      	b.n	80140d6 <_printf_float+0xae>
 80141a4:	9a06      	ldr	r2, [sp, #24]
 80141a6:	2a47      	cmp	r2, #71	; 0x47
 80141a8:	d1be      	bne.n	8014128 <_printf_float+0x100>
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d1bc      	bne.n	8014128 <_printf_float+0x100>
 80141ae:	2301      	movs	r3, #1
 80141b0:	e7b9      	b.n	8014126 <_printf_float+0xfe>
 80141b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80141b6:	d118      	bne.n	80141ea <_printf_float+0x1c2>
 80141b8:	2900      	cmp	r1, #0
 80141ba:	6863      	ldr	r3, [r4, #4]
 80141bc:	dd0b      	ble.n	80141d6 <_printf_float+0x1ae>
 80141be:	6121      	str	r1, [r4, #16]
 80141c0:	b913      	cbnz	r3, 80141c8 <_printf_float+0x1a0>
 80141c2:	6822      	ldr	r2, [r4, #0]
 80141c4:	07d0      	lsls	r0, r2, #31
 80141c6:	d502      	bpl.n	80141ce <_printf_float+0x1a6>
 80141c8:	3301      	adds	r3, #1
 80141ca:	440b      	add	r3, r1
 80141cc:	6123      	str	r3, [r4, #16]
 80141ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80141d0:	f04f 0900 	mov.w	r9, #0
 80141d4:	e7de      	b.n	8014194 <_printf_float+0x16c>
 80141d6:	b913      	cbnz	r3, 80141de <_printf_float+0x1b6>
 80141d8:	6822      	ldr	r2, [r4, #0]
 80141da:	07d2      	lsls	r2, r2, #31
 80141dc:	d501      	bpl.n	80141e2 <_printf_float+0x1ba>
 80141de:	3302      	adds	r3, #2
 80141e0:	e7f4      	b.n	80141cc <_printf_float+0x1a4>
 80141e2:	2301      	movs	r3, #1
 80141e4:	e7f2      	b.n	80141cc <_printf_float+0x1a4>
 80141e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80141ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80141ec:	4299      	cmp	r1, r3
 80141ee:	db05      	blt.n	80141fc <_printf_float+0x1d4>
 80141f0:	6823      	ldr	r3, [r4, #0]
 80141f2:	6121      	str	r1, [r4, #16]
 80141f4:	07d8      	lsls	r0, r3, #31
 80141f6:	d5ea      	bpl.n	80141ce <_printf_float+0x1a6>
 80141f8:	1c4b      	adds	r3, r1, #1
 80141fa:	e7e7      	b.n	80141cc <_printf_float+0x1a4>
 80141fc:	2900      	cmp	r1, #0
 80141fe:	bfd4      	ite	le
 8014200:	f1c1 0202 	rsble	r2, r1, #2
 8014204:	2201      	movgt	r2, #1
 8014206:	4413      	add	r3, r2
 8014208:	e7e0      	b.n	80141cc <_printf_float+0x1a4>
 801420a:	6823      	ldr	r3, [r4, #0]
 801420c:	055a      	lsls	r2, r3, #21
 801420e:	d407      	bmi.n	8014220 <_printf_float+0x1f8>
 8014210:	6923      	ldr	r3, [r4, #16]
 8014212:	4642      	mov	r2, r8
 8014214:	4631      	mov	r1, r6
 8014216:	4628      	mov	r0, r5
 8014218:	47b8      	blx	r7
 801421a:	3001      	adds	r0, #1
 801421c:	d12c      	bne.n	8014278 <_printf_float+0x250>
 801421e:	e764      	b.n	80140ea <_printf_float+0xc2>
 8014220:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014224:	f240 80e0 	bls.w	80143e8 <_printf_float+0x3c0>
 8014228:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801422c:	2200      	movs	r2, #0
 801422e:	2300      	movs	r3, #0
 8014230:	f7ec fc4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8014234:	2800      	cmp	r0, #0
 8014236:	d034      	beq.n	80142a2 <_printf_float+0x27a>
 8014238:	4a37      	ldr	r2, [pc, #220]	; (8014318 <_printf_float+0x2f0>)
 801423a:	2301      	movs	r3, #1
 801423c:	4631      	mov	r1, r6
 801423e:	4628      	mov	r0, r5
 8014240:	47b8      	blx	r7
 8014242:	3001      	adds	r0, #1
 8014244:	f43f af51 	beq.w	80140ea <_printf_float+0xc2>
 8014248:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801424c:	429a      	cmp	r2, r3
 801424e:	db02      	blt.n	8014256 <_printf_float+0x22e>
 8014250:	6823      	ldr	r3, [r4, #0]
 8014252:	07d8      	lsls	r0, r3, #31
 8014254:	d510      	bpl.n	8014278 <_printf_float+0x250>
 8014256:	ee18 3a10 	vmov	r3, s16
 801425a:	4652      	mov	r2, sl
 801425c:	4631      	mov	r1, r6
 801425e:	4628      	mov	r0, r5
 8014260:	47b8      	blx	r7
 8014262:	3001      	adds	r0, #1
 8014264:	f43f af41 	beq.w	80140ea <_printf_float+0xc2>
 8014268:	f04f 0800 	mov.w	r8, #0
 801426c:	f104 091a 	add.w	r9, r4, #26
 8014270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014272:	3b01      	subs	r3, #1
 8014274:	4543      	cmp	r3, r8
 8014276:	dc09      	bgt.n	801428c <_printf_float+0x264>
 8014278:	6823      	ldr	r3, [r4, #0]
 801427a:	079b      	lsls	r3, r3, #30
 801427c:	f100 8105 	bmi.w	801448a <_printf_float+0x462>
 8014280:	68e0      	ldr	r0, [r4, #12]
 8014282:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014284:	4298      	cmp	r0, r3
 8014286:	bfb8      	it	lt
 8014288:	4618      	movlt	r0, r3
 801428a:	e730      	b.n	80140ee <_printf_float+0xc6>
 801428c:	2301      	movs	r3, #1
 801428e:	464a      	mov	r2, r9
 8014290:	4631      	mov	r1, r6
 8014292:	4628      	mov	r0, r5
 8014294:	47b8      	blx	r7
 8014296:	3001      	adds	r0, #1
 8014298:	f43f af27 	beq.w	80140ea <_printf_float+0xc2>
 801429c:	f108 0801 	add.w	r8, r8, #1
 80142a0:	e7e6      	b.n	8014270 <_printf_float+0x248>
 80142a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	dc39      	bgt.n	801431c <_printf_float+0x2f4>
 80142a8:	4a1b      	ldr	r2, [pc, #108]	; (8014318 <_printf_float+0x2f0>)
 80142aa:	2301      	movs	r3, #1
 80142ac:	4631      	mov	r1, r6
 80142ae:	4628      	mov	r0, r5
 80142b0:	47b8      	blx	r7
 80142b2:	3001      	adds	r0, #1
 80142b4:	f43f af19 	beq.w	80140ea <_printf_float+0xc2>
 80142b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80142bc:	4313      	orrs	r3, r2
 80142be:	d102      	bne.n	80142c6 <_printf_float+0x29e>
 80142c0:	6823      	ldr	r3, [r4, #0]
 80142c2:	07d9      	lsls	r1, r3, #31
 80142c4:	d5d8      	bpl.n	8014278 <_printf_float+0x250>
 80142c6:	ee18 3a10 	vmov	r3, s16
 80142ca:	4652      	mov	r2, sl
 80142cc:	4631      	mov	r1, r6
 80142ce:	4628      	mov	r0, r5
 80142d0:	47b8      	blx	r7
 80142d2:	3001      	adds	r0, #1
 80142d4:	f43f af09 	beq.w	80140ea <_printf_float+0xc2>
 80142d8:	f04f 0900 	mov.w	r9, #0
 80142dc:	f104 0a1a 	add.w	sl, r4, #26
 80142e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142e2:	425b      	negs	r3, r3
 80142e4:	454b      	cmp	r3, r9
 80142e6:	dc01      	bgt.n	80142ec <_printf_float+0x2c4>
 80142e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80142ea:	e792      	b.n	8014212 <_printf_float+0x1ea>
 80142ec:	2301      	movs	r3, #1
 80142ee:	4652      	mov	r2, sl
 80142f0:	4631      	mov	r1, r6
 80142f2:	4628      	mov	r0, r5
 80142f4:	47b8      	blx	r7
 80142f6:	3001      	adds	r0, #1
 80142f8:	f43f aef7 	beq.w	80140ea <_printf_float+0xc2>
 80142fc:	f109 0901 	add.w	r9, r9, #1
 8014300:	e7ee      	b.n	80142e0 <_printf_float+0x2b8>
 8014302:	bf00      	nop
 8014304:	7fefffff 	.word	0x7fefffff
 8014308:	080170ac 	.word	0x080170ac
 801430c:	080170b0 	.word	0x080170b0
 8014310:	080170b8 	.word	0x080170b8
 8014314:	080170b4 	.word	0x080170b4
 8014318:	080170bc 	.word	0x080170bc
 801431c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801431e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014320:	429a      	cmp	r2, r3
 8014322:	bfa8      	it	ge
 8014324:	461a      	movge	r2, r3
 8014326:	2a00      	cmp	r2, #0
 8014328:	4691      	mov	r9, r2
 801432a:	dc37      	bgt.n	801439c <_printf_float+0x374>
 801432c:	f04f 0b00 	mov.w	fp, #0
 8014330:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014334:	f104 021a 	add.w	r2, r4, #26
 8014338:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801433a:	9305      	str	r3, [sp, #20]
 801433c:	eba3 0309 	sub.w	r3, r3, r9
 8014340:	455b      	cmp	r3, fp
 8014342:	dc33      	bgt.n	80143ac <_printf_float+0x384>
 8014344:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014348:	429a      	cmp	r2, r3
 801434a:	db3b      	blt.n	80143c4 <_printf_float+0x39c>
 801434c:	6823      	ldr	r3, [r4, #0]
 801434e:	07da      	lsls	r2, r3, #31
 8014350:	d438      	bmi.n	80143c4 <_printf_float+0x39c>
 8014352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014354:	9a05      	ldr	r2, [sp, #20]
 8014356:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014358:	1a9a      	subs	r2, r3, r2
 801435a:	eba3 0901 	sub.w	r9, r3, r1
 801435e:	4591      	cmp	r9, r2
 8014360:	bfa8      	it	ge
 8014362:	4691      	movge	r9, r2
 8014364:	f1b9 0f00 	cmp.w	r9, #0
 8014368:	dc35      	bgt.n	80143d6 <_printf_float+0x3ae>
 801436a:	f04f 0800 	mov.w	r8, #0
 801436e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014372:	f104 0a1a 	add.w	sl, r4, #26
 8014376:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801437a:	1a9b      	subs	r3, r3, r2
 801437c:	eba3 0309 	sub.w	r3, r3, r9
 8014380:	4543      	cmp	r3, r8
 8014382:	f77f af79 	ble.w	8014278 <_printf_float+0x250>
 8014386:	2301      	movs	r3, #1
 8014388:	4652      	mov	r2, sl
 801438a:	4631      	mov	r1, r6
 801438c:	4628      	mov	r0, r5
 801438e:	47b8      	blx	r7
 8014390:	3001      	adds	r0, #1
 8014392:	f43f aeaa 	beq.w	80140ea <_printf_float+0xc2>
 8014396:	f108 0801 	add.w	r8, r8, #1
 801439a:	e7ec      	b.n	8014376 <_printf_float+0x34e>
 801439c:	4613      	mov	r3, r2
 801439e:	4631      	mov	r1, r6
 80143a0:	4642      	mov	r2, r8
 80143a2:	4628      	mov	r0, r5
 80143a4:	47b8      	blx	r7
 80143a6:	3001      	adds	r0, #1
 80143a8:	d1c0      	bne.n	801432c <_printf_float+0x304>
 80143aa:	e69e      	b.n	80140ea <_printf_float+0xc2>
 80143ac:	2301      	movs	r3, #1
 80143ae:	4631      	mov	r1, r6
 80143b0:	4628      	mov	r0, r5
 80143b2:	9205      	str	r2, [sp, #20]
 80143b4:	47b8      	blx	r7
 80143b6:	3001      	adds	r0, #1
 80143b8:	f43f ae97 	beq.w	80140ea <_printf_float+0xc2>
 80143bc:	9a05      	ldr	r2, [sp, #20]
 80143be:	f10b 0b01 	add.w	fp, fp, #1
 80143c2:	e7b9      	b.n	8014338 <_printf_float+0x310>
 80143c4:	ee18 3a10 	vmov	r3, s16
 80143c8:	4652      	mov	r2, sl
 80143ca:	4631      	mov	r1, r6
 80143cc:	4628      	mov	r0, r5
 80143ce:	47b8      	blx	r7
 80143d0:	3001      	adds	r0, #1
 80143d2:	d1be      	bne.n	8014352 <_printf_float+0x32a>
 80143d4:	e689      	b.n	80140ea <_printf_float+0xc2>
 80143d6:	9a05      	ldr	r2, [sp, #20]
 80143d8:	464b      	mov	r3, r9
 80143da:	4442      	add	r2, r8
 80143dc:	4631      	mov	r1, r6
 80143de:	4628      	mov	r0, r5
 80143e0:	47b8      	blx	r7
 80143e2:	3001      	adds	r0, #1
 80143e4:	d1c1      	bne.n	801436a <_printf_float+0x342>
 80143e6:	e680      	b.n	80140ea <_printf_float+0xc2>
 80143e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80143ea:	2a01      	cmp	r2, #1
 80143ec:	dc01      	bgt.n	80143f2 <_printf_float+0x3ca>
 80143ee:	07db      	lsls	r3, r3, #31
 80143f0:	d538      	bpl.n	8014464 <_printf_float+0x43c>
 80143f2:	2301      	movs	r3, #1
 80143f4:	4642      	mov	r2, r8
 80143f6:	4631      	mov	r1, r6
 80143f8:	4628      	mov	r0, r5
 80143fa:	47b8      	blx	r7
 80143fc:	3001      	adds	r0, #1
 80143fe:	f43f ae74 	beq.w	80140ea <_printf_float+0xc2>
 8014402:	ee18 3a10 	vmov	r3, s16
 8014406:	4652      	mov	r2, sl
 8014408:	4631      	mov	r1, r6
 801440a:	4628      	mov	r0, r5
 801440c:	47b8      	blx	r7
 801440e:	3001      	adds	r0, #1
 8014410:	f43f ae6b 	beq.w	80140ea <_printf_float+0xc2>
 8014414:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014418:	2200      	movs	r2, #0
 801441a:	2300      	movs	r3, #0
 801441c:	f7ec fb54 	bl	8000ac8 <__aeabi_dcmpeq>
 8014420:	b9d8      	cbnz	r0, 801445a <_printf_float+0x432>
 8014422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014424:	f108 0201 	add.w	r2, r8, #1
 8014428:	3b01      	subs	r3, #1
 801442a:	4631      	mov	r1, r6
 801442c:	4628      	mov	r0, r5
 801442e:	47b8      	blx	r7
 8014430:	3001      	adds	r0, #1
 8014432:	d10e      	bne.n	8014452 <_printf_float+0x42a>
 8014434:	e659      	b.n	80140ea <_printf_float+0xc2>
 8014436:	2301      	movs	r3, #1
 8014438:	4652      	mov	r2, sl
 801443a:	4631      	mov	r1, r6
 801443c:	4628      	mov	r0, r5
 801443e:	47b8      	blx	r7
 8014440:	3001      	adds	r0, #1
 8014442:	f43f ae52 	beq.w	80140ea <_printf_float+0xc2>
 8014446:	f108 0801 	add.w	r8, r8, #1
 801444a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801444c:	3b01      	subs	r3, #1
 801444e:	4543      	cmp	r3, r8
 8014450:	dcf1      	bgt.n	8014436 <_printf_float+0x40e>
 8014452:	464b      	mov	r3, r9
 8014454:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014458:	e6dc      	b.n	8014214 <_printf_float+0x1ec>
 801445a:	f04f 0800 	mov.w	r8, #0
 801445e:	f104 0a1a 	add.w	sl, r4, #26
 8014462:	e7f2      	b.n	801444a <_printf_float+0x422>
 8014464:	2301      	movs	r3, #1
 8014466:	4642      	mov	r2, r8
 8014468:	e7df      	b.n	801442a <_printf_float+0x402>
 801446a:	2301      	movs	r3, #1
 801446c:	464a      	mov	r2, r9
 801446e:	4631      	mov	r1, r6
 8014470:	4628      	mov	r0, r5
 8014472:	47b8      	blx	r7
 8014474:	3001      	adds	r0, #1
 8014476:	f43f ae38 	beq.w	80140ea <_printf_float+0xc2>
 801447a:	f108 0801 	add.w	r8, r8, #1
 801447e:	68e3      	ldr	r3, [r4, #12]
 8014480:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014482:	1a5b      	subs	r3, r3, r1
 8014484:	4543      	cmp	r3, r8
 8014486:	dcf0      	bgt.n	801446a <_printf_float+0x442>
 8014488:	e6fa      	b.n	8014280 <_printf_float+0x258>
 801448a:	f04f 0800 	mov.w	r8, #0
 801448e:	f104 0919 	add.w	r9, r4, #25
 8014492:	e7f4      	b.n	801447e <_printf_float+0x456>

08014494 <_printf_common>:
 8014494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014498:	4616      	mov	r6, r2
 801449a:	4699      	mov	r9, r3
 801449c:	688a      	ldr	r2, [r1, #8]
 801449e:	690b      	ldr	r3, [r1, #16]
 80144a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80144a4:	4293      	cmp	r3, r2
 80144a6:	bfb8      	it	lt
 80144a8:	4613      	movlt	r3, r2
 80144aa:	6033      	str	r3, [r6, #0]
 80144ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80144b0:	4607      	mov	r7, r0
 80144b2:	460c      	mov	r4, r1
 80144b4:	b10a      	cbz	r2, 80144ba <_printf_common+0x26>
 80144b6:	3301      	adds	r3, #1
 80144b8:	6033      	str	r3, [r6, #0]
 80144ba:	6823      	ldr	r3, [r4, #0]
 80144bc:	0699      	lsls	r1, r3, #26
 80144be:	bf42      	ittt	mi
 80144c0:	6833      	ldrmi	r3, [r6, #0]
 80144c2:	3302      	addmi	r3, #2
 80144c4:	6033      	strmi	r3, [r6, #0]
 80144c6:	6825      	ldr	r5, [r4, #0]
 80144c8:	f015 0506 	ands.w	r5, r5, #6
 80144cc:	d106      	bne.n	80144dc <_printf_common+0x48>
 80144ce:	f104 0a19 	add.w	sl, r4, #25
 80144d2:	68e3      	ldr	r3, [r4, #12]
 80144d4:	6832      	ldr	r2, [r6, #0]
 80144d6:	1a9b      	subs	r3, r3, r2
 80144d8:	42ab      	cmp	r3, r5
 80144da:	dc26      	bgt.n	801452a <_printf_common+0x96>
 80144dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80144e0:	1e13      	subs	r3, r2, #0
 80144e2:	6822      	ldr	r2, [r4, #0]
 80144e4:	bf18      	it	ne
 80144e6:	2301      	movne	r3, #1
 80144e8:	0692      	lsls	r2, r2, #26
 80144ea:	d42b      	bmi.n	8014544 <_printf_common+0xb0>
 80144ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80144f0:	4649      	mov	r1, r9
 80144f2:	4638      	mov	r0, r7
 80144f4:	47c0      	blx	r8
 80144f6:	3001      	adds	r0, #1
 80144f8:	d01e      	beq.n	8014538 <_printf_common+0xa4>
 80144fa:	6823      	ldr	r3, [r4, #0]
 80144fc:	68e5      	ldr	r5, [r4, #12]
 80144fe:	6832      	ldr	r2, [r6, #0]
 8014500:	f003 0306 	and.w	r3, r3, #6
 8014504:	2b04      	cmp	r3, #4
 8014506:	bf08      	it	eq
 8014508:	1aad      	subeq	r5, r5, r2
 801450a:	68a3      	ldr	r3, [r4, #8]
 801450c:	6922      	ldr	r2, [r4, #16]
 801450e:	bf0c      	ite	eq
 8014510:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014514:	2500      	movne	r5, #0
 8014516:	4293      	cmp	r3, r2
 8014518:	bfc4      	itt	gt
 801451a:	1a9b      	subgt	r3, r3, r2
 801451c:	18ed      	addgt	r5, r5, r3
 801451e:	2600      	movs	r6, #0
 8014520:	341a      	adds	r4, #26
 8014522:	42b5      	cmp	r5, r6
 8014524:	d11a      	bne.n	801455c <_printf_common+0xc8>
 8014526:	2000      	movs	r0, #0
 8014528:	e008      	b.n	801453c <_printf_common+0xa8>
 801452a:	2301      	movs	r3, #1
 801452c:	4652      	mov	r2, sl
 801452e:	4649      	mov	r1, r9
 8014530:	4638      	mov	r0, r7
 8014532:	47c0      	blx	r8
 8014534:	3001      	adds	r0, #1
 8014536:	d103      	bne.n	8014540 <_printf_common+0xac>
 8014538:	f04f 30ff 	mov.w	r0, #4294967295
 801453c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014540:	3501      	adds	r5, #1
 8014542:	e7c6      	b.n	80144d2 <_printf_common+0x3e>
 8014544:	18e1      	adds	r1, r4, r3
 8014546:	1c5a      	adds	r2, r3, #1
 8014548:	2030      	movs	r0, #48	; 0x30
 801454a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801454e:	4422      	add	r2, r4
 8014550:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014554:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014558:	3302      	adds	r3, #2
 801455a:	e7c7      	b.n	80144ec <_printf_common+0x58>
 801455c:	2301      	movs	r3, #1
 801455e:	4622      	mov	r2, r4
 8014560:	4649      	mov	r1, r9
 8014562:	4638      	mov	r0, r7
 8014564:	47c0      	blx	r8
 8014566:	3001      	adds	r0, #1
 8014568:	d0e6      	beq.n	8014538 <_printf_common+0xa4>
 801456a:	3601      	adds	r6, #1
 801456c:	e7d9      	b.n	8014522 <_printf_common+0x8e>
	...

08014570 <_printf_i>:
 8014570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014574:	7e0f      	ldrb	r7, [r1, #24]
 8014576:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014578:	2f78      	cmp	r7, #120	; 0x78
 801457a:	4691      	mov	r9, r2
 801457c:	4680      	mov	r8, r0
 801457e:	460c      	mov	r4, r1
 8014580:	469a      	mov	sl, r3
 8014582:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014586:	d807      	bhi.n	8014598 <_printf_i+0x28>
 8014588:	2f62      	cmp	r7, #98	; 0x62
 801458a:	d80a      	bhi.n	80145a2 <_printf_i+0x32>
 801458c:	2f00      	cmp	r7, #0
 801458e:	f000 80d8 	beq.w	8014742 <_printf_i+0x1d2>
 8014592:	2f58      	cmp	r7, #88	; 0x58
 8014594:	f000 80a3 	beq.w	80146de <_printf_i+0x16e>
 8014598:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801459c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80145a0:	e03a      	b.n	8014618 <_printf_i+0xa8>
 80145a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80145a6:	2b15      	cmp	r3, #21
 80145a8:	d8f6      	bhi.n	8014598 <_printf_i+0x28>
 80145aa:	a101      	add	r1, pc, #4	; (adr r1, 80145b0 <_printf_i+0x40>)
 80145ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80145b0:	08014609 	.word	0x08014609
 80145b4:	0801461d 	.word	0x0801461d
 80145b8:	08014599 	.word	0x08014599
 80145bc:	08014599 	.word	0x08014599
 80145c0:	08014599 	.word	0x08014599
 80145c4:	08014599 	.word	0x08014599
 80145c8:	0801461d 	.word	0x0801461d
 80145cc:	08014599 	.word	0x08014599
 80145d0:	08014599 	.word	0x08014599
 80145d4:	08014599 	.word	0x08014599
 80145d8:	08014599 	.word	0x08014599
 80145dc:	08014729 	.word	0x08014729
 80145e0:	0801464d 	.word	0x0801464d
 80145e4:	0801470b 	.word	0x0801470b
 80145e8:	08014599 	.word	0x08014599
 80145ec:	08014599 	.word	0x08014599
 80145f0:	0801474b 	.word	0x0801474b
 80145f4:	08014599 	.word	0x08014599
 80145f8:	0801464d 	.word	0x0801464d
 80145fc:	08014599 	.word	0x08014599
 8014600:	08014599 	.word	0x08014599
 8014604:	08014713 	.word	0x08014713
 8014608:	682b      	ldr	r3, [r5, #0]
 801460a:	1d1a      	adds	r2, r3, #4
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	602a      	str	r2, [r5, #0]
 8014610:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014614:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014618:	2301      	movs	r3, #1
 801461a:	e0a3      	b.n	8014764 <_printf_i+0x1f4>
 801461c:	6820      	ldr	r0, [r4, #0]
 801461e:	6829      	ldr	r1, [r5, #0]
 8014620:	0606      	lsls	r6, r0, #24
 8014622:	f101 0304 	add.w	r3, r1, #4
 8014626:	d50a      	bpl.n	801463e <_printf_i+0xce>
 8014628:	680e      	ldr	r6, [r1, #0]
 801462a:	602b      	str	r3, [r5, #0]
 801462c:	2e00      	cmp	r6, #0
 801462e:	da03      	bge.n	8014638 <_printf_i+0xc8>
 8014630:	232d      	movs	r3, #45	; 0x2d
 8014632:	4276      	negs	r6, r6
 8014634:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014638:	485e      	ldr	r0, [pc, #376]	; (80147b4 <_printf_i+0x244>)
 801463a:	230a      	movs	r3, #10
 801463c:	e019      	b.n	8014672 <_printf_i+0x102>
 801463e:	680e      	ldr	r6, [r1, #0]
 8014640:	602b      	str	r3, [r5, #0]
 8014642:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014646:	bf18      	it	ne
 8014648:	b236      	sxthne	r6, r6
 801464a:	e7ef      	b.n	801462c <_printf_i+0xbc>
 801464c:	682b      	ldr	r3, [r5, #0]
 801464e:	6820      	ldr	r0, [r4, #0]
 8014650:	1d19      	adds	r1, r3, #4
 8014652:	6029      	str	r1, [r5, #0]
 8014654:	0601      	lsls	r1, r0, #24
 8014656:	d501      	bpl.n	801465c <_printf_i+0xec>
 8014658:	681e      	ldr	r6, [r3, #0]
 801465a:	e002      	b.n	8014662 <_printf_i+0xf2>
 801465c:	0646      	lsls	r6, r0, #25
 801465e:	d5fb      	bpl.n	8014658 <_printf_i+0xe8>
 8014660:	881e      	ldrh	r6, [r3, #0]
 8014662:	4854      	ldr	r0, [pc, #336]	; (80147b4 <_printf_i+0x244>)
 8014664:	2f6f      	cmp	r7, #111	; 0x6f
 8014666:	bf0c      	ite	eq
 8014668:	2308      	moveq	r3, #8
 801466a:	230a      	movne	r3, #10
 801466c:	2100      	movs	r1, #0
 801466e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014672:	6865      	ldr	r5, [r4, #4]
 8014674:	60a5      	str	r5, [r4, #8]
 8014676:	2d00      	cmp	r5, #0
 8014678:	bfa2      	ittt	ge
 801467a:	6821      	ldrge	r1, [r4, #0]
 801467c:	f021 0104 	bicge.w	r1, r1, #4
 8014680:	6021      	strge	r1, [r4, #0]
 8014682:	b90e      	cbnz	r6, 8014688 <_printf_i+0x118>
 8014684:	2d00      	cmp	r5, #0
 8014686:	d04d      	beq.n	8014724 <_printf_i+0x1b4>
 8014688:	4615      	mov	r5, r2
 801468a:	fbb6 f1f3 	udiv	r1, r6, r3
 801468e:	fb03 6711 	mls	r7, r3, r1, r6
 8014692:	5dc7      	ldrb	r7, [r0, r7]
 8014694:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014698:	4637      	mov	r7, r6
 801469a:	42bb      	cmp	r3, r7
 801469c:	460e      	mov	r6, r1
 801469e:	d9f4      	bls.n	801468a <_printf_i+0x11a>
 80146a0:	2b08      	cmp	r3, #8
 80146a2:	d10b      	bne.n	80146bc <_printf_i+0x14c>
 80146a4:	6823      	ldr	r3, [r4, #0]
 80146a6:	07de      	lsls	r6, r3, #31
 80146a8:	d508      	bpl.n	80146bc <_printf_i+0x14c>
 80146aa:	6923      	ldr	r3, [r4, #16]
 80146ac:	6861      	ldr	r1, [r4, #4]
 80146ae:	4299      	cmp	r1, r3
 80146b0:	bfde      	ittt	le
 80146b2:	2330      	movle	r3, #48	; 0x30
 80146b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80146b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80146bc:	1b52      	subs	r2, r2, r5
 80146be:	6122      	str	r2, [r4, #16]
 80146c0:	f8cd a000 	str.w	sl, [sp]
 80146c4:	464b      	mov	r3, r9
 80146c6:	aa03      	add	r2, sp, #12
 80146c8:	4621      	mov	r1, r4
 80146ca:	4640      	mov	r0, r8
 80146cc:	f7ff fee2 	bl	8014494 <_printf_common>
 80146d0:	3001      	adds	r0, #1
 80146d2:	d14c      	bne.n	801476e <_printf_i+0x1fe>
 80146d4:	f04f 30ff 	mov.w	r0, #4294967295
 80146d8:	b004      	add	sp, #16
 80146da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146de:	4835      	ldr	r0, [pc, #212]	; (80147b4 <_printf_i+0x244>)
 80146e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80146e4:	6829      	ldr	r1, [r5, #0]
 80146e6:	6823      	ldr	r3, [r4, #0]
 80146e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80146ec:	6029      	str	r1, [r5, #0]
 80146ee:	061d      	lsls	r5, r3, #24
 80146f0:	d514      	bpl.n	801471c <_printf_i+0x1ac>
 80146f2:	07df      	lsls	r7, r3, #31
 80146f4:	bf44      	itt	mi
 80146f6:	f043 0320 	orrmi.w	r3, r3, #32
 80146fa:	6023      	strmi	r3, [r4, #0]
 80146fc:	b91e      	cbnz	r6, 8014706 <_printf_i+0x196>
 80146fe:	6823      	ldr	r3, [r4, #0]
 8014700:	f023 0320 	bic.w	r3, r3, #32
 8014704:	6023      	str	r3, [r4, #0]
 8014706:	2310      	movs	r3, #16
 8014708:	e7b0      	b.n	801466c <_printf_i+0xfc>
 801470a:	6823      	ldr	r3, [r4, #0]
 801470c:	f043 0320 	orr.w	r3, r3, #32
 8014710:	6023      	str	r3, [r4, #0]
 8014712:	2378      	movs	r3, #120	; 0x78
 8014714:	4828      	ldr	r0, [pc, #160]	; (80147b8 <_printf_i+0x248>)
 8014716:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801471a:	e7e3      	b.n	80146e4 <_printf_i+0x174>
 801471c:	0659      	lsls	r1, r3, #25
 801471e:	bf48      	it	mi
 8014720:	b2b6      	uxthmi	r6, r6
 8014722:	e7e6      	b.n	80146f2 <_printf_i+0x182>
 8014724:	4615      	mov	r5, r2
 8014726:	e7bb      	b.n	80146a0 <_printf_i+0x130>
 8014728:	682b      	ldr	r3, [r5, #0]
 801472a:	6826      	ldr	r6, [r4, #0]
 801472c:	6961      	ldr	r1, [r4, #20]
 801472e:	1d18      	adds	r0, r3, #4
 8014730:	6028      	str	r0, [r5, #0]
 8014732:	0635      	lsls	r5, r6, #24
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	d501      	bpl.n	801473c <_printf_i+0x1cc>
 8014738:	6019      	str	r1, [r3, #0]
 801473a:	e002      	b.n	8014742 <_printf_i+0x1d2>
 801473c:	0670      	lsls	r0, r6, #25
 801473e:	d5fb      	bpl.n	8014738 <_printf_i+0x1c8>
 8014740:	8019      	strh	r1, [r3, #0]
 8014742:	2300      	movs	r3, #0
 8014744:	6123      	str	r3, [r4, #16]
 8014746:	4615      	mov	r5, r2
 8014748:	e7ba      	b.n	80146c0 <_printf_i+0x150>
 801474a:	682b      	ldr	r3, [r5, #0]
 801474c:	1d1a      	adds	r2, r3, #4
 801474e:	602a      	str	r2, [r5, #0]
 8014750:	681d      	ldr	r5, [r3, #0]
 8014752:	6862      	ldr	r2, [r4, #4]
 8014754:	2100      	movs	r1, #0
 8014756:	4628      	mov	r0, r5
 8014758:	f7eb fd42 	bl	80001e0 <memchr>
 801475c:	b108      	cbz	r0, 8014762 <_printf_i+0x1f2>
 801475e:	1b40      	subs	r0, r0, r5
 8014760:	6060      	str	r0, [r4, #4]
 8014762:	6863      	ldr	r3, [r4, #4]
 8014764:	6123      	str	r3, [r4, #16]
 8014766:	2300      	movs	r3, #0
 8014768:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801476c:	e7a8      	b.n	80146c0 <_printf_i+0x150>
 801476e:	6923      	ldr	r3, [r4, #16]
 8014770:	462a      	mov	r2, r5
 8014772:	4649      	mov	r1, r9
 8014774:	4640      	mov	r0, r8
 8014776:	47d0      	blx	sl
 8014778:	3001      	adds	r0, #1
 801477a:	d0ab      	beq.n	80146d4 <_printf_i+0x164>
 801477c:	6823      	ldr	r3, [r4, #0]
 801477e:	079b      	lsls	r3, r3, #30
 8014780:	d413      	bmi.n	80147aa <_printf_i+0x23a>
 8014782:	68e0      	ldr	r0, [r4, #12]
 8014784:	9b03      	ldr	r3, [sp, #12]
 8014786:	4298      	cmp	r0, r3
 8014788:	bfb8      	it	lt
 801478a:	4618      	movlt	r0, r3
 801478c:	e7a4      	b.n	80146d8 <_printf_i+0x168>
 801478e:	2301      	movs	r3, #1
 8014790:	4632      	mov	r2, r6
 8014792:	4649      	mov	r1, r9
 8014794:	4640      	mov	r0, r8
 8014796:	47d0      	blx	sl
 8014798:	3001      	adds	r0, #1
 801479a:	d09b      	beq.n	80146d4 <_printf_i+0x164>
 801479c:	3501      	adds	r5, #1
 801479e:	68e3      	ldr	r3, [r4, #12]
 80147a0:	9903      	ldr	r1, [sp, #12]
 80147a2:	1a5b      	subs	r3, r3, r1
 80147a4:	42ab      	cmp	r3, r5
 80147a6:	dcf2      	bgt.n	801478e <_printf_i+0x21e>
 80147a8:	e7eb      	b.n	8014782 <_printf_i+0x212>
 80147aa:	2500      	movs	r5, #0
 80147ac:	f104 0619 	add.w	r6, r4, #25
 80147b0:	e7f5      	b.n	801479e <_printf_i+0x22e>
 80147b2:	bf00      	nop
 80147b4:	080170be 	.word	0x080170be
 80147b8:	080170cf 	.word	0x080170cf

080147bc <_sbrk_r>:
 80147bc:	b538      	push	{r3, r4, r5, lr}
 80147be:	4d06      	ldr	r5, [pc, #24]	; (80147d8 <_sbrk_r+0x1c>)
 80147c0:	2300      	movs	r3, #0
 80147c2:	4604      	mov	r4, r0
 80147c4:	4608      	mov	r0, r1
 80147c6:	602b      	str	r3, [r5, #0]
 80147c8:	f7ee fb96 	bl	8002ef8 <_sbrk>
 80147cc:	1c43      	adds	r3, r0, #1
 80147ce:	d102      	bne.n	80147d6 <_sbrk_r+0x1a>
 80147d0:	682b      	ldr	r3, [r5, #0]
 80147d2:	b103      	cbz	r3, 80147d6 <_sbrk_r+0x1a>
 80147d4:	6023      	str	r3, [r4, #0]
 80147d6:	bd38      	pop	{r3, r4, r5, pc}
 80147d8:	20002778 	.word	0x20002778

080147dc <strncpy>:
 80147dc:	b510      	push	{r4, lr}
 80147de:	3901      	subs	r1, #1
 80147e0:	4603      	mov	r3, r0
 80147e2:	b132      	cbz	r2, 80147f2 <strncpy+0x16>
 80147e4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80147e8:	f803 4b01 	strb.w	r4, [r3], #1
 80147ec:	3a01      	subs	r2, #1
 80147ee:	2c00      	cmp	r4, #0
 80147f0:	d1f7      	bne.n	80147e2 <strncpy+0x6>
 80147f2:	441a      	add	r2, r3
 80147f4:	2100      	movs	r1, #0
 80147f6:	4293      	cmp	r3, r2
 80147f8:	d100      	bne.n	80147fc <strncpy+0x20>
 80147fa:	bd10      	pop	{r4, pc}
 80147fc:	f803 1b01 	strb.w	r1, [r3], #1
 8014800:	e7f9      	b.n	80147f6 <strncpy+0x1a>

08014802 <strstr>:
 8014802:	780a      	ldrb	r2, [r1, #0]
 8014804:	b570      	push	{r4, r5, r6, lr}
 8014806:	b96a      	cbnz	r2, 8014824 <strstr+0x22>
 8014808:	bd70      	pop	{r4, r5, r6, pc}
 801480a:	429a      	cmp	r2, r3
 801480c:	d109      	bne.n	8014822 <strstr+0x20>
 801480e:	460c      	mov	r4, r1
 8014810:	4605      	mov	r5, r0
 8014812:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8014816:	2b00      	cmp	r3, #0
 8014818:	d0f6      	beq.n	8014808 <strstr+0x6>
 801481a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801481e:	429e      	cmp	r6, r3
 8014820:	d0f7      	beq.n	8014812 <strstr+0x10>
 8014822:	3001      	adds	r0, #1
 8014824:	7803      	ldrb	r3, [r0, #0]
 8014826:	2b00      	cmp	r3, #0
 8014828:	d1ef      	bne.n	801480a <strstr+0x8>
 801482a:	4618      	mov	r0, r3
 801482c:	e7ec      	b.n	8014808 <strstr+0x6>
	...

08014830 <_vsiprintf_r>:
 8014830:	b500      	push	{lr}
 8014832:	b09b      	sub	sp, #108	; 0x6c
 8014834:	9100      	str	r1, [sp, #0]
 8014836:	9104      	str	r1, [sp, #16]
 8014838:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801483c:	9105      	str	r1, [sp, #20]
 801483e:	9102      	str	r1, [sp, #8]
 8014840:	4905      	ldr	r1, [pc, #20]	; (8014858 <_vsiprintf_r+0x28>)
 8014842:	9103      	str	r1, [sp, #12]
 8014844:	4669      	mov	r1, sp
 8014846:	f001 fa93 	bl	8015d70 <_svfiprintf_r>
 801484a:	9b00      	ldr	r3, [sp, #0]
 801484c:	2200      	movs	r2, #0
 801484e:	701a      	strb	r2, [r3, #0]
 8014850:	b01b      	add	sp, #108	; 0x6c
 8014852:	f85d fb04 	ldr.w	pc, [sp], #4
 8014856:	bf00      	nop
 8014858:	ffff0208 	.word	0xffff0208

0801485c <vsiprintf>:
 801485c:	4613      	mov	r3, r2
 801485e:	460a      	mov	r2, r1
 8014860:	4601      	mov	r1, r0
 8014862:	4802      	ldr	r0, [pc, #8]	; (801486c <vsiprintf+0x10>)
 8014864:	6800      	ldr	r0, [r0, #0]
 8014866:	f7ff bfe3 	b.w	8014830 <_vsiprintf_r>
 801486a:	bf00      	nop
 801486c:	20000068 	.word	0x20000068

08014870 <quorem>:
 8014870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014874:	6903      	ldr	r3, [r0, #16]
 8014876:	690c      	ldr	r4, [r1, #16]
 8014878:	42a3      	cmp	r3, r4
 801487a:	4607      	mov	r7, r0
 801487c:	f2c0 8081 	blt.w	8014982 <quorem+0x112>
 8014880:	3c01      	subs	r4, #1
 8014882:	f101 0814 	add.w	r8, r1, #20
 8014886:	f100 0514 	add.w	r5, r0, #20
 801488a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801488e:	9301      	str	r3, [sp, #4]
 8014890:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014894:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014898:	3301      	adds	r3, #1
 801489a:	429a      	cmp	r2, r3
 801489c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80148a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80148a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80148a8:	d331      	bcc.n	801490e <quorem+0x9e>
 80148aa:	f04f 0e00 	mov.w	lr, #0
 80148ae:	4640      	mov	r0, r8
 80148b0:	46ac      	mov	ip, r5
 80148b2:	46f2      	mov	sl, lr
 80148b4:	f850 2b04 	ldr.w	r2, [r0], #4
 80148b8:	b293      	uxth	r3, r2
 80148ba:	fb06 e303 	mla	r3, r6, r3, lr
 80148be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80148c2:	b29b      	uxth	r3, r3
 80148c4:	ebaa 0303 	sub.w	r3, sl, r3
 80148c8:	f8dc a000 	ldr.w	sl, [ip]
 80148cc:	0c12      	lsrs	r2, r2, #16
 80148ce:	fa13 f38a 	uxtah	r3, r3, sl
 80148d2:	fb06 e202 	mla	r2, r6, r2, lr
 80148d6:	9300      	str	r3, [sp, #0]
 80148d8:	9b00      	ldr	r3, [sp, #0]
 80148da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80148de:	b292      	uxth	r2, r2
 80148e0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80148e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80148e8:	f8bd 3000 	ldrh.w	r3, [sp]
 80148ec:	4581      	cmp	r9, r0
 80148ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80148f2:	f84c 3b04 	str.w	r3, [ip], #4
 80148f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80148fa:	d2db      	bcs.n	80148b4 <quorem+0x44>
 80148fc:	f855 300b 	ldr.w	r3, [r5, fp]
 8014900:	b92b      	cbnz	r3, 801490e <quorem+0x9e>
 8014902:	9b01      	ldr	r3, [sp, #4]
 8014904:	3b04      	subs	r3, #4
 8014906:	429d      	cmp	r5, r3
 8014908:	461a      	mov	r2, r3
 801490a:	d32e      	bcc.n	801496a <quorem+0xfa>
 801490c:	613c      	str	r4, [r7, #16]
 801490e:	4638      	mov	r0, r7
 8014910:	f001 f8ba 	bl	8015a88 <__mcmp>
 8014914:	2800      	cmp	r0, #0
 8014916:	db24      	blt.n	8014962 <quorem+0xf2>
 8014918:	3601      	adds	r6, #1
 801491a:	4628      	mov	r0, r5
 801491c:	f04f 0c00 	mov.w	ip, #0
 8014920:	f858 2b04 	ldr.w	r2, [r8], #4
 8014924:	f8d0 e000 	ldr.w	lr, [r0]
 8014928:	b293      	uxth	r3, r2
 801492a:	ebac 0303 	sub.w	r3, ip, r3
 801492e:	0c12      	lsrs	r2, r2, #16
 8014930:	fa13 f38e 	uxtah	r3, r3, lr
 8014934:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014938:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801493c:	b29b      	uxth	r3, r3
 801493e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014942:	45c1      	cmp	r9, r8
 8014944:	f840 3b04 	str.w	r3, [r0], #4
 8014948:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801494c:	d2e8      	bcs.n	8014920 <quorem+0xb0>
 801494e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014952:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014956:	b922      	cbnz	r2, 8014962 <quorem+0xf2>
 8014958:	3b04      	subs	r3, #4
 801495a:	429d      	cmp	r5, r3
 801495c:	461a      	mov	r2, r3
 801495e:	d30a      	bcc.n	8014976 <quorem+0x106>
 8014960:	613c      	str	r4, [r7, #16]
 8014962:	4630      	mov	r0, r6
 8014964:	b003      	add	sp, #12
 8014966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801496a:	6812      	ldr	r2, [r2, #0]
 801496c:	3b04      	subs	r3, #4
 801496e:	2a00      	cmp	r2, #0
 8014970:	d1cc      	bne.n	801490c <quorem+0x9c>
 8014972:	3c01      	subs	r4, #1
 8014974:	e7c7      	b.n	8014906 <quorem+0x96>
 8014976:	6812      	ldr	r2, [r2, #0]
 8014978:	3b04      	subs	r3, #4
 801497a:	2a00      	cmp	r2, #0
 801497c:	d1f0      	bne.n	8014960 <quorem+0xf0>
 801497e:	3c01      	subs	r4, #1
 8014980:	e7eb      	b.n	801495a <quorem+0xea>
 8014982:	2000      	movs	r0, #0
 8014984:	e7ee      	b.n	8014964 <quorem+0xf4>
	...

08014988 <_dtoa_r>:
 8014988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801498c:	ed2d 8b04 	vpush	{d8-d9}
 8014990:	ec57 6b10 	vmov	r6, r7, d0
 8014994:	b093      	sub	sp, #76	; 0x4c
 8014996:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014998:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801499c:	9106      	str	r1, [sp, #24]
 801499e:	ee10 aa10 	vmov	sl, s0
 80149a2:	4604      	mov	r4, r0
 80149a4:	9209      	str	r2, [sp, #36]	; 0x24
 80149a6:	930c      	str	r3, [sp, #48]	; 0x30
 80149a8:	46bb      	mov	fp, r7
 80149aa:	b975      	cbnz	r5, 80149ca <_dtoa_r+0x42>
 80149ac:	2010      	movs	r0, #16
 80149ae:	f7ff f995 	bl	8013cdc <malloc>
 80149b2:	4602      	mov	r2, r0
 80149b4:	6260      	str	r0, [r4, #36]	; 0x24
 80149b6:	b920      	cbnz	r0, 80149c2 <_dtoa_r+0x3a>
 80149b8:	4ba7      	ldr	r3, [pc, #668]	; (8014c58 <_dtoa_r+0x2d0>)
 80149ba:	21ea      	movs	r1, #234	; 0xea
 80149bc:	48a7      	ldr	r0, [pc, #668]	; (8014c5c <_dtoa_r+0x2d4>)
 80149be:	f001 fad7 	bl	8015f70 <__assert_func>
 80149c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80149c6:	6005      	str	r5, [r0, #0]
 80149c8:	60c5      	str	r5, [r0, #12]
 80149ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80149cc:	6819      	ldr	r1, [r3, #0]
 80149ce:	b151      	cbz	r1, 80149e6 <_dtoa_r+0x5e>
 80149d0:	685a      	ldr	r2, [r3, #4]
 80149d2:	604a      	str	r2, [r1, #4]
 80149d4:	2301      	movs	r3, #1
 80149d6:	4093      	lsls	r3, r2
 80149d8:	608b      	str	r3, [r1, #8]
 80149da:	4620      	mov	r0, r4
 80149dc:	f000 fe12 	bl	8015604 <_Bfree>
 80149e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80149e2:	2200      	movs	r2, #0
 80149e4:	601a      	str	r2, [r3, #0]
 80149e6:	1e3b      	subs	r3, r7, #0
 80149e8:	bfaa      	itet	ge
 80149ea:	2300      	movge	r3, #0
 80149ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80149f0:	f8c8 3000 	strge.w	r3, [r8]
 80149f4:	4b9a      	ldr	r3, [pc, #616]	; (8014c60 <_dtoa_r+0x2d8>)
 80149f6:	bfbc      	itt	lt
 80149f8:	2201      	movlt	r2, #1
 80149fa:	f8c8 2000 	strlt.w	r2, [r8]
 80149fe:	ea33 030b 	bics.w	r3, r3, fp
 8014a02:	d11b      	bne.n	8014a3c <_dtoa_r+0xb4>
 8014a04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014a06:	f242 730f 	movw	r3, #9999	; 0x270f
 8014a0a:	6013      	str	r3, [r2, #0]
 8014a0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014a10:	4333      	orrs	r3, r6
 8014a12:	f000 8592 	beq.w	801553a <_dtoa_r+0xbb2>
 8014a16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014a18:	b963      	cbnz	r3, 8014a34 <_dtoa_r+0xac>
 8014a1a:	4b92      	ldr	r3, [pc, #584]	; (8014c64 <_dtoa_r+0x2dc>)
 8014a1c:	e022      	b.n	8014a64 <_dtoa_r+0xdc>
 8014a1e:	4b92      	ldr	r3, [pc, #584]	; (8014c68 <_dtoa_r+0x2e0>)
 8014a20:	9301      	str	r3, [sp, #4]
 8014a22:	3308      	adds	r3, #8
 8014a24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014a26:	6013      	str	r3, [r2, #0]
 8014a28:	9801      	ldr	r0, [sp, #4]
 8014a2a:	b013      	add	sp, #76	; 0x4c
 8014a2c:	ecbd 8b04 	vpop	{d8-d9}
 8014a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a34:	4b8b      	ldr	r3, [pc, #556]	; (8014c64 <_dtoa_r+0x2dc>)
 8014a36:	9301      	str	r3, [sp, #4]
 8014a38:	3303      	adds	r3, #3
 8014a3a:	e7f3      	b.n	8014a24 <_dtoa_r+0x9c>
 8014a3c:	2200      	movs	r2, #0
 8014a3e:	2300      	movs	r3, #0
 8014a40:	4650      	mov	r0, sl
 8014a42:	4659      	mov	r1, fp
 8014a44:	f7ec f840 	bl	8000ac8 <__aeabi_dcmpeq>
 8014a48:	ec4b ab19 	vmov	d9, sl, fp
 8014a4c:	4680      	mov	r8, r0
 8014a4e:	b158      	cbz	r0, 8014a68 <_dtoa_r+0xe0>
 8014a50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014a52:	2301      	movs	r3, #1
 8014a54:	6013      	str	r3, [r2, #0]
 8014a56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	f000 856b 	beq.w	8015534 <_dtoa_r+0xbac>
 8014a5e:	4883      	ldr	r0, [pc, #524]	; (8014c6c <_dtoa_r+0x2e4>)
 8014a60:	6018      	str	r0, [r3, #0]
 8014a62:	1e43      	subs	r3, r0, #1
 8014a64:	9301      	str	r3, [sp, #4]
 8014a66:	e7df      	b.n	8014a28 <_dtoa_r+0xa0>
 8014a68:	ec4b ab10 	vmov	d0, sl, fp
 8014a6c:	aa10      	add	r2, sp, #64	; 0x40
 8014a6e:	a911      	add	r1, sp, #68	; 0x44
 8014a70:	4620      	mov	r0, r4
 8014a72:	f001 f8af 	bl	8015bd4 <__d2b>
 8014a76:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8014a7a:	ee08 0a10 	vmov	s16, r0
 8014a7e:	2d00      	cmp	r5, #0
 8014a80:	f000 8084 	beq.w	8014b8c <_dtoa_r+0x204>
 8014a84:	ee19 3a90 	vmov	r3, s19
 8014a88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014a8c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8014a90:	4656      	mov	r6, sl
 8014a92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8014a96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014a9a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8014a9e:	4b74      	ldr	r3, [pc, #464]	; (8014c70 <_dtoa_r+0x2e8>)
 8014aa0:	2200      	movs	r2, #0
 8014aa2:	4630      	mov	r0, r6
 8014aa4:	4639      	mov	r1, r7
 8014aa6:	f7eb fbef 	bl	8000288 <__aeabi_dsub>
 8014aaa:	a365      	add	r3, pc, #404	; (adr r3, 8014c40 <_dtoa_r+0x2b8>)
 8014aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ab0:	f7eb fda2 	bl	80005f8 <__aeabi_dmul>
 8014ab4:	a364      	add	r3, pc, #400	; (adr r3, 8014c48 <_dtoa_r+0x2c0>)
 8014ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aba:	f7eb fbe7 	bl	800028c <__adddf3>
 8014abe:	4606      	mov	r6, r0
 8014ac0:	4628      	mov	r0, r5
 8014ac2:	460f      	mov	r7, r1
 8014ac4:	f7eb fd2e 	bl	8000524 <__aeabi_i2d>
 8014ac8:	a361      	add	r3, pc, #388	; (adr r3, 8014c50 <_dtoa_r+0x2c8>)
 8014aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ace:	f7eb fd93 	bl	80005f8 <__aeabi_dmul>
 8014ad2:	4602      	mov	r2, r0
 8014ad4:	460b      	mov	r3, r1
 8014ad6:	4630      	mov	r0, r6
 8014ad8:	4639      	mov	r1, r7
 8014ada:	f7eb fbd7 	bl	800028c <__adddf3>
 8014ade:	4606      	mov	r6, r0
 8014ae0:	460f      	mov	r7, r1
 8014ae2:	f7ec f839 	bl	8000b58 <__aeabi_d2iz>
 8014ae6:	2200      	movs	r2, #0
 8014ae8:	9000      	str	r0, [sp, #0]
 8014aea:	2300      	movs	r3, #0
 8014aec:	4630      	mov	r0, r6
 8014aee:	4639      	mov	r1, r7
 8014af0:	f7eb fff4 	bl	8000adc <__aeabi_dcmplt>
 8014af4:	b150      	cbz	r0, 8014b0c <_dtoa_r+0x184>
 8014af6:	9800      	ldr	r0, [sp, #0]
 8014af8:	f7eb fd14 	bl	8000524 <__aeabi_i2d>
 8014afc:	4632      	mov	r2, r6
 8014afe:	463b      	mov	r3, r7
 8014b00:	f7eb ffe2 	bl	8000ac8 <__aeabi_dcmpeq>
 8014b04:	b910      	cbnz	r0, 8014b0c <_dtoa_r+0x184>
 8014b06:	9b00      	ldr	r3, [sp, #0]
 8014b08:	3b01      	subs	r3, #1
 8014b0a:	9300      	str	r3, [sp, #0]
 8014b0c:	9b00      	ldr	r3, [sp, #0]
 8014b0e:	2b16      	cmp	r3, #22
 8014b10:	d85a      	bhi.n	8014bc8 <_dtoa_r+0x240>
 8014b12:	9a00      	ldr	r2, [sp, #0]
 8014b14:	4b57      	ldr	r3, [pc, #348]	; (8014c74 <_dtoa_r+0x2ec>)
 8014b16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b1e:	ec51 0b19 	vmov	r0, r1, d9
 8014b22:	f7eb ffdb 	bl	8000adc <__aeabi_dcmplt>
 8014b26:	2800      	cmp	r0, #0
 8014b28:	d050      	beq.n	8014bcc <_dtoa_r+0x244>
 8014b2a:	9b00      	ldr	r3, [sp, #0]
 8014b2c:	3b01      	subs	r3, #1
 8014b2e:	9300      	str	r3, [sp, #0]
 8014b30:	2300      	movs	r3, #0
 8014b32:	930b      	str	r3, [sp, #44]	; 0x2c
 8014b34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014b36:	1b5d      	subs	r5, r3, r5
 8014b38:	1e6b      	subs	r3, r5, #1
 8014b3a:	9305      	str	r3, [sp, #20]
 8014b3c:	bf45      	ittet	mi
 8014b3e:	f1c5 0301 	rsbmi	r3, r5, #1
 8014b42:	9304      	strmi	r3, [sp, #16]
 8014b44:	2300      	movpl	r3, #0
 8014b46:	2300      	movmi	r3, #0
 8014b48:	bf4c      	ite	mi
 8014b4a:	9305      	strmi	r3, [sp, #20]
 8014b4c:	9304      	strpl	r3, [sp, #16]
 8014b4e:	9b00      	ldr	r3, [sp, #0]
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	db3d      	blt.n	8014bd0 <_dtoa_r+0x248>
 8014b54:	9b05      	ldr	r3, [sp, #20]
 8014b56:	9a00      	ldr	r2, [sp, #0]
 8014b58:	920a      	str	r2, [sp, #40]	; 0x28
 8014b5a:	4413      	add	r3, r2
 8014b5c:	9305      	str	r3, [sp, #20]
 8014b5e:	2300      	movs	r3, #0
 8014b60:	9307      	str	r3, [sp, #28]
 8014b62:	9b06      	ldr	r3, [sp, #24]
 8014b64:	2b09      	cmp	r3, #9
 8014b66:	f200 8089 	bhi.w	8014c7c <_dtoa_r+0x2f4>
 8014b6a:	2b05      	cmp	r3, #5
 8014b6c:	bfc4      	itt	gt
 8014b6e:	3b04      	subgt	r3, #4
 8014b70:	9306      	strgt	r3, [sp, #24]
 8014b72:	9b06      	ldr	r3, [sp, #24]
 8014b74:	f1a3 0302 	sub.w	r3, r3, #2
 8014b78:	bfcc      	ite	gt
 8014b7a:	2500      	movgt	r5, #0
 8014b7c:	2501      	movle	r5, #1
 8014b7e:	2b03      	cmp	r3, #3
 8014b80:	f200 8087 	bhi.w	8014c92 <_dtoa_r+0x30a>
 8014b84:	e8df f003 	tbb	[pc, r3]
 8014b88:	59383a2d 	.word	0x59383a2d
 8014b8c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014b90:	441d      	add	r5, r3
 8014b92:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8014b96:	2b20      	cmp	r3, #32
 8014b98:	bfc1      	itttt	gt
 8014b9a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014b9e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8014ba2:	fa0b f303 	lslgt.w	r3, fp, r3
 8014ba6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8014baa:	bfda      	itte	le
 8014bac:	f1c3 0320 	rsble	r3, r3, #32
 8014bb0:	fa06 f003 	lslle.w	r0, r6, r3
 8014bb4:	4318      	orrgt	r0, r3
 8014bb6:	f7eb fca5 	bl	8000504 <__aeabi_ui2d>
 8014bba:	2301      	movs	r3, #1
 8014bbc:	4606      	mov	r6, r0
 8014bbe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8014bc2:	3d01      	subs	r5, #1
 8014bc4:	930e      	str	r3, [sp, #56]	; 0x38
 8014bc6:	e76a      	b.n	8014a9e <_dtoa_r+0x116>
 8014bc8:	2301      	movs	r3, #1
 8014bca:	e7b2      	b.n	8014b32 <_dtoa_r+0x1aa>
 8014bcc:	900b      	str	r0, [sp, #44]	; 0x2c
 8014bce:	e7b1      	b.n	8014b34 <_dtoa_r+0x1ac>
 8014bd0:	9b04      	ldr	r3, [sp, #16]
 8014bd2:	9a00      	ldr	r2, [sp, #0]
 8014bd4:	1a9b      	subs	r3, r3, r2
 8014bd6:	9304      	str	r3, [sp, #16]
 8014bd8:	4253      	negs	r3, r2
 8014bda:	9307      	str	r3, [sp, #28]
 8014bdc:	2300      	movs	r3, #0
 8014bde:	930a      	str	r3, [sp, #40]	; 0x28
 8014be0:	e7bf      	b.n	8014b62 <_dtoa_r+0x1da>
 8014be2:	2300      	movs	r3, #0
 8014be4:	9308      	str	r3, [sp, #32]
 8014be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	dc55      	bgt.n	8014c98 <_dtoa_r+0x310>
 8014bec:	2301      	movs	r3, #1
 8014bee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014bf2:	461a      	mov	r2, r3
 8014bf4:	9209      	str	r2, [sp, #36]	; 0x24
 8014bf6:	e00c      	b.n	8014c12 <_dtoa_r+0x28a>
 8014bf8:	2301      	movs	r3, #1
 8014bfa:	e7f3      	b.n	8014be4 <_dtoa_r+0x25c>
 8014bfc:	2300      	movs	r3, #0
 8014bfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014c00:	9308      	str	r3, [sp, #32]
 8014c02:	9b00      	ldr	r3, [sp, #0]
 8014c04:	4413      	add	r3, r2
 8014c06:	9302      	str	r3, [sp, #8]
 8014c08:	3301      	adds	r3, #1
 8014c0a:	2b01      	cmp	r3, #1
 8014c0c:	9303      	str	r3, [sp, #12]
 8014c0e:	bfb8      	it	lt
 8014c10:	2301      	movlt	r3, #1
 8014c12:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8014c14:	2200      	movs	r2, #0
 8014c16:	6042      	str	r2, [r0, #4]
 8014c18:	2204      	movs	r2, #4
 8014c1a:	f102 0614 	add.w	r6, r2, #20
 8014c1e:	429e      	cmp	r6, r3
 8014c20:	6841      	ldr	r1, [r0, #4]
 8014c22:	d93d      	bls.n	8014ca0 <_dtoa_r+0x318>
 8014c24:	4620      	mov	r0, r4
 8014c26:	f000 fcad 	bl	8015584 <_Balloc>
 8014c2a:	9001      	str	r0, [sp, #4]
 8014c2c:	2800      	cmp	r0, #0
 8014c2e:	d13b      	bne.n	8014ca8 <_dtoa_r+0x320>
 8014c30:	4b11      	ldr	r3, [pc, #68]	; (8014c78 <_dtoa_r+0x2f0>)
 8014c32:	4602      	mov	r2, r0
 8014c34:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014c38:	e6c0      	b.n	80149bc <_dtoa_r+0x34>
 8014c3a:	2301      	movs	r3, #1
 8014c3c:	e7df      	b.n	8014bfe <_dtoa_r+0x276>
 8014c3e:	bf00      	nop
 8014c40:	636f4361 	.word	0x636f4361
 8014c44:	3fd287a7 	.word	0x3fd287a7
 8014c48:	8b60c8b3 	.word	0x8b60c8b3
 8014c4c:	3fc68a28 	.word	0x3fc68a28
 8014c50:	509f79fb 	.word	0x509f79fb
 8014c54:	3fd34413 	.word	0x3fd34413
 8014c58:	080170ed 	.word	0x080170ed
 8014c5c:	08017104 	.word	0x08017104
 8014c60:	7ff00000 	.word	0x7ff00000
 8014c64:	080170e9 	.word	0x080170e9
 8014c68:	080170e0 	.word	0x080170e0
 8014c6c:	080170bd 	.word	0x080170bd
 8014c70:	3ff80000 	.word	0x3ff80000
 8014c74:	080171f8 	.word	0x080171f8
 8014c78:	0801715f 	.word	0x0801715f
 8014c7c:	2501      	movs	r5, #1
 8014c7e:	2300      	movs	r3, #0
 8014c80:	9306      	str	r3, [sp, #24]
 8014c82:	9508      	str	r5, [sp, #32]
 8014c84:	f04f 33ff 	mov.w	r3, #4294967295
 8014c88:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014c8c:	2200      	movs	r2, #0
 8014c8e:	2312      	movs	r3, #18
 8014c90:	e7b0      	b.n	8014bf4 <_dtoa_r+0x26c>
 8014c92:	2301      	movs	r3, #1
 8014c94:	9308      	str	r3, [sp, #32]
 8014c96:	e7f5      	b.n	8014c84 <_dtoa_r+0x2fc>
 8014c98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c9a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014c9e:	e7b8      	b.n	8014c12 <_dtoa_r+0x28a>
 8014ca0:	3101      	adds	r1, #1
 8014ca2:	6041      	str	r1, [r0, #4]
 8014ca4:	0052      	lsls	r2, r2, #1
 8014ca6:	e7b8      	b.n	8014c1a <_dtoa_r+0x292>
 8014ca8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014caa:	9a01      	ldr	r2, [sp, #4]
 8014cac:	601a      	str	r2, [r3, #0]
 8014cae:	9b03      	ldr	r3, [sp, #12]
 8014cb0:	2b0e      	cmp	r3, #14
 8014cb2:	f200 809d 	bhi.w	8014df0 <_dtoa_r+0x468>
 8014cb6:	2d00      	cmp	r5, #0
 8014cb8:	f000 809a 	beq.w	8014df0 <_dtoa_r+0x468>
 8014cbc:	9b00      	ldr	r3, [sp, #0]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	dd32      	ble.n	8014d28 <_dtoa_r+0x3a0>
 8014cc2:	4ab7      	ldr	r2, [pc, #732]	; (8014fa0 <_dtoa_r+0x618>)
 8014cc4:	f003 030f 	and.w	r3, r3, #15
 8014cc8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014ccc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014cd0:	9b00      	ldr	r3, [sp, #0]
 8014cd2:	05d8      	lsls	r0, r3, #23
 8014cd4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8014cd8:	d516      	bpl.n	8014d08 <_dtoa_r+0x380>
 8014cda:	4bb2      	ldr	r3, [pc, #712]	; (8014fa4 <_dtoa_r+0x61c>)
 8014cdc:	ec51 0b19 	vmov	r0, r1, d9
 8014ce0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014ce4:	f7eb fdb2 	bl	800084c <__aeabi_ddiv>
 8014ce8:	f007 070f 	and.w	r7, r7, #15
 8014cec:	4682      	mov	sl, r0
 8014cee:	468b      	mov	fp, r1
 8014cf0:	2503      	movs	r5, #3
 8014cf2:	4eac      	ldr	r6, [pc, #688]	; (8014fa4 <_dtoa_r+0x61c>)
 8014cf4:	b957      	cbnz	r7, 8014d0c <_dtoa_r+0x384>
 8014cf6:	4642      	mov	r2, r8
 8014cf8:	464b      	mov	r3, r9
 8014cfa:	4650      	mov	r0, sl
 8014cfc:	4659      	mov	r1, fp
 8014cfe:	f7eb fda5 	bl	800084c <__aeabi_ddiv>
 8014d02:	4682      	mov	sl, r0
 8014d04:	468b      	mov	fp, r1
 8014d06:	e028      	b.n	8014d5a <_dtoa_r+0x3d2>
 8014d08:	2502      	movs	r5, #2
 8014d0a:	e7f2      	b.n	8014cf2 <_dtoa_r+0x36a>
 8014d0c:	07f9      	lsls	r1, r7, #31
 8014d0e:	d508      	bpl.n	8014d22 <_dtoa_r+0x39a>
 8014d10:	4640      	mov	r0, r8
 8014d12:	4649      	mov	r1, r9
 8014d14:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014d18:	f7eb fc6e 	bl	80005f8 <__aeabi_dmul>
 8014d1c:	3501      	adds	r5, #1
 8014d1e:	4680      	mov	r8, r0
 8014d20:	4689      	mov	r9, r1
 8014d22:	107f      	asrs	r7, r7, #1
 8014d24:	3608      	adds	r6, #8
 8014d26:	e7e5      	b.n	8014cf4 <_dtoa_r+0x36c>
 8014d28:	f000 809b 	beq.w	8014e62 <_dtoa_r+0x4da>
 8014d2c:	9b00      	ldr	r3, [sp, #0]
 8014d2e:	4f9d      	ldr	r7, [pc, #628]	; (8014fa4 <_dtoa_r+0x61c>)
 8014d30:	425e      	negs	r6, r3
 8014d32:	4b9b      	ldr	r3, [pc, #620]	; (8014fa0 <_dtoa_r+0x618>)
 8014d34:	f006 020f 	and.w	r2, r6, #15
 8014d38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d40:	ec51 0b19 	vmov	r0, r1, d9
 8014d44:	f7eb fc58 	bl	80005f8 <__aeabi_dmul>
 8014d48:	1136      	asrs	r6, r6, #4
 8014d4a:	4682      	mov	sl, r0
 8014d4c:	468b      	mov	fp, r1
 8014d4e:	2300      	movs	r3, #0
 8014d50:	2502      	movs	r5, #2
 8014d52:	2e00      	cmp	r6, #0
 8014d54:	d17a      	bne.n	8014e4c <_dtoa_r+0x4c4>
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d1d3      	bne.n	8014d02 <_dtoa_r+0x37a>
 8014d5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	f000 8082 	beq.w	8014e66 <_dtoa_r+0x4de>
 8014d62:	4b91      	ldr	r3, [pc, #580]	; (8014fa8 <_dtoa_r+0x620>)
 8014d64:	2200      	movs	r2, #0
 8014d66:	4650      	mov	r0, sl
 8014d68:	4659      	mov	r1, fp
 8014d6a:	f7eb feb7 	bl	8000adc <__aeabi_dcmplt>
 8014d6e:	2800      	cmp	r0, #0
 8014d70:	d079      	beq.n	8014e66 <_dtoa_r+0x4de>
 8014d72:	9b03      	ldr	r3, [sp, #12]
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d076      	beq.n	8014e66 <_dtoa_r+0x4de>
 8014d78:	9b02      	ldr	r3, [sp, #8]
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	dd36      	ble.n	8014dec <_dtoa_r+0x464>
 8014d7e:	9b00      	ldr	r3, [sp, #0]
 8014d80:	4650      	mov	r0, sl
 8014d82:	4659      	mov	r1, fp
 8014d84:	1e5f      	subs	r7, r3, #1
 8014d86:	2200      	movs	r2, #0
 8014d88:	4b88      	ldr	r3, [pc, #544]	; (8014fac <_dtoa_r+0x624>)
 8014d8a:	f7eb fc35 	bl	80005f8 <__aeabi_dmul>
 8014d8e:	9e02      	ldr	r6, [sp, #8]
 8014d90:	4682      	mov	sl, r0
 8014d92:	468b      	mov	fp, r1
 8014d94:	3501      	adds	r5, #1
 8014d96:	4628      	mov	r0, r5
 8014d98:	f7eb fbc4 	bl	8000524 <__aeabi_i2d>
 8014d9c:	4652      	mov	r2, sl
 8014d9e:	465b      	mov	r3, fp
 8014da0:	f7eb fc2a 	bl	80005f8 <__aeabi_dmul>
 8014da4:	4b82      	ldr	r3, [pc, #520]	; (8014fb0 <_dtoa_r+0x628>)
 8014da6:	2200      	movs	r2, #0
 8014da8:	f7eb fa70 	bl	800028c <__adddf3>
 8014dac:	46d0      	mov	r8, sl
 8014dae:	46d9      	mov	r9, fp
 8014db0:	4682      	mov	sl, r0
 8014db2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8014db6:	2e00      	cmp	r6, #0
 8014db8:	d158      	bne.n	8014e6c <_dtoa_r+0x4e4>
 8014dba:	4b7e      	ldr	r3, [pc, #504]	; (8014fb4 <_dtoa_r+0x62c>)
 8014dbc:	2200      	movs	r2, #0
 8014dbe:	4640      	mov	r0, r8
 8014dc0:	4649      	mov	r1, r9
 8014dc2:	f7eb fa61 	bl	8000288 <__aeabi_dsub>
 8014dc6:	4652      	mov	r2, sl
 8014dc8:	465b      	mov	r3, fp
 8014dca:	4680      	mov	r8, r0
 8014dcc:	4689      	mov	r9, r1
 8014dce:	f7eb fea3 	bl	8000b18 <__aeabi_dcmpgt>
 8014dd2:	2800      	cmp	r0, #0
 8014dd4:	f040 8295 	bne.w	8015302 <_dtoa_r+0x97a>
 8014dd8:	4652      	mov	r2, sl
 8014dda:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014dde:	4640      	mov	r0, r8
 8014de0:	4649      	mov	r1, r9
 8014de2:	f7eb fe7b 	bl	8000adc <__aeabi_dcmplt>
 8014de6:	2800      	cmp	r0, #0
 8014de8:	f040 8289 	bne.w	80152fe <_dtoa_r+0x976>
 8014dec:	ec5b ab19 	vmov	sl, fp, d9
 8014df0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	f2c0 8148 	blt.w	8015088 <_dtoa_r+0x700>
 8014df8:	9a00      	ldr	r2, [sp, #0]
 8014dfa:	2a0e      	cmp	r2, #14
 8014dfc:	f300 8144 	bgt.w	8015088 <_dtoa_r+0x700>
 8014e00:	4b67      	ldr	r3, [pc, #412]	; (8014fa0 <_dtoa_r+0x618>)
 8014e02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014e06:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	f280 80d5 	bge.w	8014fbc <_dtoa_r+0x634>
 8014e12:	9b03      	ldr	r3, [sp, #12]
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	f300 80d1 	bgt.w	8014fbc <_dtoa_r+0x634>
 8014e1a:	f040 826f 	bne.w	80152fc <_dtoa_r+0x974>
 8014e1e:	4b65      	ldr	r3, [pc, #404]	; (8014fb4 <_dtoa_r+0x62c>)
 8014e20:	2200      	movs	r2, #0
 8014e22:	4640      	mov	r0, r8
 8014e24:	4649      	mov	r1, r9
 8014e26:	f7eb fbe7 	bl	80005f8 <__aeabi_dmul>
 8014e2a:	4652      	mov	r2, sl
 8014e2c:	465b      	mov	r3, fp
 8014e2e:	f7eb fe69 	bl	8000b04 <__aeabi_dcmpge>
 8014e32:	9e03      	ldr	r6, [sp, #12]
 8014e34:	4637      	mov	r7, r6
 8014e36:	2800      	cmp	r0, #0
 8014e38:	f040 8245 	bne.w	80152c6 <_dtoa_r+0x93e>
 8014e3c:	9d01      	ldr	r5, [sp, #4]
 8014e3e:	2331      	movs	r3, #49	; 0x31
 8014e40:	f805 3b01 	strb.w	r3, [r5], #1
 8014e44:	9b00      	ldr	r3, [sp, #0]
 8014e46:	3301      	adds	r3, #1
 8014e48:	9300      	str	r3, [sp, #0]
 8014e4a:	e240      	b.n	80152ce <_dtoa_r+0x946>
 8014e4c:	07f2      	lsls	r2, r6, #31
 8014e4e:	d505      	bpl.n	8014e5c <_dtoa_r+0x4d4>
 8014e50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014e54:	f7eb fbd0 	bl	80005f8 <__aeabi_dmul>
 8014e58:	3501      	adds	r5, #1
 8014e5a:	2301      	movs	r3, #1
 8014e5c:	1076      	asrs	r6, r6, #1
 8014e5e:	3708      	adds	r7, #8
 8014e60:	e777      	b.n	8014d52 <_dtoa_r+0x3ca>
 8014e62:	2502      	movs	r5, #2
 8014e64:	e779      	b.n	8014d5a <_dtoa_r+0x3d2>
 8014e66:	9f00      	ldr	r7, [sp, #0]
 8014e68:	9e03      	ldr	r6, [sp, #12]
 8014e6a:	e794      	b.n	8014d96 <_dtoa_r+0x40e>
 8014e6c:	9901      	ldr	r1, [sp, #4]
 8014e6e:	4b4c      	ldr	r3, [pc, #304]	; (8014fa0 <_dtoa_r+0x618>)
 8014e70:	4431      	add	r1, r6
 8014e72:	910d      	str	r1, [sp, #52]	; 0x34
 8014e74:	9908      	ldr	r1, [sp, #32]
 8014e76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8014e7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014e7e:	2900      	cmp	r1, #0
 8014e80:	d043      	beq.n	8014f0a <_dtoa_r+0x582>
 8014e82:	494d      	ldr	r1, [pc, #308]	; (8014fb8 <_dtoa_r+0x630>)
 8014e84:	2000      	movs	r0, #0
 8014e86:	f7eb fce1 	bl	800084c <__aeabi_ddiv>
 8014e8a:	4652      	mov	r2, sl
 8014e8c:	465b      	mov	r3, fp
 8014e8e:	f7eb f9fb 	bl	8000288 <__aeabi_dsub>
 8014e92:	9d01      	ldr	r5, [sp, #4]
 8014e94:	4682      	mov	sl, r0
 8014e96:	468b      	mov	fp, r1
 8014e98:	4649      	mov	r1, r9
 8014e9a:	4640      	mov	r0, r8
 8014e9c:	f7eb fe5c 	bl	8000b58 <__aeabi_d2iz>
 8014ea0:	4606      	mov	r6, r0
 8014ea2:	f7eb fb3f 	bl	8000524 <__aeabi_i2d>
 8014ea6:	4602      	mov	r2, r0
 8014ea8:	460b      	mov	r3, r1
 8014eaa:	4640      	mov	r0, r8
 8014eac:	4649      	mov	r1, r9
 8014eae:	f7eb f9eb 	bl	8000288 <__aeabi_dsub>
 8014eb2:	3630      	adds	r6, #48	; 0x30
 8014eb4:	f805 6b01 	strb.w	r6, [r5], #1
 8014eb8:	4652      	mov	r2, sl
 8014eba:	465b      	mov	r3, fp
 8014ebc:	4680      	mov	r8, r0
 8014ebe:	4689      	mov	r9, r1
 8014ec0:	f7eb fe0c 	bl	8000adc <__aeabi_dcmplt>
 8014ec4:	2800      	cmp	r0, #0
 8014ec6:	d163      	bne.n	8014f90 <_dtoa_r+0x608>
 8014ec8:	4642      	mov	r2, r8
 8014eca:	464b      	mov	r3, r9
 8014ecc:	4936      	ldr	r1, [pc, #216]	; (8014fa8 <_dtoa_r+0x620>)
 8014ece:	2000      	movs	r0, #0
 8014ed0:	f7eb f9da 	bl	8000288 <__aeabi_dsub>
 8014ed4:	4652      	mov	r2, sl
 8014ed6:	465b      	mov	r3, fp
 8014ed8:	f7eb fe00 	bl	8000adc <__aeabi_dcmplt>
 8014edc:	2800      	cmp	r0, #0
 8014ede:	f040 80b5 	bne.w	801504c <_dtoa_r+0x6c4>
 8014ee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ee4:	429d      	cmp	r5, r3
 8014ee6:	d081      	beq.n	8014dec <_dtoa_r+0x464>
 8014ee8:	4b30      	ldr	r3, [pc, #192]	; (8014fac <_dtoa_r+0x624>)
 8014eea:	2200      	movs	r2, #0
 8014eec:	4650      	mov	r0, sl
 8014eee:	4659      	mov	r1, fp
 8014ef0:	f7eb fb82 	bl	80005f8 <__aeabi_dmul>
 8014ef4:	4b2d      	ldr	r3, [pc, #180]	; (8014fac <_dtoa_r+0x624>)
 8014ef6:	4682      	mov	sl, r0
 8014ef8:	468b      	mov	fp, r1
 8014efa:	4640      	mov	r0, r8
 8014efc:	4649      	mov	r1, r9
 8014efe:	2200      	movs	r2, #0
 8014f00:	f7eb fb7a 	bl	80005f8 <__aeabi_dmul>
 8014f04:	4680      	mov	r8, r0
 8014f06:	4689      	mov	r9, r1
 8014f08:	e7c6      	b.n	8014e98 <_dtoa_r+0x510>
 8014f0a:	4650      	mov	r0, sl
 8014f0c:	4659      	mov	r1, fp
 8014f0e:	f7eb fb73 	bl	80005f8 <__aeabi_dmul>
 8014f12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014f14:	9d01      	ldr	r5, [sp, #4]
 8014f16:	930f      	str	r3, [sp, #60]	; 0x3c
 8014f18:	4682      	mov	sl, r0
 8014f1a:	468b      	mov	fp, r1
 8014f1c:	4649      	mov	r1, r9
 8014f1e:	4640      	mov	r0, r8
 8014f20:	f7eb fe1a 	bl	8000b58 <__aeabi_d2iz>
 8014f24:	4606      	mov	r6, r0
 8014f26:	f7eb fafd 	bl	8000524 <__aeabi_i2d>
 8014f2a:	3630      	adds	r6, #48	; 0x30
 8014f2c:	4602      	mov	r2, r0
 8014f2e:	460b      	mov	r3, r1
 8014f30:	4640      	mov	r0, r8
 8014f32:	4649      	mov	r1, r9
 8014f34:	f7eb f9a8 	bl	8000288 <__aeabi_dsub>
 8014f38:	f805 6b01 	strb.w	r6, [r5], #1
 8014f3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014f3e:	429d      	cmp	r5, r3
 8014f40:	4680      	mov	r8, r0
 8014f42:	4689      	mov	r9, r1
 8014f44:	f04f 0200 	mov.w	r2, #0
 8014f48:	d124      	bne.n	8014f94 <_dtoa_r+0x60c>
 8014f4a:	4b1b      	ldr	r3, [pc, #108]	; (8014fb8 <_dtoa_r+0x630>)
 8014f4c:	4650      	mov	r0, sl
 8014f4e:	4659      	mov	r1, fp
 8014f50:	f7eb f99c 	bl	800028c <__adddf3>
 8014f54:	4602      	mov	r2, r0
 8014f56:	460b      	mov	r3, r1
 8014f58:	4640      	mov	r0, r8
 8014f5a:	4649      	mov	r1, r9
 8014f5c:	f7eb fddc 	bl	8000b18 <__aeabi_dcmpgt>
 8014f60:	2800      	cmp	r0, #0
 8014f62:	d173      	bne.n	801504c <_dtoa_r+0x6c4>
 8014f64:	4652      	mov	r2, sl
 8014f66:	465b      	mov	r3, fp
 8014f68:	4913      	ldr	r1, [pc, #76]	; (8014fb8 <_dtoa_r+0x630>)
 8014f6a:	2000      	movs	r0, #0
 8014f6c:	f7eb f98c 	bl	8000288 <__aeabi_dsub>
 8014f70:	4602      	mov	r2, r0
 8014f72:	460b      	mov	r3, r1
 8014f74:	4640      	mov	r0, r8
 8014f76:	4649      	mov	r1, r9
 8014f78:	f7eb fdb0 	bl	8000adc <__aeabi_dcmplt>
 8014f7c:	2800      	cmp	r0, #0
 8014f7e:	f43f af35 	beq.w	8014dec <_dtoa_r+0x464>
 8014f82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014f84:	1e6b      	subs	r3, r5, #1
 8014f86:	930f      	str	r3, [sp, #60]	; 0x3c
 8014f88:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014f8c:	2b30      	cmp	r3, #48	; 0x30
 8014f8e:	d0f8      	beq.n	8014f82 <_dtoa_r+0x5fa>
 8014f90:	9700      	str	r7, [sp, #0]
 8014f92:	e049      	b.n	8015028 <_dtoa_r+0x6a0>
 8014f94:	4b05      	ldr	r3, [pc, #20]	; (8014fac <_dtoa_r+0x624>)
 8014f96:	f7eb fb2f 	bl	80005f8 <__aeabi_dmul>
 8014f9a:	4680      	mov	r8, r0
 8014f9c:	4689      	mov	r9, r1
 8014f9e:	e7bd      	b.n	8014f1c <_dtoa_r+0x594>
 8014fa0:	080171f8 	.word	0x080171f8
 8014fa4:	080171d0 	.word	0x080171d0
 8014fa8:	3ff00000 	.word	0x3ff00000
 8014fac:	40240000 	.word	0x40240000
 8014fb0:	401c0000 	.word	0x401c0000
 8014fb4:	40140000 	.word	0x40140000
 8014fb8:	3fe00000 	.word	0x3fe00000
 8014fbc:	9d01      	ldr	r5, [sp, #4]
 8014fbe:	4656      	mov	r6, sl
 8014fc0:	465f      	mov	r7, fp
 8014fc2:	4642      	mov	r2, r8
 8014fc4:	464b      	mov	r3, r9
 8014fc6:	4630      	mov	r0, r6
 8014fc8:	4639      	mov	r1, r7
 8014fca:	f7eb fc3f 	bl	800084c <__aeabi_ddiv>
 8014fce:	f7eb fdc3 	bl	8000b58 <__aeabi_d2iz>
 8014fd2:	4682      	mov	sl, r0
 8014fd4:	f7eb faa6 	bl	8000524 <__aeabi_i2d>
 8014fd8:	4642      	mov	r2, r8
 8014fda:	464b      	mov	r3, r9
 8014fdc:	f7eb fb0c 	bl	80005f8 <__aeabi_dmul>
 8014fe0:	4602      	mov	r2, r0
 8014fe2:	460b      	mov	r3, r1
 8014fe4:	4630      	mov	r0, r6
 8014fe6:	4639      	mov	r1, r7
 8014fe8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8014fec:	f7eb f94c 	bl	8000288 <__aeabi_dsub>
 8014ff0:	f805 6b01 	strb.w	r6, [r5], #1
 8014ff4:	9e01      	ldr	r6, [sp, #4]
 8014ff6:	9f03      	ldr	r7, [sp, #12]
 8014ff8:	1bae      	subs	r6, r5, r6
 8014ffa:	42b7      	cmp	r7, r6
 8014ffc:	4602      	mov	r2, r0
 8014ffe:	460b      	mov	r3, r1
 8015000:	d135      	bne.n	801506e <_dtoa_r+0x6e6>
 8015002:	f7eb f943 	bl	800028c <__adddf3>
 8015006:	4642      	mov	r2, r8
 8015008:	464b      	mov	r3, r9
 801500a:	4606      	mov	r6, r0
 801500c:	460f      	mov	r7, r1
 801500e:	f7eb fd83 	bl	8000b18 <__aeabi_dcmpgt>
 8015012:	b9d0      	cbnz	r0, 801504a <_dtoa_r+0x6c2>
 8015014:	4642      	mov	r2, r8
 8015016:	464b      	mov	r3, r9
 8015018:	4630      	mov	r0, r6
 801501a:	4639      	mov	r1, r7
 801501c:	f7eb fd54 	bl	8000ac8 <__aeabi_dcmpeq>
 8015020:	b110      	cbz	r0, 8015028 <_dtoa_r+0x6a0>
 8015022:	f01a 0f01 	tst.w	sl, #1
 8015026:	d110      	bne.n	801504a <_dtoa_r+0x6c2>
 8015028:	4620      	mov	r0, r4
 801502a:	ee18 1a10 	vmov	r1, s16
 801502e:	f000 fae9 	bl	8015604 <_Bfree>
 8015032:	2300      	movs	r3, #0
 8015034:	9800      	ldr	r0, [sp, #0]
 8015036:	702b      	strb	r3, [r5, #0]
 8015038:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801503a:	3001      	adds	r0, #1
 801503c:	6018      	str	r0, [r3, #0]
 801503e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015040:	2b00      	cmp	r3, #0
 8015042:	f43f acf1 	beq.w	8014a28 <_dtoa_r+0xa0>
 8015046:	601d      	str	r5, [r3, #0]
 8015048:	e4ee      	b.n	8014a28 <_dtoa_r+0xa0>
 801504a:	9f00      	ldr	r7, [sp, #0]
 801504c:	462b      	mov	r3, r5
 801504e:	461d      	mov	r5, r3
 8015050:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015054:	2a39      	cmp	r2, #57	; 0x39
 8015056:	d106      	bne.n	8015066 <_dtoa_r+0x6de>
 8015058:	9a01      	ldr	r2, [sp, #4]
 801505a:	429a      	cmp	r2, r3
 801505c:	d1f7      	bne.n	801504e <_dtoa_r+0x6c6>
 801505e:	9901      	ldr	r1, [sp, #4]
 8015060:	2230      	movs	r2, #48	; 0x30
 8015062:	3701      	adds	r7, #1
 8015064:	700a      	strb	r2, [r1, #0]
 8015066:	781a      	ldrb	r2, [r3, #0]
 8015068:	3201      	adds	r2, #1
 801506a:	701a      	strb	r2, [r3, #0]
 801506c:	e790      	b.n	8014f90 <_dtoa_r+0x608>
 801506e:	4ba6      	ldr	r3, [pc, #664]	; (8015308 <_dtoa_r+0x980>)
 8015070:	2200      	movs	r2, #0
 8015072:	f7eb fac1 	bl	80005f8 <__aeabi_dmul>
 8015076:	2200      	movs	r2, #0
 8015078:	2300      	movs	r3, #0
 801507a:	4606      	mov	r6, r0
 801507c:	460f      	mov	r7, r1
 801507e:	f7eb fd23 	bl	8000ac8 <__aeabi_dcmpeq>
 8015082:	2800      	cmp	r0, #0
 8015084:	d09d      	beq.n	8014fc2 <_dtoa_r+0x63a>
 8015086:	e7cf      	b.n	8015028 <_dtoa_r+0x6a0>
 8015088:	9a08      	ldr	r2, [sp, #32]
 801508a:	2a00      	cmp	r2, #0
 801508c:	f000 80d7 	beq.w	801523e <_dtoa_r+0x8b6>
 8015090:	9a06      	ldr	r2, [sp, #24]
 8015092:	2a01      	cmp	r2, #1
 8015094:	f300 80ba 	bgt.w	801520c <_dtoa_r+0x884>
 8015098:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801509a:	2a00      	cmp	r2, #0
 801509c:	f000 80b2 	beq.w	8015204 <_dtoa_r+0x87c>
 80150a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80150a4:	9e07      	ldr	r6, [sp, #28]
 80150a6:	9d04      	ldr	r5, [sp, #16]
 80150a8:	9a04      	ldr	r2, [sp, #16]
 80150aa:	441a      	add	r2, r3
 80150ac:	9204      	str	r2, [sp, #16]
 80150ae:	9a05      	ldr	r2, [sp, #20]
 80150b0:	2101      	movs	r1, #1
 80150b2:	441a      	add	r2, r3
 80150b4:	4620      	mov	r0, r4
 80150b6:	9205      	str	r2, [sp, #20]
 80150b8:	f000 fb5c 	bl	8015774 <__i2b>
 80150bc:	4607      	mov	r7, r0
 80150be:	2d00      	cmp	r5, #0
 80150c0:	dd0c      	ble.n	80150dc <_dtoa_r+0x754>
 80150c2:	9b05      	ldr	r3, [sp, #20]
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	dd09      	ble.n	80150dc <_dtoa_r+0x754>
 80150c8:	42ab      	cmp	r3, r5
 80150ca:	9a04      	ldr	r2, [sp, #16]
 80150cc:	bfa8      	it	ge
 80150ce:	462b      	movge	r3, r5
 80150d0:	1ad2      	subs	r2, r2, r3
 80150d2:	9204      	str	r2, [sp, #16]
 80150d4:	9a05      	ldr	r2, [sp, #20]
 80150d6:	1aed      	subs	r5, r5, r3
 80150d8:	1ad3      	subs	r3, r2, r3
 80150da:	9305      	str	r3, [sp, #20]
 80150dc:	9b07      	ldr	r3, [sp, #28]
 80150de:	b31b      	cbz	r3, 8015128 <_dtoa_r+0x7a0>
 80150e0:	9b08      	ldr	r3, [sp, #32]
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	f000 80af 	beq.w	8015246 <_dtoa_r+0x8be>
 80150e8:	2e00      	cmp	r6, #0
 80150ea:	dd13      	ble.n	8015114 <_dtoa_r+0x78c>
 80150ec:	4639      	mov	r1, r7
 80150ee:	4632      	mov	r2, r6
 80150f0:	4620      	mov	r0, r4
 80150f2:	f000 fbff 	bl	80158f4 <__pow5mult>
 80150f6:	ee18 2a10 	vmov	r2, s16
 80150fa:	4601      	mov	r1, r0
 80150fc:	4607      	mov	r7, r0
 80150fe:	4620      	mov	r0, r4
 8015100:	f000 fb4e 	bl	80157a0 <__multiply>
 8015104:	ee18 1a10 	vmov	r1, s16
 8015108:	4680      	mov	r8, r0
 801510a:	4620      	mov	r0, r4
 801510c:	f000 fa7a 	bl	8015604 <_Bfree>
 8015110:	ee08 8a10 	vmov	s16, r8
 8015114:	9b07      	ldr	r3, [sp, #28]
 8015116:	1b9a      	subs	r2, r3, r6
 8015118:	d006      	beq.n	8015128 <_dtoa_r+0x7a0>
 801511a:	ee18 1a10 	vmov	r1, s16
 801511e:	4620      	mov	r0, r4
 8015120:	f000 fbe8 	bl	80158f4 <__pow5mult>
 8015124:	ee08 0a10 	vmov	s16, r0
 8015128:	2101      	movs	r1, #1
 801512a:	4620      	mov	r0, r4
 801512c:	f000 fb22 	bl	8015774 <__i2b>
 8015130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015132:	2b00      	cmp	r3, #0
 8015134:	4606      	mov	r6, r0
 8015136:	f340 8088 	ble.w	801524a <_dtoa_r+0x8c2>
 801513a:	461a      	mov	r2, r3
 801513c:	4601      	mov	r1, r0
 801513e:	4620      	mov	r0, r4
 8015140:	f000 fbd8 	bl	80158f4 <__pow5mult>
 8015144:	9b06      	ldr	r3, [sp, #24]
 8015146:	2b01      	cmp	r3, #1
 8015148:	4606      	mov	r6, r0
 801514a:	f340 8081 	ble.w	8015250 <_dtoa_r+0x8c8>
 801514e:	f04f 0800 	mov.w	r8, #0
 8015152:	6933      	ldr	r3, [r6, #16]
 8015154:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015158:	6918      	ldr	r0, [r3, #16]
 801515a:	f000 fabb 	bl	80156d4 <__hi0bits>
 801515e:	f1c0 0020 	rsb	r0, r0, #32
 8015162:	9b05      	ldr	r3, [sp, #20]
 8015164:	4418      	add	r0, r3
 8015166:	f010 001f 	ands.w	r0, r0, #31
 801516a:	f000 8092 	beq.w	8015292 <_dtoa_r+0x90a>
 801516e:	f1c0 0320 	rsb	r3, r0, #32
 8015172:	2b04      	cmp	r3, #4
 8015174:	f340 808a 	ble.w	801528c <_dtoa_r+0x904>
 8015178:	f1c0 001c 	rsb	r0, r0, #28
 801517c:	9b04      	ldr	r3, [sp, #16]
 801517e:	4403      	add	r3, r0
 8015180:	9304      	str	r3, [sp, #16]
 8015182:	9b05      	ldr	r3, [sp, #20]
 8015184:	4403      	add	r3, r0
 8015186:	4405      	add	r5, r0
 8015188:	9305      	str	r3, [sp, #20]
 801518a:	9b04      	ldr	r3, [sp, #16]
 801518c:	2b00      	cmp	r3, #0
 801518e:	dd07      	ble.n	80151a0 <_dtoa_r+0x818>
 8015190:	ee18 1a10 	vmov	r1, s16
 8015194:	461a      	mov	r2, r3
 8015196:	4620      	mov	r0, r4
 8015198:	f000 fc06 	bl	80159a8 <__lshift>
 801519c:	ee08 0a10 	vmov	s16, r0
 80151a0:	9b05      	ldr	r3, [sp, #20]
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	dd05      	ble.n	80151b2 <_dtoa_r+0x82a>
 80151a6:	4631      	mov	r1, r6
 80151a8:	461a      	mov	r2, r3
 80151aa:	4620      	mov	r0, r4
 80151ac:	f000 fbfc 	bl	80159a8 <__lshift>
 80151b0:	4606      	mov	r6, r0
 80151b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d06e      	beq.n	8015296 <_dtoa_r+0x90e>
 80151b8:	ee18 0a10 	vmov	r0, s16
 80151bc:	4631      	mov	r1, r6
 80151be:	f000 fc63 	bl	8015a88 <__mcmp>
 80151c2:	2800      	cmp	r0, #0
 80151c4:	da67      	bge.n	8015296 <_dtoa_r+0x90e>
 80151c6:	9b00      	ldr	r3, [sp, #0]
 80151c8:	3b01      	subs	r3, #1
 80151ca:	ee18 1a10 	vmov	r1, s16
 80151ce:	9300      	str	r3, [sp, #0]
 80151d0:	220a      	movs	r2, #10
 80151d2:	2300      	movs	r3, #0
 80151d4:	4620      	mov	r0, r4
 80151d6:	f000 fa37 	bl	8015648 <__multadd>
 80151da:	9b08      	ldr	r3, [sp, #32]
 80151dc:	ee08 0a10 	vmov	s16, r0
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	f000 81b1 	beq.w	8015548 <_dtoa_r+0xbc0>
 80151e6:	2300      	movs	r3, #0
 80151e8:	4639      	mov	r1, r7
 80151ea:	220a      	movs	r2, #10
 80151ec:	4620      	mov	r0, r4
 80151ee:	f000 fa2b 	bl	8015648 <__multadd>
 80151f2:	9b02      	ldr	r3, [sp, #8]
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	4607      	mov	r7, r0
 80151f8:	f300 808e 	bgt.w	8015318 <_dtoa_r+0x990>
 80151fc:	9b06      	ldr	r3, [sp, #24]
 80151fe:	2b02      	cmp	r3, #2
 8015200:	dc51      	bgt.n	80152a6 <_dtoa_r+0x91e>
 8015202:	e089      	b.n	8015318 <_dtoa_r+0x990>
 8015204:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015206:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801520a:	e74b      	b.n	80150a4 <_dtoa_r+0x71c>
 801520c:	9b03      	ldr	r3, [sp, #12]
 801520e:	1e5e      	subs	r6, r3, #1
 8015210:	9b07      	ldr	r3, [sp, #28]
 8015212:	42b3      	cmp	r3, r6
 8015214:	bfbf      	itttt	lt
 8015216:	9b07      	ldrlt	r3, [sp, #28]
 8015218:	9607      	strlt	r6, [sp, #28]
 801521a:	1af2      	sublt	r2, r6, r3
 801521c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801521e:	bfb6      	itet	lt
 8015220:	189b      	addlt	r3, r3, r2
 8015222:	1b9e      	subge	r6, r3, r6
 8015224:	930a      	strlt	r3, [sp, #40]	; 0x28
 8015226:	9b03      	ldr	r3, [sp, #12]
 8015228:	bfb8      	it	lt
 801522a:	2600      	movlt	r6, #0
 801522c:	2b00      	cmp	r3, #0
 801522e:	bfb7      	itett	lt
 8015230:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8015234:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8015238:	1a9d      	sublt	r5, r3, r2
 801523a:	2300      	movlt	r3, #0
 801523c:	e734      	b.n	80150a8 <_dtoa_r+0x720>
 801523e:	9e07      	ldr	r6, [sp, #28]
 8015240:	9d04      	ldr	r5, [sp, #16]
 8015242:	9f08      	ldr	r7, [sp, #32]
 8015244:	e73b      	b.n	80150be <_dtoa_r+0x736>
 8015246:	9a07      	ldr	r2, [sp, #28]
 8015248:	e767      	b.n	801511a <_dtoa_r+0x792>
 801524a:	9b06      	ldr	r3, [sp, #24]
 801524c:	2b01      	cmp	r3, #1
 801524e:	dc18      	bgt.n	8015282 <_dtoa_r+0x8fa>
 8015250:	f1ba 0f00 	cmp.w	sl, #0
 8015254:	d115      	bne.n	8015282 <_dtoa_r+0x8fa>
 8015256:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801525a:	b993      	cbnz	r3, 8015282 <_dtoa_r+0x8fa>
 801525c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015260:	0d1b      	lsrs	r3, r3, #20
 8015262:	051b      	lsls	r3, r3, #20
 8015264:	b183      	cbz	r3, 8015288 <_dtoa_r+0x900>
 8015266:	9b04      	ldr	r3, [sp, #16]
 8015268:	3301      	adds	r3, #1
 801526a:	9304      	str	r3, [sp, #16]
 801526c:	9b05      	ldr	r3, [sp, #20]
 801526e:	3301      	adds	r3, #1
 8015270:	9305      	str	r3, [sp, #20]
 8015272:	f04f 0801 	mov.w	r8, #1
 8015276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015278:	2b00      	cmp	r3, #0
 801527a:	f47f af6a 	bne.w	8015152 <_dtoa_r+0x7ca>
 801527e:	2001      	movs	r0, #1
 8015280:	e76f      	b.n	8015162 <_dtoa_r+0x7da>
 8015282:	f04f 0800 	mov.w	r8, #0
 8015286:	e7f6      	b.n	8015276 <_dtoa_r+0x8ee>
 8015288:	4698      	mov	r8, r3
 801528a:	e7f4      	b.n	8015276 <_dtoa_r+0x8ee>
 801528c:	f43f af7d 	beq.w	801518a <_dtoa_r+0x802>
 8015290:	4618      	mov	r0, r3
 8015292:	301c      	adds	r0, #28
 8015294:	e772      	b.n	801517c <_dtoa_r+0x7f4>
 8015296:	9b03      	ldr	r3, [sp, #12]
 8015298:	2b00      	cmp	r3, #0
 801529a:	dc37      	bgt.n	801530c <_dtoa_r+0x984>
 801529c:	9b06      	ldr	r3, [sp, #24]
 801529e:	2b02      	cmp	r3, #2
 80152a0:	dd34      	ble.n	801530c <_dtoa_r+0x984>
 80152a2:	9b03      	ldr	r3, [sp, #12]
 80152a4:	9302      	str	r3, [sp, #8]
 80152a6:	9b02      	ldr	r3, [sp, #8]
 80152a8:	b96b      	cbnz	r3, 80152c6 <_dtoa_r+0x93e>
 80152aa:	4631      	mov	r1, r6
 80152ac:	2205      	movs	r2, #5
 80152ae:	4620      	mov	r0, r4
 80152b0:	f000 f9ca 	bl	8015648 <__multadd>
 80152b4:	4601      	mov	r1, r0
 80152b6:	4606      	mov	r6, r0
 80152b8:	ee18 0a10 	vmov	r0, s16
 80152bc:	f000 fbe4 	bl	8015a88 <__mcmp>
 80152c0:	2800      	cmp	r0, #0
 80152c2:	f73f adbb 	bgt.w	8014e3c <_dtoa_r+0x4b4>
 80152c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152c8:	9d01      	ldr	r5, [sp, #4]
 80152ca:	43db      	mvns	r3, r3
 80152cc:	9300      	str	r3, [sp, #0]
 80152ce:	f04f 0800 	mov.w	r8, #0
 80152d2:	4631      	mov	r1, r6
 80152d4:	4620      	mov	r0, r4
 80152d6:	f000 f995 	bl	8015604 <_Bfree>
 80152da:	2f00      	cmp	r7, #0
 80152dc:	f43f aea4 	beq.w	8015028 <_dtoa_r+0x6a0>
 80152e0:	f1b8 0f00 	cmp.w	r8, #0
 80152e4:	d005      	beq.n	80152f2 <_dtoa_r+0x96a>
 80152e6:	45b8      	cmp	r8, r7
 80152e8:	d003      	beq.n	80152f2 <_dtoa_r+0x96a>
 80152ea:	4641      	mov	r1, r8
 80152ec:	4620      	mov	r0, r4
 80152ee:	f000 f989 	bl	8015604 <_Bfree>
 80152f2:	4639      	mov	r1, r7
 80152f4:	4620      	mov	r0, r4
 80152f6:	f000 f985 	bl	8015604 <_Bfree>
 80152fa:	e695      	b.n	8015028 <_dtoa_r+0x6a0>
 80152fc:	2600      	movs	r6, #0
 80152fe:	4637      	mov	r7, r6
 8015300:	e7e1      	b.n	80152c6 <_dtoa_r+0x93e>
 8015302:	9700      	str	r7, [sp, #0]
 8015304:	4637      	mov	r7, r6
 8015306:	e599      	b.n	8014e3c <_dtoa_r+0x4b4>
 8015308:	40240000 	.word	0x40240000
 801530c:	9b08      	ldr	r3, [sp, #32]
 801530e:	2b00      	cmp	r3, #0
 8015310:	f000 80ca 	beq.w	80154a8 <_dtoa_r+0xb20>
 8015314:	9b03      	ldr	r3, [sp, #12]
 8015316:	9302      	str	r3, [sp, #8]
 8015318:	2d00      	cmp	r5, #0
 801531a:	dd05      	ble.n	8015328 <_dtoa_r+0x9a0>
 801531c:	4639      	mov	r1, r7
 801531e:	462a      	mov	r2, r5
 8015320:	4620      	mov	r0, r4
 8015322:	f000 fb41 	bl	80159a8 <__lshift>
 8015326:	4607      	mov	r7, r0
 8015328:	f1b8 0f00 	cmp.w	r8, #0
 801532c:	d05b      	beq.n	80153e6 <_dtoa_r+0xa5e>
 801532e:	6879      	ldr	r1, [r7, #4]
 8015330:	4620      	mov	r0, r4
 8015332:	f000 f927 	bl	8015584 <_Balloc>
 8015336:	4605      	mov	r5, r0
 8015338:	b928      	cbnz	r0, 8015346 <_dtoa_r+0x9be>
 801533a:	4b87      	ldr	r3, [pc, #540]	; (8015558 <_dtoa_r+0xbd0>)
 801533c:	4602      	mov	r2, r0
 801533e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8015342:	f7ff bb3b 	b.w	80149bc <_dtoa_r+0x34>
 8015346:	693a      	ldr	r2, [r7, #16]
 8015348:	3202      	adds	r2, #2
 801534a:	0092      	lsls	r2, r2, #2
 801534c:	f107 010c 	add.w	r1, r7, #12
 8015350:	300c      	adds	r0, #12
 8015352:	f7fe fcd3 	bl	8013cfc <memcpy>
 8015356:	2201      	movs	r2, #1
 8015358:	4629      	mov	r1, r5
 801535a:	4620      	mov	r0, r4
 801535c:	f000 fb24 	bl	80159a8 <__lshift>
 8015360:	9b01      	ldr	r3, [sp, #4]
 8015362:	f103 0901 	add.w	r9, r3, #1
 8015366:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801536a:	4413      	add	r3, r2
 801536c:	9305      	str	r3, [sp, #20]
 801536e:	f00a 0301 	and.w	r3, sl, #1
 8015372:	46b8      	mov	r8, r7
 8015374:	9304      	str	r3, [sp, #16]
 8015376:	4607      	mov	r7, r0
 8015378:	4631      	mov	r1, r6
 801537a:	ee18 0a10 	vmov	r0, s16
 801537e:	f7ff fa77 	bl	8014870 <quorem>
 8015382:	4641      	mov	r1, r8
 8015384:	9002      	str	r0, [sp, #8]
 8015386:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801538a:	ee18 0a10 	vmov	r0, s16
 801538e:	f000 fb7b 	bl	8015a88 <__mcmp>
 8015392:	463a      	mov	r2, r7
 8015394:	9003      	str	r0, [sp, #12]
 8015396:	4631      	mov	r1, r6
 8015398:	4620      	mov	r0, r4
 801539a:	f000 fb91 	bl	8015ac0 <__mdiff>
 801539e:	68c2      	ldr	r2, [r0, #12]
 80153a0:	f109 3bff 	add.w	fp, r9, #4294967295
 80153a4:	4605      	mov	r5, r0
 80153a6:	bb02      	cbnz	r2, 80153ea <_dtoa_r+0xa62>
 80153a8:	4601      	mov	r1, r0
 80153aa:	ee18 0a10 	vmov	r0, s16
 80153ae:	f000 fb6b 	bl	8015a88 <__mcmp>
 80153b2:	4602      	mov	r2, r0
 80153b4:	4629      	mov	r1, r5
 80153b6:	4620      	mov	r0, r4
 80153b8:	9207      	str	r2, [sp, #28]
 80153ba:	f000 f923 	bl	8015604 <_Bfree>
 80153be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80153c2:	ea43 0102 	orr.w	r1, r3, r2
 80153c6:	9b04      	ldr	r3, [sp, #16]
 80153c8:	430b      	orrs	r3, r1
 80153ca:	464d      	mov	r5, r9
 80153cc:	d10f      	bne.n	80153ee <_dtoa_r+0xa66>
 80153ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80153d2:	d02a      	beq.n	801542a <_dtoa_r+0xaa2>
 80153d4:	9b03      	ldr	r3, [sp, #12]
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	dd02      	ble.n	80153e0 <_dtoa_r+0xa58>
 80153da:	9b02      	ldr	r3, [sp, #8]
 80153dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80153e0:	f88b a000 	strb.w	sl, [fp]
 80153e4:	e775      	b.n	80152d2 <_dtoa_r+0x94a>
 80153e6:	4638      	mov	r0, r7
 80153e8:	e7ba      	b.n	8015360 <_dtoa_r+0x9d8>
 80153ea:	2201      	movs	r2, #1
 80153ec:	e7e2      	b.n	80153b4 <_dtoa_r+0xa2c>
 80153ee:	9b03      	ldr	r3, [sp, #12]
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	db04      	blt.n	80153fe <_dtoa_r+0xa76>
 80153f4:	9906      	ldr	r1, [sp, #24]
 80153f6:	430b      	orrs	r3, r1
 80153f8:	9904      	ldr	r1, [sp, #16]
 80153fa:	430b      	orrs	r3, r1
 80153fc:	d122      	bne.n	8015444 <_dtoa_r+0xabc>
 80153fe:	2a00      	cmp	r2, #0
 8015400:	ddee      	ble.n	80153e0 <_dtoa_r+0xa58>
 8015402:	ee18 1a10 	vmov	r1, s16
 8015406:	2201      	movs	r2, #1
 8015408:	4620      	mov	r0, r4
 801540a:	f000 facd 	bl	80159a8 <__lshift>
 801540e:	4631      	mov	r1, r6
 8015410:	ee08 0a10 	vmov	s16, r0
 8015414:	f000 fb38 	bl	8015a88 <__mcmp>
 8015418:	2800      	cmp	r0, #0
 801541a:	dc03      	bgt.n	8015424 <_dtoa_r+0xa9c>
 801541c:	d1e0      	bne.n	80153e0 <_dtoa_r+0xa58>
 801541e:	f01a 0f01 	tst.w	sl, #1
 8015422:	d0dd      	beq.n	80153e0 <_dtoa_r+0xa58>
 8015424:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015428:	d1d7      	bne.n	80153da <_dtoa_r+0xa52>
 801542a:	2339      	movs	r3, #57	; 0x39
 801542c:	f88b 3000 	strb.w	r3, [fp]
 8015430:	462b      	mov	r3, r5
 8015432:	461d      	mov	r5, r3
 8015434:	3b01      	subs	r3, #1
 8015436:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801543a:	2a39      	cmp	r2, #57	; 0x39
 801543c:	d071      	beq.n	8015522 <_dtoa_r+0xb9a>
 801543e:	3201      	adds	r2, #1
 8015440:	701a      	strb	r2, [r3, #0]
 8015442:	e746      	b.n	80152d2 <_dtoa_r+0x94a>
 8015444:	2a00      	cmp	r2, #0
 8015446:	dd07      	ble.n	8015458 <_dtoa_r+0xad0>
 8015448:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801544c:	d0ed      	beq.n	801542a <_dtoa_r+0xaa2>
 801544e:	f10a 0301 	add.w	r3, sl, #1
 8015452:	f88b 3000 	strb.w	r3, [fp]
 8015456:	e73c      	b.n	80152d2 <_dtoa_r+0x94a>
 8015458:	9b05      	ldr	r3, [sp, #20]
 801545a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801545e:	4599      	cmp	r9, r3
 8015460:	d047      	beq.n	80154f2 <_dtoa_r+0xb6a>
 8015462:	ee18 1a10 	vmov	r1, s16
 8015466:	2300      	movs	r3, #0
 8015468:	220a      	movs	r2, #10
 801546a:	4620      	mov	r0, r4
 801546c:	f000 f8ec 	bl	8015648 <__multadd>
 8015470:	45b8      	cmp	r8, r7
 8015472:	ee08 0a10 	vmov	s16, r0
 8015476:	f04f 0300 	mov.w	r3, #0
 801547a:	f04f 020a 	mov.w	r2, #10
 801547e:	4641      	mov	r1, r8
 8015480:	4620      	mov	r0, r4
 8015482:	d106      	bne.n	8015492 <_dtoa_r+0xb0a>
 8015484:	f000 f8e0 	bl	8015648 <__multadd>
 8015488:	4680      	mov	r8, r0
 801548a:	4607      	mov	r7, r0
 801548c:	f109 0901 	add.w	r9, r9, #1
 8015490:	e772      	b.n	8015378 <_dtoa_r+0x9f0>
 8015492:	f000 f8d9 	bl	8015648 <__multadd>
 8015496:	4639      	mov	r1, r7
 8015498:	4680      	mov	r8, r0
 801549a:	2300      	movs	r3, #0
 801549c:	220a      	movs	r2, #10
 801549e:	4620      	mov	r0, r4
 80154a0:	f000 f8d2 	bl	8015648 <__multadd>
 80154a4:	4607      	mov	r7, r0
 80154a6:	e7f1      	b.n	801548c <_dtoa_r+0xb04>
 80154a8:	9b03      	ldr	r3, [sp, #12]
 80154aa:	9302      	str	r3, [sp, #8]
 80154ac:	9d01      	ldr	r5, [sp, #4]
 80154ae:	ee18 0a10 	vmov	r0, s16
 80154b2:	4631      	mov	r1, r6
 80154b4:	f7ff f9dc 	bl	8014870 <quorem>
 80154b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80154bc:	9b01      	ldr	r3, [sp, #4]
 80154be:	f805 ab01 	strb.w	sl, [r5], #1
 80154c2:	1aea      	subs	r2, r5, r3
 80154c4:	9b02      	ldr	r3, [sp, #8]
 80154c6:	4293      	cmp	r3, r2
 80154c8:	dd09      	ble.n	80154de <_dtoa_r+0xb56>
 80154ca:	ee18 1a10 	vmov	r1, s16
 80154ce:	2300      	movs	r3, #0
 80154d0:	220a      	movs	r2, #10
 80154d2:	4620      	mov	r0, r4
 80154d4:	f000 f8b8 	bl	8015648 <__multadd>
 80154d8:	ee08 0a10 	vmov	s16, r0
 80154dc:	e7e7      	b.n	80154ae <_dtoa_r+0xb26>
 80154de:	9b02      	ldr	r3, [sp, #8]
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	bfc8      	it	gt
 80154e4:	461d      	movgt	r5, r3
 80154e6:	9b01      	ldr	r3, [sp, #4]
 80154e8:	bfd8      	it	le
 80154ea:	2501      	movle	r5, #1
 80154ec:	441d      	add	r5, r3
 80154ee:	f04f 0800 	mov.w	r8, #0
 80154f2:	ee18 1a10 	vmov	r1, s16
 80154f6:	2201      	movs	r2, #1
 80154f8:	4620      	mov	r0, r4
 80154fa:	f000 fa55 	bl	80159a8 <__lshift>
 80154fe:	4631      	mov	r1, r6
 8015500:	ee08 0a10 	vmov	s16, r0
 8015504:	f000 fac0 	bl	8015a88 <__mcmp>
 8015508:	2800      	cmp	r0, #0
 801550a:	dc91      	bgt.n	8015430 <_dtoa_r+0xaa8>
 801550c:	d102      	bne.n	8015514 <_dtoa_r+0xb8c>
 801550e:	f01a 0f01 	tst.w	sl, #1
 8015512:	d18d      	bne.n	8015430 <_dtoa_r+0xaa8>
 8015514:	462b      	mov	r3, r5
 8015516:	461d      	mov	r5, r3
 8015518:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801551c:	2a30      	cmp	r2, #48	; 0x30
 801551e:	d0fa      	beq.n	8015516 <_dtoa_r+0xb8e>
 8015520:	e6d7      	b.n	80152d2 <_dtoa_r+0x94a>
 8015522:	9a01      	ldr	r2, [sp, #4]
 8015524:	429a      	cmp	r2, r3
 8015526:	d184      	bne.n	8015432 <_dtoa_r+0xaaa>
 8015528:	9b00      	ldr	r3, [sp, #0]
 801552a:	3301      	adds	r3, #1
 801552c:	9300      	str	r3, [sp, #0]
 801552e:	2331      	movs	r3, #49	; 0x31
 8015530:	7013      	strb	r3, [r2, #0]
 8015532:	e6ce      	b.n	80152d2 <_dtoa_r+0x94a>
 8015534:	4b09      	ldr	r3, [pc, #36]	; (801555c <_dtoa_r+0xbd4>)
 8015536:	f7ff ba95 	b.w	8014a64 <_dtoa_r+0xdc>
 801553a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801553c:	2b00      	cmp	r3, #0
 801553e:	f47f aa6e 	bne.w	8014a1e <_dtoa_r+0x96>
 8015542:	4b07      	ldr	r3, [pc, #28]	; (8015560 <_dtoa_r+0xbd8>)
 8015544:	f7ff ba8e 	b.w	8014a64 <_dtoa_r+0xdc>
 8015548:	9b02      	ldr	r3, [sp, #8]
 801554a:	2b00      	cmp	r3, #0
 801554c:	dcae      	bgt.n	80154ac <_dtoa_r+0xb24>
 801554e:	9b06      	ldr	r3, [sp, #24]
 8015550:	2b02      	cmp	r3, #2
 8015552:	f73f aea8 	bgt.w	80152a6 <_dtoa_r+0x91e>
 8015556:	e7a9      	b.n	80154ac <_dtoa_r+0xb24>
 8015558:	0801715f 	.word	0x0801715f
 801555c:	080170bc 	.word	0x080170bc
 8015560:	080170e0 	.word	0x080170e0

08015564 <_localeconv_r>:
 8015564:	4800      	ldr	r0, [pc, #0]	; (8015568 <_localeconv_r+0x4>)
 8015566:	4770      	bx	lr
 8015568:	200001bc 	.word	0x200001bc

0801556c <__malloc_lock>:
 801556c:	4801      	ldr	r0, [pc, #4]	; (8015574 <__malloc_lock+0x8>)
 801556e:	f000 bd30 	b.w	8015fd2 <__retarget_lock_acquire_recursive>
 8015572:	bf00      	nop
 8015574:	2000277c 	.word	0x2000277c

08015578 <__malloc_unlock>:
 8015578:	4801      	ldr	r0, [pc, #4]	; (8015580 <__malloc_unlock+0x8>)
 801557a:	f000 bd2b 	b.w	8015fd4 <__retarget_lock_release_recursive>
 801557e:	bf00      	nop
 8015580:	2000277c 	.word	0x2000277c

08015584 <_Balloc>:
 8015584:	b570      	push	{r4, r5, r6, lr}
 8015586:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015588:	4604      	mov	r4, r0
 801558a:	460d      	mov	r5, r1
 801558c:	b976      	cbnz	r6, 80155ac <_Balloc+0x28>
 801558e:	2010      	movs	r0, #16
 8015590:	f7fe fba4 	bl	8013cdc <malloc>
 8015594:	4602      	mov	r2, r0
 8015596:	6260      	str	r0, [r4, #36]	; 0x24
 8015598:	b920      	cbnz	r0, 80155a4 <_Balloc+0x20>
 801559a:	4b18      	ldr	r3, [pc, #96]	; (80155fc <_Balloc+0x78>)
 801559c:	4818      	ldr	r0, [pc, #96]	; (8015600 <_Balloc+0x7c>)
 801559e:	2166      	movs	r1, #102	; 0x66
 80155a0:	f000 fce6 	bl	8015f70 <__assert_func>
 80155a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80155a8:	6006      	str	r6, [r0, #0]
 80155aa:	60c6      	str	r6, [r0, #12]
 80155ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80155ae:	68f3      	ldr	r3, [r6, #12]
 80155b0:	b183      	cbz	r3, 80155d4 <_Balloc+0x50>
 80155b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80155b4:	68db      	ldr	r3, [r3, #12]
 80155b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80155ba:	b9b8      	cbnz	r0, 80155ec <_Balloc+0x68>
 80155bc:	2101      	movs	r1, #1
 80155be:	fa01 f605 	lsl.w	r6, r1, r5
 80155c2:	1d72      	adds	r2, r6, #5
 80155c4:	0092      	lsls	r2, r2, #2
 80155c6:	4620      	mov	r0, r4
 80155c8:	f000 fb60 	bl	8015c8c <_calloc_r>
 80155cc:	b160      	cbz	r0, 80155e8 <_Balloc+0x64>
 80155ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80155d2:	e00e      	b.n	80155f2 <_Balloc+0x6e>
 80155d4:	2221      	movs	r2, #33	; 0x21
 80155d6:	2104      	movs	r1, #4
 80155d8:	4620      	mov	r0, r4
 80155da:	f000 fb57 	bl	8015c8c <_calloc_r>
 80155de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80155e0:	60f0      	str	r0, [r6, #12]
 80155e2:	68db      	ldr	r3, [r3, #12]
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d1e4      	bne.n	80155b2 <_Balloc+0x2e>
 80155e8:	2000      	movs	r0, #0
 80155ea:	bd70      	pop	{r4, r5, r6, pc}
 80155ec:	6802      	ldr	r2, [r0, #0]
 80155ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80155f2:	2300      	movs	r3, #0
 80155f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80155f8:	e7f7      	b.n	80155ea <_Balloc+0x66>
 80155fa:	bf00      	nop
 80155fc:	080170ed 	.word	0x080170ed
 8015600:	08017170 	.word	0x08017170

08015604 <_Bfree>:
 8015604:	b570      	push	{r4, r5, r6, lr}
 8015606:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015608:	4605      	mov	r5, r0
 801560a:	460c      	mov	r4, r1
 801560c:	b976      	cbnz	r6, 801562c <_Bfree+0x28>
 801560e:	2010      	movs	r0, #16
 8015610:	f7fe fb64 	bl	8013cdc <malloc>
 8015614:	4602      	mov	r2, r0
 8015616:	6268      	str	r0, [r5, #36]	; 0x24
 8015618:	b920      	cbnz	r0, 8015624 <_Bfree+0x20>
 801561a:	4b09      	ldr	r3, [pc, #36]	; (8015640 <_Bfree+0x3c>)
 801561c:	4809      	ldr	r0, [pc, #36]	; (8015644 <_Bfree+0x40>)
 801561e:	218a      	movs	r1, #138	; 0x8a
 8015620:	f000 fca6 	bl	8015f70 <__assert_func>
 8015624:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015628:	6006      	str	r6, [r0, #0]
 801562a:	60c6      	str	r6, [r0, #12]
 801562c:	b13c      	cbz	r4, 801563e <_Bfree+0x3a>
 801562e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015630:	6862      	ldr	r2, [r4, #4]
 8015632:	68db      	ldr	r3, [r3, #12]
 8015634:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015638:	6021      	str	r1, [r4, #0]
 801563a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801563e:	bd70      	pop	{r4, r5, r6, pc}
 8015640:	080170ed 	.word	0x080170ed
 8015644:	08017170 	.word	0x08017170

08015648 <__multadd>:
 8015648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801564c:	690d      	ldr	r5, [r1, #16]
 801564e:	4607      	mov	r7, r0
 8015650:	460c      	mov	r4, r1
 8015652:	461e      	mov	r6, r3
 8015654:	f101 0c14 	add.w	ip, r1, #20
 8015658:	2000      	movs	r0, #0
 801565a:	f8dc 3000 	ldr.w	r3, [ip]
 801565e:	b299      	uxth	r1, r3
 8015660:	fb02 6101 	mla	r1, r2, r1, r6
 8015664:	0c1e      	lsrs	r6, r3, #16
 8015666:	0c0b      	lsrs	r3, r1, #16
 8015668:	fb02 3306 	mla	r3, r2, r6, r3
 801566c:	b289      	uxth	r1, r1
 801566e:	3001      	adds	r0, #1
 8015670:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015674:	4285      	cmp	r5, r0
 8015676:	f84c 1b04 	str.w	r1, [ip], #4
 801567a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801567e:	dcec      	bgt.n	801565a <__multadd+0x12>
 8015680:	b30e      	cbz	r6, 80156c6 <__multadd+0x7e>
 8015682:	68a3      	ldr	r3, [r4, #8]
 8015684:	42ab      	cmp	r3, r5
 8015686:	dc19      	bgt.n	80156bc <__multadd+0x74>
 8015688:	6861      	ldr	r1, [r4, #4]
 801568a:	4638      	mov	r0, r7
 801568c:	3101      	adds	r1, #1
 801568e:	f7ff ff79 	bl	8015584 <_Balloc>
 8015692:	4680      	mov	r8, r0
 8015694:	b928      	cbnz	r0, 80156a2 <__multadd+0x5a>
 8015696:	4602      	mov	r2, r0
 8015698:	4b0c      	ldr	r3, [pc, #48]	; (80156cc <__multadd+0x84>)
 801569a:	480d      	ldr	r0, [pc, #52]	; (80156d0 <__multadd+0x88>)
 801569c:	21b5      	movs	r1, #181	; 0xb5
 801569e:	f000 fc67 	bl	8015f70 <__assert_func>
 80156a2:	6922      	ldr	r2, [r4, #16]
 80156a4:	3202      	adds	r2, #2
 80156a6:	f104 010c 	add.w	r1, r4, #12
 80156aa:	0092      	lsls	r2, r2, #2
 80156ac:	300c      	adds	r0, #12
 80156ae:	f7fe fb25 	bl	8013cfc <memcpy>
 80156b2:	4621      	mov	r1, r4
 80156b4:	4638      	mov	r0, r7
 80156b6:	f7ff ffa5 	bl	8015604 <_Bfree>
 80156ba:	4644      	mov	r4, r8
 80156bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80156c0:	3501      	adds	r5, #1
 80156c2:	615e      	str	r6, [r3, #20]
 80156c4:	6125      	str	r5, [r4, #16]
 80156c6:	4620      	mov	r0, r4
 80156c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156cc:	0801715f 	.word	0x0801715f
 80156d0:	08017170 	.word	0x08017170

080156d4 <__hi0bits>:
 80156d4:	0c03      	lsrs	r3, r0, #16
 80156d6:	041b      	lsls	r3, r3, #16
 80156d8:	b9d3      	cbnz	r3, 8015710 <__hi0bits+0x3c>
 80156da:	0400      	lsls	r0, r0, #16
 80156dc:	2310      	movs	r3, #16
 80156de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80156e2:	bf04      	itt	eq
 80156e4:	0200      	lsleq	r0, r0, #8
 80156e6:	3308      	addeq	r3, #8
 80156e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80156ec:	bf04      	itt	eq
 80156ee:	0100      	lsleq	r0, r0, #4
 80156f0:	3304      	addeq	r3, #4
 80156f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80156f6:	bf04      	itt	eq
 80156f8:	0080      	lsleq	r0, r0, #2
 80156fa:	3302      	addeq	r3, #2
 80156fc:	2800      	cmp	r0, #0
 80156fe:	db05      	blt.n	801570c <__hi0bits+0x38>
 8015700:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015704:	f103 0301 	add.w	r3, r3, #1
 8015708:	bf08      	it	eq
 801570a:	2320      	moveq	r3, #32
 801570c:	4618      	mov	r0, r3
 801570e:	4770      	bx	lr
 8015710:	2300      	movs	r3, #0
 8015712:	e7e4      	b.n	80156de <__hi0bits+0xa>

08015714 <__lo0bits>:
 8015714:	6803      	ldr	r3, [r0, #0]
 8015716:	f013 0207 	ands.w	r2, r3, #7
 801571a:	4601      	mov	r1, r0
 801571c:	d00b      	beq.n	8015736 <__lo0bits+0x22>
 801571e:	07da      	lsls	r2, r3, #31
 8015720:	d423      	bmi.n	801576a <__lo0bits+0x56>
 8015722:	0798      	lsls	r0, r3, #30
 8015724:	bf49      	itett	mi
 8015726:	085b      	lsrmi	r3, r3, #1
 8015728:	089b      	lsrpl	r3, r3, #2
 801572a:	2001      	movmi	r0, #1
 801572c:	600b      	strmi	r3, [r1, #0]
 801572e:	bf5c      	itt	pl
 8015730:	600b      	strpl	r3, [r1, #0]
 8015732:	2002      	movpl	r0, #2
 8015734:	4770      	bx	lr
 8015736:	b298      	uxth	r0, r3
 8015738:	b9a8      	cbnz	r0, 8015766 <__lo0bits+0x52>
 801573a:	0c1b      	lsrs	r3, r3, #16
 801573c:	2010      	movs	r0, #16
 801573e:	b2da      	uxtb	r2, r3
 8015740:	b90a      	cbnz	r2, 8015746 <__lo0bits+0x32>
 8015742:	3008      	adds	r0, #8
 8015744:	0a1b      	lsrs	r3, r3, #8
 8015746:	071a      	lsls	r2, r3, #28
 8015748:	bf04      	itt	eq
 801574a:	091b      	lsreq	r3, r3, #4
 801574c:	3004      	addeq	r0, #4
 801574e:	079a      	lsls	r2, r3, #30
 8015750:	bf04      	itt	eq
 8015752:	089b      	lsreq	r3, r3, #2
 8015754:	3002      	addeq	r0, #2
 8015756:	07da      	lsls	r2, r3, #31
 8015758:	d403      	bmi.n	8015762 <__lo0bits+0x4e>
 801575a:	085b      	lsrs	r3, r3, #1
 801575c:	f100 0001 	add.w	r0, r0, #1
 8015760:	d005      	beq.n	801576e <__lo0bits+0x5a>
 8015762:	600b      	str	r3, [r1, #0]
 8015764:	4770      	bx	lr
 8015766:	4610      	mov	r0, r2
 8015768:	e7e9      	b.n	801573e <__lo0bits+0x2a>
 801576a:	2000      	movs	r0, #0
 801576c:	4770      	bx	lr
 801576e:	2020      	movs	r0, #32
 8015770:	4770      	bx	lr
	...

08015774 <__i2b>:
 8015774:	b510      	push	{r4, lr}
 8015776:	460c      	mov	r4, r1
 8015778:	2101      	movs	r1, #1
 801577a:	f7ff ff03 	bl	8015584 <_Balloc>
 801577e:	4602      	mov	r2, r0
 8015780:	b928      	cbnz	r0, 801578e <__i2b+0x1a>
 8015782:	4b05      	ldr	r3, [pc, #20]	; (8015798 <__i2b+0x24>)
 8015784:	4805      	ldr	r0, [pc, #20]	; (801579c <__i2b+0x28>)
 8015786:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801578a:	f000 fbf1 	bl	8015f70 <__assert_func>
 801578e:	2301      	movs	r3, #1
 8015790:	6144      	str	r4, [r0, #20]
 8015792:	6103      	str	r3, [r0, #16]
 8015794:	bd10      	pop	{r4, pc}
 8015796:	bf00      	nop
 8015798:	0801715f 	.word	0x0801715f
 801579c:	08017170 	.word	0x08017170

080157a0 <__multiply>:
 80157a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157a4:	4691      	mov	r9, r2
 80157a6:	690a      	ldr	r2, [r1, #16]
 80157a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80157ac:	429a      	cmp	r2, r3
 80157ae:	bfb8      	it	lt
 80157b0:	460b      	movlt	r3, r1
 80157b2:	460c      	mov	r4, r1
 80157b4:	bfbc      	itt	lt
 80157b6:	464c      	movlt	r4, r9
 80157b8:	4699      	movlt	r9, r3
 80157ba:	6927      	ldr	r7, [r4, #16]
 80157bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80157c0:	68a3      	ldr	r3, [r4, #8]
 80157c2:	6861      	ldr	r1, [r4, #4]
 80157c4:	eb07 060a 	add.w	r6, r7, sl
 80157c8:	42b3      	cmp	r3, r6
 80157ca:	b085      	sub	sp, #20
 80157cc:	bfb8      	it	lt
 80157ce:	3101      	addlt	r1, #1
 80157d0:	f7ff fed8 	bl	8015584 <_Balloc>
 80157d4:	b930      	cbnz	r0, 80157e4 <__multiply+0x44>
 80157d6:	4602      	mov	r2, r0
 80157d8:	4b44      	ldr	r3, [pc, #272]	; (80158ec <__multiply+0x14c>)
 80157da:	4845      	ldr	r0, [pc, #276]	; (80158f0 <__multiply+0x150>)
 80157dc:	f240 115d 	movw	r1, #349	; 0x15d
 80157e0:	f000 fbc6 	bl	8015f70 <__assert_func>
 80157e4:	f100 0514 	add.w	r5, r0, #20
 80157e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80157ec:	462b      	mov	r3, r5
 80157ee:	2200      	movs	r2, #0
 80157f0:	4543      	cmp	r3, r8
 80157f2:	d321      	bcc.n	8015838 <__multiply+0x98>
 80157f4:	f104 0314 	add.w	r3, r4, #20
 80157f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80157fc:	f109 0314 	add.w	r3, r9, #20
 8015800:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015804:	9202      	str	r2, [sp, #8]
 8015806:	1b3a      	subs	r2, r7, r4
 8015808:	3a15      	subs	r2, #21
 801580a:	f022 0203 	bic.w	r2, r2, #3
 801580e:	3204      	adds	r2, #4
 8015810:	f104 0115 	add.w	r1, r4, #21
 8015814:	428f      	cmp	r7, r1
 8015816:	bf38      	it	cc
 8015818:	2204      	movcc	r2, #4
 801581a:	9201      	str	r2, [sp, #4]
 801581c:	9a02      	ldr	r2, [sp, #8]
 801581e:	9303      	str	r3, [sp, #12]
 8015820:	429a      	cmp	r2, r3
 8015822:	d80c      	bhi.n	801583e <__multiply+0x9e>
 8015824:	2e00      	cmp	r6, #0
 8015826:	dd03      	ble.n	8015830 <__multiply+0x90>
 8015828:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801582c:	2b00      	cmp	r3, #0
 801582e:	d05a      	beq.n	80158e6 <__multiply+0x146>
 8015830:	6106      	str	r6, [r0, #16]
 8015832:	b005      	add	sp, #20
 8015834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015838:	f843 2b04 	str.w	r2, [r3], #4
 801583c:	e7d8      	b.n	80157f0 <__multiply+0x50>
 801583e:	f8b3 a000 	ldrh.w	sl, [r3]
 8015842:	f1ba 0f00 	cmp.w	sl, #0
 8015846:	d024      	beq.n	8015892 <__multiply+0xf2>
 8015848:	f104 0e14 	add.w	lr, r4, #20
 801584c:	46a9      	mov	r9, r5
 801584e:	f04f 0c00 	mov.w	ip, #0
 8015852:	f85e 2b04 	ldr.w	r2, [lr], #4
 8015856:	f8d9 1000 	ldr.w	r1, [r9]
 801585a:	fa1f fb82 	uxth.w	fp, r2
 801585e:	b289      	uxth	r1, r1
 8015860:	fb0a 110b 	mla	r1, sl, fp, r1
 8015864:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015868:	f8d9 2000 	ldr.w	r2, [r9]
 801586c:	4461      	add	r1, ip
 801586e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015872:	fb0a c20b 	mla	r2, sl, fp, ip
 8015876:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801587a:	b289      	uxth	r1, r1
 801587c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015880:	4577      	cmp	r7, lr
 8015882:	f849 1b04 	str.w	r1, [r9], #4
 8015886:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801588a:	d8e2      	bhi.n	8015852 <__multiply+0xb2>
 801588c:	9a01      	ldr	r2, [sp, #4]
 801588e:	f845 c002 	str.w	ip, [r5, r2]
 8015892:	9a03      	ldr	r2, [sp, #12]
 8015894:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015898:	3304      	adds	r3, #4
 801589a:	f1b9 0f00 	cmp.w	r9, #0
 801589e:	d020      	beq.n	80158e2 <__multiply+0x142>
 80158a0:	6829      	ldr	r1, [r5, #0]
 80158a2:	f104 0c14 	add.w	ip, r4, #20
 80158a6:	46ae      	mov	lr, r5
 80158a8:	f04f 0a00 	mov.w	sl, #0
 80158ac:	f8bc b000 	ldrh.w	fp, [ip]
 80158b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80158b4:	fb09 220b 	mla	r2, r9, fp, r2
 80158b8:	4492      	add	sl, r2
 80158ba:	b289      	uxth	r1, r1
 80158bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80158c0:	f84e 1b04 	str.w	r1, [lr], #4
 80158c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80158c8:	f8be 1000 	ldrh.w	r1, [lr]
 80158cc:	0c12      	lsrs	r2, r2, #16
 80158ce:	fb09 1102 	mla	r1, r9, r2, r1
 80158d2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80158d6:	4567      	cmp	r7, ip
 80158d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80158dc:	d8e6      	bhi.n	80158ac <__multiply+0x10c>
 80158de:	9a01      	ldr	r2, [sp, #4]
 80158e0:	50a9      	str	r1, [r5, r2]
 80158e2:	3504      	adds	r5, #4
 80158e4:	e79a      	b.n	801581c <__multiply+0x7c>
 80158e6:	3e01      	subs	r6, #1
 80158e8:	e79c      	b.n	8015824 <__multiply+0x84>
 80158ea:	bf00      	nop
 80158ec:	0801715f 	.word	0x0801715f
 80158f0:	08017170 	.word	0x08017170

080158f4 <__pow5mult>:
 80158f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80158f8:	4615      	mov	r5, r2
 80158fa:	f012 0203 	ands.w	r2, r2, #3
 80158fe:	4606      	mov	r6, r0
 8015900:	460f      	mov	r7, r1
 8015902:	d007      	beq.n	8015914 <__pow5mult+0x20>
 8015904:	4c25      	ldr	r4, [pc, #148]	; (801599c <__pow5mult+0xa8>)
 8015906:	3a01      	subs	r2, #1
 8015908:	2300      	movs	r3, #0
 801590a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801590e:	f7ff fe9b 	bl	8015648 <__multadd>
 8015912:	4607      	mov	r7, r0
 8015914:	10ad      	asrs	r5, r5, #2
 8015916:	d03d      	beq.n	8015994 <__pow5mult+0xa0>
 8015918:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801591a:	b97c      	cbnz	r4, 801593c <__pow5mult+0x48>
 801591c:	2010      	movs	r0, #16
 801591e:	f7fe f9dd 	bl	8013cdc <malloc>
 8015922:	4602      	mov	r2, r0
 8015924:	6270      	str	r0, [r6, #36]	; 0x24
 8015926:	b928      	cbnz	r0, 8015934 <__pow5mult+0x40>
 8015928:	4b1d      	ldr	r3, [pc, #116]	; (80159a0 <__pow5mult+0xac>)
 801592a:	481e      	ldr	r0, [pc, #120]	; (80159a4 <__pow5mult+0xb0>)
 801592c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015930:	f000 fb1e 	bl	8015f70 <__assert_func>
 8015934:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015938:	6004      	str	r4, [r0, #0]
 801593a:	60c4      	str	r4, [r0, #12]
 801593c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015940:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015944:	b94c      	cbnz	r4, 801595a <__pow5mult+0x66>
 8015946:	f240 2171 	movw	r1, #625	; 0x271
 801594a:	4630      	mov	r0, r6
 801594c:	f7ff ff12 	bl	8015774 <__i2b>
 8015950:	2300      	movs	r3, #0
 8015952:	f8c8 0008 	str.w	r0, [r8, #8]
 8015956:	4604      	mov	r4, r0
 8015958:	6003      	str	r3, [r0, #0]
 801595a:	f04f 0900 	mov.w	r9, #0
 801595e:	07eb      	lsls	r3, r5, #31
 8015960:	d50a      	bpl.n	8015978 <__pow5mult+0x84>
 8015962:	4639      	mov	r1, r7
 8015964:	4622      	mov	r2, r4
 8015966:	4630      	mov	r0, r6
 8015968:	f7ff ff1a 	bl	80157a0 <__multiply>
 801596c:	4639      	mov	r1, r7
 801596e:	4680      	mov	r8, r0
 8015970:	4630      	mov	r0, r6
 8015972:	f7ff fe47 	bl	8015604 <_Bfree>
 8015976:	4647      	mov	r7, r8
 8015978:	106d      	asrs	r5, r5, #1
 801597a:	d00b      	beq.n	8015994 <__pow5mult+0xa0>
 801597c:	6820      	ldr	r0, [r4, #0]
 801597e:	b938      	cbnz	r0, 8015990 <__pow5mult+0x9c>
 8015980:	4622      	mov	r2, r4
 8015982:	4621      	mov	r1, r4
 8015984:	4630      	mov	r0, r6
 8015986:	f7ff ff0b 	bl	80157a0 <__multiply>
 801598a:	6020      	str	r0, [r4, #0]
 801598c:	f8c0 9000 	str.w	r9, [r0]
 8015990:	4604      	mov	r4, r0
 8015992:	e7e4      	b.n	801595e <__pow5mult+0x6a>
 8015994:	4638      	mov	r0, r7
 8015996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801599a:	bf00      	nop
 801599c:	080172c0 	.word	0x080172c0
 80159a0:	080170ed 	.word	0x080170ed
 80159a4:	08017170 	.word	0x08017170

080159a8 <__lshift>:
 80159a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80159ac:	460c      	mov	r4, r1
 80159ae:	6849      	ldr	r1, [r1, #4]
 80159b0:	6923      	ldr	r3, [r4, #16]
 80159b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80159b6:	68a3      	ldr	r3, [r4, #8]
 80159b8:	4607      	mov	r7, r0
 80159ba:	4691      	mov	r9, r2
 80159bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80159c0:	f108 0601 	add.w	r6, r8, #1
 80159c4:	42b3      	cmp	r3, r6
 80159c6:	db0b      	blt.n	80159e0 <__lshift+0x38>
 80159c8:	4638      	mov	r0, r7
 80159ca:	f7ff fddb 	bl	8015584 <_Balloc>
 80159ce:	4605      	mov	r5, r0
 80159d0:	b948      	cbnz	r0, 80159e6 <__lshift+0x3e>
 80159d2:	4602      	mov	r2, r0
 80159d4:	4b2a      	ldr	r3, [pc, #168]	; (8015a80 <__lshift+0xd8>)
 80159d6:	482b      	ldr	r0, [pc, #172]	; (8015a84 <__lshift+0xdc>)
 80159d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80159dc:	f000 fac8 	bl	8015f70 <__assert_func>
 80159e0:	3101      	adds	r1, #1
 80159e2:	005b      	lsls	r3, r3, #1
 80159e4:	e7ee      	b.n	80159c4 <__lshift+0x1c>
 80159e6:	2300      	movs	r3, #0
 80159e8:	f100 0114 	add.w	r1, r0, #20
 80159ec:	f100 0210 	add.w	r2, r0, #16
 80159f0:	4618      	mov	r0, r3
 80159f2:	4553      	cmp	r3, sl
 80159f4:	db37      	blt.n	8015a66 <__lshift+0xbe>
 80159f6:	6920      	ldr	r0, [r4, #16]
 80159f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80159fc:	f104 0314 	add.w	r3, r4, #20
 8015a00:	f019 091f 	ands.w	r9, r9, #31
 8015a04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015a08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8015a0c:	d02f      	beq.n	8015a6e <__lshift+0xc6>
 8015a0e:	f1c9 0e20 	rsb	lr, r9, #32
 8015a12:	468a      	mov	sl, r1
 8015a14:	f04f 0c00 	mov.w	ip, #0
 8015a18:	681a      	ldr	r2, [r3, #0]
 8015a1a:	fa02 f209 	lsl.w	r2, r2, r9
 8015a1e:	ea42 020c 	orr.w	r2, r2, ip
 8015a22:	f84a 2b04 	str.w	r2, [sl], #4
 8015a26:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a2a:	4298      	cmp	r0, r3
 8015a2c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8015a30:	d8f2      	bhi.n	8015a18 <__lshift+0x70>
 8015a32:	1b03      	subs	r3, r0, r4
 8015a34:	3b15      	subs	r3, #21
 8015a36:	f023 0303 	bic.w	r3, r3, #3
 8015a3a:	3304      	adds	r3, #4
 8015a3c:	f104 0215 	add.w	r2, r4, #21
 8015a40:	4290      	cmp	r0, r2
 8015a42:	bf38      	it	cc
 8015a44:	2304      	movcc	r3, #4
 8015a46:	f841 c003 	str.w	ip, [r1, r3]
 8015a4a:	f1bc 0f00 	cmp.w	ip, #0
 8015a4e:	d001      	beq.n	8015a54 <__lshift+0xac>
 8015a50:	f108 0602 	add.w	r6, r8, #2
 8015a54:	3e01      	subs	r6, #1
 8015a56:	4638      	mov	r0, r7
 8015a58:	612e      	str	r6, [r5, #16]
 8015a5a:	4621      	mov	r1, r4
 8015a5c:	f7ff fdd2 	bl	8015604 <_Bfree>
 8015a60:	4628      	mov	r0, r5
 8015a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a66:	f842 0f04 	str.w	r0, [r2, #4]!
 8015a6a:	3301      	adds	r3, #1
 8015a6c:	e7c1      	b.n	80159f2 <__lshift+0x4a>
 8015a6e:	3904      	subs	r1, #4
 8015a70:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a74:	f841 2f04 	str.w	r2, [r1, #4]!
 8015a78:	4298      	cmp	r0, r3
 8015a7a:	d8f9      	bhi.n	8015a70 <__lshift+0xc8>
 8015a7c:	e7ea      	b.n	8015a54 <__lshift+0xac>
 8015a7e:	bf00      	nop
 8015a80:	0801715f 	.word	0x0801715f
 8015a84:	08017170 	.word	0x08017170

08015a88 <__mcmp>:
 8015a88:	b530      	push	{r4, r5, lr}
 8015a8a:	6902      	ldr	r2, [r0, #16]
 8015a8c:	690c      	ldr	r4, [r1, #16]
 8015a8e:	1b12      	subs	r2, r2, r4
 8015a90:	d10e      	bne.n	8015ab0 <__mcmp+0x28>
 8015a92:	f100 0314 	add.w	r3, r0, #20
 8015a96:	3114      	adds	r1, #20
 8015a98:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015a9c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015aa0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015aa4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015aa8:	42a5      	cmp	r5, r4
 8015aaa:	d003      	beq.n	8015ab4 <__mcmp+0x2c>
 8015aac:	d305      	bcc.n	8015aba <__mcmp+0x32>
 8015aae:	2201      	movs	r2, #1
 8015ab0:	4610      	mov	r0, r2
 8015ab2:	bd30      	pop	{r4, r5, pc}
 8015ab4:	4283      	cmp	r3, r0
 8015ab6:	d3f3      	bcc.n	8015aa0 <__mcmp+0x18>
 8015ab8:	e7fa      	b.n	8015ab0 <__mcmp+0x28>
 8015aba:	f04f 32ff 	mov.w	r2, #4294967295
 8015abe:	e7f7      	b.n	8015ab0 <__mcmp+0x28>

08015ac0 <__mdiff>:
 8015ac0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ac4:	460c      	mov	r4, r1
 8015ac6:	4606      	mov	r6, r0
 8015ac8:	4611      	mov	r1, r2
 8015aca:	4620      	mov	r0, r4
 8015acc:	4690      	mov	r8, r2
 8015ace:	f7ff ffdb 	bl	8015a88 <__mcmp>
 8015ad2:	1e05      	subs	r5, r0, #0
 8015ad4:	d110      	bne.n	8015af8 <__mdiff+0x38>
 8015ad6:	4629      	mov	r1, r5
 8015ad8:	4630      	mov	r0, r6
 8015ada:	f7ff fd53 	bl	8015584 <_Balloc>
 8015ade:	b930      	cbnz	r0, 8015aee <__mdiff+0x2e>
 8015ae0:	4b3a      	ldr	r3, [pc, #232]	; (8015bcc <__mdiff+0x10c>)
 8015ae2:	4602      	mov	r2, r0
 8015ae4:	f240 2132 	movw	r1, #562	; 0x232
 8015ae8:	4839      	ldr	r0, [pc, #228]	; (8015bd0 <__mdiff+0x110>)
 8015aea:	f000 fa41 	bl	8015f70 <__assert_func>
 8015aee:	2301      	movs	r3, #1
 8015af0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015af4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015af8:	bfa4      	itt	ge
 8015afa:	4643      	movge	r3, r8
 8015afc:	46a0      	movge	r8, r4
 8015afe:	4630      	mov	r0, r6
 8015b00:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015b04:	bfa6      	itte	ge
 8015b06:	461c      	movge	r4, r3
 8015b08:	2500      	movge	r5, #0
 8015b0a:	2501      	movlt	r5, #1
 8015b0c:	f7ff fd3a 	bl	8015584 <_Balloc>
 8015b10:	b920      	cbnz	r0, 8015b1c <__mdiff+0x5c>
 8015b12:	4b2e      	ldr	r3, [pc, #184]	; (8015bcc <__mdiff+0x10c>)
 8015b14:	4602      	mov	r2, r0
 8015b16:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015b1a:	e7e5      	b.n	8015ae8 <__mdiff+0x28>
 8015b1c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015b20:	6926      	ldr	r6, [r4, #16]
 8015b22:	60c5      	str	r5, [r0, #12]
 8015b24:	f104 0914 	add.w	r9, r4, #20
 8015b28:	f108 0514 	add.w	r5, r8, #20
 8015b2c:	f100 0e14 	add.w	lr, r0, #20
 8015b30:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015b34:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015b38:	f108 0210 	add.w	r2, r8, #16
 8015b3c:	46f2      	mov	sl, lr
 8015b3e:	2100      	movs	r1, #0
 8015b40:	f859 3b04 	ldr.w	r3, [r9], #4
 8015b44:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015b48:	fa1f f883 	uxth.w	r8, r3
 8015b4c:	fa11 f18b 	uxtah	r1, r1, fp
 8015b50:	0c1b      	lsrs	r3, r3, #16
 8015b52:	eba1 0808 	sub.w	r8, r1, r8
 8015b56:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015b5a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015b5e:	fa1f f888 	uxth.w	r8, r8
 8015b62:	1419      	asrs	r1, r3, #16
 8015b64:	454e      	cmp	r6, r9
 8015b66:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015b6a:	f84a 3b04 	str.w	r3, [sl], #4
 8015b6e:	d8e7      	bhi.n	8015b40 <__mdiff+0x80>
 8015b70:	1b33      	subs	r3, r6, r4
 8015b72:	3b15      	subs	r3, #21
 8015b74:	f023 0303 	bic.w	r3, r3, #3
 8015b78:	3304      	adds	r3, #4
 8015b7a:	3415      	adds	r4, #21
 8015b7c:	42a6      	cmp	r6, r4
 8015b7e:	bf38      	it	cc
 8015b80:	2304      	movcc	r3, #4
 8015b82:	441d      	add	r5, r3
 8015b84:	4473      	add	r3, lr
 8015b86:	469e      	mov	lr, r3
 8015b88:	462e      	mov	r6, r5
 8015b8a:	4566      	cmp	r6, ip
 8015b8c:	d30e      	bcc.n	8015bac <__mdiff+0xec>
 8015b8e:	f10c 0203 	add.w	r2, ip, #3
 8015b92:	1b52      	subs	r2, r2, r5
 8015b94:	f022 0203 	bic.w	r2, r2, #3
 8015b98:	3d03      	subs	r5, #3
 8015b9a:	45ac      	cmp	ip, r5
 8015b9c:	bf38      	it	cc
 8015b9e:	2200      	movcc	r2, #0
 8015ba0:	441a      	add	r2, r3
 8015ba2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8015ba6:	b17b      	cbz	r3, 8015bc8 <__mdiff+0x108>
 8015ba8:	6107      	str	r7, [r0, #16]
 8015baa:	e7a3      	b.n	8015af4 <__mdiff+0x34>
 8015bac:	f856 8b04 	ldr.w	r8, [r6], #4
 8015bb0:	fa11 f288 	uxtah	r2, r1, r8
 8015bb4:	1414      	asrs	r4, r2, #16
 8015bb6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015bba:	b292      	uxth	r2, r2
 8015bbc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015bc0:	f84e 2b04 	str.w	r2, [lr], #4
 8015bc4:	1421      	asrs	r1, r4, #16
 8015bc6:	e7e0      	b.n	8015b8a <__mdiff+0xca>
 8015bc8:	3f01      	subs	r7, #1
 8015bca:	e7ea      	b.n	8015ba2 <__mdiff+0xe2>
 8015bcc:	0801715f 	.word	0x0801715f
 8015bd0:	08017170 	.word	0x08017170

08015bd4 <__d2b>:
 8015bd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015bd8:	4689      	mov	r9, r1
 8015bda:	2101      	movs	r1, #1
 8015bdc:	ec57 6b10 	vmov	r6, r7, d0
 8015be0:	4690      	mov	r8, r2
 8015be2:	f7ff fccf 	bl	8015584 <_Balloc>
 8015be6:	4604      	mov	r4, r0
 8015be8:	b930      	cbnz	r0, 8015bf8 <__d2b+0x24>
 8015bea:	4602      	mov	r2, r0
 8015bec:	4b25      	ldr	r3, [pc, #148]	; (8015c84 <__d2b+0xb0>)
 8015bee:	4826      	ldr	r0, [pc, #152]	; (8015c88 <__d2b+0xb4>)
 8015bf0:	f240 310a 	movw	r1, #778	; 0x30a
 8015bf4:	f000 f9bc 	bl	8015f70 <__assert_func>
 8015bf8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8015bfc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015c00:	bb35      	cbnz	r5, 8015c50 <__d2b+0x7c>
 8015c02:	2e00      	cmp	r6, #0
 8015c04:	9301      	str	r3, [sp, #4]
 8015c06:	d028      	beq.n	8015c5a <__d2b+0x86>
 8015c08:	4668      	mov	r0, sp
 8015c0a:	9600      	str	r6, [sp, #0]
 8015c0c:	f7ff fd82 	bl	8015714 <__lo0bits>
 8015c10:	9900      	ldr	r1, [sp, #0]
 8015c12:	b300      	cbz	r0, 8015c56 <__d2b+0x82>
 8015c14:	9a01      	ldr	r2, [sp, #4]
 8015c16:	f1c0 0320 	rsb	r3, r0, #32
 8015c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8015c1e:	430b      	orrs	r3, r1
 8015c20:	40c2      	lsrs	r2, r0
 8015c22:	6163      	str	r3, [r4, #20]
 8015c24:	9201      	str	r2, [sp, #4]
 8015c26:	9b01      	ldr	r3, [sp, #4]
 8015c28:	61a3      	str	r3, [r4, #24]
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	bf14      	ite	ne
 8015c2e:	2202      	movne	r2, #2
 8015c30:	2201      	moveq	r2, #1
 8015c32:	6122      	str	r2, [r4, #16]
 8015c34:	b1d5      	cbz	r5, 8015c6c <__d2b+0x98>
 8015c36:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015c3a:	4405      	add	r5, r0
 8015c3c:	f8c9 5000 	str.w	r5, [r9]
 8015c40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015c44:	f8c8 0000 	str.w	r0, [r8]
 8015c48:	4620      	mov	r0, r4
 8015c4a:	b003      	add	sp, #12
 8015c4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015c54:	e7d5      	b.n	8015c02 <__d2b+0x2e>
 8015c56:	6161      	str	r1, [r4, #20]
 8015c58:	e7e5      	b.n	8015c26 <__d2b+0x52>
 8015c5a:	a801      	add	r0, sp, #4
 8015c5c:	f7ff fd5a 	bl	8015714 <__lo0bits>
 8015c60:	9b01      	ldr	r3, [sp, #4]
 8015c62:	6163      	str	r3, [r4, #20]
 8015c64:	2201      	movs	r2, #1
 8015c66:	6122      	str	r2, [r4, #16]
 8015c68:	3020      	adds	r0, #32
 8015c6a:	e7e3      	b.n	8015c34 <__d2b+0x60>
 8015c6c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015c70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015c74:	f8c9 0000 	str.w	r0, [r9]
 8015c78:	6918      	ldr	r0, [r3, #16]
 8015c7a:	f7ff fd2b 	bl	80156d4 <__hi0bits>
 8015c7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015c82:	e7df      	b.n	8015c44 <__d2b+0x70>
 8015c84:	0801715f 	.word	0x0801715f
 8015c88:	08017170 	.word	0x08017170

08015c8c <_calloc_r>:
 8015c8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015c8e:	fba1 2402 	umull	r2, r4, r1, r2
 8015c92:	b94c      	cbnz	r4, 8015ca8 <_calloc_r+0x1c>
 8015c94:	4611      	mov	r1, r2
 8015c96:	9201      	str	r2, [sp, #4]
 8015c98:	f7fe f8b2 	bl	8013e00 <_malloc_r>
 8015c9c:	9a01      	ldr	r2, [sp, #4]
 8015c9e:	4605      	mov	r5, r0
 8015ca0:	b930      	cbnz	r0, 8015cb0 <_calloc_r+0x24>
 8015ca2:	4628      	mov	r0, r5
 8015ca4:	b003      	add	sp, #12
 8015ca6:	bd30      	pop	{r4, r5, pc}
 8015ca8:	220c      	movs	r2, #12
 8015caa:	6002      	str	r2, [r0, #0]
 8015cac:	2500      	movs	r5, #0
 8015cae:	e7f8      	b.n	8015ca2 <_calloc_r+0x16>
 8015cb0:	4621      	mov	r1, r4
 8015cb2:	f7fe f831 	bl	8013d18 <memset>
 8015cb6:	e7f4      	b.n	8015ca2 <_calloc_r+0x16>

08015cb8 <__ssputs_r>:
 8015cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015cbc:	688e      	ldr	r6, [r1, #8]
 8015cbe:	429e      	cmp	r6, r3
 8015cc0:	4682      	mov	sl, r0
 8015cc2:	460c      	mov	r4, r1
 8015cc4:	4690      	mov	r8, r2
 8015cc6:	461f      	mov	r7, r3
 8015cc8:	d838      	bhi.n	8015d3c <__ssputs_r+0x84>
 8015cca:	898a      	ldrh	r2, [r1, #12]
 8015ccc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015cd0:	d032      	beq.n	8015d38 <__ssputs_r+0x80>
 8015cd2:	6825      	ldr	r5, [r4, #0]
 8015cd4:	6909      	ldr	r1, [r1, #16]
 8015cd6:	eba5 0901 	sub.w	r9, r5, r1
 8015cda:	6965      	ldr	r5, [r4, #20]
 8015cdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015ce0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015ce4:	3301      	adds	r3, #1
 8015ce6:	444b      	add	r3, r9
 8015ce8:	106d      	asrs	r5, r5, #1
 8015cea:	429d      	cmp	r5, r3
 8015cec:	bf38      	it	cc
 8015cee:	461d      	movcc	r5, r3
 8015cf0:	0553      	lsls	r3, r2, #21
 8015cf2:	d531      	bpl.n	8015d58 <__ssputs_r+0xa0>
 8015cf4:	4629      	mov	r1, r5
 8015cf6:	f7fe f883 	bl	8013e00 <_malloc_r>
 8015cfa:	4606      	mov	r6, r0
 8015cfc:	b950      	cbnz	r0, 8015d14 <__ssputs_r+0x5c>
 8015cfe:	230c      	movs	r3, #12
 8015d00:	f8ca 3000 	str.w	r3, [sl]
 8015d04:	89a3      	ldrh	r3, [r4, #12]
 8015d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015d0a:	81a3      	strh	r3, [r4, #12]
 8015d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8015d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d14:	6921      	ldr	r1, [r4, #16]
 8015d16:	464a      	mov	r2, r9
 8015d18:	f7fd fff0 	bl	8013cfc <memcpy>
 8015d1c:	89a3      	ldrh	r3, [r4, #12]
 8015d1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015d26:	81a3      	strh	r3, [r4, #12]
 8015d28:	6126      	str	r6, [r4, #16]
 8015d2a:	6165      	str	r5, [r4, #20]
 8015d2c:	444e      	add	r6, r9
 8015d2e:	eba5 0509 	sub.w	r5, r5, r9
 8015d32:	6026      	str	r6, [r4, #0]
 8015d34:	60a5      	str	r5, [r4, #8]
 8015d36:	463e      	mov	r6, r7
 8015d38:	42be      	cmp	r6, r7
 8015d3a:	d900      	bls.n	8015d3e <__ssputs_r+0x86>
 8015d3c:	463e      	mov	r6, r7
 8015d3e:	6820      	ldr	r0, [r4, #0]
 8015d40:	4632      	mov	r2, r6
 8015d42:	4641      	mov	r1, r8
 8015d44:	f000 f959 	bl	8015ffa <memmove>
 8015d48:	68a3      	ldr	r3, [r4, #8]
 8015d4a:	1b9b      	subs	r3, r3, r6
 8015d4c:	60a3      	str	r3, [r4, #8]
 8015d4e:	6823      	ldr	r3, [r4, #0]
 8015d50:	4433      	add	r3, r6
 8015d52:	6023      	str	r3, [r4, #0]
 8015d54:	2000      	movs	r0, #0
 8015d56:	e7db      	b.n	8015d10 <__ssputs_r+0x58>
 8015d58:	462a      	mov	r2, r5
 8015d5a:	f000 f968 	bl	801602e <_realloc_r>
 8015d5e:	4606      	mov	r6, r0
 8015d60:	2800      	cmp	r0, #0
 8015d62:	d1e1      	bne.n	8015d28 <__ssputs_r+0x70>
 8015d64:	6921      	ldr	r1, [r4, #16]
 8015d66:	4650      	mov	r0, sl
 8015d68:	f7fd ffde 	bl	8013d28 <_free_r>
 8015d6c:	e7c7      	b.n	8015cfe <__ssputs_r+0x46>
	...

08015d70 <_svfiprintf_r>:
 8015d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d74:	4698      	mov	r8, r3
 8015d76:	898b      	ldrh	r3, [r1, #12]
 8015d78:	061b      	lsls	r3, r3, #24
 8015d7a:	b09d      	sub	sp, #116	; 0x74
 8015d7c:	4607      	mov	r7, r0
 8015d7e:	460d      	mov	r5, r1
 8015d80:	4614      	mov	r4, r2
 8015d82:	d50e      	bpl.n	8015da2 <_svfiprintf_r+0x32>
 8015d84:	690b      	ldr	r3, [r1, #16]
 8015d86:	b963      	cbnz	r3, 8015da2 <_svfiprintf_r+0x32>
 8015d88:	2140      	movs	r1, #64	; 0x40
 8015d8a:	f7fe f839 	bl	8013e00 <_malloc_r>
 8015d8e:	6028      	str	r0, [r5, #0]
 8015d90:	6128      	str	r0, [r5, #16]
 8015d92:	b920      	cbnz	r0, 8015d9e <_svfiprintf_r+0x2e>
 8015d94:	230c      	movs	r3, #12
 8015d96:	603b      	str	r3, [r7, #0]
 8015d98:	f04f 30ff 	mov.w	r0, #4294967295
 8015d9c:	e0d1      	b.n	8015f42 <_svfiprintf_r+0x1d2>
 8015d9e:	2340      	movs	r3, #64	; 0x40
 8015da0:	616b      	str	r3, [r5, #20]
 8015da2:	2300      	movs	r3, #0
 8015da4:	9309      	str	r3, [sp, #36]	; 0x24
 8015da6:	2320      	movs	r3, #32
 8015da8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015dac:	f8cd 800c 	str.w	r8, [sp, #12]
 8015db0:	2330      	movs	r3, #48	; 0x30
 8015db2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015f5c <_svfiprintf_r+0x1ec>
 8015db6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015dba:	f04f 0901 	mov.w	r9, #1
 8015dbe:	4623      	mov	r3, r4
 8015dc0:	469a      	mov	sl, r3
 8015dc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015dc6:	b10a      	cbz	r2, 8015dcc <_svfiprintf_r+0x5c>
 8015dc8:	2a25      	cmp	r2, #37	; 0x25
 8015dca:	d1f9      	bne.n	8015dc0 <_svfiprintf_r+0x50>
 8015dcc:	ebba 0b04 	subs.w	fp, sl, r4
 8015dd0:	d00b      	beq.n	8015dea <_svfiprintf_r+0x7a>
 8015dd2:	465b      	mov	r3, fp
 8015dd4:	4622      	mov	r2, r4
 8015dd6:	4629      	mov	r1, r5
 8015dd8:	4638      	mov	r0, r7
 8015dda:	f7ff ff6d 	bl	8015cb8 <__ssputs_r>
 8015dde:	3001      	adds	r0, #1
 8015de0:	f000 80aa 	beq.w	8015f38 <_svfiprintf_r+0x1c8>
 8015de4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015de6:	445a      	add	r2, fp
 8015de8:	9209      	str	r2, [sp, #36]	; 0x24
 8015dea:	f89a 3000 	ldrb.w	r3, [sl]
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	f000 80a2 	beq.w	8015f38 <_svfiprintf_r+0x1c8>
 8015df4:	2300      	movs	r3, #0
 8015df6:	f04f 32ff 	mov.w	r2, #4294967295
 8015dfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015dfe:	f10a 0a01 	add.w	sl, sl, #1
 8015e02:	9304      	str	r3, [sp, #16]
 8015e04:	9307      	str	r3, [sp, #28]
 8015e06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015e0a:	931a      	str	r3, [sp, #104]	; 0x68
 8015e0c:	4654      	mov	r4, sl
 8015e0e:	2205      	movs	r2, #5
 8015e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e14:	4851      	ldr	r0, [pc, #324]	; (8015f5c <_svfiprintf_r+0x1ec>)
 8015e16:	f7ea f9e3 	bl	80001e0 <memchr>
 8015e1a:	9a04      	ldr	r2, [sp, #16]
 8015e1c:	b9d8      	cbnz	r0, 8015e56 <_svfiprintf_r+0xe6>
 8015e1e:	06d0      	lsls	r0, r2, #27
 8015e20:	bf44      	itt	mi
 8015e22:	2320      	movmi	r3, #32
 8015e24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015e28:	0711      	lsls	r1, r2, #28
 8015e2a:	bf44      	itt	mi
 8015e2c:	232b      	movmi	r3, #43	; 0x2b
 8015e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015e32:	f89a 3000 	ldrb.w	r3, [sl]
 8015e36:	2b2a      	cmp	r3, #42	; 0x2a
 8015e38:	d015      	beq.n	8015e66 <_svfiprintf_r+0xf6>
 8015e3a:	9a07      	ldr	r2, [sp, #28]
 8015e3c:	4654      	mov	r4, sl
 8015e3e:	2000      	movs	r0, #0
 8015e40:	f04f 0c0a 	mov.w	ip, #10
 8015e44:	4621      	mov	r1, r4
 8015e46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015e4a:	3b30      	subs	r3, #48	; 0x30
 8015e4c:	2b09      	cmp	r3, #9
 8015e4e:	d94e      	bls.n	8015eee <_svfiprintf_r+0x17e>
 8015e50:	b1b0      	cbz	r0, 8015e80 <_svfiprintf_r+0x110>
 8015e52:	9207      	str	r2, [sp, #28]
 8015e54:	e014      	b.n	8015e80 <_svfiprintf_r+0x110>
 8015e56:	eba0 0308 	sub.w	r3, r0, r8
 8015e5a:	fa09 f303 	lsl.w	r3, r9, r3
 8015e5e:	4313      	orrs	r3, r2
 8015e60:	9304      	str	r3, [sp, #16]
 8015e62:	46a2      	mov	sl, r4
 8015e64:	e7d2      	b.n	8015e0c <_svfiprintf_r+0x9c>
 8015e66:	9b03      	ldr	r3, [sp, #12]
 8015e68:	1d19      	adds	r1, r3, #4
 8015e6a:	681b      	ldr	r3, [r3, #0]
 8015e6c:	9103      	str	r1, [sp, #12]
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	bfbb      	ittet	lt
 8015e72:	425b      	neglt	r3, r3
 8015e74:	f042 0202 	orrlt.w	r2, r2, #2
 8015e78:	9307      	strge	r3, [sp, #28]
 8015e7a:	9307      	strlt	r3, [sp, #28]
 8015e7c:	bfb8      	it	lt
 8015e7e:	9204      	strlt	r2, [sp, #16]
 8015e80:	7823      	ldrb	r3, [r4, #0]
 8015e82:	2b2e      	cmp	r3, #46	; 0x2e
 8015e84:	d10c      	bne.n	8015ea0 <_svfiprintf_r+0x130>
 8015e86:	7863      	ldrb	r3, [r4, #1]
 8015e88:	2b2a      	cmp	r3, #42	; 0x2a
 8015e8a:	d135      	bne.n	8015ef8 <_svfiprintf_r+0x188>
 8015e8c:	9b03      	ldr	r3, [sp, #12]
 8015e8e:	1d1a      	adds	r2, r3, #4
 8015e90:	681b      	ldr	r3, [r3, #0]
 8015e92:	9203      	str	r2, [sp, #12]
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	bfb8      	it	lt
 8015e98:	f04f 33ff 	movlt.w	r3, #4294967295
 8015e9c:	3402      	adds	r4, #2
 8015e9e:	9305      	str	r3, [sp, #20]
 8015ea0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015f6c <_svfiprintf_r+0x1fc>
 8015ea4:	7821      	ldrb	r1, [r4, #0]
 8015ea6:	2203      	movs	r2, #3
 8015ea8:	4650      	mov	r0, sl
 8015eaa:	f7ea f999 	bl	80001e0 <memchr>
 8015eae:	b140      	cbz	r0, 8015ec2 <_svfiprintf_r+0x152>
 8015eb0:	2340      	movs	r3, #64	; 0x40
 8015eb2:	eba0 000a 	sub.w	r0, r0, sl
 8015eb6:	fa03 f000 	lsl.w	r0, r3, r0
 8015eba:	9b04      	ldr	r3, [sp, #16]
 8015ebc:	4303      	orrs	r3, r0
 8015ebe:	3401      	adds	r4, #1
 8015ec0:	9304      	str	r3, [sp, #16]
 8015ec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ec6:	4826      	ldr	r0, [pc, #152]	; (8015f60 <_svfiprintf_r+0x1f0>)
 8015ec8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015ecc:	2206      	movs	r2, #6
 8015ece:	f7ea f987 	bl	80001e0 <memchr>
 8015ed2:	2800      	cmp	r0, #0
 8015ed4:	d038      	beq.n	8015f48 <_svfiprintf_r+0x1d8>
 8015ed6:	4b23      	ldr	r3, [pc, #140]	; (8015f64 <_svfiprintf_r+0x1f4>)
 8015ed8:	bb1b      	cbnz	r3, 8015f22 <_svfiprintf_r+0x1b2>
 8015eda:	9b03      	ldr	r3, [sp, #12]
 8015edc:	3307      	adds	r3, #7
 8015ede:	f023 0307 	bic.w	r3, r3, #7
 8015ee2:	3308      	adds	r3, #8
 8015ee4:	9303      	str	r3, [sp, #12]
 8015ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ee8:	4433      	add	r3, r6
 8015eea:	9309      	str	r3, [sp, #36]	; 0x24
 8015eec:	e767      	b.n	8015dbe <_svfiprintf_r+0x4e>
 8015eee:	fb0c 3202 	mla	r2, ip, r2, r3
 8015ef2:	460c      	mov	r4, r1
 8015ef4:	2001      	movs	r0, #1
 8015ef6:	e7a5      	b.n	8015e44 <_svfiprintf_r+0xd4>
 8015ef8:	2300      	movs	r3, #0
 8015efa:	3401      	adds	r4, #1
 8015efc:	9305      	str	r3, [sp, #20]
 8015efe:	4619      	mov	r1, r3
 8015f00:	f04f 0c0a 	mov.w	ip, #10
 8015f04:	4620      	mov	r0, r4
 8015f06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015f0a:	3a30      	subs	r2, #48	; 0x30
 8015f0c:	2a09      	cmp	r2, #9
 8015f0e:	d903      	bls.n	8015f18 <_svfiprintf_r+0x1a8>
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d0c5      	beq.n	8015ea0 <_svfiprintf_r+0x130>
 8015f14:	9105      	str	r1, [sp, #20]
 8015f16:	e7c3      	b.n	8015ea0 <_svfiprintf_r+0x130>
 8015f18:	fb0c 2101 	mla	r1, ip, r1, r2
 8015f1c:	4604      	mov	r4, r0
 8015f1e:	2301      	movs	r3, #1
 8015f20:	e7f0      	b.n	8015f04 <_svfiprintf_r+0x194>
 8015f22:	ab03      	add	r3, sp, #12
 8015f24:	9300      	str	r3, [sp, #0]
 8015f26:	462a      	mov	r2, r5
 8015f28:	4b0f      	ldr	r3, [pc, #60]	; (8015f68 <_svfiprintf_r+0x1f8>)
 8015f2a:	a904      	add	r1, sp, #16
 8015f2c:	4638      	mov	r0, r7
 8015f2e:	f7fe f87b 	bl	8014028 <_printf_float>
 8015f32:	1c42      	adds	r2, r0, #1
 8015f34:	4606      	mov	r6, r0
 8015f36:	d1d6      	bne.n	8015ee6 <_svfiprintf_r+0x176>
 8015f38:	89ab      	ldrh	r3, [r5, #12]
 8015f3a:	065b      	lsls	r3, r3, #25
 8015f3c:	f53f af2c 	bmi.w	8015d98 <_svfiprintf_r+0x28>
 8015f40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015f42:	b01d      	add	sp, #116	; 0x74
 8015f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f48:	ab03      	add	r3, sp, #12
 8015f4a:	9300      	str	r3, [sp, #0]
 8015f4c:	462a      	mov	r2, r5
 8015f4e:	4b06      	ldr	r3, [pc, #24]	; (8015f68 <_svfiprintf_r+0x1f8>)
 8015f50:	a904      	add	r1, sp, #16
 8015f52:	4638      	mov	r0, r7
 8015f54:	f7fe fb0c 	bl	8014570 <_printf_i>
 8015f58:	e7eb      	b.n	8015f32 <_svfiprintf_r+0x1c2>
 8015f5a:	bf00      	nop
 8015f5c:	080172cc 	.word	0x080172cc
 8015f60:	080172d6 	.word	0x080172d6
 8015f64:	08014029 	.word	0x08014029
 8015f68:	08015cb9 	.word	0x08015cb9
 8015f6c:	080172d2 	.word	0x080172d2

08015f70 <__assert_func>:
 8015f70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015f72:	4614      	mov	r4, r2
 8015f74:	461a      	mov	r2, r3
 8015f76:	4b09      	ldr	r3, [pc, #36]	; (8015f9c <__assert_func+0x2c>)
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	4605      	mov	r5, r0
 8015f7c:	68d8      	ldr	r0, [r3, #12]
 8015f7e:	b14c      	cbz	r4, 8015f94 <__assert_func+0x24>
 8015f80:	4b07      	ldr	r3, [pc, #28]	; (8015fa0 <__assert_func+0x30>)
 8015f82:	9100      	str	r1, [sp, #0]
 8015f84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015f88:	4906      	ldr	r1, [pc, #24]	; (8015fa4 <__assert_func+0x34>)
 8015f8a:	462b      	mov	r3, r5
 8015f8c:	f000 f80e 	bl	8015fac <fiprintf>
 8015f90:	f000 faa4 	bl	80164dc <abort>
 8015f94:	4b04      	ldr	r3, [pc, #16]	; (8015fa8 <__assert_func+0x38>)
 8015f96:	461c      	mov	r4, r3
 8015f98:	e7f3      	b.n	8015f82 <__assert_func+0x12>
 8015f9a:	bf00      	nop
 8015f9c:	20000068 	.word	0x20000068
 8015fa0:	080172dd 	.word	0x080172dd
 8015fa4:	080172ea 	.word	0x080172ea
 8015fa8:	08017318 	.word	0x08017318

08015fac <fiprintf>:
 8015fac:	b40e      	push	{r1, r2, r3}
 8015fae:	b503      	push	{r0, r1, lr}
 8015fb0:	4601      	mov	r1, r0
 8015fb2:	ab03      	add	r3, sp, #12
 8015fb4:	4805      	ldr	r0, [pc, #20]	; (8015fcc <fiprintf+0x20>)
 8015fb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8015fba:	6800      	ldr	r0, [r0, #0]
 8015fbc:	9301      	str	r3, [sp, #4]
 8015fbe:	f000 f88f 	bl	80160e0 <_vfiprintf_r>
 8015fc2:	b002      	add	sp, #8
 8015fc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8015fc8:	b003      	add	sp, #12
 8015fca:	4770      	bx	lr
 8015fcc:	20000068 	.word	0x20000068

08015fd0 <__retarget_lock_init_recursive>:
 8015fd0:	4770      	bx	lr

08015fd2 <__retarget_lock_acquire_recursive>:
 8015fd2:	4770      	bx	lr

08015fd4 <__retarget_lock_release_recursive>:
 8015fd4:	4770      	bx	lr

08015fd6 <__ascii_mbtowc>:
 8015fd6:	b082      	sub	sp, #8
 8015fd8:	b901      	cbnz	r1, 8015fdc <__ascii_mbtowc+0x6>
 8015fda:	a901      	add	r1, sp, #4
 8015fdc:	b142      	cbz	r2, 8015ff0 <__ascii_mbtowc+0x1a>
 8015fde:	b14b      	cbz	r3, 8015ff4 <__ascii_mbtowc+0x1e>
 8015fe0:	7813      	ldrb	r3, [r2, #0]
 8015fe2:	600b      	str	r3, [r1, #0]
 8015fe4:	7812      	ldrb	r2, [r2, #0]
 8015fe6:	1e10      	subs	r0, r2, #0
 8015fe8:	bf18      	it	ne
 8015fea:	2001      	movne	r0, #1
 8015fec:	b002      	add	sp, #8
 8015fee:	4770      	bx	lr
 8015ff0:	4610      	mov	r0, r2
 8015ff2:	e7fb      	b.n	8015fec <__ascii_mbtowc+0x16>
 8015ff4:	f06f 0001 	mvn.w	r0, #1
 8015ff8:	e7f8      	b.n	8015fec <__ascii_mbtowc+0x16>

08015ffa <memmove>:
 8015ffa:	4288      	cmp	r0, r1
 8015ffc:	b510      	push	{r4, lr}
 8015ffe:	eb01 0402 	add.w	r4, r1, r2
 8016002:	d902      	bls.n	801600a <memmove+0x10>
 8016004:	4284      	cmp	r4, r0
 8016006:	4623      	mov	r3, r4
 8016008:	d807      	bhi.n	801601a <memmove+0x20>
 801600a:	1e43      	subs	r3, r0, #1
 801600c:	42a1      	cmp	r1, r4
 801600e:	d008      	beq.n	8016022 <memmove+0x28>
 8016010:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016014:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016018:	e7f8      	b.n	801600c <memmove+0x12>
 801601a:	4402      	add	r2, r0
 801601c:	4601      	mov	r1, r0
 801601e:	428a      	cmp	r2, r1
 8016020:	d100      	bne.n	8016024 <memmove+0x2a>
 8016022:	bd10      	pop	{r4, pc}
 8016024:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016028:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801602c:	e7f7      	b.n	801601e <memmove+0x24>

0801602e <_realloc_r>:
 801602e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016032:	4680      	mov	r8, r0
 8016034:	4614      	mov	r4, r2
 8016036:	460e      	mov	r6, r1
 8016038:	b921      	cbnz	r1, 8016044 <_realloc_r+0x16>
 801603a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801603e:	4611      	mov	r1, r2
 8016040:	f7fd bede 	b.w	8013e00 <_malloc_r>
 8016044:	b92a      	cbnz	r2, 8016052 <_realloc_r+0x24>
 8016046:	f7fd fe6f 	bl	8013d28 <_free_r>
 801604a:	4625      	mov	r5, r4
 801604c:	4628      	mov	r0, r5
 801604e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016052:	f000 fc67 	bl	8016924 <_malloc_usable_size_r>
 8016056:	4284      	cmp	r4, r0
 8016058:	4607      	mov	r7, r0
 801605a:	d802      	bhi.n	8016062 <_realloc_r+0x34>
 801605c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016060:	d812      	bhi.n	8016088 <_realloc_r+0x5a>
 8016062:	4621      	mov	r1, r4
 8016064:	4640      	mov	r0, r8
 8016066:	f7fd fecb 	bl	8013e00 <_malloc_r>
 801606a:	4605      	mov	r5, r0
 801606c:	2800      	cmp	r0, #0
 801606e:	d0ed      	beq.n	801604c <_realloc_r+0x1e>
 8016070:	42bc      	cmp	r4, r7
 8016072:	4622      	mov	r2, r4
 8016074:	4631      	mov	r1, r6
 8016076:	bf28      	it	cs
 8016078:	463a      	movcs	r2, r7
 801607a:	f7fd fe3f 	bl	8013cfc <memcpy>
 801607e:	4631      	mov	r1, r6
 8016080:	4640      	mov	r0, r8
 8016082:	f7fd fe51 	bl	8013d28 <_free_r>
 8016086:	e7e1      	b.n	801604c <_realloc_r+0x1e>
 8016088:	4635      	mov	r5, r6
 801608a:	e7df      	b.n	801604c <_realloc_r+0x1e>

0801608c <__sfputc_r>:
 801608c:	6893      	ldr	r3, [r2, #8]
 801608e:	3b01      	subs	r3, #1
 8016090:	2b00      	cmp	r3, #0
 8016092:	b410      	push	{r4}
 8016094:	6093      	str	r3, [r2, #8]
 8016096:	da08      	bge.n	80160aa <__sfputc_r+0x1e>
 8016098:	6994      	ldr	r4, [r2, #24]
 801609a:	42a3      	cmp	r3, r4
 801609c:	db01      	blt.n	80160a2 <__sfputc_r+0x16>
 801609e:	290a      	cmp	r1, #10
 80160a0:	d103      	bne.n	80160aa <__sfputc_r+0x1e>
 80160a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80160a6:	f000 b94b 	b.w	8016340 <__swbuf_r>
 80160aa:	6813      	ldr	r3, [r2, #0]
 80160ac:	1c58      	adds	r0, r3, #1
 80160ae:	6010      	str	r0, [r2, #0]
 80160b0:	7019      	strb	r1, [r3, #0]
 80160b2:	4608      	mov	r0, r1
 80160b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80160b8:	4770      	bx	lr

080160ba <__sfputs_r>:
 80160ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160bc:	4606      	mov	r6, r0
 80160be:	460f      	mov	r7, r1
 80160c0:	4614      	mov	r4, r2
 80160c2:	18d5      	adds	r5, r2, r3
 80160c4:	42ac      	cmp	r4, r5
 80160c6:	d101      	bne.n	80160cc <__sfputs_r+0x12>
 80160c8:	2000      	movs	r0, #0
 80160ca:	e007      	b.n	80160dc <__sfputs_r+0x22>
 80160cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80160d0:	463a      	mov	r2, r7
 80160d2:	4630      	mov	r0, r6
 80160d4:	f7ff ffda 	bl	801608c <__sfputc_r>
 80160d8:	1c43      	adds	r3, r0, #1
 80160da:	d1f3      	bne.n	80160c4 <__sfputs_r+0xa>
 80160dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080160e0 <_vfiprintf_r>:
 80160e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160e4:	460d      	mov	r5, r1
 80160e6:	b09d      	sub	sp, #116	; 0x74
 80160e8:	4614      	mov	r4, r2
 80160ea:	4698      	mov	r8, r3
 80160ec:	4606      	mov	r6, r0
 80160ee:	b118      	cbz	r0, 80160f8 <_vfiprintf_r+0x18>
 80160f0:	6983      	ldr	r3, [r0, #24]
 80160f2:	b90b      	cbnz	r3, 80160f8 <_vfiprintf_r+0x18>
 80160f4:	f000 fb14 	bl	8016720 <__sinit>
 80160f8:	4b89      	ldr	r3, [pc, #548]	; (8016320 <_vfiprintf_r+0x240>)
 80160fa:	429d      	cmp	r5, r3
 80160fc:	d11b      	bne.n	8016136 <_vfiprintf_r+0x56>
 80160fe:	6875      	ldr	r5, [r6, #4]
 8016100:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016102:	07d9      	lsls	r1, r3, #31
 8016104:	d405      	bmi.n	8016112 <_vfiprintf_r+0x32>
 8016106:	89ab      	ldrh	r3, [r5, #12]
 8016108:	059a      	lsls	r2, r3, #22
 801610a:	d402      	bmi.n	8016112 <_vfiprintf_r+0x32>
 801610c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801610e:	f7ff ff60 	bl	8015fd2 <__retarget_lock_acquire_recursive>
 8016112:	89ab      	ldrh	r3, [r5, #12]
 8016114:	071b      	lsls	r3, r3, #28
 8016116:	d501      	bpl.n	801611c <_vfiprintf_r+0x3c>
 8016118:	692b      	ldr	r3, [r5, #16]
 801611a:	b9eb      	cbnz	r3, 8016158 <_vfiprintf_r+0x78>
 801611c:	4629      	mov	r1, r5
 801611e:	4630      	mov	r0, r6
 8016120:	f000 f96e 	bl	8016400 <__swsetup_r>
 8016124:	b1c0      	cbz	r0, 8016158 <_vfiprintf_r+0x78>
 8016126:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016128:	07dc      	lsls	r4, r3, #31
 801612a:	d50e      	bpl.n	801614a <_vfiprintf_r+0x6a>
 801612c:	f04f 30ff 	mov.w	r0, #4294967295
 8016130:	b01d      	add	sp, #116	; 0x74
 8016132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016136:	4b7b      	ldr	r3, [pc, #492]	; (8016324 <_vfiprintf_r+0x244>)
 8016138:	429d      	cmp	r5, r3
 801613a:	d101      	bne.n	8016140 <_vfiprintf_r+0x60>
 801613c:	68b5      	ldr	r5, [r6, #8]
 801613e:	e7df      	b.n	8016100 <_vfiprintf_r+0x20>
 8016140:	4b79      	ldr	r3, [pc, #484]	; (8016328 <_vfiprintf_r+0x248>)
 8016142:	429d      	cmp	r5, r3
 8016144:	bf08      	it	eq
 8016146:	68f5      	ldreq	r5, [r6, #12]
 8016148:	e7da      	b.n	8016100 <_vfiprintf_r+0x20>
 801614a:	89ab      	ldrh	r3, [r5, #12]
 801614c:	0598      	lsls	r0, r3, #22
 801614e:	d4ed      	bmi.n	801612c <_vfiprintf_r+0x4c>
 8016150:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016152:	f7ff ff3f 	bl	8015fd4 <__retarget_lock_release_recursive>
 8016156:	e7e9      	b.n	801612c <_vfiprintf_r+0x4c>
 8016158:	2300      	movs	r3, #0
 801615a:	9309      	str	r3, [sp, #36]	; 0x24
 801615c:	2320      	movs	r3, #32
 801615e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016162:	f8cd 800c 	str.w	r8, [sp, #12]
 8016166:	2330      	movs	r3, #48	; 0x30
 8016168:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801632c <_vfiprintf_r+0x24c>
 801616c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016170:	f04f 0901 	mov.w	r9, #1
 8016174:	4623      	mov	r3, r4
 8016176:	469a      	mov	sl, r3
 8016178:	f813 2b01 	ldrb.w	r2, [r3], #1
 801617c:	b10a      	cbz	r2, 8016182 <_vfiprintf_r+0xa2>
 801617e:	2a25      	cmp	r2, #37	; 0x25
 8016180:	d1f9      	bne.n	8016176 <_vfiprintf_r+0x96>
 8016182:	ebba 0b04 	subs.w	fp, sl, r4
 8016186:	d00b      	beq.n	80161a0 <_vfiprintf_r+0xc0>
 8016188:	465b      	mov	r3, fp
 801618a:	4622      	mov	r2, r4
 801618c:	4629      	mov	r1, r5
 801618e:	4630      	mov	r0, r6
 8016190:	f7ff ff93 	bl	80160ba <__sfputs_r>
 8016194:	3001      	adds	r0, #1
 8016196:	f000 80aa 	beq.w	80162ee <_vfiprintf_r+0x20e>
 801619a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801619c:	445a      	add	r2, fp
 801619e:	9209      	str	r2, [sp, #36]	; 0x24
 80161a0:	f89a 3000 	ldrb.w	r3, [sl]
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	f000 80a2 	beq.w	80162ee <_vfiprintf_r+0x20e>
 80161aa:	2300      	movs	r3, #0
 80161ac:	f04f 32ff 	mov.w	r2, #4294967295
 80161b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80161b4:	f10a 0a01 	add.w	sl, sl, #1
 80161b8:	9304      	str	r3, [sp, #16]
 80161ba:	9307      	str	r3, [sp, #28]
 80161bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80161c0:	931a      	str	r3, [sp, #104]	; 0x68
 80161c2:	4654      	mov	r4, sl
 80161c4:	2205      	movs	r2, #5
 80161c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80161ca:	4858      	ldr	r0, [pc, #352]	; (801632c <_vfiprintf_r+0x24c>)
 80161cc:	f7ea f808 	bl	80001e0 <memchr>
 80161d0:	9a04      	ldr	r2, [sp, #16]
 80161d2:	b9d8      	cbnz	r0, 801620c <_vfiprintf_r+0x12c>
 80161d4:	06d1      	lsls	r1, r2, #27
 80161d6:	bf44      	itt	mi
 80161d8:	2320      	movmi	r3, #32
 80161da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80161de:	0713      	lsls	r3, r2, #28
 80161e0:	bf44      	itt	mi
 80161e2:	232b      	movmi	r3, #43	; 0x2b
 80161e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80161e8:	f89a 3000 	ldrb.w	r3, [sl]
 80161ec:	2b2a      	cmp	r3, #42	; 0x2a
 80161ee:	d015      	beq.n	801621c <_vfiprintf_r+0x13c>
 80161f0:	9a07      	ldr	r2, [sp, #28]
 80161f2:	4654      	mov	r4, sl
 80161f4:	2000      	movs	r0, #0
 80161f6:	f04f 0c0a 	mov.w	ip, #10
 80161fa:	4621      	mov	r1, r4
 80161fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016200:	3b30      	subs	r3, #48	; 0x30
 8016202:	2b09      	cmp	r3, #9
 8016204:	d94e      	bls.n	80162a4 <_vfiprintf_r+0x1c4>
 8016206:	b1b0      	cbz	r0, 8016236 <_vfiprintf_r+0x156>
 8016208:	9207      	str	r2, [sp, #28]
 801620a:	e014      	b.n	8016236 <_vfiprintf_r+0x156>
 801620c:	eba0 0308 	sub.w	r3, r0, r8
 8016210:	fa09 f303 	lsl.w	r3, r9, r3
 8016214:	4313      	orrs	r3, r2
 8016216:	9304      	str	r3, [sp, #16]
 8016218:	46a2      	mov	sl, r4
 801621a:	e7d2      	b.n	80161c2 <_vfiprintf_r+0xe2>
 801621c:	9b03      	ldr	r3, [sp, #12]
 801621e:	1d19      	adds	r1, r3, #4
 8016220:	681b      	ldr	r3, [r3, #0]
 8016222:	9103      	str	r1, [sp, #12]
 8016224:	2b00      	cmp	r3, #0
 8016226:	bfbb      	ittet	lt
 8016228:	425b      	neglt	r3, r3
 801622a:	f042 0202 	orrlt.w	r2, r2, #2
 801622e:	9307      	strge	r3, [sp, #28]
 8016230:	9307      	strlt	r3, [sp, #28]
 8016232:	bfb8      	it	lt
 8016234:	9204      	strlt	r2, [sp, #16]
 8016236:	7823      	ldrb	r3, [r4, #0]
 8016238:	2b2e      	cmp	r3, #46	; 0x2e
 801623a:	d10c      	bne.n	8016256 <_vfiprintf_r+0x176>
 801623c:	7863      	ldrb	r3, [r4, #1]
 801623e:	2b2a      	cmp	r3, #42	; 0x2a
 8016240:	d135      	bne.n	80162ae <_vfiprintf_r+0x1ce>
 8016242:	9b03      	ldr	r3, [sp, #12]
 8016244:	1d1a      	adds	r2, r3, #4
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	9203      	str	r2, [sp, #12]
 801624a:	2b00      	cmp	r3, #0
 801624c:	bfb8      	it	lt
 801624e:	f04f 33ff 	movlt.w	r3, #4294967295
 8016252:	3402      	adds	r4, #2
 8016254:	9305      	str	r3, [sp, #20]
 8016256:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801633c <_vfiprintf_r+0x25c>
 801625a:	7821      	ldrb	r1, [r4, #0]
 801625c:	2203      	movs	r2, #3
 801625e:	4650      	mov	r0, sl
 8016260:	f7e9 ffbe 	bl	80001e0 <memchr>
 8016264:	b140      	cbz	r0, 8016278 <_vfiprintf_r+0x198>
 8016266:	2340      	movs	r3, #64	; 0x40
 8016268:	eba0 000a 	sub.w	r0, r0, sl
 801626c:	fa03 f000 	lsl.w	r0, r3, r0
 8016270:	9b04      	ldr	r3, [sp, #16]
 8016272:	4303      	orrs	r3, r0
 8016274:	3401      	adds	r4, #1
 8016276:	9304      	str	r3, [sp, #16]
 8016278:	f814 1b01 	ldrb.w	r1, [r4], #1
 801627c:	482c      	ldr	r0, [pc, #176]	; (8016330 <_vfiprintf_r+0x250>)
 801627e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016282:	2206      	movs	r2, #6
 8016284:	f7e9 ffac 	bl	80001e0 <memchr>
 8016288:	2800      	cmp	r0, #0
 801628a:	d03f      	beq.n	801630c <_vfiprintf_r+0x22c>
 801628c:	4b29      	ldr	r3, [pc, #164]	; (8016334 <_vfiprintf_r+0x254>)
 801628e:	bb1b      	cbnz	r3, 80162d8 <_vfiprintf_r+0x1f8>
 8016290:	9b03      	ldr	r3, [sp, #12]
 8016292:	3307      	adds	r3, #7
 8016294:	f023 0307 	bic.w	r3, r3, #7
 8016298:	3308      	adds	r3, #8
 801629a:	9303      	str	r3, [sp, #12]
 801629c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801629e:	443b      	add	r3, r7
 80162a0:	9309      	str	r3, [sp, #36]	; 0x24
 80162a2:	e767      	b.n	8016174 <_vfiprintf_r+0x94>
 80162a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80162a8:	460c      	mov	r4, r1
 80162aa:	2001      	movs	r0, #1
 80162ac:	e7a5      	b.n	80161fa <_vfiprintf_r+0x11a>
 80162ae:	2300      	movs	r3, #0
 80162b0:	3401      	adds	r4, #1
 80162b2:	9305      	str	r3, [sp, #20]
 80162b4:	4619      	mov	r1, r3
 80162b6:	f04f 0c0a 	mov.w	ip, #10
 80162ba:	4620      	mov	r0, r4
 80162bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80162c0:	3a30      	subs	r2, #48	; 0x30
 80162c2:	2a09      	cmp	r2, #9
 80162c4:	d903      	bls.n	80162ce <_vfiprintf_r+0x1ee>
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d0c5      	beq.n	8016256 <_vfiprintf_r+0x176>
 80162ca:	9105      	str	r1, [sp, #20]
 80162cc:	e7c3      	b.n	8016256 <_vfiprintf_r+0x176>
 80162ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80162d2:	4604      	mov	r4, r0
 80162d4:	2301      	movs	r3, #1
 80162d6:	e7f0      	b.n	80162ba <_vfiprintf_r+0x1da>
 80162d8:	ab03      	add	r3, sp, #12
 80162da:	9300      	str	r3, [sp, #0]
 80162dc:	462a      	mov	r2, r5
 80162de:	4b16      	ldr	r3, [pc, #88]	; (8016338 <_vfiprintf_r+0x258>)
 80162e0:	a904      	add	r1, sp, #16
 80162e2:	4630      	mov	r0, r6
 80162e4:	f7fd fea0 	bl	8014028 <_printf_float>
 80162e8:	4607      	mov	r7, r0
 80162ea:	1c78      	adds	r0, r7, #1
 80162ec:	d1d6      	bne.n	801629c <_vfiprintf_r+0x1bc>
 80162ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80162f0:	07d9      	lsls	r1, r3, #31
 80162f2:	d405      	bmi.n	8016300 <_vfiprintf_r+0x220>
 80162f4:	89ab      	ldrh	r3, [r5, #12]
 80162f6:	059a      	lsls	r2, r3, #22
 80162f8:	d402      	bmi.n	8016300 <_vfiprintf_r+0x220>
 80162fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80162fc:	f7ff fe6a 	bl	8015fd4 <__retarget_lock_release_recursive>
 8016300:	89ab      	ldrh	r3, [r5, #12]
 8016302:	065b      	lsls	r3, r3, #25
 8016304:	f53f af12 	bmi.w	801612c <_vfiprintf_r+0x4c>
 8016308:	9809      	ldr	r0, [sp, #36]	; 0x24
 801630a:	e711      	b.n	8016130 <_vfiprintf_r+0x50>
 801630c:	ab03      	add	r3, sp, #12
 801630e:	9300      	str	r3, [sp, #0]
 8016310:	462a      	mov	r2, r5
 8016312:	4b09      	ldr	r3, [pc, #36]	; (8016338 <_vfiprintf_r+0x258>)
 8016314:	a904      	add	r1, sp, #16
 8016316:	4630      	mov	r0, r6
 8016318:	f7fe f92a 	bl	8014570 <_printf_i>
 801631c:	e7e4      	b.n	80162e8 <_vfiprintf_r+0x208>
 801631e:	bf00      	nop
 8016320:	08017444 	.word	0x08017444
 8016324:	08017464 	.word	0x08017464
 8016328:	08017424 	.word	0x08017424
 801632c:	080172cc 	.word	0x080172cc
 8016330:	080172d6 	.word	0x080172d6
 8016334:	08014029 	.word	0x08014029
 8016338:	080160bb 	.word	0x080160bb
 801633c:	080172d2 	.word	0x080172d2

08016340 <__swbuf_r>:
 8016340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016342:	460e      	mov	r6, r1
 8016344:	4614      	mov	r4, r2
 8016346:	4605      	mov	r5, r0
 8016348:	b118      	cbz	r0, 8016352 <__swbuf_r+0x12>
 801634a:	6983      	ldr	r3, [r0, #24]
 801634c:	b90b      	cbnz	r3, 8016352 <__swbuf_r+0x12>
 801634e:	f000 f9e7 	bl	8016720 <__sinit>
 8016352:	4b21      	ldr	r3, [pc, #132]	; (80163d8 <__swbuf_r+0x98>)
 8016354:	429c      	cmp	r4, r3
 8016356:	d12b      	bne.n	80163b0 <__swbuf_r+0x70>
 8016358:	686c      	ldr	r4, [r5, #4]
 801635a:	69a3      	ldr	r3, [r4, #24]
 801635c:	60a3      	str	r3, [r4, #8]
 801635e:	89a3      	ldrh	r3, [r4, #12]
 8016360:	071a      	lsls	r2, r3, #28
 8016362:	d52f      	bpl.n	80163c4 <__swbuf_r+0x84>
 8016364:	6923      	ldr	r3, [r4, #16]
 8016366:	b36b      	cbz	r3, 80163c4 <__swbuf_r+0x84>
 8016368:	6923      	ldr	r3, [r4, #16]
 801636a:	6820      	ldr	r0, [r4, #0]
 801636c:	1ac0      	subs	r0, r0, r3
 801636e:	6963      	ldr	r3, [r4, #20]
 8016370:	b2f6      	uxtb	r6, r6
 8016372:	4283      	cmp	r3, r0
 8016374:	4637      	mov	r7, r6
 8016376:	dc04      	bgt.n	8016382 <__swbuf_r+0x42>
 8016378:	4621      	mov	r1, r4
 801637a:	4628      	mov	r0, r5
 801637c:	f000 f93c 	bl	80165f8 <_fflush_r>
 8016380:	bb30      	cbnz	r0, 80163d0 <__swbuf_r+0x90>
 8016382:	68a3      	ldr	r3, [r4, #8]
 8016384:	3b01      	subs	r3, #1
 8016386:	60a3      	str	r3, [r4, #8]
 8016388:	6823      	ldr	r3, [r4, #0]
 801638a:	1c5a      	adds	r2, r3, #1
 801638c:	6022      	str	r2, [r4, #0]
 801638e:	701e      	strb	r6, [r3, #0]
 8016390:	6963      	ldr	r3, [r4, #20]
 8016392:	3001      	adds	r0, #1
 8016394:	4283      	cmp	r3, r0
 8016396:	d004      	beq.n	80163a2 <__swbuf_r+0x62>
 8016398:	89a3      	ldrh	r3, [r4, #12]
 801639a:	07db      	lsls	r3, r3, #31
 801639c:	d506      	bpl.n	80163ac <__swbuf_r+0x6c>
 801639e:	2e0a      	cmp	r6, #10
 80163a0:	d104      	bne.n	80163ac <__swbuf_r+0x6c>
 80163a2:	4621      	mov	r1, r4
 80163a4:	4628      	mov	r0, r5
 80163a6:	f000 f927 	bl	80165f8 <_fflush_r>
 80163aa:	b988      	cbnz	r0, 80163d0 <__swbuf_r+0x90>
 80163ac:	4638      	mov	r0, r7
 80163ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80163b0:	4b0a      	ldr	r3, [pc, #40]	; (80163dc <__swbuf_r+0x9c>)
 80163b2:	429c      	cmp	r4, r3
 80163b4:	d101      	bne.n	80163ba <__swbuf_r+0x7a>
 80163b6:	68ac      	ldr	r4, [r5, #8]
 80163b8:	e7cf      	b.n	801635a <__swbuf_r+0x1a>
 80163ba:	4b09      	ldr	r3, [pc, #36]	; (80163e0 <__swbuf_r+0xa0>)
 80163bc:	429c      	cmp	r4, r3
 80163be:	bf08      	it	eq
 80163c0:	68ec      	ldreq	r4, [r5, #12]
 80163c2:	e7ca      	b.n	801635a <__swbuf_r+0x1a>
 80163c4:	4621      	mov	r1, r4
 80163c6:	4628      	mov	r0, r5
 80163c8:	f000 f81a 	bl	8016400 <__swsetup_r>
 80163cc:	2800      	cmp	r0, #0
 80163ce:	d0cb      	beq.n	8016368 <__swbuf_r+0x28>
 80163d0:	f04f 37ff 	mov.w	r7, #4294967295
 80163d4:	e7ea      	b.n	80163ac <__swbuf_r+0x6c>
 80163d6:	bf00      	nop
 80163d8:	08017444 	.word	0x08017444
 80163dc:	08017464 	.word	0x08017464
 80163e0:	08017424 	.word	0x08017424

080163e4 <__ascii_wctomb>:
 80163e4:	b149      	cbz	r1, 80163fa <__ascii_wctomb+0x16>
 80163e6:	2aff      	cmp	r2, #255	; 0xff
 80163e8:	bf85      	ittet	hi
 80163ea:	238a      	movhi	r3, #138	; 0x8a
 80163ec:	6003      	strhi	r3, [r0, #0]
 80163ee:	700a      	strbls	r2, [r1, #0]
 80163f0:	f04f 30ff 	movhi.w	r0, #4294967295
 80163f4:	bf98      	it	ls
 80163f6:	2001      	movls	r0, #1
 80163f8:	4770      	bx	lr
 80163fa:	4608      	mov	r0, r1
 80163fc:	4770      	bx	lr
	...

08016400 <__swsetup_r>:
 8016400:	4b32      	ldr	r3, [pc, #200]	; (80164cc <__swsetup_r+0xcc>)
 8016402:	b570      	push	{r4, r5, r6, lr}
 8016404:	681d      	ldr	r5, [r3, #0]
 8016406:	4606      	mov	r6, r0
 8016408:	460c      	mov	r4, r1
 801640a:	b125      	cbz	r5, 8016416 <__swsetup_r+0x16>
 801640c:	69ab      	ldr	r3, [r5, #24]
 801640e:	b913      	cbnz	r3, 8016416 <__swsetup_r+0x16>
 8016410:	4628      	mov	r0, r5
 8016412:	f000 f985 	bl	8016720 <__sinit>
 8016416:	4b2e      	ldr	r3, [pc, #184]	; (80164d0 <__swsetup_r+0xd0>)
 8016418:	429c      	cmp	r4, r3
 801641a:	d10f      	bne.n	801643c <__swsetup_r+0x3c>
 801641c:	686c      	ldr	r4, [r5, #4]
 801641e:	89a3      	ldrh	r3, [r4, #12]
 8016420:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016424:	0719      	lsls	r1, r3, #28
 8016426:	d42c      	bmi.n	8016482 <__swsetup_r+0x82>
 8016428:	06dd      	lsls	r5, r3, #27
 801642a:	d411      	bmi.n	8016450 <__swsetup_r+0x50>
 801642c:	2309      	movs	r3, #9
 801642e:	6033      	str	r3, [r6, #0]
 8016430:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016434:	81a3      	strh	r3, [r4, #12]
 8016436:	f04f 30ff 	mov.w	r0, #4294967295
 801643a:	e03e      	b.n	80164ba <__swsetup_r+0xba>
 801643c:	4b25      	ldr	r3, [pc, #148]	; (80164d4 <__swsetup_r+0xd4>)
 801643e:	429c      	cmp	r4, r3
 8016440:	d101      	bne.n	8016446 <__swsetup_r+0x46>
 8016442:	68ac      	ldr	r4, [r5, #8]
 8016444:	e7eb      	b.n	801641e <__swsetup_r+0x1e>
 8016446:	4b24      	ldr	r3, [pc, #144]	; (80164d8 <__swsetup_r+0xd8>)
 8016448:	429c      	cmp	r4, r3
 801644a:	bf08      	it	eq
 801644c:	68ec      	ldreq	r4, [r5, #12]
 801644e:	e7e6      	b.n	801641e <__swsetup_r+0x1e>
 8016450:	0758      	lsls	r0, r3, #29
 8016452:	d512      	bpl.n	801647a <__swsetup_r+0x7a>
 8016454:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016456:	b141      	cbz	r1, 801646a <__swsetup_r+0x6a>
 8016458:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801645c:	4299      	cmp	r1, r3
 801645e:	d002      	beq.n	8016466 <__swsetup_r+0x66>
 8016460:	4630      	mov	r0, r6
 8016462:	f7fd fc61 	bl	8013d28 <_free_r>
 8016466:	2300      	movs	r3, #0
 8016468:	6363      	str	r3, [r4, #52]	; 0x34
 801646a:	89a3      	ldrh	r3, [r4, #12]
 801646c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016470:	81a3      	strh	r3, [r4, #12]
 8016472:	2300      	movs	r3, #0
 8016474:	6063      	str	r3, [r4, #4]
 8016476:	6923      	ldr	r3, [r4, #16]
 8016478:	6023      	str	r3, [r4, #0]
 801647a:	89a3      	ldrh	r3, [r4, #12]
 801647c:	f043 0308 	orr.w	r3, r3, #8
 8016480:	81a3      	strh	r3, [r4, #12]
 8016482:	6923      	ldr	r3, [r4, #16]
 8016484:	b94b      	cbnz	r3, 801649a <__swsetup_r+0x9a>
 8016486:	89a3      	ldrh	r3, [r4, #12]
 8016488:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801648c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016490:	d003      	beq.n	801649a <__swsetup_r+0x9a>
 8016492:	4621      	mov	r1, r4
 8016494:	4630      	mov	r0, r6
 8016496:	f000 fa05 	bl	80168a4 <__smakebuf_r>
 801649a:	89a0      	ldrh	r0, [r4, #12]
 801649c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80164a0:	f010 0301 	ands.w	r3, r0, #1
 80164a4:	d00a      	beq.n	80164bc <__swsetup_r+0xbc>
 80164a6:	2300      	movs	r3, #0
 80164a8:	60a3      	str	r3, [r4, #8]
 80164aa:	6963      	ldr	r3, [r4, #20]
 80164ac:	425b      	negs	r3, r3
 80164ae:	61a3      	str	r3, [r4, #24]
 80164b0:	6923      	ldr	r3, [r4, #16]
 80164b2:	b943      	cbnz	r3, 80164c6 <__swsetup_r+0xc6>
 80164b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80164b8:	d1ba      	bne.n	8016430 <__swsetup_r+0x30>
 80164ba:	bd70      	pop	{r4, r5, r6, pc}
 80164bc:	0781      	lsls	r1, r0, #30
 80164be:	bf58      	it	pl
 80164c0:	6963      	ldrpl	r3, [r4, #20]
 80164c2:	60a3      	str	r3, [r4, #8]
 80164c4:	e7f4      	b.n	80164b0 <__swsetup_r+0xb0>
 80164c6:	2000      	movs	r0, #0
 80164c8:	e7f7      	b.n	80164ba <__swsetup_r+0xba>
 80164ca:	bf00      	nop
 80164cc:	20000068 	.word	0x20000068
 80164d0:	08017444 	.word	0x08017444
 80164d4:	08017464 	.word	0x08017464
 80164d8:	08017424 	.word	0x08017424

080164dc <abort>:
 80164dc:	b508      	push	{r3, lr}
 80164de:	2006      	movs	r0, #6
 80164e0:	f000 fa50 	bl	8016984 <raise>
 80164e4:	2001      	movs	r0, #1
 80164e6:	f7ec fc8f 	bl	8002e08 <_exit>
	...

080164ec <__sflush_r>:
 80164ec:	898a      	ldrh	r2, [r1, #12]
 80164ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164f2:	4605      	mov	r5, r0
 80164f4:	0710      	lsls	r0, r2, #28
 80164f6:	460c      	mov	r4, r1
 80164f8:	d458      	bmi.n	80165ac <__sflush_r+0xc0>
 80164fa:	684b      	ldr	r3, [r1, #4]
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	dc05      	bgt.n	801650c <__sflush_r+0x20>
 8016500:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016502:	2b00      	cmp	r3, #0
 8016504:	dc02      	bgt.n	801650c <__sflush_r+0x20>
 8016506:	2000      	movs	r0, #0
 8016508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801650c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801650e:	2e00      	cmp	r6, #0
 8016510:	d0f9      	beq.n	8016506 <__sflush_r+0x1a>
 8016512:	2300      	movs	r3, #0
 8016514:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016518:	682f      	ldr	r7, [r5, #0]
 801651a:	602b      	str	r3, [r5, #0]
 801651c:	d032      	beq.n	8016584 <__sflush_r+0x98>
 801651e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016520:	89a3      	ldrh	r3, [r4, #12]
 8016522:	075a      	lsls	r2, r3, #29
 8016524:	d505      	bpl.n	8016532 <__sflush_r+0x46>
 8016526:	6863      	ldr	r3, [r4, #4]
 8016528:	1ac0      	subs	r0, r0, r3
 801652a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801652c:	b10b      	cbz	r3, 8016532 <__sflush_r+0x46>
 801652e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016530:	1ac0      	subs	r0, r0, r3
 8016532:	2300      	movs	r3, #0
 8016534:	4602      	mov	r2, r0
 8016536:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016538:	6a21      	ldr	r1, [r4, #32]
 801653a:	4628      	mov	r0, r5
 801653c:	47b0      	blx	r6
 801653e:	1c43      	adds	r3, r0, #1
 8016540:	89a3      	ldrh	r3, [r4, #12]
 8016542:	d106      	bne.n	8016552 <__sflush_r+0x66>
 8016544:	6829      	ldr	r1, [r5, #0]
 8016546:	291d      	cmp	r1, #29
 8016548:	d82c      	bhi.n	80165a4 <__sflush_r+0xb8>
 801654a:	4a2a      	ldr	r2, [pc, #168]	; (80165f4 <__sflush_r+0x108>)
 801654c:	40ca      	lsrs	r2, r1
 801654e:	07d6      	lsls	r6, r2, #31
 8016550:	d528      	bpl.n	80165a4 <__sflush_r+0xb8>
 8016552:	2200      	movs	r2, #0
 8016554:	6062      	str	r2, [r4, #4]
 8016556:	04d9      	lsls	r1, r3, #19
 8016558:	6922      	ldr	r2, [r4, #16]
 801655a:	6022      	str	r2, [r4, #0]
 801655c:	d504      	bpl.n	8016568 <__sflush_r+0x7c>
 801655e:	1c42      	adds	r2, r0, #1
 8016560:	d101      	bne.n	8016566 <__sflush_r+0x7a>
 8016562:	682b      	ldr	r3, [r5, #0]
 8016564:	b903      	cbnz	r3, 8016568 <__sflush_r+0x7c>
 8016566:	6560      	str	r0, [r4, #84]	; 0x54
 8016568:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801656a:	602f      	str	r7, [r5, #0]
 801656c:	2900      	cmp	r1, #0
 801656e:	d0ca      	beq.n	8016506 <__sflush_r+0x1a>
 8016570:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016574:	4299      	cmp	r1, r3
 8016576:	d002      	beq.n	801657e <__sflush_r+0x92>
 8016578:	4628      	mov	r0, r5
 801657a:	f7fd fbd5 	bl	8013d28 <_free_r>
 801657e:	2000      	movs	r0, #0
 8016580:	6360      	str	r0, [r4, #52]	; 0x34
 8016582:	e7c1      	b.n	8016508 <__sflush_r+0x1c>
 8016584:	6a21      	ldr	r1, [r4, #32]
 8016586:	2301      	movs	r3, #1
 8016588:	4628      	mov	r0, r5
 801658a:	47b0      	blx	r6
 801658c:	1c41      	adds	r1, r0, #1
 801658e:	d1c7      	bne.n	8016520 <__sflush_r+0x34>
 8016590:	682b      	ldr	r3, [r5, #0]
 8016592:	2b00      	cmp	r3, #0
 8016594:	d0c4      	beq.n	8016520 <__sflush_r+0x34>
 8016596:	2b1d      	cmp	r3, #29
 8016598:	d001      	beq.n	801659e <__sflush_r+0xb2>
 801659a:	2b16      	cmp	r3, #22
 801659c:	d101      	bne.n	80165a2 <__sflush_r+0xb6>
 801659e:	602f      	str	r7, [r5, #0]
 80165a0:	e7b1      	b.n	8016506 <__sflush_r+0x1a>
 80165a2:	89a3      	ldrh	r3, [r4, #12]
 80165a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80165a8:	81a3      	strh	r3, [r4, #12]
 80165aa:	e7ad      	b.n	8016508 <__sflush_r+0x1c>
 80165ac:	690f      	ldr	r7, [r1, #16]
 80165ae:	2f00      	cmp	r7, #0
 80165b0:	d0a9      	beq.n	8016506 <__sflush_r+0x1a>
 80165b2:	0793      	lsls	r3, r2, #30
 80165b4:	680e      	ldr	r6, [r1, #0]
 80165b6:	bf08      	it	eq
 80165b8:	694b      	ldreq	r3, [r1, #20]
 80165ba:	600f      	str	r7, [r1, #0]
 80165bc:	bf18      	it	ne
 80165be:	2300      	movne	r3, #0
 80165c0:	eba6 0807 	sub.w	r8, r6, r7
 80165c4:	608b      	str	r3, [r1, #8]
 80165c6:	f1b8 0f00 	cmp.w	r8, #0
 80165ca:	dd9c      	ble.n	8016506 <__sflush_r+0x1a>
 80165cc:	6a21      	ldr	r1, [r4, #32]
 80165ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80165d0:	4643      	mov	r3, r8
 80165d2:	463a      	mov	r2, r7
 80165d4:	4628      	mov	r0, r5
 80165d6:	47b0      	blx	r6
 80165d8:	2800      	cmp	r0, #0
 80165da:	dc06      	bgt.n	80165ea <__sflush_r+0xfe>
 80165dc:	89a3      	ldrh	r3, [r4, #12]
 80165de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80165e2:	81a3      	strh	r3, [r4, #12]
 80165e4:	f04f 30ff 	mov.w	r0, #4294967295
 80165e8:	e78e      	b.n	8016508 <__sflush_r+0x1c>
 80165ea:	4407      	add	r7, r0
 80165ec:	eba8 0800 	sub.w	r8, r8, r0
 80165f0:	e7e9      	b.n	80165c6 <__sflush_r+0xda>
 80165f2:	bf00      	nop
 80165f4:	20400001 	.word	0x20400001

080165f8 <_fflush_r>:
 80165f8:	b538      	push	{r3, r4, r5, lr}
 80165fa:	690b      	ldr	r3, [r1, #16]
 80165fc:	4605      	mov	r5, r0
 80165fe:	460c      	mov	r4, r1
 8016600:	b913      	cbnz	r3, 8016608 <_fflush_r+0x10>
 8016602:	2500      	movs	r5, #0
 8016604:	4628      	mov	r0, r5
 8016606:	bd38      	pop	{r3, r4, r5, pc}
 8016608:	b118      	cbz	r0, 8016612 <_fflush_r+0x1a>
 801660a:	6983      	ldr	r3, [r0, #24]
 801660c:	b90b      	cbnz	r3, 8016612 <_fflush_r+0x1a>
 801660e:	f000 f887 	bl	8016720 <__sinit>
 8016612:	4b14      	ldr	r3, [pc, #80]	; (8016664 <_fflush_r+0x6c>)
 8016614:	429c      	cmp	r4, r3
 8016616:	d11b      	bne.n	8016650 <_fflush_r+0x58>
 8016618:	686c      	ldr	r4, [r5, #4]
 801661a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801661e:	2b00      	cmp	r3, #0
 8016620:	d0ef      	beq.n	8016602 <_fflush_r+0xa>
 8016622:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016624:	07d0      	lsls	r0, r2, #31
 8016626:	d404      	bmi.n	8016632 <_fflush_r+0x3a>
 8016628:	0599      	lsls	r1, r3, #22
 801662a:	d402      	bmi.n	8016632 <_fflush_r+0x3a>
 801662c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801662e:	f7ff fcd0 	bl	8015fd2 <__retarget_lock_acquire_recursive>
 8016632:	4628      	mov	r0, r5
 8016634:	4621      	mov	r1, r4
 8016636:	f7ff ff59 	bl	80164ec <__sflush_r>
 801663a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801663c:	07da      	lsls	r2, r3, #31
 801663e:	4605      	mov	r5, r0
 8016640:	d4e0      	bmi.n	8016604 <_fflush_r+0xc>
 8016642:	89a3      	ldrh	r3, [r4, #12]
 8016644:	059b      	lsls	r3, r3, #22
 8016646:	d4dd      	bmi.n	8016604 <_fflush_r+0xc>
 8016648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801664a:	f7ff fcc3 	bl	8015fd4 <__retarget_lock_release_recursive>
 801664e:	e7d9      	b.n	8016604 <_fflush_r+0xc>
 8016650:	4b05      	ldr	r3, [pc, #20]	; (8016668 <_fflush_r+0x70>)
 8016652:	429c      	cmp	r4, r3
 8016654:	d101      	bne.n	801665a <_fflush_r+0x62>
 8016656:	68ac      	ldr	r4, [r5, #8]
 8016658:	e7df      	b.n	801661a <_fflush_r+0x22>
 801665a:	4b04      	ldr	r3, [pc, #16]	; (801666c <_fflush_r+0x74>)
 801665c:	429c      	cmp	r4, r3
 801665e:	bf08      	it	eq
 8016660:	68ec      	ldreq	r4, [r5, #12]
 8016662:	e7da      	b.n	801661a <_fflush_r+0x22>
 8016664:	08017444 	.word	0x08017444
 8016668:	08017464 	.word	0x08017464
 801666c:	08017424 	.word	0x08017424

08016670 <std>:
 8016670:	2300      	movs	r3, #0
 8016672:	b510      	push	{r4, lr}
 8016674:	4604      	mov	r4, r0
 8016676:	e9c0 3300 	strd	r3, r3, [r0]
 801667a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801667e:	6083      	str	r3, [r0, #8]
 8016680:	8181      	strh	r1, [r0, #12]
 8016682:	6643      	str	r3, [r0, #100]	; 0x64
 8016684:	81c2      	strh	r2, [r0, #14]
 8016686:	6183      	str	r3, [r0, #24]
 8016688:	4619      	mov	r1, r3
 801668a:	2208      	movs	r2, #8
 801668c:	305c      	adds	r0, #92	; 0x5c
 801668e:	f7fd fb43 	bl	8013d18 <memset>
 8016692:	4b05      	ldr	r3, [pc, #20]	; (80166a8 <std+0x38>)
 8016694:	6263      	str	r3, [r4, #36]	; 0x24
 8016696:	4b05      	ldr	r3, [pc, #20]	; (80166ac <std+0x3c>)
 8016698:	62a3      	str	r3, [r4, #40]	; 0x28
 801669a:	4b05      	ldr	r3, [pc, #20]	; (80166b0 <std+0x40>)
 801669c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801669e:	4b05      	ldr	r3, [pc, #20]	; (80166b4 <std+0x44>)
 80166a0:	6224      	str	r4, [r4, #32]
 80166a2:	6323      	str	r3, [r4, #48]	; 0x30
 80166a4:	bd10      	pop	{r4, pc}
 80166a6:	bf00      	nop
 80166a8:	080169bd 	.word	0x080169bd
 80166ac:	080169df 	.word	0x080169df
 80166b0:	08016a17 	.word	0x08016a17
 80166b4:	08016a3b 	.word	0x08016a3b

080166b8 <_cleanup_r>:
 80166b8:	4901      	ldr	r1, [pc, #4]	; (80166c0 <_cleanup_r+0x8>)
 80166ba:	f000 b8af 	b.w	801681c <_fwalk_reent>
 80166be:	bf00      	nop
 80166c0:	080165f9 	.word	0x080165f9

080166c4 <__sfmoreglue>:
 80166c4:	b570      	push	{r4, r5, r6, lr}
 80166c6:	2268      	movs	r2, #104	; 0x68
 80166c8:	1e4d      	subs	r5, r1, #1
 80166ca:	4355      	muls	r5, r2
 80166cc:	460e      	mov	r6, r1
 80166ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80166d2:	f7fd fb95 	bl	8013e00 <_malloc_r>
 80166d6:	4604      	mov	r4, r0
 80166d8:	b140      	cbz	r0, 80166ec <__sfmoreglue+0x28>
 80166da:	2100      	movs	r1, #0
 80166dc:	e9c0 1600 	strd	r1, r6, [r0]
 80166e0:	300c      	adds	r0, #12
 80166e2:	60a0      	str	r0, [r4, #8]
 80166e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80166e8:	f7fd fb16 	bl	8013d18 <memset>
 80166ec:	4620      	mov	r0, r4
 80166ee:	bd70      	pop	{r4, r5, r6, pc}

080166f0 <__sfp_lock_acquire>:
 80166f0:	4801      	ldr	r0, [pc, #4]	; (80166f8 <__sfp_lock_acquire+0x8>)
 80166f2:	f7ff bc6e 	b.w	8015fd2 <__retarget_lock_acquire_recursive>
 80166f6:	bf00      	nop
 80166f8:	2000277d 	.word	0x2000277d

080166fc <__sfp_lock_release>:
 80166fc:	4801      	ldr	r0, [pc, #4]	; (8016704 <__sfp_lock_release+0x8>)
 80166fe:	f7ff bc69 	b.w	8015fd4 <__retarget_lock_release_recursive>
 8016702:	bf00      	nop
 8016704:	2000277d 	.word	0x2000277d

08016708 <__sinit_lock_acquire>:
 8016708:	4801      	ldr	r0, [pc, #4]	; (8016710 <__sinit_lock_acquire+0x8>)
 801670a:	f7ff bc62 	b.w	8015fd2 <__retarget_lock_acquire_recursive>
 801670e:	bf00      	nop
 8016710:	2000277e 	.word	0x2000277e

08016714 <__sinit_lock_release>:
 8016714:	4801      	ldr	r0, [pc, #4]	; (801671c <__sinit_lock_release+0x8>)
 8016716:	f7ff bc5d 	b.w	8015fd4 <__retarget_lock_release_recursive>
 801671a:	bf00      	nop
 801671c:	2000277e 	.word	0x2000277e

08016720 <__sinit>:
 8016720:	b510      	push	{r4, lr}
 8016722:	4604      	mov	r4, r0
 8016724:	f7ff fff0 	bl	8016708 <__sinit_lock_acquire>
 8016728:	69a3      	ldr	r3, [r4, #24]
 801672a:	b11b      	cbz	r3, 8016734 <__sinit+0x14>
 801672c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016730:	f7ff bff0 	b.w	8016714 <__sinit_lock_release>
 8016734:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016738:	6523      	str	r3, [r4, #80]	; 0x50
 801673a:	4b13      	ldr	r3, [pc, #76]	; (8016788 <__sinit+0x68>)
 801673c:	4a13      	ldr	r2, [pc, #76]	; (801678c <__sinit+0x6c>)
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	62a2      	str	r2, [r4, #40]	; 0x28
 8016742:	42a3      	cmp	r3, r4
 8016744:	bf04      	itt	eq
 8016746:	2301      	moveq	r3, #1
 8016748:	61a3      	streq	r3, [r4, #24]
 801674a:	4620      	mov	r0, r4
 801674c:	f000 f820 	bl	8016790 <__sfp>
 8016750:	6060      	str	r0, [r4, #4]
 8016752:	4620      	mov	r0, r4
 8016754:	f000 f81c 	bl	8016790 <__sfp>
 8016758:	60a0      	str	r0, [r4, #8]
 801675a:	4620      	mov	r0, r4
 801675c:	f000 f818 	bl	8016790 <__sfp>
 8016760:	2200      	movs	r2, #0
 8016762:	60e0      	str	r0, [r4, #12]
 8016764:	2104      	movs	r1, #4
 8016766:	6860      	ldr	r0, [r4, #4]
 8016768:	f7ff ff82 	bl	8016670 <std>
 801676c:	68a0      	ldr	r0, [r4, #8]
 801676e:	2201      	movs	r2, #1
 8016770:	2109      	movs	r1, #9
 8016772:	f7ff ff7d 	bl	8016670 <std>
 8016776:	68e0      	ldr	r0, [r4, #12]
 8016778:	2202      	movs	r2, #2
 801677a:	2112      	movs	r1, #18
 801677c:	f7ff ff78 	bl	8016670 <std>
 8016780:	2301      	movs	r3, #1
 8016782:	61a3      	str	r3, [r4, #24]
 8016784:	e7d2      	b.n	801672c <__sinit+0xc>
 8016786:	bf00      	nop
 8016788:	080170a8 	.word	0x080170a8
 801678c:	080166b9 	.word	0x080166b9

08016790 <__sfp>:
 8016790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016792:	4607      	mov	r7, r0
 8016794:	f7ff ffac 	bl	80166f0 <__sfp_lock_acquire>
 8016798:	4b1e      	ldr	r3, [pc, #120]	; (8016814 <__sfp+0x84>)
 801679a:	681e      	ldr	r6, [r3, #0]
 801679c:	69b3      	ldr	r3, [r6, #24]
 801679e:	b913      	cbnz	r3, 80167a6 <__sfp+0x16>
 80167a0:	4630      	mov	r0, r6
 80167a2:	f7ff ffbd 	bl	8016720 <__sinit>
 80167a6:	3648      	adds	r6, #72	; 0x48
 80167a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80167ac:	3b01      	subs	r3, #1
 80167ae:	d503      	bpl.n	80167b8 <__sfp+0x28>
 80167b0:	6833      	ldr	r3, [r6, #0]
 80167b2:	b30b      	cbz	r3, 80167f8 <__sfp+0x68>
 80167b4:	6836      	ldr	r6, [r6, #0]
 80167b6:	e7f7      	b.n	80167a8 <__sfp+0x18>
 80167b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80167bc:	b9d5      	cbnz	r5, 80167f4 <__sfp+0x64>
 80167be:	4b16      	ldr	r3, [pc, #88]	; (8016818 <__sfp+0x88>)
 80167c0:	60e3      	str	r3, [r4, #12]
 80167c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80167c6:	6665      	str	r5, [r4, #100]	; 0x64
 80167c8:	f7ff fc02 	bl	8015fd0 <__retarget_lock_init_recursive>
 80167cc:	f7ff ff96 	bl	80166fc <__sfp_lock_release>
 80167d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80167d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80167d8:	6025      	str	r5, [r4, #0]
 80167da:	61a5      	str	r5, [r4, #24]
 80167dc:	2208      	movs	r2, #8
 80167de:	4629      	mov	r1, r5
 80167e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80167e4:	f7fd fa98 	bl	8013d18 <memset>
 80167e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80167ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80167f0:	4620      	mov	r0, r4
 80167f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167f4:	3468      	adds	r4, #104	; 0x68
 80167f6:	e7d9      	b.n	80167ac <__sfp+0x1c>
 80167f8:	2104      	movs	r1, #4
 80167fa:	4638      	mov	r0, r7
 80167fc:	f7ff ff62 	bl	80166c4 <__sfmoreglue>
 8016800:	4604      	mov	r4, r0
 8016802:	6030      	str	r0, [r6, #0]
 8016804:	2800      	cmp	r0, #0
 8016806:	d1d5      	bne.n	80167b4 <__sfp+0x24>
 8016808:	f7ff ff78 	bl	80166fc <__sfp_lock_release>
 801680c:	230c      	movs	r3, #12
 801680e:	603b      	str	r3, [r7, #0]
 8016810:	e7ee      	b.n	80167f0 <__sfp+0x60>
 8016812:	bf00      	nop
 8016814:	080170a8 	.word	0x080170a8
 8016818:	ffff0001 	.word	0xffff0001

0801681c <_fwalk_reent>:
 801681c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016820:	4606      	mov	r6, r0
 8016822:	4688      	mov	r8, r1
 8016824:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016828:	2700      	movs	r7, #0
 801682a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801682e:	f1b9 0901 	subs.w	r9, r9, #1
 8016832:	d505      	bpl.n	8016840 <_fwalk_reent+0x24>
 8016834:	6824      	ldr	r4, [r4, #0]
 8016836:	2c00      	cmp	r4, #0
 8016838:	d1f7      	bne.n	801682a <_fwalk_reent+0xe>
 801683a:	4638      	mov	r0, r7
 801683c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016840:	89ab      	ldrh	r3, [r5, #12]
 8016842:	2b01      	cmp	r3, #1
 8016844:	d907      	bls.n	8016856 <_fwalk_reent+0x3a>
 8016846:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801684a:	3301      	adds	r3, #1
 801684c:	d003      	beq.n	8016856 <_fwalk_reent+0x3a>
 801684e:	4629      	mov	r1, r5
 8016850:	4630      	mov	r0, r6
 8016852:	47c0      	blx	r8
 8016854:	4307      	orrs	r7, r0
 8016856:	3568      	adds	r5, #104	; 0x68
 8016858:	e7e9      	b.n	801682e <_fwalk_reent+0x12>

0801685a <__swhatbuf_r>:
 801685a:	b570      	push	{r4, r5, r6, lr}
 801685c:	460e      	mov	r6, r1
 801685e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016862:	2900      	cmp	r1, #0
 8016864:	b096      	sub	sp, #88	; 0x58
 8016866:	4614      	mov	r4, r2
 8016868:	461d      	mov	r5, r3
 801686a:	da08      	bge.n	801687e <__swhatbuf_r+0x24>
 801686c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016870:	2200      	movs	r2, #0
 8016872:	602a      	str	r2, [r5, #0]
 8016874:	061a      	lsls	r2, r3, #24
 8016876:	d410      	bmi.n	801689a <__swhatbuf_r+0x40>
 8016878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801687c:	e00e      	b.n	801689c <__swhatbuf_r+0x42>
 801687e:	466a      	mov	r2, sp
 8016880:	f000 f902 	bl	8016a88 <_fstat_r>
 8016884:	2800      	cmp	r0, #0
 8016886:	dbf1      	blt.n	801686c <__swhatbuf_r+0x12>
 8016888:	9a01      	ldr	r2, [sp, #4]
 801688a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801688e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016892:	425a      	negs	r2, r3
 8016894:	415a      	adcs	r2, r3
 8016896:	602a      	str	r2, [r5, #0]
 8016898:	e7ee      	b.n	8016878 <__swhatbuf_r+0x1e>
 801689a:	2340      	movs	r3, #64	; 0x40
 801689c:	2000      	movs	r0, #0
 801689e:	6023      	str	r3, [r4, #0]
 80168a0:	b016      	add	sp, #88	; 0x58
 80168a2:	bd70      	pop	{r4, r5, r6, pc}

080168a4 <__smakebuf_r>:
 80168a4:	898b      	ldrh	r3, [r1, #12]
 80168a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80168a8:	079d      	lsls	r5, r3, #30
 80168aa:	4606      	mov	r6, r0
 80168ac:	460c      	mov	r4, r1
 80168ae:	d507      	bpl.n	80168c0 <__smakebuf_r+0x1c>
 80168b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80168b4:	6023      	str	r3, [r4, #0]
 80168b6:	6123      	str	r3, [r4, #16]
 80168b8:	2301      	movs	r3, #1
 80168ba:	6163      	str	r3, [r4, #20]
 80168bc:	b002      	add	sp, #8
 80168be:	bd70      	pop	{r4, r5, r6, pc}
 80168c0:	ab01      	add	r3, sp, #4
 80168c2:	466a      	mov	r2, sp
 80168c4:	f7ff ffc9 	bl	801685a <__swhatbuf_r>
 80168c8:	9900      	ldr	r1, [sp, #0]
 80168ca:	4605      	mov	r5, r0
 80168cc:	4630      	mov	r0, r6
 80168ce:	f7fd fa97 	bl	8013e00 <_malloc_r>
 80168d2:	b948      	cbnz	r0, 80168e8 <__smakebuf_r+0x44>
 80168d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80168d8:	059a      	lsls	r2, r3, #22
 80168da:	d4ef      	bmi.n	80168bc <__smakebuf_r+0x18>
 80168dc:	f023 0303 	bic.w	r3, r3, #3
 80168e0:	f043 0302 	orr.w	r3, r3, #2
 80168e4:	81a3      	strh	r3, [r4, #12]
 80168e6:	e7e3      	b.n	80168b0 <__smakebuf_r+0xc>
 80168e8:	4b0d      	ldr	r3, [pc, #52]	; (8016920 <__smakebuf_r+0x7c>)
 80168ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80168ec:	89a3      	ldrh	r3, [r4, #12]
 80168ee:	6020      	str	r0, [r4, #0]
 80168f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80168f4:	81a3      	strh	r3, [r4, #12]
 80168f6:	9b00      	ldr	r3, [sp, #0]
 80168f8:	6163      	str	r3, [r4, #20]
 80168fa:	9b01      	ldr	r3, [sp, #4]
 80168fc:	6120      	str	r0, [r4, #16]
 80168fe:	b15b      	cbz	r3, 8016918 <__smakebuf_r+0x74>
 8016900:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016904:	4630      	mov	r0, r6
 8016906:	f000 f8d1 	bl	8016aac <_isatty_r>
 801690a:	b128      	cbz	r0, 8016918 <__smakebuf_r+0x74>
 801690c:	89a3      	ldrh	r3, [r4, #12]
 801690e:	f023 0303 	bic.w	r3, r3, #3
 8016912:	f043 0301 	orr.w	r3, r3, #1
 8016916:	81a3      	strh	r3, [r4, #12]
 8016918:	89a0      	ldrh	r0, [r4, #12]
 801691a:	4305      	orrs	r5, r0
 801691c:	81a5      	strh	r5, [r4, #12]
 801691e:	e7cd      	b.n	80168bc <__smakebuf_r+0x18>
 8016920:	080166b9 	.word	0x080166b9

08016924 <_malloc_usable_size_r>:
 8016924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016928:	1f18      	subs	r0, r3, #4
 801692a:	2b00      	cmp	r3, #0
 801692c:	bfbc      	itt	lt
 801692e:	580b      	ldrlt	r3, [r1, r0]
 8016930:	18c0      	addlt	r0, r0, r3
 8016932:	4770      	bx	lr

08016934 <_raise_r>:
 8016934:	291f      	cmp	r1, #31
 8016936:	b538      	push	{r3, r4, r5, lr}
 8016938:	4604      	mov	r4, r0
 801693a:	460d      	mov	r5, r1
 801693c:	d904      	bls.n	8016948 <_raise_r+0x14>
 801693e:	2316      	movs	r3, #22
 8016940:	6003      	str	r3, [r0, #0]
 8016942:	f04f 30ff 	mov.w	r0, #4294967295
 8016946:	bd38      	pop	{r3, r4, r5, pc}
 8016948:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801694a:	b112      	cbz	r2, 8016952 <_raise_r+0x1e>
 801694c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016950:	b94b      	cbnz	r3, 8016966 <_raise_r+0x32>
 8016952:	4620      	mov	r0, r4
 8016954:	f000 f830 	bl	80169b8 <_getpid_r>
 8016958:	462a      	mov	r2, r5
 801695a:	4601      	mov	r1, r0
 801695c:	4620      	mov	r0, r4
 801695e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016962:	f000 b817 	b.w	8016994 <_kill_r>
 8016966:	2b01      	cmp	r3, #1
 8016968:	d00a      	beq.n	8016980 <_raise_r+0x4c>
 801696a:	1c59      	adds	r1, r3, #1
 801696c:	d103      	bne.n	8016976 <_raise_r+0x42>
 801696e:	2316      	movs	r3, #22
 8016970:	6003      	str	r3, [r0, #0]
 8016972:	2001      	movs	r0, #1
 8016974:	e7e7      	b.n	8016946 <_raise_r+0x12>
 8016976:	2400      	movs	r4, #0
 8016978:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801697c:	4628      	mov	r0, r5
 801697e:	4798      	blx	r3
 8016980:	2000      	movs	r0, #0
 8016982:	e7e0      	b.n	8016946 <_raise_r+0x12>

08016984 <raise>:
 8016984:	4b02      	ldr	r3, [pc, #8]	; (8016990 <raise+0xc>)
 8016986:	4601      	mov	r1, r0
 8016988:	6818      	ldr	r0, [r3, #0]
 801698a:	f7ff bfd3 	b.w	8016934 <_raise_r>
 801698e:	bf00      	nop
 8016990:	20000068 	.word	0x20000068

08016994 <_kill_r>:
 8016994:	b538      	push	{r3, r4, r5, lr}
 8016996:	4d07      	ldr	r5, [pc, #28]	; (80169b4 <_kill_r+0x20>)
 8016998:	2300      	movs	r3, #0
 801699a:	4604      	mov	r4, r0
 801699c:	4608      	mov	r0, r1
 801699e:	4611      	mov	r1, r2
 80169a0:	602b      	str	r3, [r5, #0]
 80169a2:	f7ec fa21 	bl	8002de8 <_kill>
 80169a6:	1c43      	adds	r3, r0, #1
 80169a8:	d102      	bne.n	80169b0 <_kill_r+0x1c>
 80169aa:	682b      	ldr	r3, [r5, #0]
 80169ac:	b103      	cbz	r3, 80169b0 <_kill_r+0x1c>
 80169ae:	6023      	str	r3, [r4, #0]
 80169b0:	bd38      	pop	{r3, r4, r5, pc}
 80169b2:	bf00      	nop
 80169b4:	20002778 	.word	0x20002778

080169b8 <_getpid_r>:
 80169b8:	f7ec ba0e 	b.w	8002dd8 <_getpid>

080169bc <__sread>:
 80169bc:	b510      	push	{r4, lr}
 80169be:	460c      	mov	r4, r1
 80169c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80169c4:	f000 f894 	bl	8016af0 <_read_r>
 80169c8:	2800      	cmp	r0, #0
 80169ca:	bfab      	itete	ge
 80169cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80169ce:	89a3      	ldrhlt	r3, [r4, #12]
 80169d0:	181b      	addge	r3, r3, r0
 80169d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80169d6:	bfac      	ite	ge
 80169d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80169da:	81a3      	strhlt	r3, [r4, #12]
 80169dc:	bd10      	pop	{r4, pc}

080169de <__swrite>:
 80169de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169e2:	461f      	mov	r7, r3
 80169e4:	898b      	ldrh	r3, [r1, #12]
 80169e6:	05db      	lsls	r3, r3, #23
 80169e8:	4605      	mov	r5, r0
 80169ea:	460c      	mov	r4, r1
 80169ec:	4616      	mov	r6, r2
 80169ee:	d505      	bpl.n	80169fc <__swrite+0x1e>
 80169f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80169f4:	2302      	movs	r3, #2
 80169f6:	2200      	movs	r2, #0
 80169f8:	f000 f868 	bl	8016acc <_lseek_r>
 80169fc:	89a3      	ldrh	r3, [r4, #12]
 80169fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016a02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016a06:	81a3      	strh	r3, [r4, #12]
 8016a08:	4632      	mov	r2, r6
 8016a0a:	463b      	mov	r3, r7
 8016a0c:	4628      	mov	r0, r5
 8016a0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a12:	f000 b817 	b.w	8016a44 <_write_r>

08016a16 <__sseek>:
 8016a16:	b510      	push	{r4, lr}
 8016a18:	460c      	mov	r4, r1
 8016a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a1e:	f000 f855 	bl	8016acc <_lseek_r>
 8016a22:	1c43      	adds	r3, r0, #1
 8016a24:	89a3      	ldrh	r3, [r4, #12]
 8016a26:	bf15      	itete	ne
 8016a28:	6560      	strne	r0, [r4, #84]	; 0x54
 8016a2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016a2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016a32:	81a3      	strheq	r3, [r4, #12]
 8016a34:	bf18      	it	ne
 8016a36:	81a3      	strhne	r3, [r4, #12]
 8016a38:	bd10      	pop	{r4, pc}

08016a3a <__sclose>:
 8016a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a3e:	f000 b813 	b.w	8016a68 <_close_r>
	...

08016a44 <_write_r>:
 8016a44:	b538      	push	{r3, r4, r5, lr}
 8016a46:	4d07      	ldr	r5, [pc, #28]	; (8016a64 <_write_r+0x20>)
 8016a48:	4604      	mov	r4, r0
 8016a4a:	4608      	mov	r0, r1
 8016a4c:	4611      	mov	r1, r2
 8016a4e:	2200      	movs	r2, #0
 8016a50:	602a      	str	r2, [r5, #0]
 8016a52:	461a      	mov	r2, r3
 8016a54:	f7ec f9ff 	bl	8002e56 <_write>
 8016a58:	1c43      	adds	r3, r0, #1
 8016a5a:	d102      	bne.n	8016a62 <_write_r+0x1e>
 8016a5c:	682b      	ldr	r3, [r5, #0]
 8016a5e:	b103      	cbz	r3, 8016a62 <_write_r+0x1e>
 8016a60:	6023      	str	r3, [r4, #0]
 8016a62:	bd38      	pop	{r3, r4, r5, pc}
 8016a64:	20002778 	.word	0x20002778

08016a68 <_close_r>:
 8016a68:	b538      	push	{r3, r4, r5, lr}
 8016a6a:	4d06      	ldr	r5, [pc, #24]	; (8016a84 <_close_r+0x1c>)
 8016a6c:	2300      	movs	r3, #0
 8016a6e:	4604      	mov	r4, r0
 8016a70:	4608      	mov	r0, r1
 8016a72:	602b      	str	r3, [r5, #0]
 8016a74:	f7ec fa0b 	bl	8002e8e <_close>
 8016a78:	1c43      	adds	r3, r0, #1
 8016a7a:	d102      	bne.n	8016a82 <_close_r+0x1a>
 8016a7c:	682b      	ldr	r3, [r5, #0]
 8016a7e:	b103      	cbz	r3, 8016a82 <_close_r+0x1a>
 8016a80:	6023      	str	r3, [r4, #0]
 8016a82:	bd38      	pop	{r3, r4, r5, pc}
 8016a84:	20002778 	.word	0x20002778

08016a88 <_fstat_r>:
 8016a88:	b538      	push	{r3, r4, r5, lr}
 8016a8a:	4d07      	ldr	r5, [pc, #28]	; (8016aa8 <_fstat_r+0x20>)
 8016a8c:	2300      	movs	r3, #0
 8016a8e:	4604      	mov	r4, r0
 8016a90:	4608      	mov	r0, r1
 8016a92:	4611      	mov	r1, r2
 8016a94:	602b      	str	r3, [r5, #0]
 8016a96:	f7ec fa06 	bl	8002ea6 <_fstat>
 8016a9a:	1c43      	adds	r3, r0, #1
 8016a9c:	d102      	bne.n	8016aa4 <_fstat_r+0x1c>
 8016a9e:	682b      	ldr	r3, [r5, #0]
 8016aa0:	b103      	cbz	r3, 8016aa4 <_fstat_r+0x1c>
 8016aa2:	6023      	str	r3, [r4, #0]
 8016aa4:	bd38      	pop	{r3, r4, r5, pc}
 8016aa6:	bf00      	nop
 8016aa8:	20002778 	.word	0x20002778

08016aac <_isatty_r>:
 8016aac:	b538      	push	{r3, r4, r5, lr}
 8016aae:	4d06      	ldr	r5, [pc, #24]	; (8016ac8 <_isatty_r+0x1c>)
 8016ab0:	2300      	movs	r3, #0
 8016ab2:	4604      	mov	r4, r0
 8016ab4:	4608      	mov	r0, r1
 8016ab6:	602b      	str	r3, [r5, #0]
 8016ab8:	f7ec fa05 	bl	8002ec6 <_isatty>
 8016abc:	1c43      	adds	r3, r0, #1
 8016abe:	d102      	bne.n	8016ac6 <_isatty_r+0x1a>
 8016ac0:	682b      	ldr	r3, [r5, #0]
 8016ac2:	b103      	cbz	r3, 8016ac6 <_isatty_r+0x1a>
 8016ac4:	6023      	str	r3, [r4, #0]
 8016ac6:	bd38      	pop	{r3, r4, r5, pc}
 8016ac8:	20002778 	.word	0x20002778

08016acc <_lseek_r>:
 8016acc:	b538      	push	{r3, r4, r5, lr}
 8016ace:	4d07      	ldr	r5, [pc, #28]	; (8016aec <_lseek_r+0x20>)
 8016ad0:	4604      	mov	r4, r0
 8016ad2:	4608      	mov	r0, r1
 8016ad4:	4611      	mov	r1, r2
 8016ad6:	2200      	movs	r2, #0
 8016ad8:	602a      	str	r2, [r5, #0]
 8016ada:	461a      	mov	r2, r3
 8016adc:	f7ec f9fe 	bl	8002edc <_lseek>
 8016ae0:	1c43      	adds	r3, r0, #1
 8016ae2:	d102      	bne.n	8016aea <_lseek_r+0x1e>
 8016ae4:	682b      	ldr	r3, [r5, #0]
 8016ae6:	b103      	cbz	r3, 8016aea <_lseek_r+0x1e>
 8016ae8:	6023      	str	r3, [r4, #0]
 8016aea:	bd38      	pop	{r3, r4, r5, pc}
 8016aec:	20002778 	.word	0x20002778

08016af0 <_read_r>:
 8016af0:	b538      	push	{r3, r4, r5, lr}
 8016af2:	4d07      	ldr	r5, [pc, #28]	; (8016b10 <_read_r+0x20>)
 8016af4:	4604      	mov	r4, r0
 8016af6:	4608      	mov	r0, r1
 8016af8:	4611      	mov	r1, r2
 8016afa:	2200      	movs	r2, #0
 8016afc:	602a      	str	r2, [r5, #0]
 8016afe:	461a      	mov	r2, r3
 8016b00:	f7ec f98c 	bl	8002e1c <_read>
 8016b04:	1c43      	adds	r3, r0, #1
 8016b06:	d102      	bne.n	8016b0e <_read_r+0x1e>
 8016b08:	682b      	ldr	r3, [r5, #0]
 8016b0a:	b103      	cbz	r3, 8016b0e <_read_r+0x1e>
 8016b0c:	6023      	str	r3, [r4, #0]
 8016b0e:	bd38      	pop	{r3, r4, r5, pc}
 8016b10:	20002778 	.word	0x20002778

08016b14 <_init>:
 8016b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b16:	bf00      	nop
 8016b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016b1a:	bc08      	pop	{r3}
 8016b1c:	469e      	mov	lr, r3
 8016b1e:	4770      	bx	lr

08016b20 <_fini>:
 8016b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b22:	bf00      	nop
 8016b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016b26:	bc08      	pop	{r3}
 8016b28:	469e      	mov	lr, r3
 8016b2a:	4770      	bx	lr
